import java
import java.io
import java.lang
import java.math
import java.net
import java.security
import java.util
import javax.security.auth.x500
import typing



class CRL:
    """
    Java class 'java.security.cert.CRL'
    
        Extends:
            java.lang.Object
    
    """
    def getType(self) -> str: ...
    def isRevoked(self, certificate: 'Certificate') -> bool: ...
    def toString(self) -> str: ...

class CRLException(java.security.GeneralSecurityException):
    """
    Java class 'java.security.cert.CRLException'
    
        Extends:
            java.security.GeneralSecurityException
    
      Constructors:
        * CRLException(java.lang.Throwable)
        * CRLException(java.lang.String, java.lang.Throwable)
        * CRLException(java.lang.String)
        * CRLException()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class CRLReason(java.lang.Enum['CRLReason']):
    """
    Java class 'java.security.cert.CRLReason'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        UNSPECIFIED (java.security.cert.CRLReason): final static enum constant
        KEY_COMPROMISE (java.security.cert.CRLReason): final static enum constant
        CA_COMPROMISE (java.security.cert.CRLReason): final static enum constant
        AFFILIATION_CHANGED (java.security.cert.CRLReason): final static enum constant
        SUPERSEDED (java.security.cert.CRLReason): final static enum constant
        CESSATION_OF_OPERATION (java.security.cert.CRLReason): final static enum constant
        CERTIFICATE_HOLD (java.security.cert.CRLReason): final static enum constant
        UNUSED (java.security.cert.CRLReason): final static enum constant
        REMOVE_FROM_CRL (java.security.cert.CRLReason): final static enum constant
        PRIVILEGE_WITHDRAWN (java.security.cert.CRLReason): final static enum constant
        AA_COMPROMISE (java.security.cert.CRLReason): final static enum constant
    
    """
    UNSPECIFIED: typing.ClassVar['CRLReason'] = ...
    KEY_COMPROMISE: typing.ClassVar['CRLReason'] = ...
    CA_COMPROMISE: typing.ClassVar['CRLReason'] = ...
    AFFILIATION_CHANGED: typing.ClassVar['CRLReason'] = ...
    SUPERSEDED: typing.ClassVar['CRLReason'] = ...
    CESSATION_OF_OPERATION: typing.ClassVar['CRLReason'] = ...
    CERTIFICATE_HOLD: typing.ClassVar['CRLReason'] = ...
    UNUSED: typing.ClassVar['CRLReason'] = ...
    REMOVE_FROM_CRL: typing.ClassVar['CRLReason'] = ...
    PRIVILEGE_WITHDRAWN: typing.ClassVar['CRLReason'] = ...
    AA_COMPROMISE: typing.ClassVar['CRLReason'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CRLReason': ...
    @staticmethod
    def values() -> typing.List['CRLReason']: ...

class CRLSelector(java.lang.Cloneable):
    """
    Java class 'java.security.cert.CRLSelector'
    
        Interfaces:
            java.lang.Cloneable
    
    """
    def clone(self) -> typing.Any: ...
    def match(self, cRL: CRL) -> bool: ...

class CertPath(java.io.Serializable):
    """
    Java class 'java.security.cert.CertPath'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
    """
    def equals(self, object: typing.Any) -> bool: ...
    def getCertificates(self) -> java.util.List['Certificate']: ...
    @typing.overload
    def getEncoded(self) -> typing.List[int]: ...
    @typing.overload
    def getEncoded(self, string: str) -> typing.List[int]: ...
    def getEncodings(self) -> java.util.Iterator[str]: ...
    def getType(self) -> str: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class CertPathBuilder:
    """
    Java class 'java.security.cert.CertPathBuilder'
    
        Extends:
            java.lang.Object
    
    """
    def build(self, certPathParameters: 'CertPathParameters') -> 'CertPathBuilderResult': ...
    def getAlgorithm(self) -> str: ...
    @staticmethod
    def getDefaultType() -> str: ...
    @typing.overload
    @staticmethod
    def getInstance(string: str) -> 'CertPathBuilder': ...
    @typing.overload
    @staticmethod
    def getInstance(string: str, string2: str) -> 'CertPathBuilder': ...
    @typing.overload
    @staticmethod
    def getInstance(string: str, provider: java.security.Provider) -> 'CertPathBuilder': ...
    def getProvider(self) -> java.security.Provider: ...
    def getRevocationChecker(self) -> 'CertPathChecker': ...

class CertPathBuilderException(java.security.GeneralSecurityException):
    """
    Java class 'java.security.cert.CertPathBuilderException'
    
        Extends:
            java.security.GeneralSecurityException
    
      Constructors:
        * CertPathBuilderException(java.lang.String, java.lang.Throwable)
        * CertPathBuilderException(java.lang.Throwable)
        * CertPathBuilderException(java.lang.String)
        * CertPathBuilderException()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class CertPathBuilderResult(java.lang.Cloneable):
    """
    Java class 'java.security.cert.CertPathBuilderResult'
    
        Interfaces:
            java.lang.Cloneable
    
    """
    def clone(self) -> typing.Any: ...
    def getCertPath(self) -> CertPath: ...

class CertPathBuilderSpi:
    """
    Java class 'java.security.cert.CertPathBuilderSpi'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * CertPathBuilderSpi()
    
    """
    def __init__(self): ...
    def engineBuild(self, certPathParameters: 'CertPathParameters') -> CertPathBuilderResult: ...
    def engineGetRevocationChecker(self) -> 'CertPathChecker': ...

class CertPathChecker:
    """
    Java class 'java.security.cert.CertPathChecker'
    
    """
    def check(self, certificate: 'Certificate') -> None: ...
    def init(self, boolean: bool) -> None: ...
    def isForwardCheckingSupported(self) -> bool: ...

class CertPathParameters(java.lang.Cloneable):
    """
    Java class 'java.security.cert.CertPathParameters'
    
        Interfaces:
            java.lang.Cloneable
    
    """
    def clone(self) -> typing.Any: ...

class CertPathValidator:
    """
    Java class 'java.security.cert.CertPathValidator'
    
        Extends:
            java.lang.Object
    
    """
    def getAlgorithm(self) -> str: ...
    @staticmethod
    def getDefaultType() -> str: ...
    @typing.overload
    @staticmethod
    def getInstance(string: str) -> 'CertPathValidator': ...
    @typing.overload
    @staticmethod
    def getInstance(string: str, string2: str) -> 'CertPathValidator': ...
    @typing.overload
    @staticmethod
    def getInstance(string: str, provider: java.security.Provider) -> 'CertPathValidator': ...
    def getProvider(self) -> java.security.Provider: ...
    def getRevocationChecker(self) -> CertPathChecker: ...
    def validate(self, certPath: CertPath, certPathParameters: CertPathParameters) -> 'CertPathValidatorResult': ...

class CertPathValidatorResult(java.lang.Cloneable):
    """
    Java class 'java.security.cert.CertPathValidatorResult'
    
        Interfaces:
            java.lang.Cloneable
    
    """
    def clone(self) -> typing.Any: ...

class CertPathValidatorSpi:
    """
    Java class 'java.security.cert.CertPathValidatorSpi'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * CertPathValidatorSpi()
    
    """
    def __init__(self): ...
    def engineGetRevocationChecker(self) -> CertPathChecker: ...
    def engineValidate(self, certPath: CertPath, certPathParameters: CertPathParameters) -> CertPathValidatorResult: ...

class CertSelector(java.lang.Cloneable):
    """
    Java class 'java.security.cert.CertSelector'
    
        Interfaces:
            java.lang.Cloneable
    
    """
    def clone(self) -> typing.Any: ...
    def match(self, certificate: 'Certificate') -> bool: ...

class CertStore:
    """
    Java class 'java.security.cert.CertStore'
    
        Extends:
            java.lang.Object
    
    """
    def getCRLs(self, cRLSelector: CRLSelector) -> java.util.Collection[CRL]: ...
    def getCertStoreParameters(self) -> 'CertStoreParameters': ...
    def getCertificates(self, certSelector: CertSelector) -> java.util.Collection['Certificate']: ...
    @staticmethod
    def getDefaultType() -> str: ...
    @typing.overload
    @staticmethod
    def getInstance(string: str, certStoreParameters: 'CertStoreParameters') -> 'CertStore': ...
    @typing.overload
    @staticmethod
    def getInstance(string: str, certStoreParameters: 'CertStoreParameters', string2: str) -> 'CertStore': ...
    @typing.overload
    @staticmethod
    def getInstance(string: str, certStoreParameters: 'CertStoreParameters', provider: java.security.Provider) -> 'CertStore': ...
    def getProvider(self) -> java.security.Provider: ...
    def getType(self) -> str: ...

class CertStoreException(java.security.GeneralSecurityException):
    """
    Java class 'java.security.cert.CertStoreException'
    
        Extends:
            java.security.GeneralSecurityException
    
      Constructors:
        * CertStoreException(java.lang.String, java.lang.Throwable)
        * CertStoreException(java.lang.Throwable)
        * CertStoreException(java.lang.String)
        * CertStoreException()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class CertStoreParameters(java.lang.Cloneable):
    """
    Java class 'java.security.cert.CertStoreParameters'
    
        Interfaces:
            java.lang.Cloneable
    
    """
    def clone(self) -> typing.Any: ...

class CertStoreSpi:
    """
    Java class 'java.security.cert.CertStoreSpi'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * CertStoreSpi(java.security.cert.CertStoreParameters)
    
      Raises:
        java.security.InvalidAlgorithmParameterException: from java
    
    """
    def __init__(self, certStoreParameters: CertStoreParameters): ...
    def engineGetCRLs(self, cRLSelector: CRLSelector) -> java.util.Collection[CRL]: ...
    def engineGetCertificates(self, certSelector: CertSelector) -> java.util.Collection['Certificate']: ...

class Certificate(java.io.Serializable):
    """
    Java class 'java.security.cert.Certificate'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
    """
    def equals(self, object: typing.Any) -> bool: ...
    def getEncoded(self) -> typing.List[int]: ...
    def getPublicKey(self) -> java.security.PublicKey: ...
    def getType(self) -> str: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    @typing.overload
    def verify(self, publicKey: java.security.PublicKey) -> None: ...
    @typing.overload
    def verify(self, publicKey: java.security.PublicKey, string: str) -> None: ...
    @typing.overload
    def verify(self, publicKey: java.security.PublicKey, provider: java.security.Provider) -> None: ...

class CertificateException(java.security.GeneralSecurityException):
    """
    Java class 'java.security.cert.CertificateException'
    
        Extends:
            java.security.GeneralSecurityException
    
      Constructors:
        * CertificateException(java.lang.Throwable)
        * CertificateException(java.lang.String, java.lang.Throwable)
        * CertificateException(java.lang.String)
        * CertificateException()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class CertificateFactory:
    """
    Java class 'java.security.cert.CertificateFactory'
    
        Extends:
            java.lang.Object
    
    """
    def generateCRL(self, inputStream: java.io.InputStream) -> CRL: ...
    def generateCRLs(self, inputStream: java.io.InputStream) -> java.util.Collection[CRL]: ...
    @typing.overload
    def generateCertPath(self, inputStream: java.io.InputStream) -> CertPath: ...
    @typing.overload
    def generateCertPath(self, inputStream: java.io.InputStream, string: str) -> CertPath: ...
    @typing.overload
    def generateCertPath(self, list: java.util.List[Certificate]) -> CertPath: ...
    def generateCertificate(self, inputStream: java.io.InputStream) -> Certificate: ...
    def generateCertificates(self, inputStream: java.io.InputStream) -> java.util.Collection[Certificate]: ...
    def getCertPathEncodings(self) -> java.util.Iterator[str]: ...
    @typing.overload
    @staticmethod
    def getInstance(string: str) -> 'CertificateFactory': ...
    @typing.overload
    @staticmethod
    def getInstance(string: str, string2: str) -> 'CertificateFactory': ...
    @typing.overload
    @staticmethod
    def getInstance(string: str, provider: java.security.Provider) -> 'CertificateFactory': ...
    def getProvider(self) -> java.security.Provider: ...
    def getType(self) -> str: ...

class CertificateFactorySpi:
    """
    Java class 'java.security.cert.CertificateFactorySpi'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * CertificateFactorySpi()
    
    """
    def __init__(self): ...
    def engineGenerateCRL(self, inputStream: java.io.InputStream) -> CRL: ...
    def engineGenerateCRLs(self, inputStream: java.io.InputStream) -> java.util.Collection[CRL]: ...
    @typing.overload
    def engineGenerateCertPath(self, inputStream: java.io.InputStream) -> CertPath: ...
    @typing.overload
    def engineGenerateCertPath(self, inputStream: java.io.InputStream, string: str) -> CertPath: ...
    @typing.overload
    def engineGenerateCertPath(self, list: java.util.List[Certificate]) -> CertPath: ...
    def engineGenerateCertificate(self, inputStream: java.io.InputStream) -> Certificate: ...
    def engineGenerateCertificates(self, inputStream: java.io.InputStream) -> java.util.Collection[Certificate]: ...
    def engineGetCertPathEncodings(self) -> java.util.Iterator[str]: ...

class Extension:
    """
    Java class 'java.security.cert.Extension'
    
    """
    def encode(self, outputStream: java.io.OutputStream) -> None: ...
    def getId(self) -> str: ...
    def getValue(self) -> typing.List[int]: ...
    def isCritical(self) -> bool: ...

class PolicyNode:
    """
    Java class 'java.security.cert.PolicyNode'
    
    """
    def getChildren(self) -> java.util.Iterator['PolicyNode']: ...
    def getDepth(self) -> int: ...
    def getExpectedPolicies(self) -> java.util.Set[str]: ...
    def getParent(self) -> 'PolicyNode': ...
    def getPolicyQualifiers(self) -> java.util.Set['PolicyQualifierInfo']: ...
    def getValidPolicy(self) -> str: ...
    def isCritical(self) -> bool: ...

class PolicyQualifierInfo:
    """
    Java class 'java.security.cert.PolicyQualifierInfo'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * PolicyQualifierInfo(byte[])
    
      Raises:
        java.io.IOException: from java
    
    """
    def __init__(self, byteArray: typing.List[int]): ...
    def getEncoded(self) -> typing.List[int]: ...
    def getPolicyQualifier(self) -> typing.List[int]: ...
    def getPolicyQualifierId(self) -> str: ...
    def toString(self) -> str: ...

class TrustAnchor:
    """
    Java class 'java.security.cert.TrustAnchor'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * TrustAnchor(java.lang.String, java.security.PublicKey, byte[])
        * TrustAnchor(javax.security.auth.x500.X500Principal, java.security.PublicKey, byte[])
        * TrustAnchor(java.security.cert.X509Certificate, byte[])
    
    """
    @typing.overload
    def __init__(self, string: str, publicKey: java.security.PublicKey, byteArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, x509Certificate: 'X509Certificate', byteArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, x500Principal: javax.security.auth.x500.X500Principal, publicKey: java.security.PublicKey, byteArray: typing.List[int]): ...
    def getCA(self) -> javax.security.auth.x500.X500Principal: ...
    def getCAName(self) -> str: ...
    def getCAPublicKey(self) -> java.security.PublicKey: ...
    def getNameConstraints(self) -> typing.List[int]: ...
    def getTrustedCert(self) -> 'X509Certificate': ...
    def toString(self) -> str: ...

class X509Extension:
    """
    Java class 'java.security.cert.X509Extension'
    
    """
    def getCriticalExtensionOIDs(self) -> java.util.Set[str]: ...
    def getExtensionValue(self, string: str) -> typing.List[int]: ...
    def getNonCriticalExtensionOIDs(self) -> java.util.Set[str]: ...
    def hasUnsupportedCriticalExtension(self) -> bool: ...

class CertificateEncodingException(CertificateException):
    """
    Java class 'java.security.cert.CertificateEncodingException'
    
        Extends:
            java.security.cert.CertificateException
    
      Constructors:
        * CertificateEncodingException(java.lang.Throwable)
        * CertificateEncodingException(java.lang.String, java.lang.Throwable)
        * CertificateEncodingException(java.lang.String)
        * CertificateEncodingException()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class CertificateExpiredException(CertificateException):
    """
    Java class 'java.security.cert.CertificateExpiredException'
    
        Extends:
            java.security.cert.CertificateException
    
      Constructors:
        * CertificateExpiredException()
        * CertificateExpiredException(java.lang.String)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...

class CertificateNotYetValidException(CertificateException):
    """
    Java class 'java.security.cert.CertificateNotYetValidException'
    
        Extends:
            java.security.cert.CertificateException
    
      Constructors:
        * CertificateNotYetValidException()
        * CertificateNotYetValidException(java.lang.String)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...

class CertificateParsingException(CertificateException):
    """
    Java class 'java.security.cert.CertificateParsingException'
    
        Extends:
            java.security.cert.CertificateException
    
      Constructors:
        * CertificateParsingException(java.lang.Throwable)
        * CertificateParsingException(java.lang.String, java.lang.Throwable)
        * CertificateParsingException(java.lang.String)
        * CertificateParsingException()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class CertificateRevokedException(CertificateException):
    """
    Java class 'java.security.cert.CertificateRevokedException'
    
        Extends:
            java.security.cert.CertificateException
    
      Constructors:
        * CertificateRevokedException(java.util.Date, java.security.cert.CRLReason, javax.security.auth.x500.X500Principal, java.util.Map)
    
    """
    def __init__(self, date: java.util.Date, cRLReason: CRLReason, x500Principal: javax.security.auth.x500.X500Principal, map: typing.Union[java.util.Map[str, Extension], typing.Mapping[str, Extension]]): ...
    def getAuthorityName(self) -> javax.security.auth.x500.X500Principal: ...
    def getExtensions(self) -> java.util.Map[str, Extension]: ...
    def getInvalidityDate(self) -> java.util.Date: ...
    def getMessage(self) -> str: ...
    def getRevocationDate(self) -> java.util.Date: ...
    def getRevocationReason(self) -> CRLReason: ...

class CollectionCertStoreParameters(CertStoreParameters):
    """
    Java class 'java.security.cert.CollectionCertStoreParameters'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.security.cert.CertStoreParameters
    
      Constructors:
        * CollectionCertStoreParameters(java.util.Collection)
        * CollectionCertStoreParameters()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, collection: typing.Union[java.util.Collection[typing.Any], typing.Sequence[typing.Any]]): ...
    def clone(self) -> typing.Any: ...
    def getCollection(self) -> java.util.Collection[typing.Any]: ...
    def toString(self) -> str: ...

class LDAPCertStoreParameters(CertStoreParameters):
    """
    Java class 'java.security.cert.LDAPCertStoreParameters'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.security.cert.CertStoreParameters
    
      Constructors:
        * LDAPCertStoreParameters()
        * LDAPCertStoreParameters(java.lang.String)
        * LDAPCertStoreParameters(java.lang.String, int)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, int: int): ...
    def clone(self) -> typing.Any: ...
    def getPort(self) -> int: ...
    def getServerName(self) -> str: ...
    def toString(self) -> str: ...

class PKIXCertPathChecker(CertPathChecker, java.lang.Cloneable):
    """
    Java class 'java.security.cert.PKIXCertPathChecker'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.security.cert.CertPathChecker, java.lang.Cloneable
    
    """
    @typing.overload
    def check(self, certificate: Certificate, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> None: ...
    @typing.overload
    def check(self, certificate: Certificate) -> None: ...
    def clone(self) -> typing.Any: ...
    def getSupportedExtensions(self) -> java.util.Set[str]: ...
    def init(self, boolean: bool) -> None: ...
    def isForwardCheckingSupported(self) -> bool: ...

class PKIXCertPathValidatorResult(CertPathValidatorResult):
    """
    Java class 'java.security.cert.PKIXCertPathValidatorResult'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.security.cert.CertPathValidatorResult
    
      Constructors:
        * PKIXCertPathValidatorResult(java.security.cert.TrustAnchor, java.security.cert.PolicyNode, java.security.PublicKey)
    
    """
    def __init__(self, trustAnchor: TrustAnchor, policyNode: PolicyNode, publicKey: java.security.PublicKey): ...
    def clone(self) -> typing.Any: ...
    def getPolicyTree(self) -> PolicyNode: ...
    def getPublicKey(self) -> java.security.PublicKey: ...
    def getTrustAnchor(self) -> TrustAnchor: ...
    def toString(self) -> str: ...

class PKIXParameters(CertPathParameters):
    """
    Java class 'java.security.cert.PKIXParameters'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.security.cert.CertPathParameters
    
      Constructors:
        * PKIXParameters(java.util.Set)
        * PKIXParameters(java.security.KeyStore)
    
      Raises:
        java.security.InvalidAlgorithmParameterException: from java
        java.security.KeyStoreException: from java
    
    """
    @typing.overload
    def __init__(self, keyStore: java.security.KeyStore): ...
    @typing.overload
    def __init__(self, set: java.util.Set[TrustAnchor]): ...
    def addCertPathChecker(self, pKIXCertPathChecker: PKIXCertPathChecker) -> None: ...
    def addCertStore(self, certStore: CertStore) -> None: ...
    def clone(self) -> typing.Any: ...
    def getCertPathCheckers(self) -> java.util.List[PKIXCertPathChecker]: ...
    def getCertStores(self) -> java.util.List[CertStore]: ...
    def getDate(self) -> java.util.Date: ...
    def getInitialPolicies(self) -> java.util.Set[str]: ...
    def getPolicyQualifiersRejected(self) -> bool: ...
    def getSigProvider(self) -> str: ...
    def getTargetCertConstraints(self) -> CertSelector: ...
    def getTrustAnchors(self) -> java.util.Set[TrustAnchor]: ...
    def isAnyPolicyInhibited(self) -> bool: ...
    def isExplicitPolicyRequired(self) -> bool: ...
    def isPolicyMappingInhibited(self) -> bool: ...
    def isRevocationEnabled(self) -> bool: ...
    def setAnyPolicyInhibited(self, boolean: bool) -> None: ...
    def setCertPathCheckers(self, list: java.util.List[PKIXCertPathChecker]) -> None: ...
    def setCertStores(self, list: java.util.List[CertStore]) -> None: ...
    def setDate(self, date: java.util.Date) -> None: ...
    def setExplicitPolicyRequired(self, boolean: bool) -> None: ...
    def setInitialPolicies(self, set: java.util.Set[str]) -> None: ...
    def setPolicyMappingInhibited(self, boolean: bool) -> None: ...
    def setPolicyQualifiersRejected(self, boolean: bool) -> None: ...
    def setRevocationEnabled(self, boolean: bool) -> None: ...
    def setSigProvider(self, string: str) -> None: ...
    def setTargetCertConstraints(self, certSelector: CertSelector) -> None: ...
    def setTrustAnchors(self, set: java.util.Set[TrustAnchor]) -> None: ...
    def toString(self) -> str: ...

class URICertStoreParameters(CertStoreParameters):
    """
    Java class 'java.security.cert.URICertStoreParameters'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.security.cert.CertStoreParameters
    
      Constructors:
        * URICertStoreParameters(java.net.URI)
    
    """
    def __init__(self, uRI: java.net.URI): ...
    def clone(self) -> 'URICertStoreParameters': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getURI(self) -> java.net.URI: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class X509CRL(CRL, X509Extension):
    """
    Java class 'java.security.cert.X509CRL'
    
        Extends:
            java.security.cert.CRL
    
        Interfaces:
            java.security.cert.X509Extension
    
    """
    def equals(self, object: typing.Any) -> bool: ...
    def getEncoded(self) -> typing.List[int]: ...
    def getIssuerDN(self) -> java.security.Principal: ...
    def getIssuerX500Principal(self) -> javax.security.auth.x500.X500Principal: ...
    def getNextUpdate(self) -> java.util.Date: ...
    @typing.overload
    def getRevokedCertificate(self, bigInteger: java.math.BigInteger) -> 'X509CRLEntry': ...
    @typing.overload
    def getRevokedCertificate(self, x509Certificate: 'X509Certificate') -> 'X509CRLEntry': ...
    def getRevokedCertificates(self) -> java.util.Set['X509CRLEntry']: ...
    def getSigAlgName(self) -> str: ...
    def getSigAlgOID(self) -> str: ...
    def getSigAlgParams(self) -> typing.List[int]: ...
    def getSignature(self) -> typing.List[int]: ...
    def getTBSCertList(self) -> typing.List[int]: ...
    def getThisUpdate(self) -> java.util.Date: ...
    def getVersion(self) -> int: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def verify(self, publicKey: java.security.PublicKey) -> None: ...
    @typing.overload
    def verify(self, publicKey: java.security.PublicKey, string: str) -> None: ...
    @typing.overload
    def verify(self, publicKey: java.security.PublicKey, provider: java.security.Provider) -> None: ...

class X509CRLEntry(X509Extension):
    """
    Java class 'java.security.cert.X509CRLEntry'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.security.cert.X509Extension
    
      Constructors:
        * X509CRLEntry()
    
    """
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getCertificateIssuer(self) -> javax.security.auth.x500.X500Principal: ...
    def getEncoded(self) -> typing.List[int]: ...
    def getRevocationDate(self) -> java.util.Date: ...
    def getRevocationReason(self) -> CRLReason: ...
    def getSerialNumber(self) -> java.math.BigInteger: ...
    def hasExtensions(self) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class X509CRLSelector(CRLSelector):
    """
    Java class 'java.security.cert.X509CRLSelector'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.security.cert.CRLSelector
    
      Constructors:
        * X509CRLSelector()
    
    """
    def __init__(self): ...
    def addIssuer(self, x500Principal: javax.security.auth.x500.X500Principal) -> None: ...
    @typing.overload
    def addIssuerName(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def addIssuerName(self, string: str) -> None: ...
    def clone(self) -> typing.Any: ...
    def getCertificateChecking(self) -> 'X509Certificate': ...
    def getDateAndTime(self) -> java.util.Date: ...
    def getIssuerNames(self) -> java.util.Collection[typing.Any]: ...
    def getIssuers(self) -> java.util.Collection[javax.security.auth.x500.X500Principal]: ...
    def getMaxCRL(self) -> java.math.BigInteger: ...
    def getMinCRL(self) -> java.math.BigInteger: ...
    def match(self, cRL: CRL) -> bool: ...
    def setCertificateChecking(self, x509Certificate: 'X509Certificate') -> None: ...
    def setDateAndTime(self, date: java.util.Date) -> None: ...
    def setIssuerNames(self, collection: typing.Union[java.util.Collection[typing.Any], typing.Sequence[typing.Any]]) -> None: ...
    def setIssuers(self, collection: typing.Union[java.util.Collection[javax.security.auth.x500.X500Principal], typing.Sequence[javax.security.auth.x500.X500Principal]]) -> None: ...
    def setMaxCRLNumber(self, bigInteger: java.math.BigInteger) -> None: ...
    def setMinCRLNumber(self, bigInteger: java.math.BigInteger) -> None: ...
    def toString(self) -> str: ...

class X509CertSelector(CertSelector):
    """
    Java class 'java.security.cert.X509CertSelector'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.security.cert.CertSelector
    
      Constructors:
        * X509CertSelector()
    
    """
    def __init__(self): ...
    @typing.overload
    def addPathToName(self, int: int, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def addPathToName(self, int: int, string: str) -> None: ...
    @typing.overload
    def addSubjectAlternativeName(self, int: int, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def addSubjectAlternativeName(self, int: int, string: str) -> None: ...
    def clone(self) -> typing.Any: ...
    def getAuthorityKeyIdentifier(self) -> typing.List[int]: ...
    def getBasicConstraints(self) -> int: ...
    def getCertificate(self) -> 'X509Certificate': ...
    def getCertificateValid(self) -> java.util.Date: ...
    def getExtendedKeyUsage(self) -> java.util.Set[str]: ...
    def getIssuer(self) -> javax.security.auth.x500.X500Principal: ...
    def getIssuerAsBytes(self) -> typing.List[int]: ...
    def getIssuerAsString(self) -> str: ...
    def getKeyUsage(self) -> typing.List[bool]: ...
    def getMatchAllSubjectAltNames(self) -> bool: ...
    def getNameConstraints(self) -> typing.List[int]: ...
    def getPathToNames(self) -> java.util.Collection[java.util.List[typing.Any]]: ...
    def getPolicy(self) -> java.util.Set[str]: ...
    def getPrivateKeyValid(self) -> java.util.Date: ...
    def getSerialNumber(self) -> java.math.BigInteger: ...
    def getSubject(self) -> javax.security.auth.x500.X500Principal: ...
    def getSubjectAlternativeNames(self) -> java.util.Collection[java.util.List[typing.Any]]: ...
    def getSubjectAsBytes(self) -> typing.List[int]: ...
    def getSubjectAsString(self) -> str: ...
    def getSubjectKeyIdentifier(self) -> typing.List[int]: ...
    def getSubjectPublicKey(self) -> java.security.PublicKey: ...
    def getSubjectPublicKeyAlgID(self) -> str: ...
    def match(self, certificate: Certificate) -> bool: ...
    def setAuthorityKeyIdentifier(self, byteArray: typing.List[int]) -> None: ...
    def setBasicConstraints(self, int: int) -> None: ...
    def setCertificate(self, x509Certificate: 'X509Certificate') -> None: ...
    def setCertificateValid(self, date: java.util.Date) -> None: ...
    def setExtendedKeyUsage(self, set: java.util.Set[str]) -> None: ...
    @typing.overload
    def setIssuer(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setIssuer(self, string: str) -> None: ...
    @typing.overload
    def setIssuer(self, x500Principal: javax.security.auth.x500.X500Principal) -> None: ...
    def setKeyUsage(self, booleanArray: typing.List[bool]) -> None: ...
    def setMatchAllSubjectAltNames(self, boolean: bool) -> None: ...
    def setNameConstraints(self, byteArray: typing.List[int]) -> None: ...
    def setPathToNames(self, collection: typing.Union[java.util.Collection[java.util.List[typing.Any]], typing.Sequence[java.util.List[typing.Any]]]) -> None: ...
    def setPolicy(self, set: java.util.Set[str]) -> None: ...
    def setPrivateKeyValid(self, date: java.util.Date) -> None: ...
    def setSerialNumber(self, bigInteger: java.math.BigInteger) -> None: ...
    @typing.overload
    def setSubject(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setSubject(self, string: str) -> None: ...
    @typing.overload
    def setSubject(self, x500Principal: javax.security.auth.x500.X500Principal) -> None: ...
    def setSubjectAlternativeNames(self, collection: typing.Union[java.util.Collection[java.util.List[typing.Any]], typing.Sequence[java.util.List[typing.Any]]]) -> None: ...
    def setSubjectKeyIdentifier(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setSubjectPublicKey(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setSubjectPublicKey(self, publicKey: java.security.PublicKey) -> None: ...
    def setSubjectPublicKeyAlgID(self, string: str) -> None: ...
    def toString(self) -> str: ...

class X509Certificate(Certificate, X509Extension):
    """
    Java class 'java.security.cert.X509Certificate'
    
        Extends:
            java.security.cert.Certificate
    
        Interfaces:
            java.security.cert.X509Extension
    
    """
    @typing.overload
    def checkValidity(self) -> None: ...
    @typing.overload
    def checkValidity(self, date: java.util.Date) -> None: ...
    def getBasicConstraints(self) -> int: ...
    def getExtendedKeyUsage(self) -> java.util.List[str]: ...
    def getIssuerAlternativeNames(self) -> java.util.Collection[java.util.List[typing.Any]]: ...
    def getIssuerDN(self) -> java.security.Principal: ...
    def getIssuerUniqueID(self) -> typing.List[bool]: ...
    def getIssuerX500Principal(self) -> javax.security.auth.x500.X500Principal: ...
    def getKeyUsage(self) -> typing.List[bool]: ...
    def getNotAfter(self) -> java.util.Date: ...
    def getNotBefore(self) -> java.util.Date: ...
    def getSerialNumber(self) -> java.math.BigInteger: ...
    def getSigAlgName(self) -> str: ...
    def getSigAlgOID(self) -> str: ...
    def getSigAlgParams(self) -> typing.List[int]: ...
    def getSignature(self) -> typing.List[int]: ...
    def getSubjectAlternativeNames(self) -> java.util.Collection[java.util.List[typing.Any]]: ...
    def getSubjectDN(self) -> java.security.Principal: ...
    def getSubjectUniqueID(self) -> typing.List[bool]: ...
    def getSubjectX500Principal(self) -> javax.security.auth.x500.X500Principal: ...
    def getTBSCertificate(self) -> typing.List[int]: ...
    def getVersion(self) -> int: ...
    @typing.overload
    def verify(self, publicKey: java.security.PublicKey) -> None: ...
    @typing.overload
    def verify(self, publicKey: java.security.PublicKey, string: str) -> None: ...
    @typing.overload
    def verify(self, publicKey: java.security.PublicKey, provider: java.security.Provider) -> None: ...

class PKIXBuilderParameters(PKIXParameters):
    """
    Java class 'java.security.cert.PKIXBuilderParameters'
    
        Extends:
            java.security.cert.PKIXParameters
    
      Constructors:
        * PKIXBuilderParameters(java.util.Set, java.security.cert.CertSelector)
        * PKIXBuilderParameters(java.security.KeyStore, java.security.cert.CertSelector)
    
      Raises:
        java.security.InvalidAlgorithmParameterException: from java
        java.security.KeyStoreException: from java
    
    """
    @typing.overload
    def __init__(self, keyStore: java.security.KeyStore, certSelector: CertSelector): ...
    @typing.overload
    def __init__(self, set: java.util.Set[TrustAnchor], certSelector: CertSelector): ...
    def getMaxPathLength(self) -> int: ...
    def setMaxPathLength(self, int: int) -> None: ...
    def toString(self) -> str: ...

class PKIXCertPathBuilderResult(PKIXCertPathValidatorResult, CertPathBuilderResult):
    """
    Java class 'java.security.cert.PKIXCertPathBuilderResult'
    
        Extends:
            java.security.cert.PKIXCertPathValidatorResult
    
        Interfaces:
            java.security.cert.CertPathBuilderResult
    
      Constructors:
        * PKIXCertPathBuilderResult(java.security.cert.CertPath, java.security.cert.TrustAnchor, java.security.cert.PolicyNode, java.security.PublicKey)
    
    """
    def __init__(self, certPath: CertPath, trustAnchor: TrustAnchor, policyNode: PolicyNode, publicKey: java.security.PublicKey): ...
    def getCertPath(self) -> CertPath: ...
    def toString(self) -> str: ...

class PKIXRevocationChecker(PKIXCertPathChecker):
    """
    Java class 'java.security.cert.PKIXRevocationChecker'
    
        Extends:
            java.security.cert.PKIXCertPathChecker
    
    """
    def clone(self) -> 'PKIXRevocationChecker': ...
    def getOcspExtensions(self) -> java.util.List[Extension]: ...
    def getOcspResponder(self) -> java.net.URI: ...
    def getOcspResponderCert(self) -> X509Certificate: ...
    def getOcspResponses(self) -> java.util.Map[X509Certificate, typing.List[int]]: ...
    def getOptions(self) -> java.util.Set['PKIXRevocationChecker.Option']: ...
    def getSoftFailExceptions(self) -> java.util.List['CertPathValidatorException']: ...
    def setOcspExtensions(self, list: java.util.List[Extension]) -> None: ...
    def setOcspResponder(self, uRI: java.net.URI) -> None: ...
    def setOcspResponderCert(self, x509Certificate: X509Certificate) -> None: ...
    def setOcspResponses(self, map: typing.Union[java.util.Map[X509Certificate, typing.List[int]], typing.Mapping[X509Certificate, typing.List[int]]]) -> None: ...
    def setOptions(self, set: java.util.Set['PKIXRevocationChecker.Option']) -> None: ...
    class Option(java.lang.Enum['PKIXRevocationChecker.Option']):
        """
        Java class 'java.security.cert.PKIXRevocationChecker$Option'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            ONLY_END_ENTITY (java.security.cert.PKIXRevocationChecker$Option): final static enum constant
            PREFER_CRLS (java.security.cert.PKIXRevocationChecker$Option): final static enum constant
            NO_FALLBACK (java.security.cert.PKIXRevocationChecker$Option): final static enum constant
            SOFT_FAIL (java.security.cert.PKIXRevocationChecker$Option): final static enum constant
        
        """
        ONLY_END_ENTITY: typing.ClassVar['PKIXRevocationChecker.Option'] = ...
        PREFER_CRLS: typing.ClassVar['PKIXRevocationChecker.Option'] = ...
        NO_FALLBACK: typing.ClassVar['PKIXRevocationChecker.Option'] = ...
        SOFT_FAIL: typing.ClassVar['PKIXRevocationChecker.Option'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'PKIXRevocationChecker.Option': ...
        @staticmethod
        def values() -> typing.List['PKIXRevocationChecker.Option']: ...

class CertPathValidatorException(java.security.GeneralSecurityException):
    """
    Java class 'java.security.cert.CertPathValidatorException'
    
        Extends:
            java.security.GeneralSecurityException
    
      Constructors:
        * CertPathValidatorException(java.lang.String, java.lang.Throwable, java.security.cert.CertPath, int, java.security.cert.CertPathValidatorException.Reason)
        * CertPathValidatorException(java.lang.String, java.lang.Throwable, java.security.cert.CertPath, int)
        * CertPathValidatorException(java.lang.String, java.lang.Throwable)
        * CertPathValidatorException()
        * CertPathValidatorException(java.lang.String)
        * CertPathValidatorException(java.lang.Throwable)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable, certPath: CertPath, int: int): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable, certPath: CertPath, int: int, reason: 'CertPathValidatorException.Reason'): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...
    def getCertPath(self) -> CertPath: ...
    def getIndex(self) -> int: ...
    def getReason(self) -> 'CertPathValidatorException.Reason': ...
    class BasicReason(java.lang.Enum['CertPathValidatorException.BasicReason'], java.security.cert.CertPathValidatorException.Reason):
        """
        Java class 'java.security.cert.CertPathValidatorException$BasicReason'
        
            Extends:
                java.lang.Enum
        
            Interfaces:
                java.security.cert.CertPathValidatorException.Reason
        
          Attributes:
            UNSPECIFIED (java.security.cert.CertPathValidatorException$BasicReason): final static enum constant
            EXPIRED (java.security.cert.CertPathValidatorException$BasicReason): final static enum constant
            NOT_YET_VALID (java.security.cert.CertPathValidatorException$BasicReason): final static enum constant
            REVOKED (java.security.cert.CertPathValidatorException$BasicReason): final static enum constant
            UNDETERMINED_REVOCATION_STATUS (java.security.cert.CertPathValidatorException$BasicReason): final static enum constant
            INVALID_SIGNATURE (java.security.cert.CertPathValidatorException$BasicReason): final static enum constant
            ALGORITHM_CONSTRAINED (java.security.cert.CertPathValidatorException$BasicReason): final static enum constant
        
        """
        UNSPECIFIED: typing.ClassVar['CertPathValidatorException.BasicReason'] = ...
        EXPIRED: typing.ClassVar['CertPathValidatorException.BasicReason'] = ...
        NOT_YET_VALID: typing.ClassVar['CertPathValidatorException.BasicReason'] = ...
        REVOKED: typing.ClassVar['CertPathValidatorException.BasicReason'] = ...
        UNDETERMINED_REVOCATION_STATUS: typing.ClassVar['CertPathValidatorException.BasicReason'] = ...
        INVALID_SIGNATURE: typing.ClassVar['CertPathValidatorException.BasicReason'] = ...
        ALGORITHM_CONSTRAINED: typing.ClassVar['CertPathValidatorException.BasicReason'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'CertPathValidatorException.BasicReason': ...
        @staticmethod
        def values() -> typing.List['CertPathValidatorException.BasicReason']: ...
    class Reason(java.io.Serializable): ...

class PKIXReason(java.lang.Enum['PKIXReason'], CertPathValidatorException.Reason):
    """
    Java class 'java.security.cert.PKIXReason'
    
        Extends:
            java.lang.Enum
    
        Interfaces:
            java.security.cert.CertPathValidatorException.Reason
    
      Attributes:
        NAME_CHAINING (java.security.cert.PKIXReason): final static enum constant
        INVALID_KEY_USAGE (java.security.cert.PKIXReason): final static enum constant
        INVALID_POLICY (java.security.cert.PKIXReason): final static enum constant
        NO_TRUST_ANCHOR (java.security.cert.PKIXReason): final static enum constant
        UNRECOGNIZED_CRIT_EXT (java.security.cert.PKIXReason): final static enum constant
        NOT_CA_CERT (java.security.cert.PKIXReason): final static enum constant
        PATH_TOO_LONG (java.security.cert.PKIXReason): final static enum constant
        INVALID_NAME (java.security.cert.PKIXReason): final static enum constant
    
    """
    NAME_CHAINING: typing.ClassVar['PKIXReason'] = ...
    INVALID_KEY_USAGE: typing.ClassVar['PKIXReason'] = ...
    INVALID_POLICY: typing.ClassVar['PKIXReason'] = ...
    NO_TRUST_ANCHOR: typing.ClassVar['PKIXReason'] = ...
    UNRECOGNIZED_CRIT_EXT: typing.ClassVar['PKIXReason'] = ...
    NOT_CA_CERT: typing.ClassVar['PKIXReason'] = ...
    PATH_TOO_LONG: typing.ClassVar['PKIXReason'] = ...
    INVALID_NAME: typing.ClassVar['PKIXReason'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'PKIXReason': ...
    @staticmethod
    def values() -> typing.List['PKIXReason']: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("java.security.cert")``.

    CRL: typing.Type[CRL]
    CRLException: typing.Type[CRLException]
    CRLReason: typing.Type[CRLReason]
    CRLSelector: typing.Type[CRLSelector]
    CertPath: typing.Type[CertPath]
    CertPathBuilder: typing.Type[CertPathBuilder]
    CertPathBuilderException: typing.Type[CertPathBuilderException]
    CertPathBuilderResult: typing.Type[CertPathBuilderResult]
    CertPathBuilderSpi: typing.Type[CertPathBuilderSpi]
    CertPathChecker: typing.Type[CertPathChecker]
    CertPathParameters: typing.Type[CertPathParameters]
    CertPathValidator: typing.Type[CertPathValidator]
    CertPathValidatorException: typing.Type[CertPathValidatorException]
    CertPathValidatorResult: typing.Type[CertPathValidatorResult]
    CertPathValidatorSpi: typing.Type[CertPathValidatorSpi]
    CertSelector: typing.Type[CertSelector]
    CertStore: typing.Type[CertStore]
    CertStoreException: typing.Type[CertStoreException]
    CertStoreParameters: typing.Type[CertStoreParameters]
    CertStoreSpi: typing.Type[CertStoreSpi]
    Certificate: typing.Type[Certificate]
    CertificateEncodingException: typing.Type[CertificateEncodingException]
    CertificateException: typing.Type[CertificateException]
    CertificateExpiredException: typing.Type[CertificateExpiredException]
    CertificateFactory: typing.Type[CertificateFactory]
    CertificateFactorySpi: typing.Type[CertificateFactorySpi]
    CertificateNotYetValidException: typing.Type[CertificateNotYetValidException]
    CertificateParsingException: typing.Type[CertificateParsingException]
    CertificateRevokedException: typing.Type[CertificateRevokedException]
    CollectionCertStoreParameters: typing.Type[CollectionCertStoreParameters]
    Extension: typing.Type[Extension]
    LDAPCertStoreParameters: typing.Type[LDAPCertStoreParameters]
    PKIXBuilderParameters: typing.Type[PKIXBuilderParameters]
    PKIXCertPathBuilderResult: typing.Type[PKIXCertPathBuilderResult]
    PKIXCertPathChecker: typing.Type[PKIXCertPathChecker]
    PKIXCertPathValidatorResult: typing.Type[PKIXCertPathValidatorResult]
    PKIXParameters: typing.Type[PKIXParameters]
    PKIXReason: typing.Type[PKIXReason]
    PKIXRevocationChecker: typing.Type[PKIXRevocationChecker]
    PolicyNode: typing.Type[PolicyNode]
    PolicyQualifierInfo: typing.Type[PolicyQualifierInfo]
    TrustAnchor: typing.Type[TrustAnchor]
    URICertStoreParameters: typing.Type[URICertStoreParameters]
    X509CRL: typing.Type[X509CRL]
    X509CRLEntry: typing.Type[X509CRLEntry]
    X509CRLSelector: typing.Type[X509CRLSelector]
    X509CertSelector: typing.Type[X509CertSelector]
    X509Certificate: typing.Type[X509Certificate]
    X509Extension: typing.Type[X509Extension]
