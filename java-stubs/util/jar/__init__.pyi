from typing import Any as _py_Any
from typing import List as _py_List
from typing import ClassVar as _py_ClassVar
from typing import overload
import java.beans
import java.io
import java.lang
import java.net
import java.security
import java.security.cert
import java.util
import java.util.stream
import java.util.zip
import sun.misc
import sun.security.util


class Attributes(java.util.Map[_py_Any, _py_Any], java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, int: int): ...
    @overload
    def __init__(self, attributes: 'Attributes'): ...
    def clear(self) -> None: ...
    def clone(self) -> _py_Any: ...
    def containsKey(self, object: _py_Any) -> bool: ...
    def containsValue(self, object: _py_Any) -> bool: ...
    def entrySet(self) -> java.util.Set[java.util.Map.Entry[_py_Any, _py_Any]]: ...
    def equals(self, object: _py_Any) -> bool: ...
    def get(self, object: _py_Any) -> _py_Any: ...
    @overload
    def getValue(self, string: str) -> str: ...
    @overload
    def getValue(self, name: 'Attributes.Name') -> str: ...
    def hashCode(self) -> int: ...
    def isEmpty(self) -> bool: ...
    def keySet(self) -> java.util.Set[_py_Any]: ...
    def put(self, object: _py_Any, object2: _py_Any) -> _py_Any: ...
    def putAll(self, map: java.util.Map[_py_Any, _py_Any]) -> None: ...
    def putValue(self, string: str, string2: str) -> str: ...
    @overload
    def remove(self, object: _py_Any, object2: _py_Any) -> bool: ...
    @overload
    def remove(self, object: _py_Any) -> _py_Any: ...
    def size(self) -> int: ...
    def values(self) -> java.util.Collection[_py_Any]: ...
    class Name:
        MANIFEST_VERSION: _py_ClassVar['Attributes.Name'] = ...
        SIGNATURE_VERSION: _py_ClassVar['Attributes.Name'] = ...
        CONTENT_TYPE: _py_ClassVar['Attributes.Name'] = ...
        CLASS_PATH: _py_ClassVar['Attributes.Name'] = ...
        MAIN_CLASS: _py_ClassVar['Attributes.Name'] = ...
        SEALED: _py_ClassVar['Attributes.Name'] = ...
        EXTENSION_LIST: _py_ClassVar['Attributes.Name'] = ...
        EXTENSION_NAME: _py_ClassVar['Attributes.Name'] = ...
        EXTENSION_INSTALLATION: _py_ClassVar['Attributes.Name'] = ...
        IMPLEMENTATION_TITLE: _py_ClassVar['Attributes.Name'] = ...
        IMPLEMENTATION_VERSION: _py_ClassVar['Attributes.Name'] = ...
        IMPLEMENTATION_VENDOR: _py_ClassVar['Attributes.Name'] = ...
        IMPLEMENTATION_VENDOR_ID: _py_ClassVar['Attributes.Name'] = ...
        IMPLEMENTATION_URL: _py_ClassVar['Attributes.Name'] = ...
        SPECIFICATION_TITLE: _py_ClassVar['Attributes.Name'] = ...
        SPECIFICATION_VERSION: _py_ClassVar['Attributes.Name'] = ...
        SPECIFICATION_VENDOR: _py_ClassVar['Attributes.Name'] = ...
        def __init__(self, string: str): ...
        def equals(self, object: _py_Any) -> bool: ...
        def hashCode(self) -> int: ...
        def toString(self) -> str: ...

class JarEntry(java.util.zip.ZipEntry):
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, jarEntry: 'JarEntry'): ...
    @overload
    def __init__(self, zipEntry: java.util.zip.ZipEntry): ...
    def getAttributes(self) -> Attributes: ...
    def getCertificates(self) -> _py_List[java.security.cert.Certificate]: ...
    def getCodeSigners(self) -> _py_List[java.security.CodeSigner]: ...

class JarException(java.util.zip.ZipException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class JarFile(java.util.zip.ZipFile):
    MANIFEST_NAME: _py_ClassVar[str] = ...
    @overload
    def __init__(self, file: java.io.File): ...
    @overload
    def __init__(self, file: java.io.File, boolean: bool): ...
    @overload
    def __init__(self, file: java.io.File, boolean: bool, int: int): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, boolean: bool): ...
    def entries(self) -> java.util.Enumeration[JarEntry]: ...
    def getEntry(self, string: str) -> java.util.zip.ZipEntry: ...
    def getInputStream(self, zipEntry: java.util.zip.ZipEntry) -> java.io.InputStream: ...
    def getJarEntry(self, string: str) -> JarEntry: ...
    def getManifest(self) -> 'Manifest': ...
    def stream(self) -> java.util.stream.Stream[JarEntry]: ...

class JarInputStream(java.util.zip.ZipInputStream):
    @overload
    def __init__(self, inputStream: java.io.InputStream): ...
    @overload
    def __init__(self, inputStream: java.io.InputStream, boolean: bool): ...
    def getManifest(self) -> 'Manifest': ...
    def getNextEntry(self) -> java.util.zip.ZipEntry: ...
    def getNextJarEntry(self) -> JarEntry: ...
    @overload
    def read(self, byteArray: _py_List[int]) -> int: ...
    @overload
    def read(self, byteArray: _py_List[int], int: int, int2: int) -> int: ...
    @overload
    def read(self) -> int: ...

class JarOutputStream(java.util.zip.ZipOutputStream):
    @overload
    def __init__(self, outputStream: java.io.OutputStream): ...
    @overload
    def __init__(self, outputStream: java.io.OutputStream, manifest: 'Manifest'): ...
    def putNextEntry(self, zipEntry: java.util.zip.ZipEntry) -> None: ...

class JarVerifier:
    def __init__(self, byteArray: _py_List[int]): ...
    def beginEntry(self, jarEntry: JarEntry, manifestEntryVerifier: sun.security.util.ManifestEntryVerifier) -> None: ...
    def entries2(self, jarFile: JarFile, enumeration: java.util.Enumeration[java.util.zip.ZipEntry]) -> java.util.Enumeration[JarEntry]: ...
    def entryNames(self, jarFile: JarFile, codeSourceArray: _py_List[java.security.CodeSource]) -> java.util.Enumeration[str]: ...
    @overload
    def getCerts(self, string: str) -> _py_List[java.security.cert.Certificate]: ...
    @overload
    def getCerts(self, jarFile: JarFile, jarEntry: JarEntry) -> _py_List[java.security.cert.Certificate]: ...
    @overload
    def getCodeSigners(self, string: str) -> _py_List[java.security.CodeSigner]: ...
    @overload
    def getCodeSigners(self, jarFile: JarFile, jarEntry: JarEntry) -> _py_List[java.security.CodeSigner]: ...
    @overload
    def getCodeSource(self, uRL: java.net.URL, string: str) -> java.security.CodeSource: ...
    @overload
    def getCodeSource(self, uRL: java.net.URL, jarFile: JarFile, jarEntry: JarEntry) -> java.security.CodeSource: ...
    def getCodeSources(self, jarFile: JarFile, uRL: java.net.URL) -> _py_List[java.security.CodeSource]: ...
    def getManifestDigests(self) -> java.util.List[_py_Any]: ...
    def setEagerValidation(self, boolean: bool) -> None: ...
    @overload
    def update(self, int: int, byteArray: _py_List[int], int2: int, int3: int, manifestEntryVerifier: sun.security.util.ManifestEntryVerifier) -> None: ...
    @overload
    def update(self, int: int, manifestEntryVerifier: sun.security.util.ManifestEntryVerifier) -> None: ...

class JavaUtilJarAccessImpl(sun.misc.JavaUtilJarAccess):
    def ensureInitialization(self, jarFile: JarFile) -> None: ...
    def entries2(self, jarFile: JarFile) -> java.util.Enumeration[JarEntry]: ...
    def entryNames(self, jarFile: JarFile, codeSourceArray: _py_List[java.security.CodeSource]) -> java.util.Enumeration[str]: ...
    def getCodeSource(self, jarFile: JarFile, uRL: java.net.URL, string: str) -> java.security.CodeSource: ...
    def getCodeSources(self, jarFile: JarFile, uRL: java.net.URL) -> _py_List[java.security.CodeSource]: ...
    def getManifestDigests(self, jarFile: JarFile) -> java.util.List[_py_Any]: ...
    def getTrustedAttributes(self, manifest: 'Manifest', string: str) -> Attributes: ...
    def jarFileHasClassPathAttribute(self, jarFile: JarFile) -> bool: ...
    def setEagerValidation(self, jarFile: JarFile, boolean: bool) -> None: ...

class Manifest(java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, inputStream: java.io.InputStream): ...
    @overload
    def __init__(self, manifest: 'Manifest'): ...
    def clear(self) -> None: ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    def getAttributes(self, string: str) -> Attributes: ...
    def getEntries(self) -> java.util.Map[str, Attributes]: ...
    def getMainAttributes(self) -> Attributes: ...
    def hashCode(self) -> int: ...
    def read(self, inputStream: java.io.InputStream) -> None: ...
    def write(self, outputStream: java.io.OutputStream) -> None: ...

class Pack200:
    @classmethod
    def newPacker(cls) -> 'Pack200.Packer': ...
    @classmethod
    def newUnpacker(cls) -> 'Pack200.Unpacker': ...
    class Packer:
        SEGMENT_LIMIT: _py_ClassVar[str] = ...
        KEEP_FILE_ORDER: _py_ClassVar[str] = ...
        EFFORT: _py_ClassVar[str] = ...
        DEFLATE_HINT: _py_ClassVar[str] = ...
        MODIFICATION_TIME: _py_ClassVar[str] = ...
        PASS_FILE_PFX: _py_ClassVar[str] = ...
        UNKNOWN_ATTRIBUTE: _py_ClassVar[str] = ...
        CLASS_ATTRIBUTE_PFX: _py_ClassVar[str] = ...
        FIELD_ATTRIBUTE_PFX: _py_ClassVar[str] = ...
        METHOD_ATTRIBUTE_PFX: _py_ClassVar[str] = ...
        CODE_ATTRIBUTE_PFX: _py_ClassVar[str] = ...
        PROGRESS: _py_ClassVar[str] = ...
        KEEP: _py_ClassVar[str] = ...
        PASS: _py_ClassVar[str] = ...
        STRIP: _py_ClassVar[str] = ...
        ERROR: _py_ClassVar[str] = ...
        TRUE: _py_ClassVar[str] = ...
        FALSE: _py_ClassVar[str] = ...
        LATEST: _py_ClassVar[str] = ...
        def addPropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
        @overload
        def pack(self, jarFile: JarFile, outputStream: java.io.OutputStream) -> None: ...
        @overload
        def pack(self, jarInputStream: JarInputStream, outputStream: java.io.OutputStream) -> None: ...
        def properties(self) -> java.util.SortedMap[str, str]: ...
        def removePropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    class Unpacker:
        KEEP: _py_ClassVar[str] = ...
        TRUE: _py_ClassVar[str] = ...
        FALSE: _py_ClassVar[str] = ...
        DEFLATE_HINT: _py_ClassVar[str] = ...
        PROGRESS: _py_ClassVar[str] = ...
        def addPropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
        def properties(self) -> java.util.SortedMap[str, str]: ...
        def removePropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
        @overload
        def unpack(self, file: java.io.File, jarOutputStream: JarOutputStream) -> None: ...
        @overload
        def unpack(self, inputStream: java.io.InputStream, jarOutputStream: JarOutputStream) -> None: ...
