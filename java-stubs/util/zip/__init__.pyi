import java
import java.io
import java.lang
import java.nio
import java.nio.charset
import java.nio.file.attribute
import java.time
import java.util
import java.util.stream
import jpype.protocol
import typing



class CheckedInputStream(java.io.FilterInputStream):
    """
    Java class 'java.util.zip.CheckedInputStream'
    
        Extends:
            java.io.FilterInputStream
    
      Constructors:
        * CheckedInputStream(java.io.InputStream, java.util.zip.Checksum)
    
    """
    def __init__(self, inputStream: java.io.InputStream, checksum: 'Checksum'): ...
    def getChecksum(self) -> 'Checksum': ...
    @typing.overload
    def read(self, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def read(self) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    def skip(self, long: int) -> int: ...

class CheckedOutputStream(java.io.FilterOutputStream):
    """
    Java class 'java.util.zip.CheckedOutputStream'
    
        Extends:
            java.io.FilterOutputStream
    
      Constructors:
        * CheckedOutputStream(java.io.OutputStream, java.util.zip.Checksum)
    
    """
    def __init__(self, outputStream: java.io.OutputStream, checksum: 'Checksum'): ...
    def getChecksum(self) -> 'Checksum': ...
    @typing.overload
    def write(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def write(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, int: int) -> None: ...

class Checksum:
    """
    Java class 'java.util.zip.Checksum'
    
    """
    def getValue(self) -> int: ...
    def reset(self) -> None: ...
    @typing.overload
    def update(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def update(self, int: int) -> None: ...
    @typing.overload
    def update(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def update(self, byteBuffer: java.nio.ByteBuffer) -> None: ...

class DataFormatException(java.lang.Exception):
    """
    Java class 'java.util.zip.DataFormatException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * DataFormatException()
        * DataFormatException(java.lang.String)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...

class Deflater:
    """
    Java class 'java.util.zip.Deflater'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Deflater()
        * Deflater(int)
        * Deflater(int, boolean)
    
      Attributes:
        DEFLATED (int): final static field
        NO_COMPRESSION (int): final static field
        BEST_SPEED (int): final static field
        BEST_COMPRESSION (int): final static field
        DEFAULT_COMPRESSION (int): final static field
        FILTERED (int): final static field
        HUFFMAN_ONLY (int): final static field
        DEFAULT_STRATEGY (int): final static field
        NO_FLUSH (int): final static field
        SYNC_FLUSH (int): final static field
        FULL_FLUSH (int): final static field
    
    """
    DEFLATED: typing.ClassVar[int] = ...
    NO_COMPRESSION: typing.ClassVar[int] = ...
    BEST_SPEED: typing.ClassVar[int] = ...
    BEST_COMPRESSION: typing.ClassVar[int] = ...
    DEFAULT_COMPRESSION: typing.ClassVar[int] = ...
    FILTERED: typing.ClassVar[int] = ...
    HUFFMAN_ONLY: typing.ClassVar[int] = ...
    DEFAULT_STRATEGY: typing.ClassVar[int] = ...
    NO_FLUSH: typing.ClassVar[int] = ...
    SYNC_FLUSH: typing.ClassVar[int] = ...
    FULL_FLUSH: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, boolean: bool): ...
    @typing.overload
    def deflate(self, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def deflate(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    @typing.overload
    def deflate(self, byteArray: typing.List[int], int: int, int2: int, int3: int) -> int: ...
    @typing.overload
    def deflate(self, byteBuffer: java.nio.ByteBuffer) -> int: ...
    @typing.overload
    def deflate(self, byteBuffer: java.nio.ByteBuffer, int: int) -> int: ...
    def end(self) -> None: ...
    def finish(self) -> None: ...
    def finished(self) -> bool: ...
    def getAdler(self) -> int: ...
    def getBytesRead(self) -> int: ...
    def getBytesWritten(self) -> int: ...
    def getTotalIn(self) -> int: ...
    def getTotalOut(self) -> int: ...
    def needsInput(self) -> bool: ...
    def reset(self) -> None: ...
    @typing.overload
    def setDictionary(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDictionary(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def setDictionary(self, byteBuffer: java.nio.ByteBuffer) -> None: ...
    @typing.overload
    def setInput(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInput(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def setInput(self, byteBuffer: java.nio.ByteBuffer) -> None: ...
    def setLevel(self, int: int) -> None: ...
    def setStrategy(self, int: int) -> None: ...

class DeflaterInputStream(java.io.FilterInputStream):
    """
    Java class 'java.util.zip.DeflaterInputStream'
    
        Extends:
            java.io.FilterInputStream
    
      Constructors:
        * DeflaterInputStream(java.io.InputStream, java.util.zip.Deflater, int)
        * DeflaterInputStream(java.io.InputStream)
        * DeflaterInputStream(java.io.InputStream, java.util.zip.Deflater)
    
    """
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, deflater: Deflater): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, deflater: Deflater, int: int): ...
    def available(self) -> int: ...
    def close(self) -> None: ...
    def mark(self, int: int) -> None: ...
    def markSupported(self) -> bool: ...
    @typing.overload
    def read(self, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def read(self) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    def reset(self) -> None: ...
    def skip(self, long: int) -> int: ...

class DeflaterOutputStream(java.io.FilterOutputStream):
    """
    Java class 'java.util.zip.DeflaterOutputStream'
    
        Extends:
            java.io.FilterOutputStream
    
      Constructors:
        * DeflaterOutputStream(java.io.OutputStream)
        * DeflaterOutputStream(java.io.OutputStream, boolean)
        * DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater)
        * DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, int, boolean)
        * DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, int)
        * DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, boolean)
    
    """
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, boolean: bool): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, deflater: Deflater): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, deflater: Deflater, boolean: bool): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, deflater: Deflater, int: int): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, deflater: Deflater, int: int, boolean: bool): ...
    def close(self) -> None: ...
    def finish(self) -> None: ...
    def flush(self) -> None: ...
    @typing.overload
    def write(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def write(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, int: int) -> None: ...

class Inflater:
    """
    Java class 'java.util.zip.Inflater'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Inflater(boolean)
        * Inflater()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool): ...
    def end(self) -> None: ...
    def finished(self) -> bool: ...
    def getAdler(self) -> int: ...
    def getBytesRead(self) -> int: ...
    def getBytesWritten(self) -> int: ...
    def getRemaining(self) -> int: ...
    def getTotalIn(self) -> int: ...
    def getTotalOut(self) -> int: ...
    @typing.overload
    def inflate(self, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def inflate(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    @typing.overload
    def inflate(self, byteBuffer: java.nio.ByteBuffer) -> int: ...
    def needsDictionary(self) -> bool: ...
    def needsInput(self) -> bool: ...
    def reset(self) -> None: ...
    @typing.overload
    def setDictionary(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDictionary(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def setDictionary(self, byteBuffer: java.nio.ByteBuffer) -> None: ...
    @typing.overload
    def setInput(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInput(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def setInput(self, byteBuffer: java.nio.ByteBuffer) -> None: ...

class InflaterInputStream(java.io.FilterInputStream):
    """
    Java class 'java.util.zip.InflaterInputStream'
    
        Extends:
            java.io.FilterInputStream
    
      Constructors:
        * InflaterInputStream(java.io.InputStream, java.util.zip.Inflater)
        * InflaterInputStream(java.io.InputStream, java.util.zip.Inflater, int)
        * InflaterInputStream(java.io.InputStream)
    
    """
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, inflater: Inflater): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, inflater: Inflater, int: int): ...
    def available(self) -> int: ...
    def close(self) -> None: ...
    def mark(self, int: int) -> None: ...
    def markSupported(self) -> bool: ...
    @typing.overload
    def read(self, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def read(self) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    def reset(self) -> None: ...
    def skip(self, long: int) -> int: ...

class InflaterOutputStream(java.io.FilterOutputStream):
    """
    Java class 'java.util.zip.InflaterOutputStream'
    
        Extends:
            java.io.FilterOutputStream
    
      Constructors:
        * InflaterOutputStream(java.io.OutputStream, java.util.zip.Inflater)
        * InflaterOutputStream(java.io.OutputStream)
        * InflaterOutputStream(java.io.OutputStream, java.util.zip.Inflater, int)
    
    """
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, inflater: Inflater): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, inflater: Inflater, int: int): ...
    def close(self) -> None: ...
    def finish(self) -> None: ...
    def flush(self) -> None: ...
    @typing.overload
    def write(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def write(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, int: int) -> None: ...

class ZipError(java.lang.InternalError):
    """
    Java class 'java.util.zip.ZipError'
    
        Extends:
            java.lang.InternalError
    
      Constructors:
        * ZipError(java.lang.String)
    
    """
    def __init__(self, string: str): ...

class ZipException(java.io.IOException):
    """
    Java class 'java.util.zip.ZipException'
    
        Extends:
            java.io.IOException
    
      Constructors:
        * ZipException()
        * ZipException(java.lang.String)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...

class Adler32(Checksum):
    """
    Java class 'java.util.zip.Adler32'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.util.zip.Checksum
    
      Constructors:
        * Adler32()
    
    """
    def __init__(self): ...
    def getValue(self) -> int: ...
    def reset(self) -> None: ...
    @typing.overload
    def update(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def update(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def update(self, int: int) -> None: ...
    @typing.overload
    def update(self, byteBuffer: java.nio.ByteBuffer) -> None: ...

class CRC32(Checksum):
    """
    Java class 'java.util.zip.CRC32'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.util.zip.Checksum
    
      Constructors:
        * CRC32()
    
    """
    def __init__(self): ...
    def getValue(self) -> int: ...
    def reset(self) -> None: ...
    @typing.overload
    def update(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def update(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def update(self, int: int) -> None: ...
    @typing.overload
    def update(self, byteBuffer: java.nio.ByteBuffer) -> None: ...

class CRC32C(Checksum):
    """
    Java class 'java.util.zip.CRC32C'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.util.zip.Checksum
    
      Constructors:
        * CRC32C()
    
    """
    def __init__(self): ...
    def getValue(self) -> int: ...
    def reset(self) -> None: ...
    @typing.overload
    def update(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def update(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def update(self, int: int) -> None: ...
    @typing.overload
    def update(self, byteBuffer: java.nio.ByteBuffer) -> None: ...

class GZIPInputStream(InflaterInputStream):
    """
    Java class 'java.util.zip.GZIPInputStream'
    
        Extends:
            java.util.zip.InflaterInputStream
    
      Constructors:
        * GZIPInputStream(java.io.InputStream)
        * GZIPInputStream(java.io.InputStream, int)
    
      Raises:
        java.io.IOException: from java
    
      Attributes:
        GZIP_MAGIC (int): final static field
    
    """
    GZIP_MAGIC: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, int: int): ...
    def close(self) -> None: ...
    @typing.overload
    def read(self, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    @typing.overload
    def read(self) -> int: ...

class GZIPOutputStream(DeflaterOutputStream):
    """
    Java class 'java.util.zip.GZIPOutputStream'
    
        Extends:
            java.util.zip.DeflaterOutputStream
    
      Constructors:
        * GZIPOutputStream(java.io.OutputStream, boolean)
        * GZIPOutputStream(java.io.OutputStream)
        * GZIPOutputStream(java.io.OutputStream, int, boolean)
        * GZIPOutputStream(java.io.OutputStream, int)
    
      Raises:
        java.io.IOException: from java
    
    """
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, boolean: bool): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, int: int): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, int: int, boolean: bool): ...
    def finish(self) -> None: ...
    @typing.overload
    def write(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def write(self, int: int) -> None: ...

class ZipEntry(java.util.zip.ZipConstants, java.lang.Cloneable):
    """
    Java class 'java.util.zip.ZipEntry'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.util.zip.ZipConstants, java.lang.Cloneable
    
      Constructors:
        * ZipEntry(java.lang.String)
        * ZipEntry(java.util.zip.ZipEntry)
    
      Attributes:
        STORED (int): final static field
        DEFLATED (int): final static field
    
    """
    STORED: typing.ClassVar[int] = ...
    DEFLATED: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, zipEntry: 'ZipEntry'): ...
    def clone(self) -> typing.Any: ...
    def getComment(self) -> str: ...
    def getCompressedSize(self) -> int: ...
    def getCrc(self) -> int: ...
    def getCreationTime(self) -> java.nio.file.attribute.FileTime: ...
    def getExtra(self) -> typing.List[int]: ...
    def getLastAccessTime(self) -> java.nio.file.attribute.FileTime: ...
    def getLastModifiedTime(self) -> java.nio.file.attribute.FileTime: ...
    def getMethod(self) -> int: ...
    def getName(self) -> str: ...
    def getSize(self) -> int: ...
    def getTime(self) -> int: ...
    def getTimeLocal(self) -> java.time.LocalDateTime: ...
    def hashCode(self) -> int: ...
    def isDirectory(self) -> bool: ...
    def setComment(self, string: str) -> None: ...
    def setCompressedSize(self, long: int) -> None: ...
    def setCrc(self, long: int) -> None: ...
    def setCreationTime(self, fileTime: java.nio.file.attribute.FileTime) -> 'ZipEntry': ...
    def setExtra(self, byteArray: typing.List[int]) -> None: ...
    def setLastAccessTime(self, fileTime: java.nio.file.attribute.FileTime) -> 'ZipEntry': ...
    def setLastModifiedTime(self, fileTime: java.nio.file.attribute.FileTime) -> 'ZipEntry': ...
    def setMethod(self, int: int) -> None: ...
    def setSize(self, long: int) -> None: ...
    def setTime(self, long: int) -> None: ...
    def setTimeLocal(self, localDateTime: java.time.LocalDateTime) -> None: ...
    def toString(self) -> str: ...

class ZipFile(java.util.zip.ZipConstants, java.io.Closeable):
    """
    Java class 'java.util.zip.ZipFile'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.util.zip.ZipConstants, java.io.Closeable
    
      Constructors:
        * ZipFile(java.lang.String, java.nio.charset.Charset)
        * ZipFile(java.io.File, java.nio.charset.Charset)
        * ZipFile(java.lang.String)
        * ZipFile(java.io.File, int)
        * ZipFile(java.io.File)
        * ZipFile(java.io.File, int, java.nio.charset.Charset)
    
      Raises:
        java.io.IOException: from java
        java.util.zip.ZipException: from java
    
      Attributes:
        OPEN_READ (int): final static field
        OPEN_DELETE (int): final static field
    
    """
    OPEN_READ: typing.ClassVar[int] = ...
    OPEN_DELETE: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]): ...
    @typing.overload
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], int: int): ...
    @typing.overload
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], int: int, charset: java.nio.charset.Charset): ...
    @typing.overload
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath], charset: java.nio.charset.Charset): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, charset: java.nio.charset.Charset): ...
    def close(self) -> None: ...
    def entries(self) -> java.util.Enumeration[ZipEntry]: ...
    def getComment(self) -> str: ...
    def getEntry(self, string: str) -> ZipEntry: ...
    def getInputStream(self, zipEntry: ZipEntry) -> java.io.InputStream: ...
    def getName(self) -> str: ...
    def size(self) -> int: ...
    def stream(self) -> java.util.stream.Stream[ZipEntry]: ...

class ZipInputStream(InflaterInputStream, java.util.zip.ZipConstants):
    """
    Java class 'java.util.zip.ZipInputStream'
    
        Extends:
            java.util.zip.InflaterInputStream
    
        Interfaces:
            java.util.zip.ZipConstants
    
      Constructors:
        * ZipInputStream(java.io.InputStream, java.nio.charset.Charset)
        * ZipInputStream(java.io.InputStream)
    
    """
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, charset: java.nio.charset.Charset): ...
    def available(self) -> int: ...
    def close(self) -> None: ...
    def closeEntry(self) -> None: ...
    def getNextEntry(self) -> ZipEntry: ...
    @typing.overload
    def read(self, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def read(self) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    def skip(self, long: int) -> int: ...

class ZipOutputStream(DeflaterOutputStream, java.util.zip.ZipConstants):
    """
    Java class 'java.util.zip.ZipOutputStream'
    
        Extends:
            java.util.zip.DeflaterOutputStream
    
        Interfaces:
            java.util.zip.ZipConstants
    
      Constructors:
        * ZipOutputStream(java.io.OutputStream, java.nio.charset.Charset)
        * ZipOutputStream(java.io.OutputStream)
    
      Attributes:
        STORED (int): final static field
        DEFLATED (int): final static field
    
    """
    STORED: typing.ClassVar[int] = ...
    DEFLATED: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, charset: java.nio.charset.Charset): ...
    def close(self) -> None: ...
    def closeEntry(self) -> None: ...
    def finish(self) -> None: ...
    def putNextEntry(self, zipEntry: ZipEntry) -> None: ...
    def setComment(self, string: str) -> None: ...
    def setLevel(self, int: int) -> None: ...
    def setMethod(self, int: int) -> None: ...
    @typing.overload
    def write(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def write(self, int: int) -> None: ...

class ZipConstants: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("java.util.zip")``.

    Adler32: typing.Type[Adler32]
    CRC32: typing.Type[CRC32]
    CRC32C: typing.Type[CRC32C]
    CheckedInputStream: typing.Type[CheckedInputStream]
    CheckedOutputStream: typing.Type[CheckedOutputStream]
    Checksum: typing.Type[Checksum]
    DataFormatException: typing.Type[DataFormatException]
    Deflater: typing.Type[Deflater]
    DeflaterInputStream: typing.Type[DeflaterInputStream]
    DeflaterOutputStream: typing.Type[DeflaterOutputStream]
    GZIPInputStream: typing.Type[GZIPInputStream]
    GZIPOutputStream: typing.Type[GZIPOutputStream]
    Inflater: typing.Type[Inflater]
    InflaterInputStream: typing.Type[InflaterInputStream]
    InflaterOutputStream: typing.Type[InflaterOutputStream]
    ZipConstants: typing.Type[ZipConstants]
    ZipEntry: typing.Type[ZipEntry]
    ZipError: typing.Type[ZipError]
    ZipException: typing.Type[ZipException]
    ZipFile: typing.Type[ZipFile]
    ZipInputStream: typing.Type[ZipInputStream]
    ZipOutputStream: typing.Type[ZipOutputStream]
