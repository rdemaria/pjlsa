from typing import Any as _py_Any
from typing import List as _py_List
from typing import TypeVar as _py_TypeVar
from typing import Type as _py_Type
from typing import ClassVar as _py_ClassVar
from typing import Generic as _py_Generic
from typing import overload
import java
import java.io
import java.lang.annotation
import java.lang.reflect
import java.net
import java.nio
import java.nio.channels
import java.nio.charset
import java.security
import java.util
import java.util.concurrent
import java.util.function
import java.util.stream


class Appendable:
    @overload
    def append(self, char: str) -> 'Appendable': ...
    @overload
    def append(self, charSequence: 'CharSequence') -> 'Appendable': ...
    @overload
    def append(self, charSequence: 'CharSequence', int: int, int2: int) -> 'Appendable': ...

class ApplicationShutdownHooks: ...

class AssertionStatusDirectives: ...

class AutoCloseable:
    def close(self) -> None: ...

class CharSequence:
    def charAt(self, int: int) -> str: ...
    def chars(self) -> java.util.stream.IntStream: ...
    def codePoints(self) -> java.util.stream.IntStream: ...
    def length(self) -> int: ...
    def subSequence(self, int: int, int2: int) -> 'CharSequence': ...
    def toString(self) -> str: ...

class CharacterData: ...

class CharacterName:
    @classmethod
    def get(cls, int: int) -> str: ...

_Class__T = _py_TypeVar('_Class__T')  # <T>
class Class(java.io.Serializable, java.lang.reflect.GenericDeclaration, java.lang.reflect.Type, java.lang.reflect.AnnotatedElement, _py_Generic[_Class__T]):
    _asSubclass__U = _py_TypeVar('_asSubclass__U')  # <U>
    def asSubclass(self, class_: _py_Type[_asSubclass__U]) -> _py_Type[_asSubclass__U]: ...
    def cast(self, object: _py_Any) -> _Class__T: ...
    def desiredAssertionStatus(self) -> bool: ...
    @classmethod
    @overload
    def forName(cls, string: str) -> _py_Type[_py_Any]: ...
    @classmethod
    @overload
    def forName(cls, string: str, boolean: bool, classLoader: 'ClassLoader') -> _py_Type[_py_Any]: ...
    def getAnnotatedInterfaces(self) -> _py_List[java.lang.reflect.AnnotatedType]: ...
    def getAnnotatedSuperclass(self) -> java.lang.reflect.AnnotatedType: ...
    _getAnnotation__A = _py_TypeVar('_getAnnotation__A', bound=java.lang.annotation.Annotation)  # <A>
    def getAnnotation(self, class_: _py_Type[_getAnnotation__A]) -> _getAnnotation__A: ...
    def getAnnotations(self) -> _py_List[java.lang.annotation.Annotation]: ...
    _getAnnotationsByType__A = _py_TypeVar('_getAnnotationsByType__A', bound=java.lang.annotation.Annotation)  # <A>
    def getAnnotationsByType(self, class_: _py_Type[_getAnnotationsByType__A]) -> _py_List[_getAnnotationsByType__A]: ...
    def getCanonicalName(self) -> str: ...
    def getClassLoader(self) -> 'ClassLoader': ...
    def getClasses(self) -> _py_List[_py_Type[_py_Any]]: ...
    def getComponentType(self) -> _py_Type[_py_Any]: ...
    def getConstructor(self, classArray: _py_List[_py_Type[_py_Any]]) -> java.lang.reflect.Constructor[_Class__T]: ...
    def getConstructors(self) -> _py_List[java.lang.reflect.Constructor[_py_Any]]: ...
    _getDeclaredAnnotation__A = _py_TypeVar('_getDeclaredAnnotation__A', bound=java.lang.annotation.Annotation)  # <A>
    def getDeclaredAnnotation(self, class_: _py_Type[_getDeclaredAnnotation__A]) -> _getDeclaredAnnotation__A: ...
    def getDeclaredAnnotations(self) -> _py_List[java.lang.annotation.Annotation]: ...
    _getDeclaredAnnotationsByType__A = _py_TypeVar('_getDeclaredAnnotationsByType__A', bound=java.lang.annotation.Annotation)  # <A>
    def getDeclaredAnnotationsByType(self, class_: _py_Type[_getDeclaredAnnotationsByType__A]) -> _py_List[_getDeclaredAnnotationsByType__A]: ...
    def getDeclaredClasses(self) -> _py_List[_py_Type[_py_Any]]: ...
    def getDeclaredConstructor(self, classArray: _py_List[_py_Type[_py_Any]]) -> java.lang.reflect.Constructor[_Class__T]: ...
    def getDeclaredConstructors(self) -> _py_List[java.lang.reflect.Constructor[_py_Any]]: ...
    def getDeclaredField(self, string: str) -> java.lang.reflect.Field: ...
    def getDeclaredFields(self) -> _py_List[java.lang.reflect.Field]: ...
    def getDeclaredMethod(self, string: str, classArray: _py_List[_py_Type[_py_Any]]) -> java.lang.reflect.Method: ...
    def getDeclaredMethods(self) -> _py_List[java.lang.reflect.Method]: ...
    def getDeclaringClass(self) -> _py_Type[_py_Any]: ...
    def getEnclosingClass(self) -> _py_Type[_py_Any]: ...
    def getEnclosingConstructor(self) -> java.lang.reflect.Constructor[_py_Any]: ...
    def getEnclosingMethod(self) -> java.lang.reflect.Method: ...
    def getEnumConstants(self) -> _py_List[_Class__T]: ...
    def getField(self, string: str) -> java.lang.reflect.Field: ...
    def getFields(self) -> _py_List[java.lang.reflect.Field]: ...
    def getGenericInterfaces(self) -> _py_List[java.lang.reflect.Type]: ...
    def getGenericSuperclass(self) -> java.lang.reflect.Type: ...
    def getInterfaces(self) -> _py_List[_py_Type[_py_Any]]: ...
    def getMethod(self, string: str, classArray: _py_List[_py_Type[_py_Any]]) -> java.lang.reflect.Method: ...
    def getMethods(self) -> _py_List[java.lang.reflect.Method]: ...
    def getModifiers(self) -> int: ...
    def getName(self) -> str: ...
    def getPackage(self) -> 'Package': ...
    def getProtectionDomain(self) -> java.security.ProtectionDomain: ...
    def getResource(self, string: str) -> java.net.URL: ...
    def getResourceAsStream(self, string: str) -> java.io.InputStream: ...
    def getSigners(self) -> _py_List[_py_Any]: ...
    def getSimpleName(self) -> str: ...
    def getSuperclass(self) -> _py_Type[_Class__T]: ...
    def getTypeName(self) -> str: ...
    def getTypeParameters(self) -> _py_List[java.lang.reflect.TypeVariable[_py_Type[_Class__T]]]: ...
    def isAnnotation(self) -> bool: ...
    def isAnnotationPresent(self, class_: _py_Type[java.lang.annotation.Annotation]) -> bool: ...
    def isAnonymousClass(self) -> bool: ...
    def isArray(self) -> bool: ...
    def isAssignableFrom(self, class_: _py_Type[_py_Any]) -> bool: ...
    def isEnum(self) -> bool: ...
    def isInstance(self, object: _py_Any) -> bool: ...
    def isInterface(self) -> bool: ...
    def isLocalClass(self) -> bool: ...
    def isMemberClass(self) -> bool: ...
    def isPrimitive(self) -> bool: ...
    def isSynthetic(self) -> bool: ...
    def newInstance(self) -> _Class__T: ...
    def toGenericString(self) -> str: ...
    def toString(self) -> str: ...

class ClassLoader:
    def clearAssertionStatus(self) -> None: ...
    def getParent(self) -> 'ClassLoader': ...
    def getResource(self, string: str) -> java.net.URL: ...
    def getResourceAsStream(self, string: str) -> java.io.InputStream: ...
    def getResources(self, string: str) -> java.util.Enumeration[java.net.URL]: ...
    @classmethod
    def getSystemClassLoader(cls) -> 'ClassLoader': ...
    @classmethod
    def getSystemResource(cls, string: str) -> java.net.URL: ...
    @classmethod
    def getSystemResourceAsStream(cls, string: str) -> java.io.InputStream: ...
    @classmethod
    def getSystemResources(cls, string: str) -> java.util.Enumeration[java.net.URL]: ...
    def loadClass(self, string: str) -> _py_Type[_py_Any]: ...
    def setClassAssertionStatus(self, string: str, boolean: bool) -> None: ...
    def setDefaultAssertionStatus(self, boolean: bool) -> None: ...
    def setPackageAssertionStatus(self, string: str, boolean: bool) -> None: ...

class ClassLoaderHelper: ...

_ClassValue__T = _py_TypeVar('_ClassValue__T')  # <T>
class ClassValue(_py_Generic[_ClassValue__T]):
    def get(self, class_: _py_Type[_py_Any]) -> _ClassValue__T: ...
    def remove(self, class_: _py_Type[_py_Any]) -> None: ...

class Cloneable: ...

_Comparable__T = _py_TypeVar('_Comparable__T')  # <T>
class Comparable(_py_Generic[_Comparable__T]):
    def compareTo(self, t: _Comparable__T) -> int: ...

class Compiler:
    @classmethod
    def command(cls, object: _py_Any) -> _py_Any: ...
    @classmethod
    def compileClass(cls, class_: _py_Type[_py_Any]) -> bool: ...
    @classmethod
    def compileClasses(cls, string: str) -> bool: ...
    @classmethod
    def disable(cls) -> None: ...
    @classmethod
    def enable(cls) -> None: ...

class ConditionalSpecialCasing: ...

class Deprecated(java.lang.annotation.Annotation):
    def equals(self, object: _py_Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class FunctionalInterface(java.lang.annotation.Annotation):
    def equals(self, object: _py_Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

_Iterable__T = _py_TypeVar('_Iterable__T')  # <T>
class Iterable(_py_Generic[_Iterable__T]):
    def forEach(self, consumer: java.util.function.Consumer[_Iterable__T]) -> None: ...
    def iterator(self) -> java.util.Iterator[_Iterable__T]: ...
    def spliterator(self) -> java.util.Spliterator[_Iterable__T]: ...

class Math:
    E: _py_ClassVar[float] = ...
    PI: _py_ClassVar[float] = ...
    @classmethod
    def IEEEremainder(cls, double: float, double2: float) -> float: ...
    @classmethod
    @overload
    def abs(cls, double: float) -> float: ...
    @classmethod
    @overload
    def abs(cls, float: float) -> float: ...
    @classmethod
    @overload
    def abs(cls, int: int) -> int: ...
    @classmethod
    @overload
    def abs(cls, long: int) -> int: ...
    @classmethod
    def acos(cls, double: float) -> float: ...
    @classmethod
    @overload
    def addExact(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def addExact(cls, long: int, long2: int) -> int: ...
    @classmethod
    def asin(cls, double: float) -> float: ...
    @classmethod
    def atan(cls, double: float) -> float: ...
    @classmethod
    def atan2(cls, double: float, double2: float) -> float: ...
    @classmethod
    def cbrt(cls, double: float) -> float: ...
    @classmethod
    def ceil(cls, double: float) -> float: ...
    @classmethod
    @overload
    def copySign(cls, double: float, double2: float) -> float: ...
    @classmethod
    @overload
    def copySign(cls, float: float, float2: float) -> float: ...
    @classmethod
    def cos(cls, double: float) -> float: ...
    @classmethod
    def cosh(cls, double: float) -> float: ...
    @classmethod
    @overload
    def decrementExact(cls, int: int) -> int: ...
    @classmethod
    @overload
    def decrementExact(cls, long: int) -> int: ...
    @classmethod
    def exp(cls, double: float) -> float: ...
    @classmethod
    def expm1(cls, double: float) -> float: ...
    @classmethod
    def floor(cls, double: float) -> float: ...
    @classmethod
    @overload
    def floorDiv(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def floorDiv(cls, long: int, long2: int) -> int: ...
    @classmethod
    @overload
    def floorMod(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def floorMod(cls, long: int, long2: int) -> int: ...
    @classmethod
    @overload
    def getExponent(cls, double: float) -> int: ...
    @classmethod
    @overload
    def getExponent(cls, float: float) -> int: ...
    @classmethod
    def hypot(cls, double: float, double2: float) -> float: ...
    @classmethod
    @overload
    def incrementExact(cls, int: int) -> int: ...
    @classmethod
    @overload
    def incrementExact(cls, long: int) -> int: ...
    @classmethod
    def log(cls, double: float) -> float: ...
    @classmethod
    def log10(cls, double: float) -> float: ...
    @classmethod
    def log1p(cls, double: float) -> float: ...
    @classmethod
    @overload
    def max(cls, double: float, double2: float) -> float: ...
    @classmethod
    @overload
    def max(cls, float: float, float2: float) -> float: ...
    @classmethod
    @overload
    def max(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def max(cls, long: int, long2: int) -> int: ...
    @classmethod
    @overload
    def min(cls, double: float, double2: float) -> float: ...
    @classmethod
    @overload
    def min(cls, float: float, float2: float) -> float: ...
    @classmethod
    @overload
    def min(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def min(cls, long: int, long2: int) -> int: ...
    @classmethod
    @overload
    def multiplyExact(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def multiplyExact(cls, long: int, long2: int) -> int: ...
    @classmethod
    @overload
    def negateExact(cls, int: int) -> int: ...
    @classmethod
    @overload
    def negateExact(cls, long: int) -> int: ...
    @classmethod
    @overload
    def nextAfter(cls, double: float, double2: float) -> float: ...
    @classmethod
    @overload
    def nextAfter(cls, float: float, double: float) -> float: ...
    @classmethod
    @overload
    def nextDown(cls, double: float) -> float: ...
    @classmethod
    @overload
    def nextDown(cls, float: float) -> float: ...
    @classmethod
    @overload
    def nextUp(cls, double: float) -> float: ...
    @classmethod
    @overload
    def nextUp(cls, float: float) -> float: ...
    @classmethod
    def pow(cls, double: float, double2: float) -> float: ...
    @classmethod
    def random(cls) -> float: ...
    @classmethod
    def rint(cls, double: float) -> float: ...
    @classmethod
    @overload
    def round(cls, float: float) -> int: ...
    @classmethod
    @overload
    def round(cls, double: float) -> int: ...
    @classmethod
    @overload
    def scalb(cls, double: float, int: int) -> float: ...
    @classmethod
    @overload
    def scalb(cls, float: float, int: int) -> float: ...
    @classmethod
    @overload
    def signum(cls, double: float) -> float: ...
    @classmethod
    @overload
    def signum(cls, float: float) -> float: ...
    @classmethod
    def sin(cls, double: float) -> float: ...
    @classmethod
    def sinh(cls, double: float) -> float: ...
    @classmethod
    def sqrt(cls, double: float) -> float: ...
    @classmethod
    @overload
    def subtractExact(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def subtractExact(cls, long: int, long2: int) -> int: ...
    @classmethod
    def tan(cls, double: float) -> float: ...
    @classmethod
    def tanh(cls, double: float) -> float: ...
    @classmethod
    def toDegrees(cls, double: float) -> float: ...
    @classmethod
    def toIntExact(cls, long: int) -> int: ...
    @classmethod
    def toRadians(cls, double: float) -> float: ...
    @classmethod
    @overload
    def ulp(cls, double: float) -> float: ...
    @classmethod
    @overload
    def ulp(cls, float: float) -> float: ...

class Number(java.io.Serializable):
    def __init__(self): ...
    def byteValue(self) -> int: ...
    def doubleValue(self) -> float: ...
    def floatValue(self) -> float: ...
    def intValue(self) -> int: ...
    def longValue(self) -> int: ...
    def shortValue(self) -> int: ...

class Object:
    def __init__(self): ...
    def equals(self, object: _py_Any) -> bool: ...
    def getClass(self) -> _py_Type[_py_Any]: ...
    def hashCode(self) -> int: ...
    def notify(self) -> None: ...
    def notifyAll(self) -> None: ...
    def toString(self) -> str: ...
    @overload
    def wait(self, long: int) -> None: ...
    @overload
    def wait(self) -> None: ...
    @overload
    def wait(self, long: int, int: int) -> None: ...

class Override(java.lang.annotation.Annotation):
    def equals(self, object: _py_Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class Package(java.lang.reflect.AnnotatedElement):
    _getAnnotation__A = _py_TypeVar('_getAnnotation__A', bound=java.lang.annotation.Annotation)  # <A>
    def getAnnotation(self, class_: _py_Type[_getAnnotation__A]) -> _getAnnotation__A: ...
    def getAnnotations(self) -> _py_List[java.lang.annotation.Annotation]: ...
    _getAnnotationsByType__A = _py_TypeVar('_getAnnotationsByType__A', bound=java.lang.annotation.Annotation)  # <A>
    def getAnnotationsByType(self, class_: _py_Type[_getAnnotationsByType__A]) -> _py_List[_getAnnotationsByType__A]: ...
    _getDeclaredAnnotation__A = _py_TypeVar('_getDeclaredAnnotation__A', bound=java.lang.annotation.Annotation)  # <A>
    def getDeclaredAnnotation(self, class_: _py_Type[_getDeclaredAnnotation__A]) -> _getDeclaredAnnotation__A: ...
    def getDeclaredAnnotations(self) -> _py_List[java.lang.annotation.Annotation]: ...
    _getDeclaredAnnotationsByType__A = _py_TypeVar('_getDeclaredAnnotationsByType__A', bound=java.lang.annotation.Annotation)  # <A>
    def getDeclaredAnnotationsByType(self, class_: _py_Type[_getDeclaredAnnotationsByType__A]) -> _py_List[_getDeclaredAnnotationsByType__A]: ...
    def getImplementationTitle(self) -> str: ...
    def getImplementationVendor(self) -> str: ...
    def getImplementationVersion(self) -> str: ...
    def getName(self) -> str: ...
    @classmethod
    def getPackage(cls, string: str) -> 'Package': ...
    @classmethod
    def getPackages(cls) -> _py_List['Package']: ...
    def getSpecificationTitle(self) -> str: ...
    def getSpecificationVendor(self) -> str: ...
    def getSpecificationVersion(self) -> str: ...
    def hashCode(self) -> int: ...
    def isAnnotationPresent(self, class_: _py_Type[java.lang.annotation.Annotation]) -> bool: ...
    def isCompatibleWith(self, string: str) -> bool: ...
    @overload
    def isSealed(self) -> bool: ...
    @overload
    def isSealed(self, uRL: java.net.URL) -> bool: ...
    def toString(self) -> str: ...

class Process:
    def __init__(self): ...
    def destroy(self) -> None: ...
    def destroyForcibly(self) -> 'Process': ...
    def exitValue(self) -> int: ...
    def getErrorStream(self) -> java.io.InputStream: ...
    def getInputStream(self) -> java.io.InputStream: ...
    def getOutputStream(self) -> java.io.OutputStream: ...
    def isAlive(self) -> bool: ...
    @overload
    def waitFor(self) -> int: ...
    @overload
    def waitFor(self, long: int, timeUnit: java.util.concurrent.TimeUnit) -> bool: ...

class ProcessEnvironment(java.util.HashMap[str, str]):
    def containsKey(self, object: _py_Any) -> bool: ...
    def containsValue(self, object: _py_Any) -> bool: ...
    def entrySet(self) -> java.util.Set[java.util.Map.Entry[str, str]]: ...
    @overload
    def get(self, object: _py_Any) -> _py_Any: ...
    @overload
    def get(self, object: _py_Any) -> str: ...
    def keySet(self) -> java.util.Set[str]: ...
    @overload
    def put(self, object: _py_Any, object2: _py_Any) -> _py_Any: ...
    @overload
    def put(self, string: str, string2: str) -> str: ...
    @overload
    def remove(self, object: _py_Any, object2: _py_Any) -> bool: ...
    @overload
    def remove(self, object: _py_Any) -> _py_Any: ...
    @overload
    def remove(self, object: _py_Any) -> str: ...
    def values(self) -> java.util.Collection[str]: ...

class Readable:
    def read(self, charBuffer: java.nio.CharBuffer) -> int: ...

class Runnable:
    def run(self) -> None: ...

class Runtime:
    def addShutdownHook(self, thread: 'Thread') -> None: ...
    def availableProcessors(self) -> int: ...
    def exit(self, int: int) -> None: ...
    def freeMemory(self) -> int: ...
    def gc(self) -> None: ...
    def getLocalizedInputStream(self, inputStream: java.io.InputStream) -> java.io.InputStream: ...
    def getLocalizedOutputStream(self, outputStream: java.io.OutputStream) -> java.io.OutputStream: ...
    @classmethod
    def getRuntime(cls) -> 'Runtime': ...
    def halt(self, int: int) -> None: ...
    def load(self, string: str) -> None: ...
    def loadLibrary(self, string: str) -> None: ...
    def maxMemory(self) -> int: ...
    def removeShutdownHook(self, thread: 'Thread') -> bool: ...
    def runFinalization(self) -> None: ...
    @classmethod
    def runFinalizersOnExit(cls, boolean: bool) -> None: ...
    def totalMemory(self) -> int: ...
    def traceInstructions(self, boolean: bool) -> None: ...
    def traceMethodCalls(self, boolean: bool) -> None: ...

class RuntimePermission(java.security.BasicPermission):
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, string2: str): ...

class SafeVarargs(java.lang.annotation.Annotation):
    def equals(self, object: _py_Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class SecurityManager:
    def __init__(self): ...
    def checkAccept(self, string: str, int: int) -> None: ...
    @overload
    def checkAccess(self, thread: 'Thread') -> None: ...
    @overload
    def checkAccess(self, threadGroup: 'ThreadGroup') -> None: ...
    def checkAwtEventQueueAccess(self) -> None: ...
    @overload
    def checkConnect(self, string: str, int: int) -> None: ...
    @overload
    def checkConnect(self, string: str, int: int, object: _py_Any) -> None: ...
    def checkCreateClassLoader(self) -> None: ...
    def checkDelete(self, string: str) -> None: ...
    def checkExec(self, string: str) -> None: ...
    def checkExit(self, int: int) -> None: ...
    def checkLink(self, string: str) -> None: ...
    def checkListen(self, int: int) -> None: ...
    def checkMemberAccess(self, class_: _py_Type[_py_Any], int: int) -> None: ...
    @overload
    def checkMulticast(self, inetAddress: java.net.InetAddress) -> None: ...
    @overload
    def checkMulticast(self, inetAddress: java.net.InetAddress, byte: int) -> None: ...
    def checkPackageAccess(self, string: str) -> None: ...
    def checkPackageDefinition(self, string: str) -> None: ...
    @overload
    def checkPermission(self, permission: java.security.Permission) -> None: ...
    @overload
    def checkPermission(self, permission: java.security.Permission, object: _py_Any) -> None: ...
    def checkPrintJobAccess(self) -> None: ...
    def checkPropertiesAccess(self) -> None: ...
    def checkPropertyAccess(self, string: str) -> None: ...
    @overload
    def checkRead(self, fileDescriptor: java.io.FileDescriptor) -> None: ...
    @overload
    def checkRead(self, string: str) -> None: ...
    @overload
    def checkRead(self, string: str, object: _py_Any) -> None: ...
    def checkSecurityAccess(self, string: str) -> None: ...
    def checkSetFactory(self) -> None: ...
    def checkSystemClipboardAccess(self) -> None: ...
    def checkTopLevelWindow(self, object: _py_Any) -> bool: ...
    @overload
    def checkWrite(self, fileDescriptor: java.io.FileDescriptor) -> None: ...
    @overload
    def checkWrite(self, string: str) -> None: ...
    def getInCheck(self) -> bool: ...
    def getSecurityContext(self) -> _py_Any: ...
    def getThreadGroup(self) -> 'ThreadGroup': ...

class Shutdown: ...

class StackTraceElement(java.io.Serializable):
    def __init__(self, string: str, string2: str, string3: str, int: int): ...
    def equals(self, object: _py_Any) -> bool: ...
    def getClassName(self) -> str: ...
    def getFileName(self) -> str: ...
    def getLineNumber(self) -> int: ...
    def getMethodName(self) -> str: ...
    def hashCode(self) -> int: ...
    def isNativeMethod(self) -> bool: ...
    def toString(self) -> str: ...

class StrictMath:
    E: _py_ClassVar[float] = ...
    PI: _py_ClassVar[float] = ...
    @classmethod
    def IEEEremainder(cls, double: float, double2: float) -> float: ...
    @classmethod
    @overload
    def abs(cls, double: float) -> float: ...
    @classmethod
    @overload
    def abs(cls, float: float) -> float: ...
    @classmethod
    @overload
    def abs(cls, int: int) -> int: ...
    @classmethod
    @overload
    def abs(cls, long: int) -> int: ...
    @classmethod
    def acos(cls, double: float) -> float: ...
    @classmethod
    @overload
    def addExact(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def addExact(cls, long: int, long2: int) -> int: ...
    @classmethod
    def asin(cls, double: float) -> float: ...
    @classmethod
    def atan(cls, double: float) -> float: ...
    @classmethod
    def atan2(cls, double: float, double2: float) -> float: ...
    @classmethod
    def cbrt(cls, double: float) -> float: ...
    @classmethod
    def ceil(cls, double: float) -> float: ...
    @classmethod
    @overload
    def copySign(cls, double: float, double2: float) -> float: ...
    @classmethod
    @overload
    def copySign(cls, float: float, float2: float) -> float: ...
    @classmethod
    def cos(cls, double: float) -> float: ...
    @classmethod
    def cosh(cls, double: float) -> float: ...
    @classmethod
    def exp(cls, double: float) -> float: ...
    @classmethod
    def expm1(cls, double: float) -> float: ...
    @classmethod
    def floor(cls, double: float) -> float: ...
    @classmethod
    @overload
    def floorDiv(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def floorDiv(cls, long: int, long2: int) -> int: ...
    @classmethod
    @overload
    def floorMod(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def floorMod(cls, long: int, long2: int) -> int: ...
    @classmethod
    @overload
    def getExponent(cls, double: float) -> int: ...
    @classmethod
    @overload
    def getExponent(cls, float: float) -> int: ...
    @classmethod
    def hypot(cls, double: float, double2: float) -> float: ...
    @classmethod
    def log(cls, double: float) -> float: ...
    @classmethod
    def log10(cls, double: float) -> float: ...
    @classmethod
    def log1p(cls, double: float) -> float: ...
    @classmethod
    @overload
    def max(cls, double: float, double2: float) -> float: ...
    @classmethod
    @overload
    def max(cls, float: float, float2: float) -> float: ...
    @classmethod
    @overload
    def max(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def max(cls, long: int, long2: int) -> int: ...
    @classmethod
    @overload
    def min(cls, double: float, double2: float) -> float: ...
    @classmethod
    @overload
    def min(cls, float: float, float2: float) -> float: ...
    @classmethod
    @overload
    def min(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def min(cls, long: int, long2: int) -> int: ...
    @classmethod
    @overload
    def multiplyExact(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def multiplyExact(cls, long: int, long2: int) -> int: ...
    @classmethod
    @overload
    def nextAfter(cls, double: float, double2: float) -> float: ...
    @classmethod
    @overload
    def nextAfter(cls, float: float, double: float) -> float: ...
    @classmethod
    @overload
    def nextDown(cls, double: float) -> float: ...
    @classmethod
    @overload
    def nextDown(cls, float: float) -> float: ...
    @classmethod
    @overload
    def nextUp(cls, double: float) -> float: ...
    @classmethod
    @overload
    def nextUp(cls, float: float) -> float: ...
    @classmethod
    def pow(cls, double: float, double2: float) -> float: ...
    @classmethod
    def random(cls) -> float: ...
    @classmethod
    def rint(cls, double: float) -> float: ...
    @classmethod
    @overload
    def round(cls, float: float) -> int: ...
    @classmethod
    @overload
    def round(cls, double: float) -> int: ...
    @classmethod
    @overload
    def scalb(cls, double: float, int: int) -> float: ...
    @classmethod
    @overload
    def scalb(cls, float: float, int: int) -> float: ...
    @classmethod
    @overload
    def signum(cls, double: float) -> float: ...
    @classmethod
    @overload
    def signum(cls, float: float) -> float: ...
    @classmethod
    def sin(cls, double: float) -> float: ...
    @classmethod
    def sinh(cls, double: float) -> float: ...
    @classmethod
    def sqrt(cls, double: float) -> float: ...
    @classmethod
    @overload
    def subtractExact(cls, int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def subtractExact(cls, long: int, long2: int) -> int: ...
    @classmethod
    def tan(cls, double: float) -> float: ...
    @classmethod
    def tanh(cls, double: float) -> float: ...
    @classmethod
    def toDegrees(cls, double: float) -> float: ...
    @classmethod
    def toIntExact(cls, long: int) -> int: ...
    @classmethod
    def toRadians(cls, double: float) -> float: ...
    @classmethod
    @overload
    def ulp(cls, double: float) -> float: ...
    @classmethod
    @overload
    def ulp(cls, float: float) -> float: ...

class StringCoding: ...

class SuppressWarnings(java.lang.annotation.Annotation):
    def equals(self, object: _py_Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def value(self) -> _py_List[str]: ...

class System:
    in_: _py_ClassVar[java.io.InputStream] = ...
    out: _py_ClassVar[java.io.PrintStream] = ...
    err: _py_ClassVar[java.io.PrintStream] = ...
    @classmethod
    def arraycopy(cls, object: _py_Any, int: int, object2: _py_Any, int2: int, int3: int) -> None: ...
    @classmethod
    def clearProperty(cls, string: str) -> str: ...
    @classmethod
    def console(cls) -> java.io.Console: ...
    @classmethod
    def currentTimeMillis(cls) -> int: ...
    @classmethod
    def exit(cls, int: int) -> None: ...
    @classmethod
    def gc(cls) -> None: ...
    @classmethod
    def getProperties(cls) -> java.util.Properties: ...
    @classmethod
    @overload
    def getProperty(cls, string: str) -> str: ...
    @classmethod
    @overload
    def getProperty(cls, string: str, string2: str) -> str: ...
    @classmethod
    def getSecurityManager(cls) -> SecurityManager: ...
    @classmethod
    @overload
    def getenv(cls, string: str) -> str: ...
    @classmethod
    @overload
    def getenv(cls) -> java.util.Map[str, str]: ...
    @classmethod
    def identityHashCode(cls, object: _py_Any) -> int: ...
    @classmethod
    def inheritedChannel(cls) -> java.nio.channels.Channel: ...
    @classmethod
    def lineSeparator(cls) -> str: ...
    @classmethod
    def load(cls, string: str) -> None: ...
    @classmethod
    def loadLibrary(cls, string: str) -> None: ...
    @classmethod
    def mapLibraryName(cls, string: str) -> str: ...
    @classmethod
    def nanoTime(cls) -> int: ...
    @classmethod
    def runFinalization(cls) -> None: ...
    @classmethod
    def runFinalizersOnExit(cls, boolean: bool) -> None: ...
    @classmethod
    def setErr(cls, printStream: java.io.PrintStream) -> None: ...
    @classmethod
    def setIn(cls, inputStream: java.io.InputStream) -> None: ...
    @classmethod
    def setOut(cls, printStream: java.io.PrintStream) -> None: ...
    @classmethod
    def setProperties(cls, properties: java.util.Properties) -> None: ...
    @classmethod
    def setProperty(cls, string: str, string2: str) -> str: ...
    @classmethod
    def setSecurityManager(cls, securityManager: SecurityManager) -> None: ...

class SystemClassLoaderAction(java.security.PrivilegedExceptionAction[ClassLoader]):
    @overload
    def run(self) -> ClassLoader: ...
    @overload
    def run(self) -> _py_Any: ...

class Terminator: ...

_ThreadLocal__T = _py_TypeVar('_ThreadLocal__T')  # <T>
class ThreadLocal(_py_Generic[_ThreadLocal__T]):
    def __init__(self): ...
    def get(self) -> _ThreadLocal__T: ...
    def remove(self) -> None: ...
    def set(self, t: _ThreadLocal__T) -> None: ...
    _withInitial__S = _py_TypeVar('_withInitial__S')  # <S>
    @classmethod
    def withInitial(cls, supplier: java.util.function.Supplier[_withInitial__S]) -> 'ThreadLocal'[_withInitial__S]: ...

class Throwable(java.io.Serializable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: 'Throwable'): ...
    @overload
    def __init__(self, throwable: 'Throwable'): ...
    def addSuppressed(self, throwable: 'Throwable') -> None: ...
    def fillInStackTrace(self) -> 'Throwable': ...
    def getCause(self) -> 'Throwable': ...
    def getLocalizedMessage(self) -> str: ...
    def getMessage(self) -> str: ...
    def getStackTrace(self) -> _py_List[StackTraceElement]: ...
    def getSuppressed(self) -> _py_List['Throwable']: ...
    def initCause(self, throwable: 'Throwable') -> 'Throwable': ...
    @overload
    def printStackTrace(self) -> None: ...
    @overload
    def printStackTrace(self, printStream: java.io.PrintStream) -> None: ...
    @overload
    def printStackTrace(self, printWriter: java.io.PrintWriter) -> None: ...
    def setStackTrace(self, stackTraceElementArray: _py_List[StackTraceElement]) -> None: ...
    def toString(self) -> str: ...

class Void:
    TYPE: _py_ClassVar[_py_Type] = ...

class AbstractStringBuilder(Appendable, CharSequence):
    @overload
    def append(self, boolean: bool) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, char: str) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, charArray: _py_List[str]) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, charArray: _py_List[str], int: int, int2: int) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, double: float) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, float: float) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, int: int) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, charSequence: CharSequence) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, charSequence: CharSequence, int: int, int2: int) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, object: _py_Any) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, string: str) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, stringBuffer: 'StringBuffer') -> 'AbstractStringBuilder': ...
    @overload
    def append(self, long: int) -> 'AbstractStringBuilder': ...
    @overload
    def append(self, char: str) -> Appendable: ...
    @overload
    def append(self, charSequence: CharSequence) -> Appendable: ...
    @overload
    def append(self, charSequence: CharSequence, int: int, int2: int) -> Appendable: ...
    def appendCodePoint(self, int: int) -> 'AbstractStringBuilder': ...
    def capacity(self) -> int: ...
    def charAt(self, int: int) -> str: ...
    def codePointAt(self, int: int) -> int: ...
    def codePointBefore(self, int: int) -> int: ...
    def codePointCount(self, int: int, int2: int) -> int: ...
    def delete(self, int: int, int2: int) -> 'AbstractStringBuilder': ...
    def deleteCharAt(self, int: int) -> 'AbstractStringBuilder': ...
    def ensureCapacity(self, int: int) -> None: ...
    def getChars(self, int: int, int2: int, charArray: _py_List[str], int3: int) -> None: ...
    @overload
    def indexOf(self, string: str) -> int: ...
    @overload
    def indexOf(self, string: str, int: int) -> int: ...
    @overload
    def insert(self, int: int, boolean: bool) -> 'AbstractStringBuilder': ...
    @overload
    def insert(self, int: int, char: str) -> 'AbstractStringBuilder': ...
    @overload
    def insert(self, int: int, charArray: _py_List[str]) -> 'AbstractStringBuilder': ...
    @overload
    def insert(self, int: int, charArray: _py_List[str], int2: int, int3: int) -> 'AbstractStringBuilder': ...
    @overload
    def insert(self, int: int, double: float) -> 'AbstractStringBuilder': ...
    @overload
    def insert(self, int: int, float: float) -> 'AbstractStringBuilder': ...
    @overload
    def insert(self, int: int, int2: int) -> 'AbstractStringBuilder': ...
    @overload
    def insert(self, int: int, charSequence: CharSequence) -> 'AbstractStringBuilder': ...
    @overload
    def insert(self, int: int, charSequence: CharSequence, int2: int, int3: int) -> 'AbstractStringBuilder': ...
    @overload
    def insert(self, int: int, object: _py_Any) -> 'AbstractStringBuilder': ...
    @overload
    def insert(self, int: int, string: str) -> 'AbstractStringBuilder': ...
    @overload
    def insert(self, int: int, long: int) -> 'AbstractStringBuilder': ...
    @overload
    def lastIndexOf(self, string: str) -> int: ...
    @overload
    def lastIndexOf(self, string: str, int: int) -> int: ...
    def length(self) -> int: ...
    def offsetByCodePoints(self, int: int, int2: int) -> int: ...
    def replace(self, int: int, int2: int, string: str) -> 'AbstractStringBuilder': ...
    def reverse(self) -> 'AbstractStringBuilder': ...
    def setCharAt(self, int: int, char: str) -> None: ...
    def setLength(self, int: int) -> None: ...
    def subSequence(self, int: int, int2: int) -> CharSequence: ...
    @overload
    def substring(self, int: int) -> str: ...
    @overload
    def substring(self, int: int, int2: int) -> str: ...
    def toString(self) -> str: ...
    def trimToSize(self) -> None: ...

class Boolean(java.io.Serializable, Comparable[bool]):
    TRUE: _py_ClassVar[bool] = ...
    FALSE: _py_ClassVar[bool] = ...
    TYPE: _py_ClassVar[_py_Type] = ...
    @overload
    def __init__(self, boolean: bool): ...
    @overload
    def __init__(self, string: str): ...
    def booleanValue(self) -> bool: ...
    @classmethod
    def compare(cls, boolean: bool, boolean2: bool) -> int: ...
    @overload
    def compareTo(self, boolean: bool) -> int: ...
    @overload
    def compareTo(self, object: _py_Any) -> int: ...
    def equals(self, object: _py_Any) -> bool: ...
    @classmethod
    def getBoolean(cls, string: str) -> bool: ...
    @overload
    def hashCode(self) -> int: ...
    @classmethod
    @overload
    def hashCode(cls, boolean: bool) -> int: ...
    @classmethod
    def logicalAnd(cls, boolean: bool, boolean2: bool) -> bool: ...
    @classmethod
    def logicalOr(cls, boolean: bool, boolean2: bool) -> bool: ...
    @classmethod
    def logicalXor(cls, boolean: bool, boolean2: bool) -> bool: ...
    @classmethod
    def parseBoolean(cls, string: str) -> bool: ...
    @overload
    def toString(self) -> str: ...
    @classmethod
    @overload
    def toString(cls, boolean: bool) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, boolean: bool) -> bool: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> bool: ...

class Byte(Number, Comparable[int]):
    MIN_VALUE: _py_ClassVar[int] = ...
    MAX_VALUE: _py_ClassVar[int] = ...
    TYPE: _py_ClassVar[_py_Type] = ...
    SIZE: _py_ClassVar[int] = ...
    BYTES: _py_ClassVar[int] = ...
    @overload
    def __init__(self, byte: int): ...
    @overload
    def __init__(self, string: str): ...
    def byteValue(self) -> int: ...
    @classmethod
    def compare(cls, byte: int, byte2: int) -> int: ...
    @overload
    def compareTo(self, byte: int) -> int: ...
    @overload
    def compareTo(self, object: _py_Any) -> int: ...
    @classmethod
    def decode(cls, string: str) -> int: ...
    def doubleValue(self) -> float: ...
    def equals(self, object: _py_Any) -> bool: ...
    def floatValue(self) -> float: ...
    @overload
    def hashCode(self) -> int: ...
    @classmethod
    @overload
    def hashCode(cls, byte: int) -> int: ...
    def intValue(self) -> int: ...
    def longValue(self) -> int: ...
    @classmethod
    @overload
    def parseByte(cls, string: str) -> int: ...
    @classmethod
    @overload
    def parseByte(cls, string: str, int: int) -> int: ...
    def shortValue(self) -> int: ...
    @overload
    def toString(self) -> str: ...
    @classmethod
    @overload
    def toString(cls, byte: int) -> str: ...
    @classmethod
    def toUnsignedInt(cls, byte: int) -> int: ...
    @classmethod
    def toUnsignedLong(cls, byte: int) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, byte: int) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str, int: int) -> int: ...

class CharacterData00(CharacterData): ...

class CharacterData01(CharacterData): ...

class CharacterData02(CharacterData): ...

class CharacterData0E(CharacterData): ...

class CharacterDataLatin1(CharacterData): ...

class CharacterDataPrivateUse(CharacterData): ...

class CharacterDataUndefined(CharacterData): ...

class Double(Number, Comparable[float]):
    POSITIVE_INFINITY: _py_ClassVar[float] = ...
    NEGATIVE_INFINITY: _py_ClassVar[float] = ...
    NaN: _py_ClassVar[float] = ...
    MAX_VALUE: _py_ClassVar[float] = ...
    MIN_NORMAL: _py_ClassVar[float] = ...
    MIN_VALUE: _py_ClassVar[float] = ...
    MAX_EXPONENT: _py_ClassVar[int] = ...
    MIN_EXPONENT: _py_ClassVar[int] = ...
    SIZE: _py_ClassVar[int] = ...
    BYTES: _py_ClassVar[int] = ...
    TYPE: _py_ClassVar[_py_Type] = ...
    @overload
    def __init__(self, double: float): ...
    @overload
    def __init__(self, string: str): ...
    def byteValue(self) -> int: ...
    @classmethod
    def compare(cls, double: float, double2: float) -> int: ...
    @overload
    def compareTo(self, double: float) -> int: ...
    @overload
    def compareTo(self, object: _py_Any) -> int: ...
    @classmethod
    def doubleToLongBits(cls, double: float) -> int: ...
    @classmethod
    def doubleToRawLongBits(cls, double: float) -> int: ...
    def doubleValue(self) -> float: ...
    def equals(self, object: _py_Any) -> bool: ...
    def floatValue(self) -> float: ...
    @overload
    def hashCode(self) -> int: ...
    @classmethod
    @overload
    def hashCode(cls, double: float) -> int: ...
    def intValue(self) -> int: ...
    @classmethod
    def isFinite(cls, double: float) -> bool: ...
    @overload
    def isInfinite(self) -> bool: ...
    @classmethod
    @overload
    def isInfinite(cls, double: float) -> bool: ...
    @overload
    def isNaN(self) -> bool: ...
    @classmethod
    @overload
    def isNaN(cls, double: float) -> bool: ...
    @classmethod
    def longBitsToDouble(cls, long: int) -> float: ...
    def longValue(self) -> int: ...
    @classmethod
    def max(cls, double: float, double2: float) -> float: ...
    @classmethod
    def min(cls, double: float, double2: float) -> float: ...
    @classmethod
    def parseDouble(cls, string: str) -> float: ...
    def shortValue(self) -> int: ...
    @classmethod
    def sum(cls, double: float, double2: float) -> float: ...
    @classmethod
    def toHexString(cls, double: float) -> str: ...
    @overload
    def toString(self) -> str: ...
    @classmethod
    @overload
    def toString(cls, double: float) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, double: float) -> float: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> float: ...

_Enum__E = _py_TypeVar('_Enum__E', bound='Enum')  # <E>
class Enum(Comparable[_Enum__E], java.io.Serializable, _py_Generic[_Enum__E]):
    @overload
    def compareTo(self, e: _Enum__E) -> int: ...
    @overload
    def compareTo(self, object: _py_Any) -> int: ...
    def equals(self, object: _py_Any) -> bool: ...
    def getDeclaringClass(self) -> _py_Type[_Enum__E]: ...
    def hashCode(self) -> int: ...
    def name(self) -> str: ...
    def ordinal(self) -> int: ...
    def toString(self) -> str: ...
    _valueOf__T = _py_TypeVar('_valueOf__T', bound='Enum')  # <T>
    @classmethod
    def valueOf(cls, class_: _py_Type[_valueOf__T], string: str) -> _valueOf__T: ...

class Error(Throwable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, throwable: Throwable): ...

class Exception(Throwable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, throwable: Throwable): ...

class Float(Number, Comparable[float]):
    POSITIVE_INFINITY: _py_ClassVar[float] = ...
    NEGATIVE_INFINITY: _py_ClassVar[float] = ...
    NaN: _py_ClassVar[float] = ...
    MAX_VALUE: _py_ClassVar[float] = ...
    MIN_NORMAL: _py_ClassVar[float] = ...
    MIN_VALUE: _py_ClassVar[float] = ...
    MAX_EXPONENT: _py_ClassVar[int] = ...
    MIN_EXPONENT: _py_ClassVar[int] = ...
    SIZE: _py_ClassVar[int] = ...
    BYTES: _py_ClassVar[int] = ...
    TYPE: _py_ClassVar[_py_Type] = ...
    @overload
    def __init__(self, double: float): ...
    @overload
    def __init__(self, float: float): ...
    @overload
    def __init__(self, string: str): ...
    def byteValue(self) -> int: ...
    @classmethod
    def compare(cls, float: float, float2: float) -> int: ...
    @overload
    def compareTo(self, float: float) -> int: ...
    @overload
    def compareTo(self, object: _py_Any) -> int: ...
    def doubleValue(self) -> float: ...
    def equals(self, object: _py_Any) -> bool: ...
    @classmethod
    def floatToIntBits(cls, float: float) -> int: ...
    @classmethod
    def floatToRawIntBits(cls, float: float) -> int: ...
    def floatValue(self) -> float: ...
    @overload
    def hashCode(self) -> int: ...
    @classmethod
    @overload
    def hashCode(cls, float: float) -> int: ...
    @classmethod
    def intBitsToFloat(cls, int: int) -> float: ...
    def intValue(self) -> int: ...
    @classmethod
    def isFinite(cls, float: float) -> bool: ...
    @overload
    def isInfinite(self) -> bool: ...
    @classmethod
    @overload
    def isInfinite(cls, float: float) -> bool: ...
    @overload
    def isNaN(self) -> bool: ...
    @classmethod
    @overload
    def isNaN(cls, float: float) -> bool: ...
    def longValue(self) -> int: ...
    @classmethod
    def max(cls, float: float, float2: float) -> float: ...
    @classmethod
    def min(cls, float: float, float2: float) -> float: ...
    @classmethod
    def parseFloat(cls, string: str) -> float: ...
    def shortValue(self) -> int: ...
    @classmethod
    def sum(cls, float: float, float2: float) -> float: ...
    @classmethod
    def toHexString(cls, float: float) -> str: ...
    @overload
    def toString(self) -> str: ...
    @classmethod
    @overload
    def toString(cls, float: float) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, float: float) -> float: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> float: ...

_InheritableThreadLocal__T = _py_TypeVar('_InheritableThreadLocal__T')  # <T>
class InheritableThreadLocal(ThreadLocal[_InheritableThreadLocal__T], _py_Generic[_InheritableThreadLocal__T]):
    def __init__(self): ...

class Integer(Number, Comparable[int]):
    MIN_VALUE: _py_ClassVar[int] = ...
    MAX_VALUE: _py_ClassVar[int] = ...
    TYPE: _py_ClassVar[_py_Type] = ...
    SIZE: _py_ClassVar[int] = ...
    BYTES: _py_ClassVar[int] = ...
    @overload
    def __init__(self, int: int): ...
    @overload
    def __init__(self, string: str): ...
    @classmethod
    def bitCount(cls, int: int) -> int: ...
    def byteValue(self) -> int: ...
    @classmethod
    def compare(cls, int: int, int2: int) -> int: ...
    @overload
    def compareTo(self, integer: int) -> int: ...
    @overload
    def compareTo(self, object: _py_Any) -> int: ...
    @classmethod
    def compareUnsigned(cls, int: int, int2: int) -> int: ...
    @classmethod
    def decode(cls, string: str) -> int: ...
    @classmethod
    def divideUnsigned(cls, int: int, int2: int) -> int: ...
    def doubleValue(self) -> float: ...
    def equals(self, object: _py_Any) -> bool: ...
    def floatValue(self) -> float: ...
    @classmethod
    @overload
    def getInteger(cls, string: str) -> int: ...
    @classmethod
    @overload
    def getInteger(cls, string: str, int: int) -> int: ...
    @classmethod
    @overload
    def getInteger(cls, string: str, integer: int) -> int: ...
    @overload
    def hashCode(self) -> int: ...
    @classmethod
    @overload
    def hashCode(cls, int: int) -> int: ...
    @classmethod
    def highestOneBit(cls, int: int) -> int: ...
    def intValue(self) -> int: ...
    def longValue(self) -> int: ...
    @classmethod
    def lowestOneBit(cls, int: int) -> int: ...
    @classmethod
    def max(cls, int: int, int2: int) -> int: ...
    @classmethod
    def min(cls, int: int, int2: int) -> int: ...
    @classmethod
    def numberOfLeadingZeros(cls, int: int) -> int: ...
    @classmethod
    def numberOfTrailingZeros(cls, int: int) -> int: ...
    @classmethod
    @overload
    def parseInt(cls, string: str) -> int: ...
    @classmethod
    @overload
    def parseInt(cls, string: str, int: int) -> int: ...
    @classmethod
    @overload
    def parseUnsignedInt(cls, string: str) -> int: ...
    @classmethod
    @overload
    def parseUnsignedInt(cls, string: str, int: int) -> int: ...
    @classmethod
    def remainderUnsigned(cls, int: int, int2: int) -> int: ...
    @classmethod
    def reverse(cls, int: int) -> int: ...
    @classmethod
    def reverseBytes(cls, int: int) -> int: ...
    @classmethod
    def rotateLeft(cls, int: int, int2: int) -> int: ...
    @classmethod
    def rotateRight(cls, int: int, int2: int) -> int: ...
    def shortValue(self) -> int: ...
    @classmethod
    def signum(cls, int: int) -> int: ...
    @classmethod
    def sum(cls, int: int, int2: int) -> int: ...
    @classmethod
    def toBinaryString(cls, int: int) -> str: ...
    @classmethod
    def toHexString(cls, int: int) -> str: ...
    @classmethod
    def toOctalString(cls, int: int) -> str: ...
    @overload
    def toString(self) -> str: ...
    @classmethod
    @overload
    def toString(cls, int: int) -> str: ...
    @classmethod
    @overload
    def toString(cls, int: int, int2: int) -> str: ...
    @classmethod
    def toUnsignedLong(cls, int: int) -> int: ...
    @classmethod
    @overload
    def toUnsignedString(cls, int: int) -> str: ...
    @classmethod
    @overload
    def toUnsignedString(cls, int: int, int2: int) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, int: int) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str, int: int) -> int: ...

class Long(Number, Comparable[int]):
    MIN_VALUE: _py_ClassVar[int] = ...
    MAX_VALUE: _py_ClassVar[int] = ...
    TYPE: _py_ClassVar[_py_Type] = ...
    SIZE: _py_ClassVar[int] = ...
    BYTES: _py_ClassVar[int] = ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, long: int): ...
    @classmethod
    def bitCount(cls, long: int) -> int: ...
    def byteValue(self) -> int: ...
    @classmethod
    def compare(cls, long: int, long2: int) -> int: ...
    @overload
    def compareTo(self, long: int) -> int: ...
    @overload
    def compareTo(self, object: _py_Any) -> int: ...
    @classmethod
    def compareUnsigned(cls, long: int, long2: int) -> int: ...
    @classmethod
    def decode(cls, string: str) -> int: ...
    @classmethod
    def divideUnsigned(cls, long: int, long2: int) -> int: ...
    def doubleValue(self) -> float: ...
    def equals(self, object: _py_Any) -> bool: ...
    def floatValue(self) -> float: ...
    @classmethod
    @overload
    def getLong(cls, string: str) -> int: ...
    @classmethod
    @overload
    def getLong(cls, string: str, long: int) -> int: ...
    @classmethod
    @overload
    def getLong(cls, string: str, long: int) -> int: ...
    @overload
    def hashCode(self) -> int: ...
    @classmethod
    @overload
    def hashCode(cls, long: int) -> int: ...
    @classmethod
    def highestOneBit(cls, long: int) -> int: ...
    def intValue(self) -> int: ...
    def longValue(self) -> int: ...
    @classmethod
    def lowestOneBit(cls, long: int) -> int: ...
    @classmethod
    def max(cls, long: int, long2: int) -> int: ...
    @classmethod
    def min(cls, long: int, long2: int) -> int: ...
    @classmethod
    def numberOfLeadingZeros(cls, long: int) -> int: ...
    @classmethod
    def numberOfTrailingZeros(cls, long: int) -> int: ...
    @classmethod
    @overload
    def parseLong(cls, string: str) -> int: ...
    @classmethod
    @overload
    def parseLong(cls, string: str, int: int) -> int: ...
    @classmethod
    @overload
    def parseUnsignedLong(cls, string: str) -> int: ...
    @classmethod
    @overload
    def parseUnsignedLong(cls, string: str, int: int) -> int: ...
    @classmethod
    def remainderUnsigned(cls, long: int, long2: int) -> int: ...
    @classmethod
    def reverse(cls, long: int) -> int: ...
    @classmethod
    def reverseBytes(cls, long: int) -> int: ...
    @classmethod
    def rotateLeft(cls, long: int, int: int) -> int: ...
    @classmethod
    def rotateRight(cls, long: int, int: int) -> int: ...
    def shortValue(self) -> int: ...
    @classmethod
    def signum(cls, long: int) -> int: ...
    @classmethod
    def sum(cls, long: int, long2: int) -> int: ...
    @classmethod
    def toBinaryString(cls, long: int) -> str: ...
    @classmethod
    def toHexString(cls, long: int) -> str: ...
    @classmethod
    def toOctalString(cls, long: int) -> str: ...
    @overload
    def toString(self) -> str: ...
    @classmethod
    @overload
    def toString(cls, long: int) -> str: ...
    @classmethod
    @overload
    def toString(cls, long: int, int: int) -> str: ...
    @classmethod
    @overload
    def toUnsignedString(cls, long: int) -> str: ...
    @classmethod
    @overload
    def toUnsignedString(cls, long: int, int: int) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str, int: int) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, long: int) -> int: ...

class ProcessImpl(Process):
    def destroy(self) -> None: ...
    def destroyForcibly(self) -> Process: ...
    def exitValue(self) -> int: ...
    def getErrorStream(self) -> java.io.InputStream: ...
    def getInputStream(self) -> java.io.InputStream: ...
    def getOutputStream(self) -> java.io.OutputStream: ...
    def isAlive(self) -> bool: ...
    @overload
    def waitFor(self, long: int, timeUnit: java.util.concurrent.TimeUnit) -> bool: ...
    @overload
    def waitFor(self) -> int: ...

class Short(Number, Comparable[int]):
    MIN_VALUE: _py_ClassVar[int] = ...
    MAX_VALUE: _py_ClassVar[int] = ...
    TYPE: _py_ClassVar[_py_Type] = ...
    SIZE: _py_ClassVar[int] = ...
    BYTES: _py_ClassVar[int] = ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, short: int): ...
    def byteValue(self) -> int: ...
    @classmethod
    def compare(cls, short: int, short2: int) -> int: ...
    @overload
    def compareTo(self, object: _py_Any) -> int: ...
    @overload
    def compareTo(self, short: int) -> int: ...
    @classmethod
    def decode(cls, string: str) -> int: ...
    def doubleValue(self) -> float: ...
    def equals(self, object: _py_Any) -> bool: ...
    def floatValue(self) -> float: ...
    @overload
    def hashCode(self) -> int: ...
    @classmethod
    @overload
    def hashCode(cls, short: int) -> int: ...
    def intValue(self) -> int: ...
    def longValue(self) -> int: ...
    @classmethod
    @overload
    def parseShort(cls, string: str) -> int: ...
    @classmethod
    @overload
    def parseShort(cls, string: str, int: int) -> int: ...
    @classmethod
    def reverseBytes(cls, short: int) -> int: ...
    def shortValue(self) -> int: ...
    @overload
    def toString(self) -> str: ...
    @classmethod
    @overload
    def toString(cls, short: int) -> str: ...
    @classmethod
    def toUnsignedInt(cls, short: int) -> int: ...
    @classmethod
    def toUnsignedLong(cls, short: int) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str, int: int) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, short: int) -> int: ...

class String(java.io.Serializable, Comparable[str], CharSequence):
    CASE_INSENSITIVE_ORDER: _py_ClassVar[java.util.Comparator] = ...
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, byteArray: _py_List[int]): ...
    @overload
    def __init__(self, byteArray: _py_List[int], int: int): ...
    @overload
    def __init__(self, byteArray: _py_List[int], int: int, int2: int): ...
    @overload
    def __init__(self, byteArray: _py_List[int], int: int, int2: int, int3: int): ...
    @overload
    def __init__(self, byteArray: _py_List[int], int: int, int2: int, string: str): ...
    @overload
    def __init__(self, byteArray: _py_List[int], int: int, int2: int, charset: java.nio.charset.Charset): ...
    @overload
    def __init__(self, byteArray: _py_List[int], string: str): ...
    @overload
    def __init__(self, byteArray: _py_List[int], charset: java.nio.charset.Charset): ...
    @overload
    def __init__(self, charArray: _py_List[str]): ...
    @overload
    def __init__(self, charArray: _py_List[str], int: int, int2: int): ...
    @overload
    def __init__(self, intArray: _py_List[int], int2: int, int3: int): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, stringBuffer: 'StringBuffer'): ...
    @overload
    def __init__(self, stringBuilder: 'StringBuilder'): ...
    def charAt(self, int: int) -> str: ...
    def codePointAt(self, int: int) -> int: ...
    def codePointBefore(self, int: int) -> int: ...
    def codePointCount(self, int: int, int2: int) -> int: ...
    @overload
    def compareTo(self, object: _py_Any) -> int: ...
    @overload
    def compareTo(self, string: str) -> int: ...
    def compareToIgnoreCase(self, string: str) -> int: ...
    def concat(self, string: str) -> str: ...
    def contains(self, charSequence: CharSequence) -> bool: ...
    @overload
    def contentEquals(self, charSequence: CharSequence) -> bool: ...
    @overload
    def contentEquals(self, stringBuffer: 'StringBuffer') -> bool: ...
    @classmethod
    @overload
    def copyValueOf(cls, charArray: _py_List[str]) -> str: ...
    @classmethod
    @overload
    def copyValueOf(cls, charArray: _py_List[str], int: int, int2: int) -> str: ...
    def endsWith(self, string: str) -> bool: ...
    def equals(self, object: _py_Any) -> bool: ...
    def equalsIgnoreCase(self, string: str) -> bool: ...
    @classmethod
    @overload
    def format(cls, string: str, objectArray: _py_List[_py_Any]) -> str: ...
    @classmethod
    @overload
    def format(cls, locale: java.util.Locale, string: str, objectArray: _py_List[_py_Any]) -> str: ...
    @overload
    def getBytes(self) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str) -> _py_List[int]: ...
    @overload
    def getBytes(self, charset: java.nio.charset.Charset) -> _py_List[int]: ...
    @overload
    def getBytes(self, int: int, int2: int, byteArray: _py_List[int], int3: int) -> None: ...
    def getChars(self, int: int, int2: int, charArray: _py_List[str], int3: int) -> None: ...
    def hashCode(self) -> int: ...
    @overload
    def indexOf(self, int: int) -> int: ...
    @overload
    def indexOf(self, int: int, int2: int) -> int: ...
    @overload
    def indexOf(self, string: str) -> int: ...
    @overload
    def indexOf(self, string: str, int: int) -> int: ...
    def intern(self) -> str: ...
    def isEmpty(self) -> bool: ...
    @classmethod
    @overload
    def join(cls, charSequence: CharSequence, charSequenceArray: _py_List[CharSequence]) -> str: ...
    @classmethod
    @overload
    def join(cls, charSequence: CharSequence, iterable: Iterable[CharSequence]) -> str: ...
    @overload
    def lastIndexOf(self, int: int) -> int: ...
    @overload
    def lastIndexOf(self, int: int, int2: int) -> int: ...
    @overload
    def lastIndexOf(self, string: str) -> int: ...
    @overload
    def lastIndexOf(self, string: str, int: int) -> int: ...
    def length(self) -> int: ...
    def matches(self, string: str) -> bool: ...
    def offsetByCodePoints(self, int: int, int2: int) -> int: ...
    @overload
    def regionMatches(self, boolean: bool, int: int, string: str, int2: int, int3: int) -> bool: ...
    @overload
    def regionMatches(self, int: int, string: str, int2: int, int3: int) -> bool: ...
    @overload
    def replace(self, char: str, char2: str) -> str: ...
    @overload
    def replace(self, charSequence: CharSequence, charSequence2: CharSequence) -> str: ...
    def replaceAll(self, string: str, string2: str) -> str: ...
    def replaceFirst(self, string: str, string2: str) -> str: ...
    @overload
    def split(self, string: str) -> _py_List[str]: ...
    @overload
    def split(self, string: str, int: int) -> _py_List[str]: ...
    @overload
    def startsWith(self, string: str) -> bool: ...
    @overload
    def startsWith(self, string: str, int: int) -> bool: ...
    def subSequence(self, int: int, int2: int) -> CharSequence: ...
    @overload
    def substring(self, int: int) -> str: ...
    @overload
    def substring(self, int: int, int2: int) -> str: ...
    def toCharArray(self) -> _py_List[str]: ...
    @overload
    def toLowerCase(self) -> str: ...
    @overload
    def toLowerCase(self, locale: java.util.Locale) -> str: ...
    def toString(self) -> str: ...
    @overload
    def toUpperCase(self) -> str: ...
    @overload
    def toUpperCase(self, locale: java.util.Locale) -> str: ...
    def trim(self) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, boolean: bool) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, char: str) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, charArray: _py_List[str]) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, charArray: _py_List[str], int: int, int2: int) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, double: float) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, float: float) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, int: int) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, object: _py_Any) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, long: int) -> str: ...

class AssertionError(Error):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, boolean: bool): ...
    @overload
    def __init__(self, char: str): ...
    @overload
    def __init__(self, double: float): ...
    @overload
    def __init__(self, float: float): ...
    @overload
    def __init__(self, int: int): ...
    @overload
    def __init__(self, object: _py_Any): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, long: int): ...

class CloneNotSupportedException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class InterruptedException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class LinkageError(Error):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...

class ProcessBuilder:
    @overload
    def __init__(self, stringArray: _py_List[str]): ...
    @overload
    def __init__(self, list: java.util.List[str]): ...
    @overload
    def command(self, stringArray: _py_List[str]) -> 'ProcessBuilder': ...
    @overload
    def command(self, list: java.util.List[str]) -> 'ProcessBuilder': ...
    @overload
    def command(self) -> java.util.List[str]: ...
    @overload
    def directory(self) -> java.io.File: ...
    @overload
    def directory(self, file: java.io.File) -> 'ProcessBuilder': ...
    def environment(self) -> java.util.Map[str, str]: ...
    def inheritIO(self) -> 'ProcessBuilder': ...
    @overload
    def redirectError(self, file: java.io.File) -> 'ProcessBuilder': ...
    @overload
    def redirectError(self, redirect: 'ProcessBuilder.Redirect') -> 'ProcessBuilder': ...
    @overload
    def redirectError(self) -> 'ProcessBuilder.Redirect': ...
    @overload
    def redirectErrorStream(self) -> bool: ...
    @overload
    def redirectErrorStream(self, boolean: bool) -> 'ProcessBuilder': ...
    @overload
    def redirectInput(self, file: java.io.File) -> 'ProcessBuilder': ...
    @overload
    def redirectInput(self, redirect: 'ProcessBuilder.Redirect') -> 'ProcessBuilder': ...
    @overload
    def redirectInput(self) -> 'ProcessBuilder.Redirect': ...
    @overload
    def redirectOutput(self, file: java.io.File) -> 'ProcessBuilder': ...
    @overload
    def redirectOutput(self, redirect: 'ProcessBuilder.Redirect') -> 'ProcessBuilder': ...
    @overload
    def redirectOutput(self) -> 'ProcessBuilder.Redirect': ...
    def start(self) -> Process: ...
    class Redirect:
        PIPE: _py_ClassVar['ProcessBuilder.Redirect'] = ...
        INHERIT: _py_ClassVar['ProcessBuilder.Redirect'] = ...
        @classmethod
        def appendTo(cls, file: java.io.File) -> 'ProcessBuilder.Redirect': ...
        def equals(self, object: _py_Any) -> bool: ...
        def file(self) -> java.io.File: ...
        def hashCode(self) -> int: ...
        @classmethod
        def to(cls, file: java.io.File) -> 'ProcessBuilder.Redirect': ...
        def type(self) -> 'ProcessBuilder.Redirect.Type': ...
        class Type(Enum['ProcessBuilder.Redirect.Type']):
            PIPE: _py_ClassVar['ProcessBuilder.Redirect.Type'] = ...
            INHERIT: _py_ClassVar['ProcessBuilder.Redirect.Type'] = ...
            READ: _py_ClassVar['ProcessBuilder.Redirect.Type'] = ...
            WRITE: _py_ClassVar['ProcessBuilder.Redirect.Type'] = ...
            APPEND: _py_ClassVar['ProcessBuilder.Redirect.Type'] = ...
            _valueOf_0__T = _py_TypeVar('_valueOf_0__T', bound=Enum)  # <T>
            @classmethod
            @overload
            def valueOf(cls, class_: _py_Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
            @classmethod
            @overload
            def valueOf(cls, string: str) -> 'ProcessBuilder.Redirect.Type': ...
            @classmethod
            def values(cls) -> _py_List['ProcessBuilder.Redirect.Type']: ...

class ReflectiveOperationException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, throwable: Throwable): ...

class RuntimeException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, throwable: Throwable): ...

class StringBuffer(AbstractStringBuilder, java.io.Serializable, CharSequence):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, int: int): ...
    @overload
    def __init__(self, charSequence: CharSequence): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def append(self, boolean: bool) -> AbstractStringBuilder: ...
    @overload
    def append(self, char: str) -> AbstractStringBuilder: ...
    @overload
    def append(self, charArray: _py_List[str]) -> AbstractStringBuilder: ...
    @overload
    def append(self, charArray: _py_List[str], int: int, int2: int) -> AbstractStringBuilder: ...
    @overload
    def append(self, double: float) -> AbstractStringBuilder: ...
    @overload
    def append(self, float: float) -> AbstractStringBuilder: ...
    @overload
    def append(self, int: int) -> AbstractStringBuilder: ...
    @overload
    def append(self, charSequence: CharSequence) -> AbstractStringBuilder: ...
    @overload
    def append(self, charSequence: CharSequence, int: int, int2: int) -> AbstractStringBuilder: ...
    @overload
    def append(self, object: _py_Any) -> AbstractStringBuilder: ...
    @overload
    def append(self, string: str) -> AbstractStringBuilder: ...
    @overload
    def append(self, stringBuffer: 'StringBuffer') -> AbstractStringBuilder: ...
    @overload
    def append(self, long: int) -> AbstractStringBuilder: ...
    @overload
    def append(self, char: str) -> Appendable: ...
    @overload
    def append(self, charSequence: CharSequence) -> Appendable: ...
    @overload
    def append(self, charSequence: CharSequence, int: int, int2: int) -> Appendable: ...
    @overload
    def append(self, boolean: bool) -> 'StringBuffer': ...
    @overload
    def append(self, char: str) -> 'StringBuffer': ...
    @overload
    def append(self, charArray: _py_List[str]) -> 'StringBuffer': ...
    @overload
    def append(self, charArray: _py_List[str], int: int, int2: int) -> 'StringBuffer': ...
    @overload
    def append(self, double: float) -> 'StringBuffer': ...
    @overload
    def append(self, float: float) -> 'StringBuffer': ...
    @overload
    def append(self, int: int) -> 'StringBuffer': ...
    @overload
    def append(self, charSequence: CharSequence) -> 'StringBuffer': ...
    @overload
    def append(self, charSequence: CharSequence, int: int, int2: int) -> 'StringBuffer': ...
    @overload
    def append(self, object: _py_Any) -> 'StringBuffer': ...
    @overload
    def append(self, string: str) -> 'StringBuffer': ...
    @overload
    def append(self, stringBuffer: 'StringBuffer') -> 'StringBuffer': ...
    @overload
    def append(self, long: int) -> 'StringBuffer': ...
    @overload
    def appendCodePoint(self, int: int) -> AbstractStringBuilder: ...
    @overload
    def appendCodePoint(self, int: int) -> 'StringBuffer': ...
    def capacity(self) -> int: ...
    def charAt(self, int: int) -> str: ...
    def codePointAt(self, int: int) -> int: ...
    def codePointBefore(self, int: int) -> int: ...
    def codePointCount(self, int: int, int2: int) -> int: ...
    @overload
    def delete(self, int: int, int2: int) -> AbstractStringBuilder: ...
    @overload
    def delete(self, int: int, int2: int) -> 'StringBuffer': ...
    @overload
    def deleteCharAt(self, int: int) -> AbstractStringBuilder: ...
    @overload
    def deleteCharAt(self, int: int) -> 'StringBuffer': ...
    def ensureCapacity(self, int: int) -> None: ...
    def getChars(self, int: int, int2: int, charArray: _py_List[str], int3: int) -> None: ...
    @overload
    def indexOf(self, string: str) -> int: ...
    @overload
    def indexOf(self, string: str, int: int) -> int: ...
    @overload
    def insert(self, int: int, boolean: bool) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, char: str) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, charArray: _py_List[str]) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, charArray: _py_List[str], int2: int, int3: int) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, double: float) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, float: float) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, int2: int) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, charSequence: CharSequence) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, charSequence: CharSequence, int2: int, int3: int) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, object: _py_Any) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, string: str) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, long: int) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, boolean: bool) -> 'StringBuffer': ...
    @overload
    def insert(self, int: int, double: float) -> 'StringBuffer': ...
    @overload
    def insert(self, int: int, float: float) -> 'StringBuffer': ...
    @overload
    def insert(self, int: int, int2: int) -> 'StringBuffer': ...
    @overload
    def insert(self, int: int, charSequence: CharSequence) -> 'StringBuffer': ...
    @overload
    def insert(self, int: int, long: int) -> 'StringBuffer': ...
    @overload
    def insert(self, int: int, char: str) -> 'StringBuffer': ...
    @overload
    def insert(self, int: int, charArray: _py_List[str]) -> 'StringBuffer': ...
    @overload
    def insert(self, int: int, charArray: _py_List[str], int2: int, int3: int) -> 'StringBuffer': ...
    @overload
    def insert(self, int: int, charSequence: CharSequence, int2: int, int3: int) -> 'StringBuffer': ...
    @overload
    def insert(self, int: int, object: _py_Any) -> 'StringBuffer': ...
    @overload
    def insert(self, int: int, string: str) -> 'StringBuffer': ...
    @overload
    def lastIndexOf(self, string: str) -> int: ...
    @overload
    def lastIndexOf(self, string: str, int: int) -> int: ...
    def length(self) -> int: ...
    def offsetByCodePoints(self, int: int, int2: int) -> int: ...
    @overload
    def replace(self, int: int, int2: int, string: str) -> AbstractStringBuilder: ...
    @overload
    def replace(self, int: int, int2: int, string: str) -> 'StringBuffer': ...
    @overload
    def reverse(self) -> AbstractStringBuilder: ...
    @overload
    def reverse(self) -> 'StringBuffer': ...
    def setCharAt(self, int: int, char: str) -> None: ...
    def setLength(self, int: int) -> None: ...
    def subSequence(self, int: int, int2: int) -> CharSequence: ...
    @overload
    def substring(self, int: int) -> str: ...
    @overload
    def substring(self, int: int, int2: int) -> str: ...
    def toString(self) -> str: ...
    def trimToSize(self) -> None: ...

class StringBuilder(AbstractStringBuilder, java.io.Serializable, CharSequence):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, int: int): ...
    @overload
    def __init__(self, charSequence: CharSequence): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def append(self, boolean: bool) -> AbstractStringBuilder: ...
    @overload
    def append(self, char: str) -> AbstractStringBuilder: ...
    @overload
    def append(self, charArray: _py_List[str]) -> AbstractStringBuilder: ...
    @overload
    def append(self, charArray: _py_List[str], int: int, int2: int) -> AbstractStringBuilder: ...
    @overload
    def append(self, double: float) -> AbstractStringBuilder: ...
    @overload
    def append(self, float: float) -> AbstractStringBuilder: ...
    @overload
    def append(self, int: int) -> AbstractStringBuilder: ...
    @overload
    def append(self, charSequence: CharSequence) -> AbstractStringBuilder: ...
    @overload
    def append(self, charSequence: CharSequence, int: int, int2: int) -> AbstractStringBuilder: ...
    @overload
    def append(self, object: _py_Any) -> AbstractStringBuilder: ...
    @overload
    def append(self, string: str) -> AbstractStringBuilder: ...
    @overload
    def append(self, stringBuffer: StringBuffer) -> AbstractStringBuilder: ...
    @overload
    def append(self, long: int) -> AbstractStringBuilder: ...
    @overload
    def append(self, char: str) -> Appendable: ...
    @overload
    def append(self, charSequence: CharSequence) -> Appendable: ...
    @overload
    def append(self, charSequence: CharSequence, int: int, int2: int) -> Appendable: ...
    @overload
    def append(self, boolean: bool) -> 'StringBuilder': ...
    @overload
    def append(self, char: str) -> 'StringBuilder': ...
    @overload
    def append(self, charArray: _py_List[str]) -> 'StringBuilder': ...
    @overload
    def append(self, charArray: _py_List[str], int: int, int2: int) -> 'StringBuilder': ...
    @overload
    def append(self, double: float) -> 'StringBuilder': ...
    @overload
    def append(self, float: float) -> 'StringBuilder': ...
    @overload
    def append(self, int: int) -> 'StringBuilder': ...
    @overload
    def append(self, charSequence: CharSequence) -> 'StringBuilder': ...
    @overload
    def append(self, charSequence: CharSequence, int: int, int2: int) -> 'StringBuilder': ...
    @overload
    def append(self, object: _py_Any) -> 'StringBuilder': ...
    @overload
    def append(self, string: str) -> 'StringBuilder': ...
    @overload
    def append(self, stringBuffer: StringBuffer) -> 'StringBuilder': ...
    @overload
    def append(self, long: int) -> 'StringBuilder': ...
    @overload
    def appendCodePoint(self, int: int) -> AbstractStringBuilder: ...
    @overload
    def appendCodePoint(self, int: int) -> 'StringBuilder': ...
    def capacity(self) -> int: ...
    def charAt(self, int: int) -> str: ...
    def codePointAt(self, int: int) -> int: ...
    def codePointBefore(self, int: int) -> int: ...
    def codePointCount(self, int: int, int2: int) -> int: ...
    @overload
    def delete(self, int: int, int2: int) -> AbstractStringBuilder: ...
    @overload
    def delete(self, int: int, int2: int) -> 'StringBuilder': ...
    @overload
    def deleteCharAt(self, int: int) -> AbstractStringBuilder: ...
    @overload
    def deleteCharAt(self, int: int) -> 'StringBuilder': ...
    def ensureCapacity(self, int: int) -> None: ...
    def getChars(self, int: int, int2: int, charArray: _py_List[str], int3: int) -> None: ...
    @overload
    def indexOf(self, string: str) -> int: ...
    @overload
    def indexOf(self, string: str, int: int) -> int: ...
    @overload
    def insert(self, int: int, boolean: bool) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, char: str) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, charArray: _py_List[str]) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, charArray: _py_List[str], int2: int, int3: int) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, double: float) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, float: float) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, int2: int) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, charSequence: CharSequence) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, charSequence: CharSequence, int2: int, int3: int) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, object: _py_Any) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, string: str) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, long: int) -> AbstractStringBuilder: ...
    @overload
    def insert(self, int: int, boolean: bool) -> 'StringBuilder': ...
    @overload
    def insert(self, int: int, char: str) -> 'StringBuilder': ...
    @overload
    def insert(self, int: int, charArray: _py_List[str]) -> 'StringBuilder': ...
    @overload
    def insert(self, int: int, charArray: _py_List[str], int2: int, int3: int) -> 'StringBuilder': ...
    @overload
    def insert(self, int: int, double: float) -> 'StringBuilder': ...
    @overload
    def insert(self, int: int, float: float) -> 'StringBuilder': ...
    @overload
    def insert(self, int: int, int2: int) -> 'StringBuilder': ...
    @overload
    def insert(self, int: int, charSequence: CharSequence) -> 'StringBuilder': ...
    @overload
    def insert(self, int: int, charSequence: CharSequence, int2: int, int3: int) -> 'StringBuilder': ...
    @overload
    def insert(self, int: int, object: _py_Any) -> 'StringBuilder': ...
    @overload
    def insert(self, int: int, string: str) -> 'StringBuilder': ...
    @overload
    def insert(self, int: int, long: int) -> 'StringBuilder': ...
    @overload
    def lastIndexOf(self, string: str) -> int: ...
    @overload
    def lastIndexOf(self, string: str, int: int) -> int: ...
    def length(self) -> int: ...
    def offsetByCodePoints(self, int: int, int2: int) -> int: ...
    @overload
    def replace(self, int: int, int2: int, string: str) -> AbstractStringBuilder: ...
    @overload
    def replace(self, int: int, int2: int, string: str) -> 'StringBuilder': ...
    @overload
    def reverse(self) -> AbstractStringBuilder: ...
    @overload
    def reverse(self) -> 'StringBuilder': ...
    def setCharAt(self, int: int, char: str) -> None: ...
    def setLength(self, int: int) -> None: ...
    def subSequence(self, int: int, int2: int) -> CharSequence: ...
    @overload
    def substring(self, int: int) -> str: ...
    @overload
    def substring(self, int: int, int2: int) -> str: ...
    def toString(self) -> str: ...
    def trimToSize(self) -> None: ...

class Thread(Runnable):
    MIN_PRIORITY: _py_ClassVar[int] = ...
    NORM_PRIORITY: _py_ClassVar[int] = ...
    MAX_PRIORITY: _py_ClassVar[int] = ...
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, runnable: Runnable): ...
    @overload
    def __init__(self, runnable: Runnable, string: str): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, threadGroup: 'ThreadGroup', runnable: Runnable): ...
    @overload
    def __init__(self, threadGroup: 'ThreadGroup', runnable: Runnable, string: str): ...
    @overload
    def __init__(self, threadGroup: 'ThreadGroup', runnable: Runnable, string: str, long: int): ...
    @overload
    def __init__(self, threadGroup: 'ThreadGroup', string: str): ...
    @classmethod
    def activeCount(cls) -> int: ...
    def checkAccess(self) -> None: ...
    def countStackFrames(self) -> int: ...
    @classmethod
    def currentThread(cls) -> 'Thread': ...
    def destroy(self) -> None: ...
    @classmethod
    def dumpStack(cls) -> None: ...
    @classmethod
    def enumerate(cls, threadArray: _py_List['Thread']) -> int: ...
    @classmethod
    def getAllStackTraces(cls) -> java.util.Map['Thread', _py_List[StackTraceElement]]: ...
    def getContextClassLoader(self) -> ClassLoader: ...
    @classmethod
    def getDefaultUncaughtExceptionHandler(cls) -> 'Thread.UncaughtExceptionHandler': ...
    def getId(self) -> int: ...
    def getName(self) -> str: ...
    def getPriority(self) -> int: ...
    def getStackTrace(self) -> _py_List[StackTraceElement]: ...
    def getState(self) -> 'Thread.State': ...
    def getThreadGroup(self) -> 'ThreadGroup': ...
    def getUncaughtExceptionHandler(self) -> 'Thread.UncaughtExceptionHandler': ...
    @classmethod
    def holdsLock(cls, object: _py_Any) -> bool: ...
    def interrupt(self) -> None: ...
    @classmethod
    def interrupted(cls) -> bool: ...
    def isAlive(self) -> bool: ...
    def isDaemon(self) -> bool: ...
    def isInterrupted(self) -> bool: ...
    @overload
    def join(self, long: int) -> None: ...
    @overload
    def join(self, long: int, int: int) -> None: ...
    @overload
    def join(self) -> None: ...
    def resume(self) -> None: ...
    def run(self) -> None: ...
    def setContextClassLoader(self, classLoader: ClassLoader) -> None: ...
    def setDaemon(self, boolean: bool) -> None: ...
    @classmethod
    def setDefaultUncaughtExceptionHandler(cls, uncaughtExceptionHandler: 'Thread.UncaughtExceptionHandler') -> None: ...
    def setName(self, string: str) -> None: ...
    def setPriority(self, int: int) -> None: ...
    def setUncaughtExceptionHandler(self, uncaughtExceptionHandler: 'Thread.UncaughtExceptionHandler') -> None: ...
    @classmethod
    @overload
    def sleep(cls, long: int) -> None: ...
    @classmethod
    @overload
    def sleep(cls, long: int, int: int) -> None: ...
    def start(self) -> None: ...
    @overload
    def stop(self, throwable: Throwable) -> None: ...
    @overload
    def stop(self) -> None: ...
    def suspend(self) -> None: ...
    def toString(self) -> str: ...
    class State(Enum['Thread.State']):
        NEW: _py_ClassVar['Thread.State'] = ...
        RUNNABLE: _py_ClassVar['Thread.State'] = ...
        BLOCKED: _py_ClassVar['Thread.State'] = ...
        WAITING: _py_ClassVar['Thread.State'] = ...
        TIMED_WAITING: _py_ClassVar['Thread.State'] = ...
        TERMINATED: _py_ClassVar['Thread.State'] = ...
        _valueOf_0__T = _py_TypeVar('_valueOf_0__T', bound=Enum)  # <T>
        @classmethod
        @overload
        def valueOf(cls, class_: _py_Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @classmethod
        @overload
        def valueOf(cls, string: str) -> 'Thread.State': ...
        @classmethod
        def values(cls) -> _py_List['Thread.State']: ...
    class UncaughtExceptionHandler:
        def uncaughtException(self, thread: 'Thread', throwable: Throwable) -> None: ...

class ThreadDeath(Error):
    def __init__(self): ...

class VirtualMachineError(Error):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, throwable: Throwable): ...

class ArithmeticException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class ArrayStoreException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class BootstrapMethodError(LinkageError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, throwable: Throwable): ...

class ClassCastException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class ClassCircularityError(LinkageError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class ClassFormatError(LinkageError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class ClassNotFoundException(ReflectiveOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    def getCause(self) -> Throwable: ...
    def getException(self) -> Throwable: ...

class EnumConstantNotPresentException(RuntimeException):
    def __init__(self, class_: _py_Type[Enum], string: str): ...
    def constantName(self) -> str: ...
    def enumType(self) -> _py_Type[Enum]: ...

class ExceptionInInitializerError(LinkageError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, throwable: Throwable): ...
    def getCause(self) -> Throwable: ...
    def getException(self) -> Throwable: ...

class IllegalAccessException(ReflectiveOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class IllegalArgumentException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, throwable: Throwable): ...

class IllegalMonitorStateException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class IllegalStateException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, throwable: Throwable): ...

class IncompatibleClassChangeError(LinkageError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class IndexOutOfBoundsException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class InstantiationException(ReflectiveOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class InternalError(VirtualMachineError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, throwable: Throwable): ...

class NegativeArraySizeException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class NoClassDefFoundError(LinkageError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class NoSuchFieldException(ReflectiveOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class NoSuchMethodException(ReflectiveOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class NullPointerException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class OutOfMemoryError(VirtualMachineError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class SecurityException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, throwable: Throwable): ...

class StackOverflowError(VirtualMachineError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class TypeNotPresentException(RuntimeException):
    def __init__(self, string: str, throwable: Throwable): ...
    def typeName(self) -> str: ...

class UnknownError(VirtualMachineError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class UnsatisfiedLinkError(LinkageError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class UnsupportedOperationException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, string: str, throwable: Throwable): ...
    @overload
    def __init__(self, throwable: Throwable): ...

class VerifyError(LinkageError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class AbstractMethodError(IncompatibleClassChangeError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class ArrayIndexOutOfBoundsException(IndexOutOfBoundsException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, int: int): ...
    @overload
    def __init__(self, string: str): ...

class IllegalAccessError(IncompatibleClassChangeError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class IllegalThreadStateException(IllegalArgumentException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class InstantiationError(IncompatibleClassChangeError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class NoSuchFieldError(IncompatibleClassChangeError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class NoSuchMethodError(IncompatibleClassChangeError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class NumberFormatException(IllegalArgumentException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class StringIndexOutOfBoundsException(IndexOutOfBoundsException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, int: int): ...
    @overload
    def __init__(self, string: str): ...

class UnsupportedClassVersionError(ClassFormatError):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...

class Character(java.io.Serializable, Comparable[str]):
    MIN_RADIX: _py_ClassVar[int] = ...
    MAX_RADIX: _py_ClassVar[int] = ...
    MIN_VALUE: _py_ClassVar[str] = ...
    MAX_VALUE: _py_ClassVar[str] = ...
    TYPE: _py_ClassVar[_py_Type] = ...
    UNASSIGNED: _py_ClassVar[int] = ...
    UPPERCASE_LETTER: _py_ClassVar[int] = ...
    LOWERCASE_LETTER: _py_ClassVar[int] = ...
    TITLECASE_LETTER: _py_ClassVar[int] = ...
    MODIFIER_LETTER: _py_ClassVar[int] = ...
    OTHER_LETTER: _py_ClassVar[int] = ...
    NON_SPACING_MARK: _py_ClassVar[int] = ...
    ENCLOSING_MARK: _py_ClassVar[int] = ...
    COMBINING_SPACING_MARK: _py_ClassVar[int] = ...
    DECIMAL_DIGIT_NUMBER: _py_ClassVar[int] = ...
    LETTER_NUMBER: _py_ClassVar[int] = ...
    OTHER_NUMBER: _py_ClassVar[int] = ...
    SPACE_SEPARATOR: _py_ClassVar[int] = ...
    LINE_SEPARATOR: _py_ClassVar[int] = ...
    PARAGRAPH_SEPARATOR: _py_ClassVar[int] = ...
    CONTROL: _py_ClassVar[int] = ...
    FORMAT: _py_ClassVar[int] = ...
    PRIVATE_USE: _py_ClassVar[int] = ...
    SURROGATE: _py_ClassVar[int] = ...
    DASH_PUNCTUATION: _py_ClassVar[int] = ...
    START_PUNCTUATION: _py_ClassVar[int] = ...
    END_PUNCTUATION: _py_ClassVar[int] = ...
    CONNECTOR_PUNCTUATION: _py_ClassVar[int] = ...
    OTHER_PUNCTUATION: _py_ClassVar[int] = ...
    MATH_SYMBOL: _py_ClassVar[int] = ...
    CURRENCY_SYMBOL: _py_ClassVar[int] = ...
    MODIFIER_SYMBOL: _py_ClassVar[int] = ...
    OTHER_SYMBOL: _py_ClassVar[int] = ...
    INITIAL_QUOTE_PUNCTUATION: _py_ClassVar[int] = ...
    FINAL_QUOTE_PUNCTUATION: _py_ClassVar[int] = ...
    DIRECTIONALITY_UNDEFINED: _py_ClassVar[int] = ...
    DIRECTIONALITY_LEFT_TO_RIGHT: _py_ClassVar[int] = ...
    DIRECTIONALITY_RIGHT_TO_LEFT: _py_ClassVar[int] = ...
    DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC: _py_ClassVar[int] = ...
    DIRECTIONALITY_EUROPEAN_NUMBER: _py_ClassVar[int] = ...
    DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR: _py_ClassVar[int] = ...
    DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR: _py_ClassVar[int] = ...
    DIRECTIONALITY_ARABIC_NUMBER: _py_ClassVar[int] = ...
    DIRECTIONALITY_COMMON_NUMBER_SEPARATOR: _py_ClassVar[int] = ...
    DIRECTIONALITY_NONSPACING_MARK: _py_ClassVar[int] = ...
    DIRECTIONALITY_BOUNDARY_NEUTRAL: _py_ClassVar[int] = ...
    DIRECTIONALITY_PARAGRAPH_SEPARATOR: _py_ClassVar[int] = ...
    DIRECTIONALITY_SEGMENT_SEPARATOR: _py_ClassVar[int] = ...
    DIRECTIONALITY_WHITESPACE: _py_ClassVar[int] = ...
    DIRECTIONALITY_OTHER_NEUTRALS: _py_ClassVar[int] = ...
    DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING: _py_ClassVar[int] = ...
    DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE: _py_ClassVar[int] = ...
    DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING: _py_ClassVar[int] = ...
    DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE: _py_ClassVar[int] = ...
    DIRECTIONALITY_POP_DIRECTIONAL_FORMAT: _py_ClassVar[int] = ...
    MIN_HIGH_SURROGATE: _py_ClassVar[str] = ...
    MAX_HIGH_SURROGATE: _py_ClassVar[str] = ...
    MIN_LOW_SURROGATE: _py_ClassVar[str] = ...
    MAX_LOW_SURROGATE: _py_ClassVar[str] = ...
    MIN_SURROGATE: _py_ClassVar[str] = ...
    MAX_SURROGATE: _py_ClassVar[str] = ...
    MIN_SUPPLEMENTARY_CODE_POINT: _py_ClassVar[int] = ...
    MIN_CODE_POINT: _py_ClassVar[int] = ...
    MAX_CODE_POINT: _py_ClassVar[int] = ...
    SIZE: _py_ClassVar[int] = ...
    BYTES: _py_ClassVar[int] = ...
    def __init__(self, char: str): ...
    @classmethod
    def charCount(cls, int: int) -> int: ...
    def charValue(self) -> str: ...
    @classmethod
    @overload
    def codePointAt(cls, charArray: _py_List[str], int: int) -> int: ...
    @classmethod
    @overload
    def codePointAt(cls, charArray: _py_List[str], int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def codePointAt(cls, charSequence: CharSequence, int: int) -> int: ...
    @classmethod
    @overload
    def codePointBefore(cls, charArray: _py_List[str], int: int) -> int: ...
    @classmethod
    @overload
    def codePointBefore(cls, charArray: _py_List[str], int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def codePointBefore(cls, charSequence: CharSequence, int: int) -> int: ...
    @classmethod
    @overload
    def codePointCount(cls, charArray: _py_List[str], int: int, int2: int) -> int: ...
    @classmethod
    @overload
    def codePointCount(cls, charSequence: CharSequence, int: int, int2: int) -> int: ...
    @classmethod
    def compare(cls, char: str, char2: str) -> int: ...
    @overload
    def compareTo(self, character: str) -> int: ...
    @overload
    def compareTo(self, object: _py_Any) -> int: ...
    @classmethod
    @overload
    def digit(cls, char: str, int: int) -> int: ...
    @classmethod
    @overload
    def digit(cls, int: int, int2: int) -> int: ...
    def equals(self, object: _py_Any) -> bool: ...
    @classmethod
    def forDigit(cls, int: int, int2: int) -> str: ...
    @classmethod
    @overload
    def getDirectionality(cls, char: str) -> int: ...
    @classmethod
    @overload
    def getDirectionality(cls, int: int) -> int: ...
    @classmethod
    def getName(cls, int: int) -> str: ...
    @classmethod
    @overload
    def getNumericValue(cls, char: str) -> int: ...
    @classmethod
    @overload
    def getNumericValue(cls, int: int) -> int: ...
    @classmethod
    @overload
    def getType(cls, char: str) -> int: ...
    @classmethod
    @overload
    def getType(cls, int: int) -> int: ...
    @overload
    def hashCode(self) -> int: ...
    @classmethod
    @overload
    def hashCode(cls, char: str) -> int: ...
    @classmethod
    def highSurrogate(cls, int: int) -> str: ...
    @classmethod
    def isAlphabetic(cls, int: int) -> bool: ...
    @classmethod
    def isBmpCodePoint(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def isDefined(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isDefined(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def isDigit(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isDigit(cls, int: int) -> bool: ...
    @classmethod
    def isHighSurrogate(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isISOControl(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isISOControl(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def isIdentifierIgnorable(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isIdentifierIgnorable(cls, int: int) -> bool: ...
    @classmethod
    def isIdeographic(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def isJavaIdentifierPart(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isJavaIdentifierPart(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def isJavaIdentifierStart(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isJavaIdentifierStart(cls, int: int) -> bool: ...
    @classmethod
    def isJavaLetter(cls, char: str) -> bool: ...
    @classmethod
    def isJavaLetterOrDigit(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isLetter(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isLetter(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def isLetterOrDigit(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isLetterOrDigit(cls, int: int) -> bool: ...
    @classmethod
    def isLowSurrogate(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isLowerCase(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isLowerCase(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def isMirrored(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isMirrored(cls, int: int) -> bool: ...
    @classmethod
    def isSpace(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isSpaceChar(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isSpaceChar(cls, int: int) -> bool: ...
    @classmethod
    def isSupplementaryCodePoint(cls, int: int) -> bool: ...
    @classmethod
    def isSurrogate(cls, char: str) -> bool: ...
    @classmethod
    def isSurrogatePair(cls, char: str, char2: str) -> bool: ...
    @classmethod
    @overload
    def isTitleCase(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isTitleCase(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def isUnicodeIdentifierPart(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isUnicodeIdentifierPart(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def isUnicodeIdentifierStart(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isUnicodeIdentifierStart(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def isUpperCase(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isUpperCase(cls, int: int) -> bool: ...
    @classmethod
    def isValidCodePoint(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def isWhitespace(cls, char: str) -> bool: ...
    @classmethod
    @overload
    def isWhitespace(cls, int: int) -> bool: ...
    @classmethod
    def lowSurrogate(cls, int: int) -> str: ...
    @classmethod
    @overload
    def offsetByCodePoints(cls, charArray: _py_List[str], int: int, int2: int, int3: int, int4: int) -> int: ...
    @classmethod
    @overload
    def offsetByCodePoints(cls, charSequence: CharSequence, int: int, int2: int) -> int: ...
    @classmethod
    def reverseBytes(cls, char: str) -> str: ...
    @classmethod
    @overload
    def toChars(cls, int: int) -> _py_List[str]: ...
    @classmethod
    @overload
    def toChars(cls, int: int, charArray: _py_List[str], int2: int) -> int: ...
    @classmethod
    def toCodePoint(cls, char: str, char2: str) -> int: ...
    @classmethod
    @overload
    def toLowerCase(cls, char: str) -> str: ...
    @classmethod
    @overload
    def toLowerCase(cls, int: int) -> int: ...
    @overload
    def toString(self) -> str: ...
    @classmethod
    @overload
    def toString(cls, char: str) -> str: ...
    @classmethod
    @overload
    def toTitleCase(cls, char: str) -> str: ...
    @classmethod
    @overload
    def toTitleCase(cls, int: int) -> int: ...
    @classmethod
    @overload
    def toUpperCase(cls, char: str) -> str: ...
    @classmethod
    @overload
    def toUpperCase(cls, int: int) -> int: ...
    @classmethod
    def valueOf(cls, char: str) -> str: ...
    class Subset:
        def equals(self, object: _py_Any) -> bool: ...
        def hashCode(self) -> int: ...
        def toString(self) -> str: ...
    class UnicodeBlock(java.lang.Character.Subset):
        BASIC_LATIN: _py_ClassVar['Character.UnicodeBlock'] = ...
        LATIN_1_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        LATIN_EXTENDED_A: _py_ClassVar['Character.UnicodeBlock'] = ...
        LATIN_EXTENDED_B: _py_ClassVar['Character.UnicodeBlock'] = ...
        IPA_EXTENSIONS: _py_ClassVar['Character.UnicodeBlock'] = ...
        SPACING_MODIFIER_LETTERS: _py_ClassVar['Character.UnicodeBlock'] = ...
        COMBINING_DIACRITICAL_MARKS: _py_ClassVar['Character.UnicodeBlock'] = ...
        GREEK: _py_ClassVar['Character.UnicodeBlock'] = ...
        CYRILLIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        ARMENIAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        HEBREW: _py_ClassVar['Character.UnicodeBlock'] = ...
        ARABIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        DEVANAGARI: _py_ClassVar['Character.UnicodeBlock'] = ...
        BENGALI: _py_ClassVar['Character.UnicodeBlock'] = ...
        GURMUKHI: _py_ClassVar['Character.UnicodeBlock'] = ...
        GUJARATI: _py_ClassVar['Character.UnicodeBlock'] = ...
        ORIYA: _py_ClassVar['Character.UnicodeBlock'] = ...
        TAMIL: _py_ClassVar['Character.UnicodeBlock'] = ...
        TELUGU: _py_ClassVar['Character.UnicodeBlock'] = ...
        KANNADA: _py_ClassVar['Character.UnicodeBlock'] = ...
        MALAYALAM: _py_ClassVar['Character.UnicodeBlock'] = ...
        THAI: _py_ClassVar['Character.UnicodeBlock'] = ...
        LAO: _py_ClassVar['Character.UnicodeBlock'] = ...
        TIBETAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        GEORGIAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        HANGUL_JAMO: _py_ClassVar['Character.UnicodeBlock'] = ...
        LATIN_EXTENDED_ADDITIONAL: _py_ClassVar['Character.UnicodeBlock'] = ...
        GREEK_EXTENDED: _py_ClassVar['Character.UnicodeBlock'] = ...
        GENERAL_PUNCTUATION: _py_ClassVar['Character.UnicodeBlock'] = ...
        SUPERSCRIPTS_AND_SUBSCRIPTS: _py_ClassVar['Character.UnicodeBlock'] = ...
        CURRENCY_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        COMBINING_MARKS_FOR_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        LETTERLIKE_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        NUMBER_FORMS: _py_ClassVar['Character.UnicodeBlock'] = ...
        ARROWS: _py_ClassVar['Character.UnicodeBlock'] = ...
        MATHEMATICAL_OPERATORS: _py_ClassVar['Character.UnicodeBlock'] = ...
        MISCELLANEOUS_TECHNICAL: _py_ClassVar['Character.UnicodeBlock'] = ...
        CONTROL_PICTURES: _py_ClassVar['Character.UnicodeBlock'] = ...
        OPTICAL_CHARACTER_RECOGNITION: _py_ClassVar['Character.UnicodeBlock'] = ...
        ENCLOSED_ALPHANUMERICS: _py_ClassVar['Character.UnicodeBlock'] = ...
        BOX_DRAWING: _py_ClassVar['Character.UnicodeBlock'] = ...
        BLOCK_ELEMENTS: _py_ClassVar['Character.UnicodeBlock'] = ...
        GEOMETRIC_SHAPES: _py_ClassVar['Character.UnicodeBlock'] = ...
        MISCELLANEOUS_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        DINGBATS: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_SYMBOLS_AND_PUNCTUATION: _py_ClassVar['Character.UnicodeBlock'] = ...
        HIRAGANA: _py_ClassVar['Character.UnicodeBlock'] = ...
        KATAKANA: _py_ClassVar['Character.UnicodeBlock'] = ...
        BOPOMOFO: _py_ClassVar['Character.UnicodeBlock'] = ...
        HANGUL_COMPATIBILITY_JAMO: _py_ClassVar['Character.UnicodeBlock'] = ...
        KANBUN: _py_ClassVar['Character.UnicodeBlock'] = ...
        ENCLOSED_CJK_LETTERS_AND_MONTHS: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_COMPATIBILITY: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_UNIFIED_IDEOGRAPHS: _py_ClassVar['Character.UnicodeBlock'] = ...
        HANGUL_SYLLABLES: _py_ClassVar['Character.UnicodeBlock'] = ...
        PRIVATE_USE_AREA: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_COMPATIBILITY_IDEOGRAPHS: _py_ClassVar['Character.UnicodeBlock'] = ...
        ALPHABETIC_PRESENTATION_FORMS: _py_ClassVar['Character.UnicodeBlock'] = ...
        ARABIC_PRESENTATION_FORMS_A: _py_ClassVar['Character.UnicodeBlock'] = ...
        COMBINING_HALF_MARKS: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_COMPATIBILITY_FORMS: _py_ClassVar['Character.UnicodeBlock'] = ...
        SMALL_FORM_VARIANTS: _py_ClassVar['Character.UnicodeBlock'] = ...
        ARABIC_PRESENTATION_FORMS_B: _py_ClassVar['Character.UnicodeBlock'] = ...
        HALFWIDTH_AND_FULLWIDTH_FORMS: _py_ClassVar['Character.UnicodeBlock'] = ...
        SPECIALS: _py_ClassVar['Character.UnicodeBlock'] = ...
        SURROGATES_AREA: _py_ClassVar['Character.UnicodeBlock'] = ...
        SYRIAC: _py_ClassVar['Character.UnicodeBlock'] = ...
        THAANA: _py_ClassVar['Character.UnicodeBlock'] = ...
        SINHALA: _py_ClassVar['Character.UnicodeBlock'] = ...
        MYANMAR: _py_ClassVar['Character.UnicodeBlock'] = ...
        ETHIOPIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        CHEROKEE: _py_ClassVar['Character.UnicodeBlock'] = ...
        UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS: _py_ClassVar['Character.UnicodeBlock'] = ...
        OGHAM: _py_ClassVar['Character.UnicodeBlock'] = ...
        RUNIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        KHMER: _py_ClassVar['Character.UnicodeBlock'] = ...
        MONGOLIAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        BRAILLE_PATTERNS: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_RADICALS_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        KANGXI_RADICALS: _py_ClassVar['Character.UnicodeBlock'] = ...
        IDEOGRAPHIC_DESCRIPTION_CHARACTERS: _py_ClassVar['Character.UnicodeBlock'] = ...
        BOPOMOFO_EXTENDED: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A: _py_ClassVar['Character.UnicodeBlock'] = ...
        YI_SYLLABLES: _py_ClassVar['Character.UnicodeBlock'] = ...
        YI_RADICALS: _py_ClassVar['Character.UnicodeBlock'] = ...
        CYRILLIC_SUPPLEMENTARY: _py_ClassVar['Character.UnicodeBlock'] = ...
        TAGALOG: _py_ClassVar['Character.UnicodeBlock'] = ...
        HANUNOO: _py_ClassVar['Character.UnicodeBlock'] = ...
        BUHID: _py_ClassVar['Character.UnicodeBlock'] = ...
        TAGBANWA: _py_ClassVar['Character.UnicodeBlock'] = ...
        LIMBU: _py_ClassVar['Character.UnicodeBlock'] = ...
        TAI_LE: _py_ClassVar['Character.UnicodeBlock'] = ...
        KHMER_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        PHONETIC_EXTENSIONS: _py_ClassVar['Character.UnicodeBlock'] = ...
        MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A: _py_ClassVar['Character.UnicodeBlock'] = ...
        SUPPLEMENTAL_ARROWS_A: _py_ClassVar['Character.UnicodeBlock'] = ...
        SUPPLEMENTAL_ARROWS_B: _py_ClassVar['Character.UnicodeBlock'] = ...
        MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B: _py_ClassVar['Character.UnicodeBlock'] = ...
        SUPPLEMENTAL_MATHEMATICAL_OPERATORS: _py_ClassVar['Character.UnicodeBlock'] = ...
        MISCELLANEOUS_SYMBOLS_AND_ARROWS: _py_ClassVar['Character.UnicodeBlock'] = ...
        KATAKANA_PHONETIC_EXTENSIONS: _py_ClassVar['Character.UnicodeBlock'] = ...
        YIJING_HEXAGRAM_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        VARIATION_SELECTORS: _py_ClassVar['Character.UnicodeBlock'] = ...
        LINEAR_B_SYLLABARY: _py_ClassVar['Character.UnicodeBlock'] = ...
        LINEAR_B_IDEOGRAMS: _py_ClassVar['Character.UnicodeBlock'] = ...
        AEGEAN_NUMBERS: _py_ClassVar['Character.UnicodeBlock'] = ...
        OLD_ITALIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        GOTHIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        UGARITIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        DESERET: _py_ClassVar['Character.UnicodeBlock'] = ...
        SHAVIAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        OSMANYA: _py_ClassVar['Character.UnicodeBlock'] = ...
        CYPRIOT_SYLLABARY: _py_ClassVar['Character.UnicodeBlock'] = ...
        BYZANTINE_MUSICAL_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        MUSICAL_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        TAI_XUAN_JING_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        MATHEMATICAL_ALPHANUMERIC_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        TAGS: _py_ClassVar['Character.UnicodeBlock'] = ...
        VARIATION_SELECTORS_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        SUPPLEMENTARY_PRIVATE_USE_AREA_A: _py_ClassVar['Character.UnicodeBlock'] = ...
        SUPPLEMENTARY_PRIVATE_USE_AREA_B: _py_ClassVar['Character.UnicodeBlock'] = ...
        HIGH_SURROGATES: _py_ClassVar['Character.UnicodeBlock'] = ...
        HIGH_PRIVATE_USE_SURROGATES: _py_ClassVar['Character.UnicodeBlock'] = ...
        LOW_SURROGATES: _py_ClassVar['Character.UnicodeBlock'] = ...
        ARABIC_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        NKO: _py_ClassVar['Character.UnicodeBlock'] = ...
        SAMARITAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        MANDAIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        ETHIOPIC_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED: _py_ClassVar['Character.UnicodeBlock'] = ...
        NEW_TAI_LUE: _py_ClassVar['Character.UnicodeBlock'] = ...
        BUGINESE: _py_ClassVar['Character.UnicodeBlock'] = ...
        TAI_THAM: _py_ClassVar['Character.UnicodeBlock'] = ...
        BALINESE: _py_ClassVar['Character.UnicodeBlock'] = ...
        SUNDANESE: _py_ClassVar['Character.UnicodeBlock'] = ...
        BATAK: _py_ClassVar['Character.UnicodeBlock'] = ...
        LEPCHA: _py_ClassVar['Character.UnicodeBlock'] = ...
        OL_CHIKI: _py_ClassVar['Character.UnicodeBlock'] = ...
        VEDIC_EXTENSIONS: _py_ClassVar['Character.UnicodeBlock'] = ...
        PHONETIC_EXTENSIONS_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        COMBINING_DIACRITICAL_MARKS_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        GLAGOLITIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        LATIN_EXTENDED_C: _py_ClassVar['Character.UnicodeBlock'] = ...
        COPTIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        GEORGIAN_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        TIFINAGH: _py_ClassVar['Character.UnicodeBlock'] = ...
        ETHIOPIC_EXTENDED: _py_ClassVar['Character.UnicodeBlock'] = ...
        CYRILLIC_EXTENDED_A: _py_ClassVar['Character.UnicodeBlock'] = ...
        SUPPLEMENTAL_PUNCTUATION: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_STROKES: _py_ClassVar['Character.UnicodeBlock'] = ...
        LISU: _py_ClassVar['Character.UnicodeBlock'] = ...
        VAI: _py_ClassVar['Character.UnicodeBlock'] = ...
        CYRILLIC_EXTENDED_B: _py_ClassVar['Character.UnicodeBlock'] = ...
        BAMUM: _py_ClassVar['Character.UnicodeBlock'] = ...
        MODIFIER_TONE_LETTERS: _py_ClassVar['Character.UnicodeBlock'] = ...
        LATIN_EXTENDED_D: _py_ClassVar['Character.UnicodeBlock'] = ...
        SYLOTI_NAGRI: _py_ClassVar['Character.UnicodeBlock'] = ...
        COMMON_INDIC_NUMBER_FORMS: _py_ClassVar['Character.UnicodeBlock'] = ...
        PHAGS_PA: _py_ClassVar['Character.UnicodeBlock'] = ...
        SAURASHTRA: _py_ClassVar['Character.UnicodeBlock'] = ...
        DEVANAGARI_EXTENDED: _py_ClassVar['Character.UnicodeBlock'] = ...
        KAYAH_LI: _py_ClassVar['Character.UnicodeBlock'] = ...
        REJANG: _py_ClassVar['Character.UnicodeBlock'] = ...
        HANGUL_JAMO_EXTENDED_A: _py_ClassVar['Character.UnicodeBlock'] = ...
        JAVANESE: _py_ClassVar['Character.UnicodeBlock'] = ...
        CHAM: _py_ClassVar['Character.UnicodeBlock'] = ...
        MYANMAR_EXTENDED_A: _py_ClassVar['Character.UnicodeBlock'] = ...
        TAI_VIET: _py_ClassVar['Character.UnicodeBlock'] = ...
        ETHIOPIC_EXTENDED_A: _py_ClassVar['Character.UnicodeBlock'] = ...
        MEETEI_MAYEK: _py_ClassVar['Character.UnicodeBlock'] = ...
        HANGUL_JAMO_EXTENDED_B: _py_ClassVar['Character.UnicodeBlock'] = ...
        VERTICAL_FORMS: _py_ClassVar['Character.UnicodeBlock'] = ...
        ANCIENT_GREEK_NUMBERS: _py_ClassVar['Character.UnicodeBlock'] = ...
        ANCIENT_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        PHAISTOS_DISC: _py_ClassVar['Character.UnicodeBlock'] = ...
        LYCIAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        CARIAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        OLD_PERSIAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        IMPERIAL_ARAMAIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        PHOENICIAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        LYDIAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        KHAROSHTHI: _py_ClassVar['Character.UnicodeBlock'] = ...
        OLD_SOUTH_ARABIAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        AVESTAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        INSCRIPTIONAL_PARTHIAN: _py_ClassVar['Character.UnicodeBlock'] = ...
        INSCRIPTIONAL_PAHLAVI: _py_ClassVar['Character.UnicodeBlock'] = ...
        OLD_TURKIC: _py_ClassVar['Character.UnicodeBlock'] = ...
        RUMI_NUMERAL_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        BRAHMI: _py_ClassVar['Character.UnicodeBlock'] = ...
        KAITHI: _py_ClassVar['Character.UnicodeBlock'] = ...
        CUNEIFORM: _py_ClassVar['Character.UnicodeBlock'] = ...
        CUNEIFORM_NUMBERS_AND_PUNCTUATION: _py_ClassVar['Character.UnicodeBlock'] = ...
        EGYPTIAN_HIEROGLYPHS: _py_ClassVar['Character.UnicodeBlock'] = ...
        BAMUM_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        KANA_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        ANCIENT_GREEK_MUSICAL_NOTATION: _py_ClassVar['Character.UnicodeBlock'] = ...
        COUNTING_ROD_NUMERALS: _py_ClassVar['Character.UnicodeBlock'] = ...
        MAHJONG_TILES: _py_ClassVar['Character.UnicodeBlock'] = ...
        DOMINO_TILES: _py_ClassVar['Character.UnicodeBlock'] = ...
        PLAYING_CARDS: _py_ClassVar['Character.UnicodeBlock'] = ...
        ENCLOSED_ALPHANUMERIC_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        ENCLOSED_IDEOGRAPHIC_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS: _py_ClassVar['Character.UnicodeBlock'] = ...
        EMOTICONS: _py_ClassVar['Character.UnicodeBlock'] = ...
        TRANSPORT_AND_MAP_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        ALCHEMICAL_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C: _py_ClassVar['Character.UnicodeBlock'] = ...
        CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D: _py_ClassVar['Character.UnicodeBlock'] = ...
        ARABIC_EXTENDED_A: _py_ClassVar['Character.UnicodeBlock'] = ...
        SUNDANESE_SUPPLEMENT: _py_ClassVar['Character.UnicodeBlock'] = ...
        MEETEI_MAYEK_EXTENSIONS: _py_ClassVar['Character.UnicodeBlock'] = ...
        MEROITIC_HIEROGLYPHS: _py_ClassVar['Character.UnicodeBlock'] = ...
        MEROITIC_CURSIVE: _py_ClassVar['Character.UnicodeBlock'] = ...
        SORA_SOMPENG: _py_ClassVar['Character.UnicodeBlock'] = ...
        CHAKMA: _py_ClassVar['Character.UnicodeBlock'] = ...
        SHARADA: _py_ClassVar['Character.UnicodeBlock'] = ...
        TAKRI: _py_ClassVar['Character.UnicodeBlock'] = ...
        MIAO: _py_ClassVar['Character.UnicodeBlock'] = ...
        ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS: _py_ClassVar['Character.UnicodeBlock'] = ...
        @classmethod
        def forName(cls, string: str) -> 'Character.UnicodeBlock': ...
        @classmethod
        @overload
        def of(cls, char: str) -> 'Character.UnicodeBlock': ...
        @classmethod
        @overload
        def of(cls, int: int) -> 'Character.UnicodeBlock': ...
    class UnicodeScript(Enum['Character.UnicodeScript']):
        COMMON: _py_ClassVar['Character.UnicodeScript'] = ...
        LATIN: _py_ClassVar['Character.UnicodeScript'] = ...
        GREEK: _py_ClassVar['Character.UnicodeScript'] = ...
        CYRILLIC: _py_ClassVar['Character.UnicodeScript'] = ...
        ARMENIAN: _py_ClassVar['Character.UnicodeScript'] = ...
        HEBREW: _py_ClassVar['Character.UnicodeScript'] = ...
        ARABIC: _py_ClassVar['Character.UnicodeScript'] = ...
        SYRIAC: _py_ClassVar['Character.UnicodeScript'] = ...
        THAANA: _py_ClassVar['Character.UnicodeScript'] = ...
        DEVANAGARI: _py_ClassVar['Character.UnicodeScript'] = ...
        BENGALI: _py_ClassVar['Character.UnicodeScript'] = ...
        GURMUKHI: _py_ClassVar['Character.UnicodeScript'] = ...
        GUJARATI: _py_ClassVar['Character.UnicodeScript'] = ...
        ORIYA: _py_ClassVar['Character.UnicodeScript'] = ...
        TAMIL: _py_ClassVar['Character.UnicodeScript'] = ...
        TELUGU: _py_ClassVar['Character.UnicodeScript'] = ...
        KANNADA: _py_ClassVar['Character.UnicodeScript'] = ...
        MALAYALAM: _py_ClassVar['Character.UnicodeScript'] = ...
        SINHALA: _py_ClassVar['Character.UnicodeScript'] = ...
        THAI: _py_ClassVar['Character.UnicodeScript'] = ...
        LAO: _py_ClassVar['Character.UnicodeScript'] = ...
        TIBETAN: _py_ClassVar['Character.UnicodeScript'] = ...
        MYANMAR: _py_ClassVar['Character.UnicodeScript'] = ...
        GEORGIAN: _py_ClassVar['Character.UnicodeScript'] = ...
        HANGUL: _py_ClassVar['Character.UnicodeScript'] = ...
        ETHIOPIC: _py_ClassVar['Character.UnicodeScript'] = ...
        CHEROKEE: _py_ClassVar['Character.UnicodeScript'] = ...
        CANADIAN_ABORIGINAL: _py_ClassVar['Character.UnicodeScript'] = ...
        OGHAM: _py_ClassVar['Character.UnicodeScript'] = ...
        RUNIC: _py_ClassVar['Character.UnicodeScript'] = ...
        KHMER: _py_ClassVar['Character.UnicodeScript'] = ...
        MONGOLIAN: _py_ClassVar['Character.UnicodeScript'] = ...
        HIRAGANA: _py_ClassVar['Character.UnicodeScript'] = ...
        KATAKANA: _py_ClassVar['Character.UnicodeScript'] = ...
        BOPOMOFO: _py_ClassVar['Character.UnicodeScript'] = ...
        HAN: _py_ClassVar['Character.UnicodeScript'] = ...
        YI: _py_ClassVar['Character.UnicodeScript'] = ...
        OLD_ITALIC: _py_ClassVar['Character.UnicodeScript'] = ...
        GOTHIC: _py_ClassVar['Character.UnicodeScript'] = ...
        DESERET: _py_ClassVar['Character.UnicodeScript'] = ...
        INHERITED: _py_ClassVar['Character.UnicodeScript'] = ...
        TAGALOG: _py_ClassVar['Character.UnicodeScript'] = ...
        HANUNOO: _py_ClassVar['Character.UnicodeScript'] = ...
        BUHID: _py_ClassVar['Character.UnicodeScript'] = ...
        TAGBANWA: _py_ClassVar['Character.UnicodeScript'] = ...
        LIMBU: _py_ClassVar['Character.UnicodeScript'] = ...
        TAI_LE: _py_ClassVar['Character.UnicodeScript'] = ...
        LINEAR_B: _py_ClassVar['Character.UnicodeScript'] = ...
        UGARITIC: _py_ClassVar['Character.UnicodeScript'] = ...
        SHAVIAN: _py_ClassVar['Character.UnicodeScript'] = ...
        OSMANYA: _py_ClassVar['Character.UnicodeScript'] = ...
        CYPRIOT: _py_ClassVar['Character.UnicodeScript'] = ...
        BRAILLE: _py_ClassVar['Character.UnicodeScript'] = ...
        BUGINESE: _py_ClassVar['Character.UnicodeScript'] = ...
        COPTIC: _py_ClassVar['Character.UnicodeScript'] = ...
        NEW_TAI_LUE: _py_ClassVar['Character.UnicodeScript'] = ...
        GLAGOLITIC: _py_ClassVar['Character.UnicodeScript'] = ...
        TIFINAGH: _py_ClassVar['Character.UnicodeScript'] = ...
        SYLOTI_NAGRI: _py_ClassVar['Character.UnicodeScript'] = ...
        OLD_PERSIAN: _py_ClassVar['Character.UnicodeScript'] = ...
        KHAROSHTHI: _py_ClassVar['Character.UnicodeScript'] = ...
        BALINESE: _py_ClassVar['Character.UnicodeScript'] = ...
        CUNEIFORM: _py_ClassVar['Character.UnicodeScript'] = ...
        PHOENICIAN: _py_ClassVar['Character.UnicodeScript'] = ...
        PHAGS_PA: _py_ClassVar['Character.UnicodeScript'] = ...
        NKO: _py_ClassVar['Character.UnicodeScript'] = ...
        SUNDANESE: _py_ClassVar['Character.UnicodeScript'] = ...
        BATAK: _py_ClassVar['Character.UnicodeScript'] = ...
        LEPCHA: _py_ClassVar['Character.UnicodeScript'] = ...
        OL_CHIKI: _py_ClassVar['Character.UnicodeScript'] = ...
        VAI: _py_ClassVar['Character.UnicodeScript'] = ...
        SAURASHTRA: _py_ClassVar['Character.UnicodeScript'] = ...
        KAYAH_LI: _py_ClassVar['Character.UnicodeScript'] = ...
        REJANG: _py_ClassVar['Character.UnicodeScript'] = ...
        LYCIAN: _py_ClassVar['Character.UnicodeScript'] = ...
        CARIAN: _py_ClassVar['Character.UnicodeScript'] = ...
        LYDIAN: _py_ClassVar['Character.UnicodeScript'] = ...
        CHAM: _py_ClassVar['Character.UnicodeScript'] = ...
        TAI_THAM: _py_ClassVar['Character.UnicodeScript'] = ...
        TAI_VIET: _py_ClassVar['Character.UnicodeScript'] = ...
        AVESTAN: _py_ClassVar['Character.UnicodeScript'] = ...
        EGYPTIAN_HIEROGLYPHS: _py_ClassVar['Character.UnicodeScript'] = ...
        SAMARITAN: _py_ClassVar['Character.UnicodeScript'] = ...
        MANDAIC: _py_ClassVar['Character.UnicodeScript'] = ...
        LISU: _py_ClassVar['Character.UnicodeScript'] = ...
        BAMUM: _py_ClassVar['Character.UnicodeScript'] = ...
        JAVANESE: _py_ClassVar['Character.UnicodeScript'] = ...
        MEETEI_MAYEK: _py_ClassVar['Character.UnicodeScript'] = ...
        IMPERIAL_ARAMAIC: _py_ClassVar['Character.UnicodeScript'] = ...
        OLD_SOUTH_ARABIAN: _py_ClassVar['Character.UnicodeScript'] = ...
        INSCRIPTIONAL_PARTHIAN: _py_ClassVar['Character.UnicodeScript'] = ...
        INSCRIPTIONAL_PAHLAVI: _py_ClassVar['Character.UnicodeScript'] = ...
        OLD_TURKIC: _py_ClassVar['Character.UnicodeScript'] = ...
        BRAHMI: _py_ClassVar['Character.UnicodeScript'] = ...
        KAITHI: _py_ClassVar['Character.UnicodeScript'] = ...
        MEROITIC_HIEROGLYPHS: _py_ClassVar['Character.UnicodeScript'] = ...
        MEROITIC_CURSIVE: _py_ClassVar['Character.UnicodeScript'] = ...
        SORA_SOMPENG: _py_ClassVar['Character.UnicodeScript'] = ...
        CHAKMA: _py_ClassVar['Character.UnicodeScript'] = ...
        SHARADA: _py_ClassVar['Character.UnicodeScript'] = ...
        TAKRI: _py_ClassVar['Character.UnicodeScript'] = ...
        MIAO: _py_ClassVar['Character.UnicodeScript'] = ...
        UNKNOWN: _py_ClassVar['Character.UnicodeScript'] = ...
        @classmethod
        def forName(cls, string: str) -> 'Character.UnicodeScript': ...
        @classmethod
        def of(cls, int: int) -> 'Character.UnicodeScript': ...
        @classmethod
        @overload
        def valueOf(cls, string: str) -> 'Character.UnicodeScript': ...
        _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=Enum)  # <T>
        @classmethod
        @overload
        def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @classmethod
        def values(cls) -> _py_List['Character.UnicodeScript']: ...

class ThreadGroup(Thread.UncaughtExceptionHandler):
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, threadGroup: 'ThreadGroup', string: str): ...
    def activeCount(self) -> int: ...
    def activeGroupCount(self) -> int: ...
    def allowThreadSuspension(self, boolean: bool) -> bool: ...
    def checkAccess(self) -> None: ...
    def destroy(self) -> None: ...
    @overload
    def enumerate(self, threadGroupArray: _py_List['ThreadGroup']) -> int: ...
    @overload
    def enumerate(self, threadGroupArray: _py_List['ThreadGroup'], boolean: bool) -> int: ...
    @overload
    def enumerate(self, threadArray: _py_List[Thread]) -> int: ...
    @overload
    def enumerate(self, threadArray: _py_List[Thread], boolean: bool) -> int: ...
    def getMaxPriority(self) -> int: ...
    def getName(self) -> str: ...
    def getParent(self) -> 'ThreadGroup': ...
    def interrupt(self) -> None: ...
    def isDaemon(self) -> bool: ...
    def isDestroyed(self) -> bool: ...
    def list(self) -> None: ...
    def parentOf(self, threadGroup: 'ThreadGroup') -> bool: ...
    def resume(self) -> None: ...
    def setDaemon(self, boolean: bool) -> None: ...
    def setMaxPriority(self, int: int) -> None: ...
    def stop(self) -> None: ...
    def suspend(self) -> None: ...
    def toString(self) -> str: ...
    def uncaughtException(self, thread: Thread, throwable: Throwable) -> None: ...
