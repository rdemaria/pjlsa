from typing import List as _py_List
from typing import ClassVar as _py_ClassVar
from typing import overload
import java.rmi
import java.rmi.server


class LocateRegistry:
    @classmethod
    @overload
    def createRegistry(cls, int: int) -> 'Registry': ...
    @classmethod
    @overload
    def createRegistry(cls, int: int, rMIClientSocketFactory: java.rmi.server.RMIClientSocketFactory, rMIServerSocketFactory: java.rmi.server.RMIServerSocketFactory) -> 'Registry': ...
    @classmethod
    @overload
    def getRegistry(cls) -> 'Registry': ...
    @classmethod
    @overload
    def getRegistry(cls, int: int) -> 'Registry': ...
    @classmethod
    @overload
    def getRegistry(cls, string: str) -> 'Registry': ...
    @classmethod
    @overload
    def getRegistry(cls, string: str, int: int) -> 'Registry': ...
    @classmethod
    @overload
    def getRegistry(cls, string: str, int: int, rMIClientSocketFactory: java.rmi.server.RMIClientSocketFactory) -> 'Registry': ...

class Registry(java.rmi.Remote):
    REGISTRY_PORT: _py_ClassVar[int] = ...
    def bind(self, string: str, remote: java.rmi.Remote) -> None: ...
    def list(self) -> _py_List[str]: ...
    def lookup(self, string: str) -> java.rmi.Remote: ...
    def rebind(self, string: str, remote: java.rmi.Remote) -> None: ...
    def unbind(self, string: str) -> None: ...

class RegistryHandler:
    def registryImpl(self, int: int) -> Registry: ...
    def registryStub(self, string: str, int: int) -> Registry: ...
