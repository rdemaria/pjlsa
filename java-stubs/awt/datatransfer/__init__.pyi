import java.io
import java.lang
import java.util
import typing



class Clipboard:
    """
    Java class 'java.awt.datatransfer.Clipboard'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Clipboard(java.lang.String)
    
    """
    def __init__(self, string: str): ...
    def addFlavorListener(self, flavorListener: 'FlavorListener') -> None: ...
    def getAvailableDataFlavors(self) -> typing.List['DataFlavor']: ...
    def getContents(self, object: typing.Any) -> 'Transferable': ...
    def getData(self, dataFlavor: 'DataFlavor') -> typing.Any: ...
    def getFlavorListeners(self) -> typing.List['FlavorListener']: ...
    def getName(self) -> str: ...
    def isDataFlavorAvailable(self, dataFlavor: 'DataFlavor') -> bool: ...
    def removeFlavorListener(self, flavorListener: 'FlavorListener') -> None: ...
    def setContents(self, transferable: 'Transferable', clipboardOwner: 'ClipboardOwner') -> None: ...

class ClipboardOwner:
    """
    Java class 'java.awt.datatransfer.ClipboardOwner'
    
    """
    def lostOwnership(self, clipboard: Clipboard, transferable: 'Transferable') -> None: ...

class DataFlavor(java.io.Externalizable, java.lang.Cloneable):
    """
    Java class 'java.awt.datatransfer.DataFlavor'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Externalizable, java.lang.Cloneable
    
      Constructors:
        * DataFlavor()
        * DataFlavor(java.lang.String)
        * DataFlavor(java.lang.Class, java.lang.String)
        * DataFlavor(java.lang.String, java.lang.String)
        * DataFlavor(java.lang.String, java.lang.String, java.lang.ClassLoader)
    
      Raises:
        java.lang.ClassNotFoundException: from java
    
      Attributes:
        stringFlavor (java.awt.datatransfer.DataFlavor): final static field
        imageFlavor (java.awt.datatransfer.DataFlavor): final static field
        plainTextFlavor (java.awt.datatransfer.DataFlavor): final static field
        javaSerializedObjectMimeType (java.lang.String): final static field
        javaFileListFlavor (java.awt.datatransfer.DataFlavor): final static field
        javaJVMLocalObjectMimeType (java.lang.String): final static field
        javaRemoteObjectMimeType (java.lang.String): final static field
        selectionHtmlFlavor (java.awt.datatransfer.DataFlavor): static field
        fragmentHtmlFlavor (java.awt.datatransfer.DataFlavor): static field
        allHtmlFlavor (java.awt.datatransfer.DataFlavor): static field
    
    """
    stringFlavor: typing.ClassVar['DataFlavor'] = ...
    imageFlavor: typing.ClassVar['DataFlavor'] = ...
    plainTextFlavor: typing.ClassVar['DataFlavor'] = ...
    javaSerializedObjectMimeType: typing.ClassVar[str] = ...
    javaFileListFlavor: typing.ClassVar['DataFlavor'] = ...
    javaJVMLocalObjectMimeType: typing.ClassVar[str] = ...
    javaRemoteObjectMimeType: typing.ClassVar[str] = ...
    selectionHtmlFlavor: typing.ClassVar['DataFlavor'] = ...
    fragmentHtmlFlavor: typing.ClassVar['DataFlavor'] = ...
    allHtmlFlavor: typing.ClassVar['DataFlavor'] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, class_: typing.Type[typing.Any], string: str): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, classLoader: java.lang.ClassLoader): ...
    def clone(self) -> typing.Any: ...
    @typing.overload
    def equals(self, dataFlavor: 'DataFlavor') -> bool: ...
    @typing.overload
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def equals(self, string: str) -> bool: ...
    def getDefaultRepresentationClass(self) -> typing.Type[typing.Any]: ...
    def getDefaultRepresentationClassAsString(self) -> str: ...
    def getHumanPresentableName(self) -> str: ...
    def getMimeType(self) -> str: ...
    def getParameter(self, string: str) -> str: ...
    def getPrimaryType(self) -> str: ...
    def getReaderForText(self, transferable: 'Transferable') -> java.io.Reader: ...
    def getRepresentationClass(self) -> typing.Type[typing.Any]: ...
    def getSubType(self) -> str: ...
    @staticmethod
    def getTextPlainUnicodeFlavor() -> 'DataFlavor': ...
    def hashCode(self) -> int: ...
    def isFlavorJavaFileListType(self) -> bool: ...
    def isFlavorRemoteObjectType(self) -> bool: ...
    def isFlavorSerializedObjectType(self) -> bool: ...
    def isFlavorTextType(self) -> bool: ...
    @typing.overload
    def isMimeTypeEqual(self, string: str) -> bool: ...
    @typing.overload
    def isMimeTypeEqual(self, dataFlavor: 'DataFlavor') -> bool: ...
    def isMimeTypeSerializedObject(self) -> bool: ...
    def isRepresentationClassByteBuffer(self) -> bool: ...
    def isRepresentationClassCharBuffer(self) -> bool: ...
    def isRepresentationClassInputStream(self) -> bool: ...
    def isRepresentationClassReader(self) -> bool: ...
    def isRepresentationClassRemote(self) -> bool: ...
    def isRepresentationClassSerializable(self) -> bool: ...
    def match(self, dataFlavor: 'DataFlavor') -> bool: ...
    def readExternal(self, objectInput: java.io.ObjectInput) -> None: ...
    @staticmethod
    def selectBestTextFlavor(dataFlavorArray: typing.List['DataFlavor']) -> 'DataFlavor': ...
    def setHumanPresentableName(self, string: str) -> None: ...
    def toString(self) -> str: ...
    def writeExternal(self, objectOutput: java.io.ObjectOutput) -> None: ...

class FlavorEvent(java.util.EventObject):
    """
    Java class 'java.awt.datatransfer.FlavorEvent'
    
        Extends:
            java.util.EventObject
    
      Constructors:
        * FlavorEvent(java.awt.datatransfer.Clipboard)
    
    """
    def __init__(self, clipboard: Clipboard): ...

class FlavorListener(java.util.EventListener):
    """
    Java class 'java.awt.datatransfer.FlavorListener'
    
        Interfaces:
            java.util.EventListener
    
    """
    def flavorsChanged(self, flavorEvent: FlavorEvent) -> None: ...

class FlavorMap:
    """
    Java class 'java.awt.datatransfer.FlavorMap'
    
    """
    def getFlavorsForNatives(self, stringArray: typing.List[str]) -> java.util.Map[str, DataFlavor]: ...
    def getNativesForFlavors(self, dataFlavorArray: typing.List[DataFlavor]) -> java.util.Map[DataFlavor, str]: ...

class MimeTypeParseException(java.lang.Exception):
    """
    Java class 'java.awt.datatransfer.MimeTypeParseException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * MimeTypeParseException()
        * MimeTypeParseException(java.lang.String)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...

class Transferable:
    """
    Java class 'java.awt.datatransfer.Transferable'
    
    """
    def getTransferData(self, dataFlavor: DataFlavor) -> typing.Any: ...
    def getTransferDataFlavors(self) -> typing.List[DataFlavor]: ...
    def isDataFlavorSupported(self, dataFlavor: DataFlavor) -> bool: ...

class UnsupportedFlavorException(java.lang.Exception):
    """
    Java class 'java.awt.datatransfer.UnsupportedFlavorException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * UnsupportedFlavorException(java.awt.datatransfer.DataFlavor)
    
    """
    def __init__(self, dataFlavor: DataFlavor): ...

class FlavorTable(FlavorMap):
    """
    Java class 'java.awt.datatransfer.FlavorTable'
    
        Interfaces:
            java.awt.datatransfer.FlavorMap
    
    """
    def getFlavorsForNative(self, string: str) -> java.util.List[DataFlavor]: ...
    def getNativesForFlavor(self, dataFlavor: DataFlavor) -> java.util.List[str]: ...

class StringSelection(Transferable, ClipboardOwner):
    """
    Java class 'java.awt.datatransfer.StringSelection'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.datatransfer.Transferable,
            java.awt.datatransfer.ClipboardOwner
    
      Constructors:
        * StringSelection(java.lang.String)
    
    """
    def __init__(self, string: str): ...
    def getTransferData(self, dataFlavor: DataFlavor) -> typing.Any: ...
    def getTransferDataFlavors(self) -> typing.List[DataFlavor]: ...
    def isDataFlavorSupported(self, dataFlavor: DataFlavor) -> bool: ...
    def lostOwnership(self, clipboard: Clipboard, transferable: Transferable) -> None: ...

class SystemFlavorMap(FlavorMap, FlavorTable):
    """
    Java class 'java.awt.datatransfer.SystemFlavorMap'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.datatransfer.FlavorMap,
            java.awt.datatransfer.FlavorTable
    
    """
    def addFlavorForUnencodedNative(self, string: str, dataFlavor: DataFlavor) -> None: ...
    def addUnencodedNativeForFlavor(self, dataFlavor: DataFlavor, string: str) -> None: ...
    @staticmethod
    def decodeDataFlavor(string: str) -> DataFlavor: ...
    @staticmethod
    def decodeJavaMIMEType(string: str) -> str: ...
    @staticmethod
    def encodeDataFlavor(dataFlavor: DataFlavor) -> str: ...
    @staticmethod
    def encodeJavaMIMEType(string: str) -> str: ...
    @staticmethod
    def getDefaultFlavorMap() -> FlavorMap: ...
    def getFlavorsForNative(self, string: str) -> java.util.List[DataFlavor]: ...
    def getFlavorsForNatives(self, stringArray: typing.List[str]) -> java.util.Map[str, DataFlavor]: ...
    def getNativesForFlavor(self, dataFlavor: DataFlavor) -> java.util.List[str]: ...
    def getNativesForFlavors(self, dataFlavorArray: typing.List[DataFlavor]) -> java.util.Map[DataFlavor, str]: ...
    @staticmethod
    def isJavaMIMEType(string: str) -> bool: ...
    def setFlavorsForNative(self, string: str, dataFlavorArray: typing.List[DataFlavor]) -> None: ...
    def setNativesForFlavor(self, dataFlavor: DataFlavor, stringArray: typing.List[str]) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("java.awt.datatransfer")``.

    Clipboard: typing.Type[Clipboard]
    ClipboardOwner: typing.Type[ClipboardOwner]
    DataFlavor: typing.Type[DataFlavor]
    FlavorEvent: typing.Type[FlavorEvent]
    FlavorListener: typing.Type[FlavorListener]
    FlavorMap: typing.Type[FlavorMap]
    FlavorTable: typing.Type[FlavorTable]
    MimeTypeParseException: typing.Type[MimeTypeParseException]
    StringSelection: typing.Type[StringSelection]
    SystemFlavorMap: typing.Type[SystemFlavorMap]
    Transferable: typing.Type[Transferable]
    UnsupportedFlavorException: typing.Type[UnsupportedFlavorException]
