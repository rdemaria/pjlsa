from typing import Any as _py_Any
from typing import List as _py_List
from typing import ClassVar as _py_ClassVar
from typing import overload
import java.awt
import java.awt.font
import java.lang
import java.text
import java.util


class InputContext:
    def dispatchEvent(self, aWTEvent: java.awt.AWTEvent) -> None: ...
    def dispose(self) -> None: ...
    def endComposition(self) -> None: ...
    def getInputMethodControlObject(self) -> _py_Any: ...
    @classmethod
    def getInstance(cls) -> 'InputContext': ...
    def getLocale(self) -> java.util.Locale: ...
    def isCompositionEnabled(self) -> bool: ...
    def reconvert(self) -> None: ...
    def removeNotify(self, component: java.awt.Component) -> None: ...
    def selectInputMethod(self, locale: java.util.Locale) -> bool: ...
    def setCharacterSubsets(self, subsetArray: _py_List[java.lang.Character.Subset]) -> None: ...
    def setCompositionEnabled(self, boolean: bool) -> None: ...

class InputMethodHighlight:
    RAW_TEXT: _py_ClassVar[int] = ...
    CONVERTED_TEXT: _py_ClassVar[int] = ...
    UNSELECTED_RAW_TEXT_HIGHLIGHT: _py_ClassVar['InputMethodHighlight'] = ...
    SELECTED_RAW_TEXT_HIGHLIGHT: _py_ClassVar['InputMethodHighlight'] = ...
    UNSELECTED_CONVERTED_TEXT_HIGHLIGHT: _py_ClassVar['InputMethodHighlight'] = ...
    SELECTED_CONVERTED_TEXT_HIGHLIGHT: _py_ClassVar['InputMethodHighlight'] = ...
    @overload
    def __init__(self, boolean: bool, int: int): ...
    @overload
    def __init__(self, boolean: bool, int: int, int2: int): ...
    @overload
    def __init__(self, boolean: bool, int: int, int2: int, map: java.util.Map[java.awt.font.TextAttribute, _py_Any]): ...
    def getState(self) -> int: ...
    def getStyle(self) -> java.util.Map[java.awt.font.TextAttribute, _py_Any]: ...
    def getVariation(self) -> int: ...
    def isSelected(self) -> bool: ...

class InputMethodRequests:
    def cancelLatestCommittedText(self, attributeArray: _py_List[java.text.AttributedCharacterIterator.Attribute]) -> java.text.AttributedCharacterIterator: ...
    def getCommittedText(self, int: int, int2: int, attributeArray: _py_List[java.text.AttributedCharacterIterator.Attribute]) -> java.text.AttributedCharacterIterator: ...
    def getCommittedTextLength(self) -> int: ...
    def getInsertPositionOffset(self) -> int: ...
    def getLocationOffset(self, int: int, int2: int) -> java.awt.font.TextHitInfo: ...
    def getSelectedText(self, attributeArray: _py_List[java.text.AttributedCharacterIterator.Attribute]) -> java.text.AttributedCharacterIterator: ...
    def getTextLocation(self, textHitInfo: java.awt.font.TextHitInfo) -> java.awt.Rectangle: ...

class InputSubset(java.lang.Character.Subset):
    LATIN: _py_ClassVar['InputSubset'] = ...
    LATIN_DIGITS: _py_ClassVar['InputSubset'] = ...
    TRADITIONAL_HANZI: _py_ClassVar['InputSubset'] = ...
    SIMPLIFIED_HANZI: _py_ClassVar['InputSubset'] = ...
    KANJI: _py_ClassVar['InputSubset'] = ...
    HANJA: _py_ClassVar['InputSubset'] = ...
    HALFWIDTH_KATAKANA: _py_ClassVar['InputSubset'] = ...
    FULLWIDTH_LATIN: _py_ClassVar['InputSubset'] = ...
    FULLWIDTH_DIGITS: _py_ClassVar['InputSubset'] = ...
