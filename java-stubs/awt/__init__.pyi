import java
import java.awt.color
import java.awt.datatransfer
import java.awt.desktop
import java.awt.dnd
import java.awt.event
import java.awt.font
import java.awt.geom
import java.awt.im
import java.awt.image
import java.awt.image.renderable
import java.awt.peer
import java.awt.print_
import java.beans
import java.io
import java.lang
import java.net
import java.security
import java.text
import java.util
import javax.accessibility
import javax.swing
import jpype.protocol
import typing



class AWTError(java.lang.Error):
    """
    Java class 'java.awt.AWTError'
    
        Extends:
            java.lang.Error
    
      Constructors:
        * AWTError(java.lang.String)
    
    """
    def __init__(self, string: str): ...

class AWTEvent(java.util.EventObject):
    """
    Java class 'java.awt.AWTEvent'
    
        Extends:
            java.util.EventObject
    
      Constructors:
        * AWTEvent(java.lang.Object, int)
        * AWTEvent(java.awt.Event)
    
      Attributes:
        COMPONENT_EVENT_MASK (long): final static field
        CONTAINER_EVENT_MASK (long): final static field
        FOCUS_EVENT_MASK (long): final static field
        KEY_EVENT_MASK (long): final static field
        MOUSE_EVENT_MASK (long): final static field
        MOUSE_MOTION_EVENT_MASK (long): final static field
        WINDOW_EVENT_MASK (long): final static field
        ACTION_EVENT_MASK (long): final static field
        ADJUSTMENT_EVENT_MASK (long): final static field
        ITEM_EVENT_MASK (long): final static field
        TEXT_EVENT_MASK (long): final static field
        INPUT_METHOD_EVENT_MASK (long): final static field
        PAINT_EVENT_MASK (long): final static field
        INVOCATION_EVENT_MASK (long): final static field
        HIERARCHY_EVENT_MASK (long): final static field
        HIERARCHY_BOUNDS_EVENT_MASK (long): final static field
        MOUSE_WHEEL_EVENT_MASK (long): final static field
        WINDOW_STATE_EVENT_MASK (long): final static field
        WINDOW_FOCUS_EVENT_MASK (long): final static field
        RESERVED_ID_MAX (int): final static field
    
    """
    COMPONENT_EVENT_MASK: typing.ClassVar[int] = ...
    CONTAINER_EVENT_MASK: typing.ClassVar[int] = ...
    FOCUS_EVENT_MASK: typing.ClassVar[int] = ...
    KEY_EVENT_MASK: typing.ClassVar[int] = ...
    MOUSE_EVENT_MASK: typing.ClassVar[int] = ...
    MOUSE_MOTION_EVENT_MASK: typing.ClassVar[int] = ...
    WINDOW_EVENT_MASK: typing.ClassVar[int] = ...
    ACTION_EVENT_MASK: typing.ClassVar[int] = ...
    ADJUSTMENT_EVENT_MASK: typing.ClassVar[int] = ...
    ITEM_EVENT_MASK: typing.ClassVar[int] = ...
    TEXT_EVENT_MASK: typing.ClassVar[int] = ...
    INPUT_METHOD_EVENT_MASK: typing.ClassVar[int] = ...
    PAINT_EVENT_MASK: typing.ClassVar[int] = ...
    INVOCATION_EVENT_MASK: typing.ClassVar[int] = ...
    HIERARCHY_EVENT_MASK: typing.ClassVar[int] = ...
    HIERARCHY_BOUNDS_EVENT_MASK: typing.ClassVar[int] = ...
    MOUSE_WHEEL_EVENT_MASK: typing.ClassVar[int] = ...
    WINDOW_STATE_EVENT_MASK: typing.ClassVar[int] = ...
    WINDOW_FOCUS_EVENT_MASK: typing.ClassVar[int] = ...
    RESERVED_ID_MAX: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, event: 'Event'): ...
    @typing.overload
    def __init__(self, object: typing.Any, int: int): ...
    def getID(self) -> int: ...
    def paramString(self) -> str: ...
    def setSource(self, object: typing.Any) -> None: ...
    def toString(self) -> str: ...

class AWTEventMulticaster(java.awt.event.ComponentListener, java.awt.event.ContainerListener, java.awt.event.FocusListener, java.awt.event.KeyListener, java.awt.event.MouseListener, java.awt.event.MouseMotionListener, java.awt.event.WindowListener, java.awt.event.WindowFocusListener, java.awt.event.WindowStateListener, java.awt.event.ActionListener, java.awt.event.ItemListener, java.awt.event.AdjustmentListener, java.awt.event.TextListener, java.awt.event.InputMethodListener, java.awt.event.HierarchyListener, java.awt.event.HierarchyBoundsListener, java.awt.event.MouseWheelListener):
    """
    Java class 'java.awt.AWTEventMulticaster'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.event.ComponentListener,
            java.awt.event.ContainerListener,
            java.awt.event.FocusListener, java.awt.event.KeyListener,
            java.awt.event.MouseListener,
            java.awt.event.MouseMotionListener,
            java.awt.event.WindowListener,
            java.awt.event.WindowFocusListener,
            java.awt.event.WindowStateListener,
            java.awt.event.ActionListener, java.awt.event.ItemListener,
            java.awt.event.AdjustmentListener,
            java.awt.event.TextListener,
            java.awt.event.InputMethodListener,
            java.awt.event.HierarchyListener,
            java.awt.event.HierarchyBoundsListener,
            java.awt.event.MouseWheelListener
    
    """
    def actionPerformed(self, actionEvent: java.awt.event.ActionEvent) -> None: ...
    @typing.overload
    @staticmethod
    def add(actionListener: java.awt.event.ActionListener, actionListener2: java.awt.event.ActionListener) -> java.awt.event.ActionListener: ...
    @typing.overload
    @staticmethod
    def add(adjustmentListener: java.awt.event.AdjustmentListener, adjustmentListener2: java.awt.event.AdjustmentListener) -> java.awt.event.AdjustmentListener: ...
    @typing.overload
    @staticmethod
    def add(componentListener: java.awt.event.ComponentListener, componentListener2: java.awt.event.ComponentListener) -> java.awt.event.ComponentListener: ...
    @typing.overload
    @staticmethod
    def add(containerListener: java.awt.event.ContainerListener, containerListener2: java.awt.event.ContainerListener) -> java.awt.event.ContainerListener: ...
    @typing.overload
    @staticmethod
    def add(focusListener: java.awt.event.FocusListener, focusListener2: java.awt.event.FocusListener) -> java.awt.event.FocusListener: ...
    @typing.overload
    @staticmethod
    def add(hierarchyBoundsListener: java.awt.event.HierarchyBoundsListener, hierarchyBoundsListener2: java.awt.event.HierarchyBoundsListener) -> java.awt.event.HierarchyBoundsListener: ...
    @typing.overload
    @staticmethod
    def add(hierarchyListener: java.awt.event.HierarchyListener, hierarchyListener2: java.awt.event.HierarchyListener) -> java.awt.event.HierarchyListener: ...
    @typing.overload
    @staticmethod
    def add(inputMethodListener: java.awt.event.InputMethodListener, inputMethodListener2: java.awt.event.InputMethodListener) -> java.awt.event.InputMethodListener: ...
    @typing.overload
    @staticmethod
    def add(itemListener: java.awt.event.ItemListener, itemListener2: java.awt.event.ItemListener) -> java.awt.event.ItemListener: ...
    @typing.overload
    @staticmethod
    def add(keyListener: java.awt.event.KeyListener, keyListener2: java.awt.event.KeyListener) -> java.awt.event.KeyListener: ...
    @typing.overload
    @staticmethod
    def add(mouseListener: java.awt.event.MouseListener, mouseListener2: java.awt.event.MouseListener) -> java.awt.event.MouseListener: ...
    @typing.overload
    @staticmethod
    def add(mouseMotionListener: java.awt.event.MouseMotionListener, mouseMotionListener2: java.awt.event.MouseMotionListener) -> java.awt.event.MouseMotionListener: ...
    @typing.overload
    @staticmethod
    def add(mouseWheelListener: java.awt.event.MouseWheelListener, mouseWheelListener2: java.awt.event.MouseWheelListener) -> java.awt.event.MouseWheelListener: ...
    @typing.overload
    @staticmethod
    def add(textListener: java.awt.event.TextListener, textListener2: java.awt.event.TextListener) -> java.awt.event.TextListener: ...
    @typing.overload
    @staticmethod
    def add(windowFocusListener: java.awt.event.WindowFocusListener, windowFocusListener2: java.awt.event.WindowFocusListener) -> java.awt.event.WindowFocusListener: ...
    @typing.overload
    @staticmethod
    def add(windowListener: java.awt.event.WindowListener, windowListener2: java.awt.event.WindowListener) -> java.awt.event.WindowListener: ...
    @typing.overload
    @staticmethod
    def add(windowStateListener: java.awt.event.WindowStateListener, windowStateListener2: java.awt.event.WindowStateListener) -> java.awt.event.WindowStateListener: ...
    def adjustmentValueChanged(self, adjustmentEvent: java.awt.event.AdjustmentEvent) -> None: ...
    def ancestorMoved(self, hierarchyEvent: java.awt.event.HierarchyEvent) -> None: ...
    def ancestorResized(self, hierarchyEvent: java.awt.event.HierarchyEvent) -> None: ...
    def caretPositionChanged(self, inputMethodEvent: java.awt.event.InputMethodEvent) -> None: ...
    def componentAdded(self, containerEvent: java.awt.event.ContainerEvent) -> None: ...
    def componentHidden(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentMoved(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentRemoved(self, containerEvent: java.awt.event.ContainerEvent) -> None: ...
    def componentResized(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentShown(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def focusGained(self, focusEvent: java.awt.event.FocusEvent) -> None: ...
    def focusLost(self, focusEvent: java.awt.event.FocusEvent) -> None: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    @staticmethod
    def getListeners(eventListener: java.util.EventListener, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    def hierarchyChanged(self, hierarchyEvent: java.awt.event.HierarchyEvent) -> None: ...
    def inputMethodTextChanged(self, inputMethodEvent: java.awt.event.InputMethodEvent) -> None: ...
    def itemStateChanged(self, itemEvent: java.awt.event.ItemEvent) -> None: ...
    def keyPressed(self, keyEvent: java.awt.event.KeyEvent) -> None: ...
    def keyReleased(self, keyEvent: java.awt.event.KeyEvent) -> None: ...
    def keyTyped(self, keyEvent: java.awt.event.KeyEvent) -> None: ...
    def mouseClicked(self, mouseEvent: java.awt.event.MouseEvent) -> None: ...
    def mouseDragged(self, mouseEvent: java.awt.event.MouseEvent) -> None: ...
    def mouseEntered(self, mouseEvent: java.awt.event.MouseEvent) -> None: ...
    def mouseExited(self, mouseEvent: java.awt.event.MouseEvent) -> None: ...
    def mouseMoved(self, mouseEvent: java.awt.event.MouseEvent) -> None: ...
    def mousePressed(self, mouseEvent: java.awt.event.MouseEvent) -> None: ...
    def mouseReleased(self, mouseEvent: java.awt.event.MouseEvent) -> None: ...
    def mouseWheelMoved(self, mouseWheelEvent: java.awt.event.MouseWheelEvent) -> None: ...
    @typing.overload
    @staticmethod
    def remove(actionListener: java.awt.event.ActionListener, actionListener2: java.awt.event.ActionListener) -> java.awt.event.ActionListener: ...
    @typing.overload
    @staticmethod
    def remove(adjustmentListener: java.awt.event.AdjustmentListener, adjustmentListener2: java.awt.event.AdjustmentListener) -> java.awt.event.AdjustmentListener: ...
    @typing.overload
    @staticmethod
    def remove(componentListener: java.awt.event.ComponentListener, componentListener2: java.awt.event.ComponentListener) -> java.awt.event.ComponentListener: ...
    @typing.overload
    @staticmethod
    def remove(containerListener: java.awt.event.ContainerListener, containerListener2: java.awt.event.ContainerListener) -> java.awt.event.ContainerListener: ...
    @typing.overload
    @staticmethod
    def remove(focusListener: java.awt.event.FocusListener, focusListener2: java.awt.event.FocusListener) -> java.awt.event.FocusListener: ...
    @typing.overload
    @staticmethod
    def remove(hierarchyBoundsListener: java.awt.event.HierarchyBoundsListener, hierarchyBoundsListener2: java.awt.event.HierarchyBoundsListener) -> java.awt.event.HierarchyBoundsListener: ...
    @typing.overload
    @staticmethod
    def remove(hierarchyListener: java.awt.event.HierarchyListener, hierarchyListener2: java.awt.event.HierarchyListener) -> java.awt.event.HierarchyListener: ...
    @typing.overload
    @staticmethod
    def remove(inputMethodListener: java.awt.event.InputMethodListener, inputMethodListener2: java.awt.event.InputMethodListener) -> java.awt.event.InputMethodListener: ...
    @typing.overload
    @staticmethod
    def remove(itemListener: java.awt.event.ItemListener, itemListener2: java.awt.event.ItemListener) -> java.awt.event.ItemListener: ...
    @typing.overload
    @staticmethod
    def remove(keyListener: java.awt.event.KeyListener, keyListener2: java.awt.event.KeyListener) -> java.awt.event.KeyListener: ...
    @typing.overload
    @staticmethod
    def remove(mouseListener: java.awt.event.MouseListener, mouseListener2: java.awt.event.MouseListener) -> java.awt.event.MouseListener: ...
    @typing.overload
    @staticmethod
    def remove(mouseMotionListener: java.awt.event.MouseMotionListener, mouseMotionListener2: java.awt.event.MouseMotionListener) -> java.awt.event.MouseMotionListener: ...
    @typing.overload
    @staticmethod
    def remove(mouseWheelListener: java.awt.event.MouseWheelListener, mouseWheelListener2: java.awt.event.MouseWheelListener) -> java.awt.event.MouseWheelListener: ...
    @typing.overload
    @staticmethod
    def remove(textListener: java.awt.event.TextListener, textListener2: java.awt.event.TextListener) -> java.awt.event.TextListener: ...
    @typing.overload
    @staticmethod
    def remove(windowFocusListener: java.awt.event.WindowFocusListener, windowFocusListener2: java.awt.event.WindowFocusListener) -> java.awt.event.WindowFocusListener: ...
    @typing.overload
    @staticmethod
    def remove(windowListener: java.awt.event.WindowListener, windowListener2: java.awt.event.WindowListener) -> java.awt.event.WindowListener: ...
    @typing.overload
    @staticmethod
    def remove(windowStateListener: java.awt.event.WindowStateListener, windowStateListener2: java.awt.event.WindowStateListener) -> java.awt.event.WindowStateListener: ...
    def textValueChanged(self, textEvent: java.awt.event.TextEvent) -> None: ...
    def windowActivated(self, windowEvent: java.awt.event.WindowEvent) -> None: ...
    def windowClosed(self, windowEvent: java.awt.event.WindowEvent) -> None: ...
    def windowClosing(self, windowEvent: java.awt.event.WindowEvent) -> None: ...
    def windowDeactivated(self, windowEvent: java.awt.event.WindowEvent) -> None: ...
    def windowDeiconified(self, windowEvent: java.awt.event.WindowEvent) -> None: ...
    def windowGainedFocus(self, windowEvent: java.awt.event.WindowEvent) -> None: ...
    def windowIconified(self, windowEvent: java.awt.event.WindowEvent) -> None: ...
    def windowLostFocus(self, windowEvent: java.awt.event.WindowEvent) -> None: ...
    def windowOpened(self, windowEvent: java.awt.event.WindowEvent) -> None: ...
    def windowStateChanged(self, windowEvent: java.awt.event.WindowEvent) -> None: ...

class AWTException(java.lang.Exception):
    """
    Java class 'java.awt.AWTException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * AWTException(java.lang.String)
    
    """
    def __init__(self, string: str): ...

class AWTKeyStroke(java.io.Serializable):
    """
    Java class 'java.awt.AWTKeyStroke'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
    """
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    @staticmethod
    def getAWTKeyStroke(char: str) -> 'AWTKeyStroke': ...
    @typing.overload
    @staticmethod
    def getAWTKeyStroke(int: int, int2: int) -> 'AWTKeyStroke': ...
    @typing.overload
    @staticmethod
    def getAWTKeyStroke(int: int, int2: int, boolean: bool) -> 'AWTKeyStroke': ...
    @typing.overload
    @staticmethod
    def getAWTKeyStroke(character: str, int: int) -> 'AWTKeyStroke': ...
    @typing.overload
    @staticmethod
    def getAWTKeyStroke(string: str) -> 'AWTKeyStroke': ...
    @staticmethod
    def getAWTKeyStrokeForEvent(keyEvent: java.awt.event.KeyEvent) -> 'AWTKeyStroke': ...
    def getKeyChar(self) -> str: ...
    def getKeyCode(self) -> int: ...
    def getKeyEventType(self) -> int: ...
    def getModifiers(self) -> int: ...
    def hashCode(self) -> int: ...
    def isOnKeyRelease(self) -> bool: ...
    def toString(self) -> str: ...

class AWTPermission(java.security.BasicPermission):
    """
    Java class 'java.awt.AWTPermission'
    
        Extends:
            java.security.BasicPermission
    
      Constructors:
        * AWTPermission(java.lang.String)
        * AWTPermission(java.lang.String, java.lang.String)
    
    """
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...

class ActiveEvent:
    """
    Java class 'java.awt.ActiveEvent'
    
    """
    def dispatch(self) -> None: ...

class Adjustable:
    """
    Java class 'java.awt.Adjustable'
    
      Attributes:
        HORIZONTAL (int): final static field
        VERTICAL (int): final static field
        NO_ORIENTATION (int): final static field
    
    """
    HORIZONTAL: typing.ClassVar[int] = ...
    VERTICAL: typing.ClassVar[int] = ...
    NO_ORIENTATION: typing.ClassVar[int] = ...
    def addAdjustmentListener(self, adjustmentListener: java.awt.event.AdjustmentListener) -> None: ...
    def getBlockIncrement(self) -> int: ...
    def getMaximum(self) -> int: ...
    def getMinimum(self) -> int: ...
    def getOrientation(self) -> int: ...
    def getUnitIncrement(self) -> int: ...
    def getValue(self) -> int: ...
    def getVisibleAmount(self) -> int: ...
    def removeAdjustmentListener(self, adjustmentListener: java.awt.event.AdjustmentListener) -> None: ...
    def setBlockIncrement(self, int: int) -> None: ...
    def setMaximum(self, int: int) -> None: ...
    def setMinimum(self, int: int) -> None: ...
    def setUnitIncrement(self, int: int) -> None: ...
    def setValue(self, int: int) -> None: ...
    def setVisibleAmount(self, int: int) -> None: ...

class CheckboxGroup(java.io.Serializable):
    """
    Java class 'java.awt.CheckboxGroup'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * CheckboxGroup()
    
    """
    def __init__(self): ...
    def getCurrent(self) -> 'Checkbox': ...
    def getSelectedCheckbox(self) -> 'Checkbox': ...
    def setCurrent(self, checkbox: 'Checkbox') -> None: ...
    def setSelectedCheckbox(self, checkbox: 'Checkbox') -> None: ...
    def toString(self) -> str: ...

class ComponentOrientation(java.io.Serializable):
    """
    Java class 'java.awt.ComponentOrientation'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Attributes:
        LEFT_TO_RIGHT (java.awt.ComponentOrientation): final static field
        RIGHT_TO_LEFT (java.awt.ComponentOrientation): final static field
        UNKNOWN (java.awt.ComponentOrientation): final static field
    
    """
    LEFT_TO_RIGHT: typing.ClassVar['ComponentOrientation'] = ...
    RIGHT_TO_LEFT: typing.ClassVar['ComponentOrientation'] = ...
    UNKNOWN: typing.ClassVar['ComponentOrientation'] = ...
    @typing.overload
    @staticmethod
    def getOrientation(locale: java.util.Locale) -> 'ComponentOrientation': ...
    @typing.overload
    @staticmethod
    def getOrientation(resourceBundle: java.util.ResourceBundle) -> 'ComponentOrientation': ...
    def isHorizontal(self) -> bool: ...
    def isLeftToRight(self) -> bool: ...

class Composite:
    """
    Java class 'java.awt.Composite'
    
    """
    def createContext(self, colorModel: java.awt.image.ColorModel, colorModel2: java.awt.image.ColorModel, renderingHints: 'RenderingHints') -> 'CompositeContext': ...

class CompositeContext:
    """
    Java class 'java.awt.CompositeContext'
    
    """
    def compose(self, raster: java.awt.image.Raster, raster2: java.awt.image.Raster, writableRaster: java.awt.image.WritableRaster) -> None: ...
    def dispose(self) -> None: ...

class Cursor(java.io.Serializable):
    """
    Java class 'java.awt.Cursor'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * Cursor(int)
    
      Attributes:
        DEFAULT_CURSOR (int): final static field
        CROSSHAIR_CURSOR (int): final static field
        TEXT_CURSOR (int): final static field
        WAIT_CURSOR (int): final static field
        SW_RESIZE_CURSOR (int): final static field
        SE_RESIZE_CURSOR (int): final static field
        NW_RESIZE_CURSOR (int): final static field
        NE_RESIZE_CURSOR (int): final static field
        N_RESIZE_CURSOR (int): final static field
        S_RESIZE_CURSOR (int): final static field
        W_RESIZE_CURSOR (int): final static field
        E_RESIZE_CURSOR (int): final static field
        HAND_CURSOR (int): final static field
        MOVE_CURSOR (int): final static field
        CUSTOM_CURSOR (int): final static field
    
    """
    DEFAULT_CURSOR: typing.ClassVar[int] = ...
    CROSSHAIR_CURSOR: typing.ClassVar[int] = ...
    TEXT_CURSOR: typing.ClassVar[int] = ...
    WAIT_CURSOR: typing.ClassVar[int] = ...
    SW_RESIZE_CURSOR: typing.ClassVar[int] = ...
    SE_RESIZE_CURSOR: typing.ClassVar[int] = ...
    NW_RESIZE_CURSOR: typing.ClassVar[int] = ...
    NE_RESIZE_CURSOR: typing.ClassVar[int] = ...
    N_RESIZE_CURSOR: typing.ClassVar[int] = ...
    S_RESIZE_CURSOR: typing.ClassVar[int] = ...
    W_RESIZE_CURSOR: typing.ClassVar[int] = ...
    E_RESIZE_CURSOR: typing.ClassVar[int] = ...
    HAND_CURSOR: typing.ClassVar[int] = ...
    MOVE_CURSOR: typing.ClassVar[int] = ...
    CUSTOM_CURSOR: typing.ClassVar[int] = ...
    def __init__(self, int: int): ...
    @staticmethod
    def getDefaultCursor() -> 'Cursor': ...
    def getName(self) -> str: ...
    @staticmethod
    def getPredefinedCursor(int: int) -> 'Cursor': ...
    @staticmethod
    def getSystemCustomCursor(string: str) -> 'Cursor': ...
    def getType(self) -> int: ...
    def toString(self) -> str: ...

class Desktop:
    """
    Java class 'java.awt.Desktop'
    
        Extends:
            java.lang.Object
    
    """
    def addAppEventListener(self, systemEventListener: java.awt.desktop.SystemEventListener) -> None: ...
    def browse(self, uRI: java.net.URI) -> None: ...
    def browseFileDirectory(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def disableSuddenTermination(self) -> None: ...
    def edit(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def enableSuddenTermination(self) -> None: ...
    @staticmethod
    def getDesktop() -> 'Desktop': ...
    @staticmethod
    def isDesktopSupported() -> bool: ...
    def isSupported(self, action: 'Desktop.Action') -> bool: ...
    @typing.overload
    def mail(self) -> None: ...
    @typing.overload
    def mail(self, uRI: java.net.URI) -> None: ...
    def moveToTrash(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> bool: ...
    def open(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def openHelpViewer(self) -> None: ...
    def removeAppEventListener(self, systemEventListener: java.awt.desktop.SystemEventListener) -> None: ...
    def requestForeground(self, boolean: bool) -> None: ...
    def setAboutHandler(self, aboutHandler: java.awt.desktop.AboutHandler) -> None: ...
    def setDefaultMenuBar(self, jMenuBar: javax.swing.JMenuBar) -> None: ...
    def setOpenFileHandler(self, openFilesHandler: java.awt.desktop.OpenFilesHandler) -> None: ...
    def setOpenURIHandler(self, openURIHandler: java.awt.desktop.OpenURIHandler) -> None: ...
    def setPreferencesHandler(self, preferencesHandler: java.awt.desktop.PreferencesHandler) -> None: ...
    def setPrintFileHandler(self, printFilesHandler: java.awt.desktop.PrintFilesHandler) -> None: ...
    def setQuitHandler(self, quitHandler: java.awt.desktop.QuitHandler) -> None: ...
    def setQuitStrategy(self, quitStrategy: java.awt.desktop.QuitStrategy) -> None: ...
    class Action(java.lang.Enum['Desktop.Action']):
        """
        Java class 'java.awt.Desktop$Action'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            OPEN (java.awt.Desktop$Action): final static enum constant
            EDIT (java.awt.Desktop$Action): final static enum constant
            PRINT (java.awt.Desktop$Action): final static enum constant
            MAIL (java.awt.Desktop$Action): final static enum constant
            BROWSE (java.awt.Desktop$Action): final static enum constant
            APP_EVENT_FOREGROUND (java.awt.Desktop$Action): final static enum constant
            APP_EVENT_HIDDEN (java.awt.Desktop$Action): final static enum constant
            APP_EVENT_REOPENED (java.awt.Desktop$Action): final static enum constant
            APP_EVENT_SCREEN_SLEEP (java.awt.Desktop$Action): final static enum constant
            APP_EVENT_SYSTEM_SLEEP (java.awt.Desktop$Action): final static enum constant
            APP_EVENT_USER_SESSION (java.awt.Desktop$Action): final static enum constant
            APP_ABOUT (java.awt.Desktop$Action): final static enum constant
            APP_PREFERENCES (java.awt.Desktop$Action): final static enum constant
            APP_OPEN_FILE (java.awt.Desktop$Action): final static enum constant
            APP_PRINT_FILE (java.awt.Desktop$Action): final static enum constant
            APP_OPEN_URI (java.awt.Desktop$Action): final static enum constant
            APP_QUIT_HANDLER (java.awt.Desktop$Action): final static enum constant
            APP_QUIT_STRATEGY (java.awt.Desktop$Action): final static enum constant
            APP_SUDDEN_TERMINATION (java.awt.Desktop$Action): final static enum constant
            APP_REQUEST_FOREGROUND (java.awt.Desktop$Action): final static enum constant
            APP_HELP_VIEWER (java.awt.Desktop$Action): final static enum constant
            APP_MENU_BAR (java.awt.Desktop$Action): final static enum constant
            BROWSE_FILE_DIR (java.awt.Desktop$Action): final static enum constant
            MOVE_TO_TRASH (java.awt.Desktop$Action): final static enum constant
        
        """
        OPEN: typing.ClassVar['Desktop.Action'] = ...
        EDIT: typing.ClassVar['Desktop.Action'] = ...
        PRINT: typing.ClassVar['Desktop.Action'] = ...
        MAIL: typing.ClassVar['Desktop.Action'] = ...
        BROWSE: typing.ClassVar['Desktop.Action'] = ...
        APP_EVENT_FOREGROUND: typing.ClassVar['Desktop.Action'] = ...
        APP_EVENT_HIDDEN: typing.ClassVar['Desktop.Action'] = ...
        APP_EVENT_REOPENED: typing.ClassVar['Desktop.Action'] = ...
        APP_EVENT_SCREEN_SLEEP: typing.ClassVar['Desktop.Action'] = ...
        APP_EVENT_SYSTEM_SLEEP: typing.ClassVar['Desktop.Action'] = ...
        APP_EVENT_USER_SESSION: typing.ClassVar['Desktop.Action'] = ...
        APP_ABOUT: typing.ClassVar['Desktop.Action'] = ...
        APP_PREFERENCES: typing.ClassVar['Desktop.Action'] = ...
        APP_OPEN_FILE: typing.ClassVar['Desktop.Action'] = ...
        APP_PRINT_FILE: typing.ClassVar['Desktop.Action'] = ...
        APP_OPEN_URI: typing.ClassVar['Desktop.Action'] = ...
        APP_QUIT_HANDLER: typing.ClassVar['Desktop.Action'] = ...
        APP_QUIT_STRATEGY: typing.ClassVar['Desktop.Action'] = ...
        APP_SUDDEN_TERMINATION: typing.ClassVar['Desktop.Action'] = ...
        APP_REQUEST_FOREGROUND: typing.ClassVar['Desktop.Action'] = ...
        APP_HELP_VIEWER: typing.ClassVar['Desktop.Action'] = ...
        APP_MENU_BAR: typing.ClassVar['Desktop.Action'] = ...
        BROWSE_FILE_DIR: typing.ClassVar['Desktop.Action'] = ...
        MOVE_TO_TRASH: typing.ClassVar['Desktop.Action'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Desktop.Action': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['Desktop.Action']: ...

class Dimension(java.awt.geom.Dimension2D, java.io.Serializable):
    """
    Java class 'java.awt.Dimension'
    
        Extends:
            java.awt.geom.Dimension2D
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * Dimension(java.awt.Dimension)
        * Dimension()
        * Dimension(int, int)
    
      Attributes:
        width (int): field
        height (int): field
    
    """
    width: int = ...
    height: int = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, dimension: 'Dimension'): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getHeight(self) -> float: ...
    def getSize(self) -> 'Dimension': ...
    def getWidth(self) -> float: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setSize(self, double: float, double2: float) -> None: ...
    @typing.overload
    def setSize(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setSize(self, dimension: 'Dimension') -> None: ...
    @typing.overload
    def setSize(self, dimension2D: java.awt.geom.Dimension2D) -> None: ...
    def toString(self) -> str: ...

class DisplayMode:
    """
    Java class 'java.awt.DisplayMode'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * DisplayMode(int, int, int, int)
    
      Attributes:
        BIT_DEPTH_MULTI (int): final static field
        REFRESH_RATE_UNKNOWN (int): final static field
    
    """
    BIT_DEPTH_MULTI: typing.ClassVar[int] = ...
    REFRESH_RATE_UNKNOWN: typing.ClassVar[int] = ...
    def __init__(self, int: int, int2: int, int3: int, int4: int): ...
    @typing.overload
    def equals(self, displayMode: 'DisplayMode') -> bool: ...
    @typing.overload
    def equals(self, object: typing.Any) -> bool: ...
    def getBitDepth(self) -> int: ...
    def getHeight(self) -> int: ...
    def getRefreshRate(self) -> int: ...
    def getWidth(self) -> int: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class Event(java.io.Serializable):
    """
    Java class 'java.awt.Event'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * Event(java.lang.Object, long, int, int, int, int, int)
        * Event(java.lang.Object, long, int, int, int, int, int, java.lang.Object)
        * Event(java.lang.Object, int, java.lang.Object)
    
      Attributes:
        SHIFT_MASK (int): final static field
        CTRL_MASK (int): final static field
        META_MASK (int): final static field
        ALT_MASK (int): final static field
        HOME (int): final static field
        END (int): final static field
        PGUP (int): final static field
        PGDN (int): final static field
        UP (int): final static field
        DOWN (int): final static field
        LEFT (int): final static field
        RIGHT (int): final static field
        F1 (int): final static field
        F2 (int): final static field
        F3 (int): final static field
        F4 (int): final static field
        F5 (int): final static field
        F6 (int): final static field
        F7 (int): final static field
        F8 (int): final static field
        F9 (int): final static field
        F10 (int): final static field
        F11 (int): final static field
        F12 (int): final static field
        PRINT_SCREEN (int): final static field
        SCROLL_LOCK (int): final static field
        CAPS_LOCK (int): final static field
        NUM_LOCK (int): final static field
        PAUSE (int): final static field
        INSERT (int): final static field
        ENTER (int): final static field
        BACK_SPACE (int): final static field
        TAB (int): final static field
        ESCAPE (int): final static field
        DELETE (int): final static field
        WINDOW_DESTROY (int): final static field
        WINDOW_EXPOSE (int): final static field
        WINDOW_ICONIFY (int): final static field
        WINDOW_DEICONIFY (int): final static field
        WINDOW_MOVED (int): final static field
        KEY_PRESS (int): final static field
        KEY_RELEASE (int): final static field
        KEY_ACTION (int): final static field
        KEY_ACTION_RELEASE (int): final static field
        MOUSE_DOWN (int): final static field
        MOUSE_UP (int): final static field
        MOUSE_MOVE (int): final static field
        MOUSE_ENTER (int): final static field
        MOUSE_EXIT (int): final static field
        MOUSE_DRAG (int): final static field
        SCROLL_LINE_UP (int): final static field
        SCROLL_LINE_DOWN (int): final static field
        SCROLL_PAGE_UP (int): final static field
        SCROLL_PAGE_DOWN (int): final static field
        SCROLL_ABSOLUTE (int): final static field
        SCROLL_BEGIN (int): final static field
        SCROLL_END (int): final static field
        LIST_SELECT (int): final static field
        LIST_DESELECT (int): final static field
        ACTION_EVENT (int): final static field
        LOAD_FILE (int): final static field
        SAVE_FILE (int): final static field
        GOT_FOCUS (int): final static field
        LOST_FOCUS (int): final static field
        target (java.lang.Object): field
        when (long): field
        id (int): field
        x (int): field
        y (int): field
        key (int): field
        modifiers (int): field
        clickCount (int): field
        arg (java.lang.Object): field
        evt (java.awt.Event): field
    
    """
    SHIFT_MASK: typing.ClassVar[int] = ...
    CTRL_MASK: typing.ClassVar[int] = ...
    META_MASK: typing.ClassVar[int] = ...
    ALT_MASK: typing.ClassVar[int] = ...
    HOME: typing.ClassVar[int] = ...
    END: typing.ClassVar[int] = ...
    PGUP: typing.ClassVar[int] = ...
    PGDN: typing.ClassVar[int] = ...
    UP: typing.ClassVar[int] = ...
    DOWN: typing.ClassVar[int] = ...
    LEFT: typing.ClassVar[int] = ...
    RIGHT: typing.ClassVar[int] = ...
    F1: typing.ClassVar[int] = ...
    F2: typing.ClassVar[int] = ...
    F3: typing.ClassVar[int] = ...
    F4: typing.ClassVar[int] = ...
    F5: typing.ClassVar[int] = ...
    F6: typing.ClassVar[int] = ...
    F7: typing.ClassVar[int] = ...
    F8: typing.ClassVar[int] = ...
    F9: typing.ClassVar[int] = ...
    F10: typing.ClassVar[int] = ...
    F11: typing.ClassVar[int] = ...
    F12: typing.ClassVar[int] = ...
    PRINT_SCREEN: typing.ClassVar[int] = ...
    SCROLL_LOCK: typing.ClassVar[int] = ...
    CAPS_LOCK: typing.ClassVar[int] = ...
    NUM_LOCK: typing.ClassVar[int] = ...
    PAUSE: typing.ClassVar[int] = ...
    INSERT: typing.ClassVar[int] = ...
    ENTER: typing.ClassVar[int] = ...
    BACK_SPACE: typing.ClassVar[int] = ...
    TAB: typing.ClassVar[int] = ...
    ESCAPE: typing.ClassVar[int] = ...
    DELETE: typing.ClassVar[int] = ...
    WINDOW_DESTROY: typing.ClassVar[int] = ...
    WINDOW_EXPOSE: typing.ClassVar[int] = ...
    WINDOW_ICONIFY: typing.ClassVar[int] = ...
    WINDOW_DEICONIFY: typing.ClassVar[int] = ...
    WINDOW_MOVED: typing.ClassVar[int] = ...
    KEY_PRESS: typing.ClassVar[int] = ...
    KEY_RELEASE: typing.ClassVar[int] = ...
    KEY_ACTION: typing.ClassVar[int] = ...
    KEY_ACTION_RELEASE: typing.ClassVar[int] = ...
    MOUSE_DOWN: typing.ClassVar[int] = ...
    MOUSE_UP: typing.ClassVar[int] = ...
    MOUSE_MOVE: typing.ClassVar[int] = ...
    MOUSE_ENTER: typing.ClassVar[int] = ...
    MOUSE_EXIT: typing.ClassVar[int] = ...
    MOUSE_DRAG: typing.ClassVar[int] = ...
    SCROLL_LINE_UP: typing.ClassVar[int] = ...
    SCROLL_LINE_DOWN: typing.ClassVar[int] = ...
    SCROLL_PAGE_UP: typing.ClassVar[int] = ...
    SCROLL_PAGE_DOWN: typing.ClassVar[int] = ...
    SCROLL_ABSOLUTE: typing.ClassVar[int] = ...
    SCROLL_BEGIN: typing.ClassVar[int] = ...
    SCROLL_END: typing.ClassVar[int] = ...
    LIST_SELECT: typing.ClassVar[int] = ...
    LIST_DESELECT: typing.ClassVar[int] = ...
    ACTION_EVENT: typing.ClassVar[int] = ...
    LOAD_FILE: typing.ClassVar[int] = ...
    SAVE_FILE: typing.ClassVar[int] = ...
    GOT_FOCUS: typing.ClassVar[int] = ...
    LOST_FOCUS: typing.ClassVar[int] = ...
    target: typing.Any = ...
    when: int = ...
    id: int = ...
    x: int = ...
    y: int = ...
    key: int = ...
    modifiers: int = ...
    clickCount: int = ...
    arg: typing.Any = ...
    evt: 'Event' = ...
    @typing.overload
    def __init__(self, object: typing.Any, int: int, object2: typing.Any): ...
    @typing.overload
    def __init__(self, object: typing.Any, long: int, int: int, int2: int, int3: int, int4: int, int5: int): ...
    @typing.overload
    def __init__(self, object: typing.Any, long: int, int: int, int2: int, int3: int, int4: int, int5: int, object2: typing.Any): ...
    def controlDown(self) -> bool: ...
    def metaDown(self) -> bool: ...
    def shiftDown(self) -> bool: ...
    def toString(self) -> str: ...
    def translate(self, int: int, int2: int) -> None: ...

class EventQueue:
    """
    Java class 'java.awt.EventQueue'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * EventQueue()
    
    """
    def __init__(self): ...
    def createSecondaryLoop(self) -> 'SecondaryLoop': ...
    @staticmethod
    def getCurrentEvent() -> AWTEvent: ...
    @staticmethod
    def getMostRecentEventTime() -> int: ...
    def getNextEvent(self) -> AWTEvent: ...
    @staticmethod
    def invokeAndWait(runnable: typing.Union[java.lang.Runnable, typing.Callable]) -> None: ...
    @staticmethod
    def invokeLater(runnable: typing.Union[java.lang.Runnable, typing.Callable]) -> None: ...
    @staticmethod
    def isDispatchThread() -> bool: ...
    @typing.overload
    def peekEvent(self) -> AWTEvent: ...
    @typing.overload
    def peekEvent(self, int: int) -> AWTEvent: ...
    def postEvent(self, aWTEvent: AWTEvent) -> None: ...
    def push(self, eventQueue: 'EventQueue') -> None: ...

class FocusTraversalPolicy:
    """
    Java class 'java.awt.FocusTraversalPolicy'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * FocusTraversalPolicy()
    
    """
    def __init__(self): ...
    def getComponentAfter(self, container: 'Container', component: 'Component') -> 'Component': ...
    def getComponentBefore(self, container: 'Container', component: 'Component') -> 'Component': ...
    def getDefaultComponent(self, container: 'Container') -> 'Component': ...
    def getFirstComponent(self, container: 'Container') -> 'Component': ...
    def getInitialComponent(self, window: 'Window') -> 'Component': ...
    def getLastComponent(self, container: 'Container') -> 'Component': ...

class Font(java.io.Serializable):
    """
    Java class 'java.awt.Font'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * Font(java.util.Map)
        * Font(java.lang.String, int, int)
    
      Attributes:
        DIALOG (java.lang.String): final static field
        DIALOG_INPUT (java.lang.String): final static field
        SANS_SERIF (java.lang.String): final static field
        SERIF (java.lang.String): final static field
        MONOSPACED (java.lang.String): final static field
        PLAIN (int): final static field
        BOLD (int): final static field
        ITALIC (int): final static field
        ROMAN_BASELINE (int): final static field
        CENTER_BASELINE (int): final static field
        HANGING_BASELINE (int): final static field
        TRUETYPE_FONT (int): final static field
        TYPE1_FONT (int): final static field
        LAYOUT_LEFT_TO_RIGHT (int): final static field
        LAYOUT_RIGHT_TO_LEFT (int): final static field
        LAYOUT_NO_START_CONTEXT (int): final static field
        LAYOUT_NO_LIMIT_CONTEXT (int): final static field
    
    """
    DIALOG: typing.ClassVar[str] = ...
    DIALOG_INPUT: typing.ClassVar[str] = ...
    SANS_SERIF: typing.ClassVar[str] = ...
    SERIF: typing.ClassVar[str] = ...
    MONOSPACED: typing.ClassVar[str] = ...
    PLAIN: typing.ClassVar[int] = ...
    BOLD: typing.ClassVar[int] = ...
    ITALIC: typing.ClassVar[int] = ...
    ROMAN_BASELINE: typing.ClassVar[int] = ...
    CENTER_BASELINE: typing.ClassVar[int] = ...
    HANGING_BASELINE: typing.ClassVar[int] = ...
    TRUETYPE_FONT: typing.ClassVar[int] = ...
    TYPE1_FONT: typing.ClassVar[int] = ...
    LAYOUT_LEFT_TO_RIGHT: typing.ClassVar[int] = ...
    LAYOUT_RIGHT_TO_LEFT: typing.ClassVar[int] = ...
    LAYOUT_NO_START_CONTEXT: typing.ClassVar[int] = ...
    LAYOUT_NO_LIMIT_CONTEXT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, string: str, int: int, int2: int): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[java.text.AttributedCharacterIterator.Attribute, typing.Any], typing.Mapping[java.text.AttributedCharacterIterator.Attribute, typing.Any]]): ...
    @typing.overload
    def canDisplay(self, char: str) -> bool: ...
    @typing.overload
    def canDisplay(self, int: int) -> bool: ...
    @typing.overload
    def canDisplayUpTo(self, charArray: typing.List[str], int: int, int2: int) -> int: ...
    @typing.overload
    def canDisplayUpTo(self, string: str) -> int: ...
    @typing.overload
    def canDisplayUpTo(self, characterIterator: java.text.CharacterIterator, int: int, int2: int) -> int: ...
    @typing.overload
    @staticmethod
    def createFont(int: int, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> 'Font': ...
    @typing.overload
    @staticmethod
    def createFont(int: int, inputStream: java.io.InputStream) -> 'Font': ...
    @typing.overload
    @staticmethod
    def createFonts(file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> typing.List['Font']: ...
    @typing.overload
    @staticmethod
    def createFonts(inputStream: java.io.InputStream) -> typing.List['Font']: ...
    @typing.overload
    def createGlyphVector(self, fontRenderContext: java.awt.font.FontRenderContext, charArray: typing.List[str]) -> java.awt.font.GlyphVector: ...
    @typing.overload
    def createGlyphVector(self, fontRenderContext: java.awt.font.FontRenderContext, intArray: typing.List[int]) -> java.awt.font.GlyphVector: ...
    @typing.overload
    def createGlyphVector(self, fontRenderContext: java.awt.font.FontRenderContext, string: str) -> java.awt.font.GlyphVector: ...
    @typing.overload
    def createGlyphVector(self, fontRenderContext: java.awt.font.FontRenderContext, characterIterator: java.text.CharacterIterator) -> java.awt.font.GlyphVector: ...
    @staticmethod
    def decode(string: str) -> 'Font': ...
    @typing.overload
    def deriveFont(self, float: float) -> 'Font': ...
    @typing.overload
    def deriveFont(self, int: int) -> 'Font': ...
    @typing.overload
    def deriveFont(self, int: int, float: float) -> 'Font': ...
    @typing.overload
    def deriveFont(self, int: int, affineTransform: java.awt.geom.AffineTransform) -> 'Font': ...
    @typing.overload
    def deriveFont(self, affineTransform: java.awt.geom.AffineTransform) -> 'Font': ...
    @typing.overload
    def deriveFont(self, map: typing.Union[java.util.Map[java.text.AttributedCharacterIterator.Attribute, typing.Any], typing.Mapping[java.text.AttributedCharacterIterator.Attribute, typing.Any]]) -> 'Font': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAttributes(self) -> java.util.Map[java.awt.font.TextAttribute, typing.Any]: ...
    def getAvailableAttributes(self) -> typing.List[java.text.AttributedCharacterIterator.Attribute]: ...
    def getBaselineFor(self, char: str) -> int: ...
    @typing.overload
    def getFamily(self) -> str: ...
    @typing.overload
    def getFamily(self, locale: java.util.Locale) -> str: ...
    @typing.overload
    @staticmethod
    def getFont(string: str) -> 'Font': ...
    @typing.overload
    @staticmethod
    def getFont(string: str, font: 'Font') -> 'Font': ...
    @typing.overload
    @staticmethod
    def getFont(map: typing.Union[java.util.Map[java.text.AttributedCharacterIterator.Attribute, typing.Any], typing.Mapping[java.text.AttributedCharacterIterator.Attribute, typing.Any]]) -> 'Font': ...
    @typing.overload
    def getFontName(self) -> str: ...
    @typing.overload
    def getFontName(self, locale: java.util.Locale) -> str: ...
    def getItalicAngle(self) -> float: ...
    @typing.overload
    def getLineMetrics(self, charArray: typing.List[str], int: int, int2: int, fontRenderContext: java.awt.font.FontRenderContext) -> java.awt.font.LineMetrics: ...
    @typing.overload
    def getLineMetrics(self, string: str, int: int, int2: int, fontRenderContext: java.awt.font.FontRenderContext) -> java.awt.font.LineMetrics: ...
    @typing.overload
    def getLineMetrics(self, string: str, fontRenderContext: java.awt.font.FontRenderContext) -> java.awt.font.LineMetrics: ...
    @typing.overload
    def getLineMetrics(self, characterIterator: java.text.CharacterIterator, int: int, int2: int, fontRenderContext: java.awt.font.FontRenderContext) -> java.awt.font.LineMetrics: ...
    def getMaxCharBounds(self, fontRenderContext: java.awt.font.FontRenderContext) -> java.awt.geom.Rectangle2D: ...
    def getMissingGlyphCode(self) -> int: ...
    def getName(self) -> str: ...
    def getNumGlyphs(self) -> int: ...
    def getPSName(self) -> str: ...
    def getSize(self) -> int: ...
    def getSize2D(self) -> float: ...
    @typing.overload
    def getStringBounds(self, charArray: typing.List[str], int: int, int2: int, fontRenderContext: java.awt.font.FontRenderContext) -> java.awt.geom.Rectangle2D: ...
    @typing.overload
    def getStringBounds(self, string: str, int: int, int2: int, fontRenderContext: java.awt.font.FontRenderContext) -> java.awt.geom.Rectangle2D: ...
    @typing.overload
    def getStringBounds(self, string: str, fontRenderContext: java.awt.font.FontRenderContext) -> java.awt.geom.Rectangle2D: ...
    @typing.overload
    def getStringBounds(self, characterIterator: java.text.CharacterIterator, int: int, int2: int, fontRenderContext: java.awt.font.FontRenderContext) -> java.awt.geom.Rectangle2D: ...
    def getStyle(self) -> int: ...
    def getTransform(self) -> java.awt.geom.AffineTransform: ...
    def hasLayoutAttributes(self) -> bool: ...
    def hasUniformLineMetrics(self) -> bool: ...
    def hashCode(self) -> int: ...
    def isBold(self) -> bool: ...
    def isItalic(self) -> bool: ...
    def isPlain(self) -> bool: ...
    def isTransformed(self) -> bool: ...
    def layoutGlyphVector(self, fontRenderContext: java.awt.font.FontRenderContext, charArray: typing.List[str], int: int, int2: int, int3: int) -> java.awt.font.GlyphVector: ...
    @staticmethod
    def textRequiresLayout(charArray: typing.List[str], int: int, int2: int) -> bool: ...
    def toString(self) -> str: ...

class FontFormatException(java.lang.Exception):
    """
    Java class 'java.awt.FontFormatException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * FontFormatException(java.lang.String)
    
    """
    def __init__(self, string: str): ...

class FontMetrics(java.io.Serializable):
    """
    Java class 'java.awt.FontMetrics'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
    """
    def bytesWidth(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    @typing.overload
    def charWidth(self, char: str) -> int: ...
    @typing.overload
    def charWidth(self, int: int) -> int: ...
    def charsWidth(self, charArray: typing.List[str], int: int, int2: int) -> int: ...
    def getAscent(self) -> int: ...
    def getDescent(self) -> int: ...
    def getFont(self) -> Font: ...
    def getFontRenderContext(self) -> java.awt.font.FontRenderContext: ...
    def getHeight(self) -> int: ...
    def getLeading(self) -> int: ...
    @typing.overload
    def getLineMetrics(self, charArray: typing.List[str], int: int, int2: int, graphics: 'Graphics') -> java.awt.font.LineMetrics: ...
    @typing.overload
    def getLineMetrics(self, string: str, int: int, int2: int, graphics: 'Graphics') -> java.awt.font.LineMetrics: ...
    @typing.overload
    def getLineMetrics(self, string: str, graphics: 'Graphics') -> java.awt.font.LineMetrics: ...
    @typing.overload
    def getLineMetrics(self, characterIterator: java.text.CharacterIterator, int: int, int2: int, graphics: 'Graphics') -> java.awt.font.LineMetrics: ...
    def getMaxAdvance(self) -> int: ...
    def getMaxAscent(self) -> int: ...
    def getMaxCharBounds(self, graphics: 'Graphics') -> java.awt.geom.Rectangle2D: ...
    def getMaxDecent(self) -> int: ...
    def getMaxDescent(self) -> int: ...
    @typing.overload
    def getStringBounds(self, charArray: typing.List[str], int: int, int2: int, graphics: 'Graphics') -> java.awt.geom.Rectangle2D: ...
    @typing.overload
    def getStringBounds(self, string: str, int: int, int2: int, graphics: 'Graphics') -> java.awt.geom.Rectangle2D: ...
    @typing.overload
    def getStringBounds(self, string: str, graphics: 'Graphics') -> java.awt.geom.Rectangle2D: ...
    @typing.overload
    def getStringBounds(self, characterIterator: java.text.CharacterIterator, int: int, int2: int, graphics: 'Graphics') -> java.awt.geom.Rectangle2D: ...
    def getWidths(self) -> typing.List[int]: ...
    def hasUniformLineMetrics(self) -> bool: ...
    def stringWidth(self, string: str) -> int: ...
    def toString(self) -> str: ...

class Graphics:
    """
    Java class 'java.awt.Graphics'
    
        Extends:
            java.lang.Object
    
    """
    def clearRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def clipRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def copyArea(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    @typing.overload
    def create(self) -> 'Graphics': ...
    @typing.overload
    def create(self, int: int, int2: int, int3: int, int4: int) -> 'Graphics': ...
    def dispose(self) -> None: ...
    def draw3DRect(self, int: int, int2: int, int3: int, int4: int, boolean: bool) -> None: ...
    def drawArc(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    def drawBytes(self, byteArray: typing.List[int], int: int, int2: int, int3: int, int4: int) -> None: ...
    def drawChars(self, charArray: typing.List[str], int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def drawImage(self, image: 'Image', int: int, int2: int, int3: int, int4: int, int5: int, int6: int, int7: int, int8: int, color: 'Color', imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: 'Image', int: int, int2: int, int3: int, int4: int, int5: int, int6: int, int7: int, int8: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: 'Image', int: int, int2: int, int3: int, int4: int, color: 'Color', imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: 'Image', int: int, int2: int, int3: int, int4: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: 'Image', int: int, int2: int, color: 'Color', imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: 'Image', int: int, int2: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    def drawLine(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def drawOval(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def drawPolygon(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    @typing.overload
    def drawPolygon(self, polygon: 'Polygon') -> None: ...
    def drawPolyline(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    def drawRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def drawRoundRect(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    @typing.overload
    def drawString(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def drawString(self, attributedCharacterIterator: java.text.AttributedCharacterIterator, int: int, int2: int) -> None: ...
    def fill3DRect(self, int: int, int2: int, int3: int, int4: int, boolean: bool) -> None: ...
    def fillArc(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    def fillOval(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def fillPolygon(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    @typing.overload
    def fillPolygon(self, polygon: 'Polygon') -> None: ...
    def fillRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def fillRoundRect(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    def finalize(self) -> None: ...
    def getClip(self) -> 'Shape': ...
    @typing.overload
    def getClipBounds(self) -> 'Rectangle': ...
    @typing.overload
    def getClipBounds(self, rectangle: 'Rectangle') -> 'Rectangle': ...
    def getClipRect(self) -> 'Rectangle': ...
    def getColor(self) -> 'Color': ...
    def getFont(self) -> Font: ...
    @typing.overload
    def getFontMetrics(self, font: Font) -> FontMetrics: ...
    @typing.overload
    def getFontMetrics(self) -> FontMetrics: ...
    def hitClip(self, int: int, int2: int, int3: int, int4: int) -> bool: ...
    @typing.overload
    def setClip(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def setClip(self, shape: 'Shape') -> None: ...
    def setColor(self, color: 'Color') -> None: ...
    def setFont(self, font: Font) -> None: ...
    def setPaintMode(self) -> None: ...
    def setXORMode(self, color: 'Color') -> None: ...
    def toString(self) -> str: ...
    def translate(self, int: int, int2: int) -> None: ...

class GraphicsConfigTemplate(java.io.Serializable):
    """
    Java class 'java.awt.GraphicsConfigTemplate'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * GraphicsConfigTemplate()
    
      Attributes:
        REQUIRED (int): final static field
        PREFERRED (int): final static field
        UNNECESSARY (int): final static field
    
    """
    REQUIRED: typing.ClassVar[int] = ...
    PREFERRED: typing.ClassVar[int] = ...
    UNNECESSARY: typing.ClassVar[int] = ...
    def __init__(self): ...
    def getBestConfiguration(self, graphicsConfigurationArray: typing.List['GraphicsConfiguration']) -> 'GraphicsConfiguration': ...
    def isGraphicsConfigSupported(self, graphicsConfiguration: 'GraphicsConfiguration') -> bool: ...

class GraphicsConfiguration:
    """
    Java class 'java.awt.GraphicsConfiguration'
    
        Extends:
            java.lang.Object
    
    """
    @typing.overload
    def createCompatibleImage(self, int: int, int2: int) -> java.awt.image.BufferedImage: ...
    @typing.overload
    def createCompatibleImage(self, int: int, int2: int, int3: int) -> java.awt.image.BufferedImage: ...
    @typing.overload
    def createCompatibleVolatileImage(self, int: int, int2: int) -> java.awt.image.VolatileImage: ...
    @typing.overload
    def createCompatibleVolatileImage(self, int: int, int2: int, int3: int) -> java.awt.image.VolatileImage: ...
    @typing.overload
    def createCompatibleVolatileImage(self, int: int, int2: int, imageCapabilities: 'ImageCapabilities') -> java.awt.image.VolatileImage: ...
    @typing.overload
    def createCompatibleVolatileImage(self, int: int, int2: int, imageCapabilities: 'ImageCapabilities', int3: int) -> java.awt.image.VolatileImage: ...
    def getBounds(self) -> 'Rectangle': ...
    def getBufferCapabilities(self) -> 'BufferCapabilities': ...
    @typing.overload
    def getColorModel(self) -> java.awt.image.ColorModel: ...
    @typing.overload
    def getColorModel(self, int: int) -> java.awt.image.ColorModel: ...
    def getDefaultTransform(self) -> java.awt.geom.AffineTransform: ...
    def getDevice(self) -> 'GraphicsDevice': ...
    def getImageCapabilities(self) -> 'ImageCapabilities': ...
    def getNormalizingTransform(self) -> java.awt.geom.AffineTransform: ...
    def isTranslucencyCapable(self) -> bool: ...

class GraphicsDevice:
    """
    Java class 'java.awt.GraphicsDevice'
    
        Extends:
            java.lang.Object
    
      Attributes:
        TYPE_RASTER_SCREEN (int): final static field
        TYPE_PRINTER (int): final static field
        TYPE_IMAGE_BUFFER (int): final static field
    
    """
    TYPE_RASTER_SCREEN: typing.ClassVar[int] = ...
    TYPE_PRINTER: typing.ClassVar[int] = ...
    TYPE_IMAGE_BUFFER: typing.ClassVar[int] = ...
    def getAvailableAcceleratedMemory(self) -> int: ...
    def getBestConfiguration(self, graphicsConfigTemplate: GraphicsConfigTemplate) -> GraphicsConfiguration: ...
    def getConfigurations(self) -> typing.List[GraphicsConfiguration]: ...
    def getDefaultConfiguration(self) -> GraphicsConfiguration: ...
    def getDisplayMode(self) -> DisplayMode: ...
    def getDisplayModes(self) -> typing.List[DisplayMode]: ...
    def getFullScreenWindow(self) -> 'Window': ...
    def getIDstring(self) -> str: ...
    def getType(self) -> int: ...
    def isDisplayChangeSupported(self) -> bool: ...
    def isFullScreenSupported(self) -> bool: ...
    def isWindowTranslucencySupported(self, windowTranslucency: 'GraphicsDevice.WindowTranslucency') -> bool: ...
    def setDisplayMode(self, displayMode: DisplayMode) -> None: ...
    def setFullScreenWindow(self, window: 'Window') -> None: ...
    class WindowTranslucency(java.lang.Enum['GraphicsDevice.WindowTranslucency']):
        """
        Java class 'java.awt.GraphicsDevice$WindowTranslucency'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            PERPIXEL_TRANSPARENT (java.awt.GraphicsDevice$WindowTranslucency): final static enum constant
            TRANSLUCENT (java.awt.GraphicsDevice$WindowTranslucency): final static enum constant
            PERPIXEL_TRANSLUCENT (java.awt.GraphicsDevice$WindowTranslucency): final static enum constant
        
        """
        PERPIXEL_TRANSPARENT: typing.ClassVar['GraphicsDevice.WindowTranslucency'] = ...
        TRANSLUCENT: typing.ClassVar['GraphicsDevice.WindowTranslucency'] = ...
        PERPIXEL_TRANSLUCENT: typing.ClassVar['GraphicsDevice.WindowTranslucency'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'GraphicsDevice.WindowTranslucency': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['GraphicsDevice.WindowTranslucency']: ...

class GraphicsEnvironment:
    """
    Java class 'java.awt.GraphicsEnvironment'
    
        Extends:
            java.lang.Object
    
    """
    def createGraphics(self, bufferedImage: java.awt.image.BufferedImage) -> 'Graphics2D': ...
    def getAllFonts(self) -> typing.List[Font]: ...
    @typing.overload
    def getAvailableFontFamilyNames(self) -> typing.List[str]: ...
    @typing.overload
    def getAvailableFontFamilyNames(self, locale: java.util.Locale) -> typing.List[str]: ...
    def getCenterPoint(self) -> 'Point': ...
    def getDefaultScreenDevice(self) -> GraphicsDevice: ...
    @staticmethod
    def getLocalGraphicsEnvironment() -> 'GraphicsEnvironment': ...
    def getMaximumWindowBounds(self) -> 'Rectangle': ...
    def getScreenDevices(self) -> typing.List[GraphicsDevice]: ...
    @staticmethod
    def isHeadless() -> bool: ...
    def isHeadlessInstance(self) -> bool: ...
    def preferLocaleFonts(self) -> None: ...
    def preferProportionalFonts(self) -> None: ...
    def registerFont(self, font: Font) -> bool: ...

class GridBagConstraints(java.lang.Cloneable, java.io.Serializable):
    """
    Java class 'java.awt.GridBagConstraints'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.lang.Cloneable, java.io.Serializable
    
      Constructors:
        * GridBagConstraints()
        * GridBagConstraints(int, int, int, int, double, double, int, int, java.awt.Insets, int, int)
    
      Attributes:
        RELATIVE (int): final static field
        REMAINDER (int): final static field
        NONE (int): final static field
        BOTH (int): final static field
        HORIZONTAL (int): final static field
        VERTICAL (int): final static field
        CENTER (int): final static field
        NORTH (int): final static field
        NORTHEAST (int): final static field
        EAST (int): final static field
        SOUTHEAST (int): final static field
        SOUTH (int): final static field
        SOUTHWEST (int): final static field
        WEST (int): final static field
        NORTHWEST (int): final static field
        PAGE_START (int): final static field
        PAGE_END (int): final static field
        LINE_START (int): final static field
        LINE_END (int): final static field
        FIRST_LINE_START (int): final static field
        FIRST_LINE_END (int): final static field
        LAST_LINE_START (int): final static field
        LAST_LINE_END (int): final static field
        BASELINE (int): final static field
        BASELINE_LEADING (int): final static field
        BASELINE_TRAILING (int): final static field
        ABOVE_BASELINE (int): final static field
        ABOVE_BASELINE_LEADING (int): final static field
        ABOVE_BASELINE_TRAILING (int): final static field
        BELOW_BASELINE (int): final static field
        BELOW_BASELINE_LEADING (int): final static field
        BELOW_BASELINE_TRAILING (int): final static field
        gridx (int): field
        gridy (int): field
        gridwidth (int): field
        gridheight (int): field
        weightx (double): field
        weighty (double): field
        anchor (int): field
        fill (int): field
        insets (java.awt.Insets): field
        ipadx (int): field
        ipady (int): field
    
    """
    RELATIVE: typing.ClassVar[int] = ...
    REMAINDER: typing.ClassVar[int] = ...
    NONE: typing.ClassVar[int] = ...
    BOTH: typing.ClassVar[int] = ...
    HORIZONTAL: typing.ClassVar[int] = ...
    VERTICAL: typing.ClassVar[int] = ...
    CENTER: typing.ClassVar[int] = ...
    NORTH: typing.ClassVar[int] = ...
    NORTHEAST: typing.ClassVar[int] = ...
    EAST: typing.ClassVar[int] = ...
    SOUTHEAST: typing.ClassVar[int] = ...
    SOUTH: typing.ClassVar[int] = ...
    SOUTHWEST: typing.ClassVar[int] = ...
    WEST: typing.ClassVar[int] = ...
    NORTHWEST: typing.ClassVar[int] = ...
    PAGE_START: typing.ClassVar[int] = ...
    PAGE_END: typing.ClassVar[int] = ...
    LINE_START: typing.ClassVar[int] = ...
    LINE_END: typing.ClassVar[int] = ...
    FIRST_LINE_START: typing.ClassVar[int] = ...
    FIRST_LINE_END: typing.ClassVar[int] = ...
    LAST_LINE_START: typing.ClassVar[int] = ...
    LAST_LINE_END: typing.ClassVar[int] = ...
    BASELINE: typing.ClassVar[int] = ...
    BASELINE_LEADING: typing.ClassVar[int] = ...
    BASELINE_TRAILING: typing.ClassVar[int] = ...
    ABOVE_BASELINE: typing.ClassVar[int] = ...
    ABOVE_BASELINE_LEADING: typing.ClassVar[int] = ...
    ABOVE_BASELINE_TRAILING: typing.ClassVar[int] = ...
    BELOW_BASELINE: typing.ClassVar[int] = ...
    BELOW_BASELINE_LEADING: typing.ClassVar[int] = ...
    BELOW_BASELINE_TRAILING: typing.ClassVar[int] = ...
    gridx: int = ...
    gridy: int = ...
    gridwidth: int = ...
    gridheight: int = ...
    weightx: float = ...
    weighty: float = ...
    anchor: int = ...
    fill: int = ...
    insets: 'Insets' = ...
    ipadx: int = ...
    ipady: int = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int, double: float, double2: float, int5: int, int6: int, insets: 'Insets', int7: int, int8: int): ...
    def clone(self) -> typing.Any: ...

class GridBagLayoutInfo(java.io.Serializable): ...

class HeadlessException(java.lang.UnsupportedOperationException):
    """
    Java class 'java.awt.HeadlessException'
    
        Extends:
            java.lang.UnsupportedOperationException
    
      Constructors:
        * HeadlessException()
        * HeadlessException(java.lang.String)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    def getMessage(self) -> str: ...

class IllegalComponentStateException(java.lang.IllegalStateException):
    """
    Java class 'java.awt.IllegalComponentStateException'
    
        Extends:
            java.lang.IllegalStateException
    
      Constructors:
        * IllegalComponentStateException()
        * IllegalComponentStateException(java.lang.String)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...

class Image:
    """
    Java class 'java.awt.Image'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Image()
    
      Attributes:
        UndefinedProperty (java.lang.Object): final static field
        SCALE_DEFAULT (int): final static field
        SCALE_FAST (int): final static field
        SCALE_SMOOTH (int): final static field
        SCALE_REPLICATE (int): final static field
        SCALE_AREA_AVERAGING (int): final static field
    
    """
    UndefinedProperty: typing.ClassVar[typing.Any] = ...
    SCALE_DEFAULT: typing.ClassVar[int] = ...
    SCALE_FAST: typing.ClassVar[int] = ...
    SCALE_SMOOTH: typing.ClassVar[int] = ...
    SCALE_REPLICATE: typing.ClassVar[int] = ...
    SCALE_AREA_AVERAGING: typing.ClassVar[int] = ...
    def __init__(self): ...
    def flush(self) -> None: ...
    def getAccelerationPriority(self) -> float: ...
    def getCapabilities(self, graphicsConfiguration: GraphicsConfiguration) -> 'ImageCapabilities': ...
    def getGraphics(self) -> Graphics: ...
    def getHeight(self, imageObserver: java.awt.image.ImageObserver) -> int: ...
    def getProperty(self, string: str, imageObserver: java.awt.image.ImageObserver) -> typing.Any: ...
    def getScaledInstance(self, int: int, int2: int, int3: int) -> 'Image': ...
    def getSource(self) -> java.awt.image.ImageProducer: ...
    def getWidth(self, imageObserver: java.awt.image.ImageObserver) -> int: ...
    def setAccelerationPriority(self, float: float) -> None: ...

class ImageCapabilities(java.lang.Cloneable):
    """
    Java class 'java.awt.ImageCapabilities'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.lang.Cloneable
    
      Constructors:
        * ImageCapabilities(boolean)
    
    """
    def __init__(self, boolean: bool): ...
    def clone(self) -> typing.Any: ...
    def isAccelerated(self) -> bool: ...
    def isTrueVolatile(self) -> bool: ...

class Insets(java.lang.Cloneable, java.io.Serializable):
    """
    Java class 'java.awt.Insets'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.lang.Cloneable, java.io.Serializable
    
      Constructors:
        * Insets(int, int, int, int)
    
      Attributes:
        top (int): field
        left (int): field
        bottom (int): field
        right (int): field
    
    """
    top: int = ...
    left: int = ...
    bottom: int = ...
    right: int = ...
    def __init__(self, int: int, int2: int, int3: int, int4: int): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def set(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def toString(self) -> str: ...

class ItemSelectable:
    """
    Java class 'java.awt.ItemSelectable'
    
    """
    def addItemListener(self, itemListener: java.awt.event.ItemListener) -> None: ...
    def getSelectedObjects(self) -> typing.List[typing.Any]: ...
    def removeItemListener(self, itemListener: java.awt.event.ItemListener) -> None: ...

class KeyEventDispatcher:
    """
    Java class 'java.awt.KeyEventDispatcher'
    
    """
    def dispatchKeyEvent(self, keyEvent: java.awt.event.KeyEvent) -> bool: ...

class KeyEventPostProcessor:
    """
    Java class 'java.awt.KeyEventPostProcessor'
    
    """
    def postProcessKeyEvent(self, keyEvent: java.awt.event.KeyEvent) -> bool: ...

class LayoutManager:
    """
    Java class 'java.awt.LayoutManager'
    
    """
    def addLayoutComponent(self, string: str, component: 'Component') -> None: ...
    def layoutContainer(self, container: 'Container') -> None: ...
    def minimumLayoutSize(self, container: 'Container') -> Dimension: ...
    def preferredLayoutSize(self, container: 'Container') -> Dimension: ...
    def removeLayoutComponent(self, component: 'Component') -> None: ...

class MediaTracker(java.io.Serializable):
    """
    Java class 'java.awt.MediaTracker'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * MediaTracker(java.awt.Component)
    
      Attributes:
        LOADING (int): final static field
        ABORTED (int): final static field
        ERRORED (int): final static field
        COMPLETE (int): final static field
    
    """
    LOADING: typing.ClassVar[int] = ...
    ABORTED: typing.ClassVar[int] = ...
    ERRORED: typing.ClassVar[int] = ...
    COMPLETE: typing.ClassVar[int] = ...
    def __init__(self, component: 'Component'): ...
    @typing.overload
    def addImage(self, image: Image, int: int, int2: int, int3: int) -> None: ...
    @typing.overload
    def addImage(self, image: Image, int: int) -> None: ...
    @typing.overload
    def checkAll(self) -> bool: ...
    @typing.overload
    def checkAll(self, boolean: bool) -> bool: ...
    @typing.overload
    def checkID(self, int: int) -> bool: ...
    @typing.overload
    def checkID(self, int: int, boolean: bool) -> bool: ...
    def getErrorsAny(self) -> typing.List[typing.Any]: ...
    def getErrorsID(self, int: int) -> typing.List[typing.Any]: ...
    def isErrorAny(self) -> bool: ...
    def isErrorID(self, int: int) -> bool: ...
    @typing.overload
    def removeImage(self, image: Image) -> None: ...
    @typing.overload
    def removeImage(self, image: Image, int: int) -> None: ...
    @typing.overload
    def removeImage(self, image: Image, int: int, int2: int, int3: int) -> None: ...
    def statusAll(self, boolean: bool) -> int: ...
    def statusID(self, int: int, boolean: bool) -> int: ...
    @typing.overload
    def waitForAll(self, long: int) -> bool: ...
    @typing.overload
    def waitForAll(self) -> None: ...
    @typing.overload
    def waitForID(self, int: int, long: int) -> bool: ...
    @typing.overload
    def waitForID(self, int: int) -> None: ...

class MenuComponent(java.io.Serializable):
    """
    Java class 'java.awt.MenuComponent'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * MenuComponent()
    
      Raises:
        java.awt.HeadlessException: from java
    
    """
    def __init__(self): ...
    def dispatchEvent(self, aWTEvent: AWTEvent) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getFont(self) -> Font: ...
    def getName(self) -> str: ...
    def getParent(self) -> 'MenuContainer': ...
    def postEvent(self, event: Event) -> bool: ...
    def removeNotify(self) -> None: ...
    def setFont(self, font: Font) -> None: ...
    def setName(self, string: str) -> None: ...
    def toString(self) -> str: ...

class MenuContainer:
    """
    Java class 'java.awt.MenuContainer'
    
    """
    def getFont(self) -> Font: ...
    def postEvent(self, event: Event) -> bool: ...
    def remove(self, menuComponent: MenuComponent) -> None: ...

class MenuShortcut(java.io.Serializable):
    """
    Java class 'java.awt.MenuShortcut'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * MenuShortcut(int)
        * MenuShortcut(int, boolean)
    
    """
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, boolean: bool): ...
    @typing.overload
    def equals(self, menuShortcut: 'MenuShortcut') -> bool: ...
    @typing.overload
    def equals(self, object: typing.Any) -> bool: ...
    def getKey(self) -> int: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def usesShiftModifier(self) -> bool: ...

class MouseInfo:
    """
    Java class 'java.awt.MouseInfo'
    
        Extends:
            java.lang.Object
    
    """
    @staticmethod
    def getNumberOfButtons() -> int: ...
    @staticmethod
    def getPointerInfo() -> 'PointerInfo': ...

class PaintContext:
    """
    Java class 'java.awt.PaintContext'
    
    """
    def dispose(self) -> None: ...
    def getColorModel(self) -> java.awt.image.ColorModel: ...
    def getRaster(self, int: int, int2: int, int3: int, int4: int) -> java.awt.image.Raster: ...

class Point(java.awt.geom.Point2D, java.io.Serializable):
    """
    Java class 'java.awt.Point'
    
        Extends:
            java.awt.geom.Point2D
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * Point(int, int)
        * Point(java.awt.Point)
        * Point()
    
      Attributes:
        x (int): field
        y (int): field
    
    """
    x: int = ...
    y: int = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, point: 'Point'): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getLocation(self) -> 'Point': ...
    def getX(self) -> float: ...
    def getY(self) -> float: ...
    def move(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLocation(self, double: float, double2: float) -> None: ...
    @typing.overload
    def setLocation(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLocation(self, point: 'Point') -> None: ...
    @typing.overload
    def setLocation(self, point2D: java.awt.geom.Point2D) -> None: ...
    def toString(self) -> str: ...
    def translate(self, int: int, int2: int) -> None: ...

class PointerInfo:
    """
    Java class 'java.awt.PointerInfo'
    
        Extends:
            java.lang.Object
    
    """
    def getDevice(self) -> GraphicsDevice: ...
    def getLocation(self) -> Point: ...

class PrintGraphics:
    """
    Java class 'java.awt.PrintGraphics'
    
    """
    def getPrintJob(self) -> 'PrintJob': ...

class PrintJob:
    """
    Java class 'java.awt.PrintJob'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * PrintJob()
    
    """
    def __init__(self): ...
    def end(self) -> None: ...
    def finalize(self) -> None: ...
    def getGraphics(self) -> Graphics: ...
    def getPageDimension(self) -> Dimension: ...
    def getPageResolution(self) -> int: ...
    def lastPageFirst(self) -> bool: ...

class RenderingHints(java.util.Map[typing.Any, typing.Any], java.lang.Cloneable):
    """
    Java class 'java.awt.RenderingHints'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.util.Map, java.lang.Cloneable
    
      Constructors:
        * RenderingHints(java.util.Map)
        * RenderingHints(java.awt.RenderingHints.Key, java.lang.Object)
    
      Attributes:
        KEY_ANTIALIASING (java.awt.RenderingHints$Key): final static field
        VALUE_ANTIALIAS_ON (java.lang.Object): final static field
        VALUE_ANTIALIAS_OFF (java.lang.Object): final static field
        VALUE_ANTIALIAS_DEFAULT (java.lang.Object): final static field
        KEY_RENDERING (java.awt.RenderingHints$Key): final static field
        VALUE_RENDER_SPEED (java.lang.Object): final static field
        VALUE_RENDER_QUALITY (java.lang.Object): final static field
        VALUE_RENDER_DEFAULT (java.lang.Object): final static field
        KEY_DITHERING (java.awt.RenderingHints$Key): final static field
        VALUE_DITHER_DISABLE (java.lang.Object): final static field
        VALUE_DITHER_ENABLE (java.lang.Object): final static field
        VALUE_DITHER_DEFAULT (java.lang.Object): final static field
        KEY_TEXT_ANTIALIASING (java.awt.RenderingHints$Key): final static field
        VALUE_TEXT_ANTIALIAS_ON (java.lang.Object): final static field
        VALUE_TEXT_ANTIALIAS_OFF (java.lang.Object): final static field
        VALUE_TEXT_ANTIALIAS_DEFAULT (java.lang.Object): final static field
        VALUE_TEXT_ANTIALIAS_GASP (java.lang.Object): final static field
        VALUE_TEXT_ANTIALIAS_LCD_HRGB (java.lang.Object): final static field
        VALUE_TEXT_ANTIALIAS_LCD_HBGR (java.lang.Object): final static field
        VALUE_TEXT_ANTIALIAS_LCD_VRGB (java.lang.Object): final static field
        VALUE_TEXT_ANTIALIAS_LCD_VBGR (java.lang.Object): final static field
        KEY_TEXT_LCD_CONTRAST (java.awt.RenderingHints$Key): final static field
        KEY_FRACTIONALMETRICS (java.awt.RenderingHints$Key): final static field
        VALUE_FRACTIONALMETRICS_OFF (java.lang.Object): final static field
        VALUE_FRACTIONALMETRICS_ON (java.lang.Object): final static field
        VALUE_FRACTIONALMETRICS_DEFAULT (java.lang.Object): final static field
        KEY_INTERPOLATION (java.awt.RenderingHints$Key): final static field
        VALUE_INTERPOLATION_NEAREST_NEIGHBOR (java.lang.Object): final static field
        VALUE_INTERPOLATION_BILINEAR (java.lang.Object): final static field
        VALUE_INTERPOLATION_BICUBIC (java.lang.Object): final static field
        KEY_ALPHA_INTERPOLATION (java.awt.RenderingHints$Key): final static field
        VALUE_ALPHA_INTERPOLATION_SPEED (java.lang.Object): final static field
        VALUE_ALPHA_INTERPOLATION_QUALITY (java.lang.Object): final static field
        VALUE_ALPHA_INTERPOLATION_DEFAULT (java.lang.Object): final static field
        KEY_COLOR_RENDERING (java.awt.RenderingHints$Key): final static field
        VALUE_COLOR_RENDER_SPEED (java.lang.Object): final static field
        VALUE_COLOR_RENDER_QUALITY (java.lang.Object): final static field
        VALUE_COLOR_RENDER_DEFAULT (java.lang.Object): final static field
        KEY_STROKE_CONTROL (java.awt.RenderingHints$Key): final static field
        VALUE_STROKE_DEFAULT (java.lang.Object): final static field
        VALUE_STROKE_NORMALIZE (java.lang.Object): final static field
        VALUE_STROKE_PURE (java.lang.Object): final static field
        KEY_RESOLUTION_VARIANT (java.awt.RenderingHints$Key): final static field
        VALUE_RESOLUTION_VARIANT_DEFAULT (java.lang.Object): final static field
        VALUE_RESOLUTION_VARIANT_BASE (java.lang.Object): final static field
        VALUE_RESOLUTION_VARIANT_SIZE_FIT (java.lang.Object): final static field
        VALUE_RESOLUTION_VARIANT_DPI_FIT (java.lang.Object): final static field
    
    """
    KEY_ANTIALIASING: typing.ClassVar['RenderingHints.Key'] = ...
    VALUE_ANTIALIAS_ON: typing.ClassVar[typing.Any] = ...
    VALUE_ANTIALIAS_OFF: typing.ClassVar[typing.Any] = ...
    VALUE_ANTIALIAS_DEFAULT: typing.ClassVar[typing.Any] = ...
    KEY_RENDERING: typing.ClassVar['RenderingHints.Key'] = ...
    VALUE_RENDER_SPEED: typing.ClassVar[typing.Any] = ...
    VALUE_RENDER_QUALITY: typing.ClassVar[typing.Any] = ...
    VALUE_RENDER_DEFAULT: typing.ClassVar[typing.Any] = ...
    KEY_DITHERING: typing.ClassVar['RenderingHints.Key'] = ...
    VALUE_DITHER_DISABLE: typing.ClassVar[typing.Any] = ...
    VALUE_DITHER_ENABLE: typing.ClassVar[typing.Any] = ...
    VALUE_DITHER_DEFAULT: typing.ClassVar[typing.Any] = ...
    KEY_TEXT_ANTIALIASING: typing.ClassVar['RenderingHints.Key'] = ...
    VALUE_TEXT_ANTIALIAS_ON: typing.ClassVar[typing.Any] = ...
    VALUE_TEXT_ANTIALIAS_OFF: typing.ClassVar[typing.Any] = ...
    VALUE_TEXT_ANTIALIAS_DEFAULT: typing.ClassVar[typing.Any] = ...
    VALUE_TEXT_ANTIALIAS_GASP: typing.ClassVar[typing.Any] = ...
    VALUE_TEXT_ANTIALIAS_LCD_HRGB: typing.ClassVar[typing.Any] = ...
    VALUE_TEXT_ANTIALIAS_LCD_HBGR: typing.ClassVar[typing.Any] = ...
    VALUE_TEXT_ANTIALIAS_LCD_VRGB: typing.ClassVar[typing.Any] = ...
    VALUE_TEXT_ANTIALIAS_LCD_VBGR: typing.ClassVar[typing.Any] = ...
    KEY_TEXT_LCD_CONTRAST: typing.ClassVar['RenderingHints.Key'] = ...
    KEY_FRACTIONALMETRICS: typing.ClassVar['RenderingHints.Key'] = ...
    VALUE_FRACTIONALMETRICS_OFF: typing.ClassVar[typing.Any] = ...
    VALUE_FRACTIONALMETRICS_ON: typing.ClassVar[typing.Any] = ...
    VALUE_FRACTIONALMETRICS_DEFAULT: typing.ClassVar[typing.Any] = ...
    KEY_INTERPOLATION: typing.ClassVar['RenderingHints.Key'] = ...
    VALUE_INTERPOLATION_NEAREST_NEIGHBOR: typing.ClassVar[typing.Any] = ...
    VALUE_INTERPOLATION_BILINEAR: typing.ClassVar[typing.Any] = ...
    VALUE_INTERPOLATION_BICUBIC: typing.ClassVar[typing.Any] = ...
    KEY_ALPHA_INTERPOLATION: typing.ClassVar['RenderingHints.Key'] = ...
    VALUE_ALPHA_INTERPOLATION_SPEED: typing.ClassVar[typing.Any] = ...
    VALUE_ALPHA_INTERPOLATION_QUALITY: typing.ClassVar[typing.Any] = ...
    VALUE_ALPHA_INTERPOLATION_DEFAULT: typing.ClassVar[typing.Any] = ...
    KEY_COLOR_RENDERING: typing.ClassVar['RenderingHints.Key'] = ...
    VALUE_COLOR_RENDER_SPEED: typing.ClassVar[typing.Any] = ...
    VALUE_COLOR_RENDER_QUALITY: typing.ClassVar[typing.Any] = ...
    VALUE_COLOR_RENDER_DEFAULT: typing.ClassVar[typing.Any] = ...
    KEY_STROKE_CONTROL: typing.ClassVar['RenderingHints.Key'] = ...
    VALUE_STROKE_DEFAULT: typing.ClassVar[typing.Any] = ...
    VALUE_STROKE_NORMALIZE: typing.ClassVar[typing.Any] = ...
    VALUE_STROKE_PURE: typing.ClassVar[typing.Any] = ...
    KEY_RESOLUTION_VARIANT: typing.ClassVar['RenderingHints.Key'] = ...
    VALUE_RESOLUTION_VARIANT_DEFAULT: typing.ClassVar[typing.Any] = ...
    VALUE_RESOLUTION_VARIANT_BASE: typing.ClassVar[typing.Any] = ...
    VALUE_RESOLUTION_VARIANT_SIZE_FIT: typing.ClassVar[typing.Any] = ...
    VALUE_RESOLUTION_VARIANT_DPI_FIT: typing.ClassVar[typing.Any] = ...
    @typing.overload
    def __init__(self, key: 'RenderingHints.Key', object: typing.Any): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map['RenderingHints.Key', typing.Any], typing.Mapping['RenderingHints.Key', typing.Any]]): ...
    def add(self, renderingHints: 'RenderingHints') -> None: ...
    def clear(self) -> None: ...
    def clone(self) -> typing.Any: ...
    def containsKey(self, object: typing.Any) -> bool: ...
    def containsValue(self, object: typing.Any) -> bool: ...
    def entrySet(self) -> java.util.Set[java.util.Map.Entry[typing.Any, typing.Any]]: ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, object: typing.Any) -> typing.Any: ...
    def hashCode(self) -> int: ...
    def isEmpty(self) -> bool: ...
    def keySet(self) -> java.util.Set[typing.Any]: ...
    def put(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    def putAll(self, map: typing.Union[java.util.Map[typing.Any, typing.Any], typing.Mapping[typing.Any, typing.Any]]) -> None: ...
    @typing.overload
    def remove(self, object: typing.Any, object2: typing.Any) -> bool: ...
    @typing.overload
    def remove(self, object: typing.Any) -> typing.Any: ...
    def size(self) -> int: ...
    def toString(self) -> str: ...
    def values(self) -> java.util.Collection[typing.Any]: ...
    class Key:
        """
        Java class 'java.awt.RenderingHints$Key'
        
            Extends:
                java.lang.Object
        
        """
        def equals(self, object: typing.Any) -> bool: ...
        def hashCode(self) -> int: ...
        def isCompatibleValue(self, object: typing.Any) -> bool: ...

class Robot:
    """
    Java class 'java.awt.Robot'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Robot()
        * Robot(java.awt.GraphicsDevice)
    
      Raises:
        java.awt.AWTException: from java
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, graphicsDevice: GraphicsDevice): ...
    def createMultiResolutionScreenCapture(self, rectangle: 'Rectangle') -> java.awt.image.MultiResolutionImage: ...
    def createScreenCapture(self, rectangle: 'Rectangle') -> java.awt.image.BufferedImage: ...
    def delay(self, int: int) -> None: ...
    def getAutoDelay(self) -> int: ...
    def getPixelColor(self, int: int, int2: int) -> 'Color': ...
    def isAutoWaitForIdle(self) -> bool: ...
    def keyPress(self, int: int) -> None: ...
    def keyRelease(self, int: int) -> None: ...
    def mouseMove(self, int: int, int2: int) -> None: ...
    def mousePress(self, int: int) -> None: ...
    def mouseRelease(self, int: int) -> None: ...
    def mouseWheel(self, int: int) -> None: ...
    def setAutoDelay(self, int: int) -> None: ...
    def setAutoWaitForIdle(self, boolean: bool) -> None: ...
    def toString(self) -> str: ...
    def waitForIdle(self) -> None: ...

class SecondaryLoop:
    """
    Java class 'java.awt.SecondaryLoop'
    
    """
    def enter(self) -> bool: ...
    def exit(self) -> bool: ...

class Shape:
    """
    Java class 'java.awt.Shape'
    
    """
    @typing.overload
    def contains(self, double: float, double2: float) -> bool: ...
    @typing.overload
    def contains(self, double: float, double2: float, double3: float, double4: float) -> bool: ...
    @typing.overload
    def contains(self, point2D: java.awt.geom.Point2D) -> bool: ...
    @typing.overload
    def contains(self, rectangle2D: java.awt.geom.Rectangle2D) -> bool: ...
    def getBounds(self) -> 'Rectangle': ...
    def getBounds2D(self) -> java.awt.geom.Rectangle2D: ...
    @typing.overload
    def getPathIterator(self, affineTransform: java.awt.geom.AffineTransform) -> java.awt.geom.PathIterator: ...
    @typing.overload
    def getPathIterator(self, affineTransform: java.awt.geom.AffineTransform, double: float) -> java.awt.geom.PathIterator: ...
    @typing.overload
    def intersects(self, double: float, double2: float, double3: float, double4: float) -> bool: ...
    @typing.overload
    def intersects(self, rectangle2D: java.awt.geom.Rectangle2D) -> bool: ...

class SplashScreen:
    """
    Java class 'java.awt.SplashScreen'
    
        Extends:
            java.lang.Object
    
    """
    def close(self) -> None: ...
    def createGraphics(self) -> 'Graphics2D': ...
    def getBounds(self) -> 'Rectangle': ...
    def getImageURL(self) -> java.net.URL: ...
    def getSize(self) -> Dimension: ...
    @staticmethod
    def getSplashScreen() -> 'SplashScreen': ...
    def isVisible(self) -> bool: ...
    def setImageURL(self, uRL: java.net.URL) -> None: ...
    def update(self) -> None: ...

class Stroke:
    """
    Java class 'java.awt.Stroke'
    
    """
    def createStrokedShape(self, shape: Shape) -> Shape: ...

class SystemTray:
    """
    Java class 'java.awt.SystemTray'
    
        Extends:
            java.lang.Object
    
    """
    def add(self, trayIcon: 'TrayIcon') -> None: ...
    def addPropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    def getPropertyChangeListeners(self, string: str) -> typing.List[java.beans.PropertyChangeListener]: ...
    @staticmethod
    def getSystemTray() -> 'SystemTray': ...
    def getTrayIconSize(self) -> Dimension: ...
    def getTrayIcons(self) -> typing.List['TrayIcon']: ...
    @staticmethod
    def isSupported() -> bool: ...
    def remove(self, trayIcon: 'TrayIcon') -> None: ...
    def removePropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...

class Taskbar:
    """
    Java class 'java.awt.Taskbar'
    
        Extends:
            java.lang.Object
    
    """
    def getIconImage(self) -> Image: ...
    def getMenu(self) -> 'PopupMenu': ...
    @staticmethod
    def getTaskbar() -> 'Taskbar': ...
    def isSupported(self, feature: 'Taskbar.Feature') -> bool: ...
    @staticmethod
    def isTaskbarSupported() -> bool: ...
    def requestUserAttention(self, boolean: bool, boolean2: bool) -> None: ...
    def requestWindowUserAttention(self, window: 'Window') -> None: ...
    def setIconBadge(self, string: str) -> None: ...
    def setIconImage(self, image: Image) -> None: ...
    def setMenu(self, popupMenu: 'PopupMenu') -> None: ...
    def setProgressValue(self, int: int) -> None: ...
    def setWindowIconBadge(self, window: 'Window', image: Image) -> None: ...
    def setWindowProgressState(self, window: 'Window', state: 'Taskbar.State') -> None: ...
    def setWindowProgressValue(self, window: 'Window', int: int) -> None: ...
    class Feature(java.lang.Enum['Taskbar.Feature']):
        """
        Java class 'java.awt.Taskbar$Feature'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            ICON_BADGE_TEXT (java.awt.Taskbar$Feature): final static enum constant
            ICON_BADGE_NUMBER (java.awt.Taskbar$Feature): final static enum constant
            ICON_BADGE_IMAGE_WINDOW (java.awt.Taskbar$Feature): final static enum constant
            ICON_IMAGE (java.awt.Taskbar$Feature): final static enum constant
            MENU (java.awt.Taskbar$Feature): final static enum constant
            PROGRESS_STATE_WINDOW (java.awt.Taskbar$Feature): final static enum constant
            PROGRESS_VALUE (java.awt.Taskbar$Feature): final static enum constant
            PROGRESS_VALUE_WINDOW (java.awt.Taskbar$Feature): final static enum constant
            USER_ATTENTION (java.awt.Taskbar$Feature): final static enum constant
            USER_ATTENTION_WINDOW (java.awt.Taskbar$Feature): final static enum constant
        
        """
        ICON_BADGE_TEXT: typing.ClassVar['Taskbar.Feature'] = ...
        ICON_BADGE_NUMBER: typing.ClassVar['Taskbar.Feature'] = ...
        ICON_BADGE_IMAGE_WINDOW: typing.ClassVar['Taskbar.Feature'] = ...
        ICON_IMAGE: typing.ClassVar['Taskbar.Feature'] = ...
        MENU: typing.ClassVar['Taskbar.Feature'] = ...
        PROGRESS_STATE_WINDOW: typing.ClassVar['Taskbar.Feature'] = ...
        PROGRESS_VALUE: typing.ClassVar['Taskbar.Feature'] = ...
        PROGRESS_VALUE_WINDOW: typing.ClassVar['Taskbar.Feature'] = ...
        USER_ATTENTION: typing.ClassVar['Taskbar.Feature'] = ...
        USER_ATTENTION_WINDOW: typing.ClassVar['Taskbar.Feature'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Taskbar.Feature': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['Taskbar.Feature']: ...
    class State(java.lang.Enum['Taskbar.State']):
        """
        Java class 'java.awt.Taskbar$State'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            OFF (java.awt.Taskbar$State): final static enum constant
            NORMAL (java.awt.Taskbar$State): final static enum constant
            PAUSED (java.awt.Taskbar$State): final static enum constant
            INDETERMINATE (java.awt.Taskbar$State): final static enum constant
            ERROR (java.awt.Taskbar$State): final static enum constant
        
        """
        OFF: typing.ClassVar['Taskbar.State'] = ...
        NORMAL: typing.ClassVar['Taskbar.State'] = ...
        PAUSED: typing.ClassVar['Taskbar.State'] = ...
        INDETERMINATE: typing.ClassVar['Taskbar.State'] = ...
        ERROR: typing.ClassVar['Taskbar.State'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Taskbar.State': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['Taskbar.State']: ...

class Toolkit:
    """
    Java class 'java.awt.Toolkit'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Toolkit()
    
    """
    def __init__(self): ...
    def addAWTEventListener(self, aWTEventListener: java.awt.event.AWTEventListener, long: int) -> None: ...
    def addPropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    def areExtraMouseButtonsEnabled(self) -> bool: ...
    def beep(self) -> None: ...
    def checkImage(self, image: Image, int: int, int2: int, imageObserver: java.awt.image.ImageObserver) -> int: ...
    def createCustomCursor(self, image: Image, point: Point, string: str) -> Cursor: ...
    _createDragGestureRecognizer__T = typing.TypeVar('_createDragGestureRecognizer__T', bound=java.awt.dnd.DragGestureRecognizer)  # <T>
    def createDragGestureRecognizer(self, class_: typing.Type[_createDragGestureRecognizer__T], dragSource: java.awt.dnd.DragSource, component: 'Component', int: int, dragGestureListener: java.awt.dnd.DragGestureListener) -> _createDragGestureRecognizer__T: ...
    @typing.overload
    def createImage(self, byteArray: typing.List[int], int: int, int2: int) -> Image: ...
    @typing.overload
    def createImage(self, imageProducer: java.awt.image.ImageProducer) -> Image: ...
    @typing.overload
    def createImage(self, string: str) -> Image: ...
    @typing.overload
    def createImage(self, uRL: java.net.URL) -> Image: ...
    @typing.overload
    def createImage(self, byteArray: typing.List[int]) -> Image: ...
    @typing.overload
    def getAWTEventListeners(self) -> typing.List[java.awt.event.AWTEventListener]: ...
    @typing.overload
    def getAWTEventListeners(self, long: int) -> typing.List[java.awt.event.AWTEventListener]: ...
    def getBestCursorSize(self, int: int, int2: int) -> Dimension: ...
    def getColorModel(self) -> java.awt.image.ColorModel: ...
    @staticmethod
    def getDefaultToolkit() -> 'Toolkit': ...
    def getDesktopProperty(self, string: str) -> typing.Any: ...
    def getFontList(self) -> typing.List[str]: ...
    def getFontMetrics(self, font: Font) -> FontMetrics: ...
    @typing.overload
    def getImage(self, string: str) -> Image: ...
    @typing.overload
    def getImage(self, uRL: java.net.URL) -> Image: ...
    def getLockingKeyState(self, int: int) -> bool: ...
    def getMaximumCursorColors(self) -> int: ...
    def getMenuShortcutKeyMask(self) -> int: ...
    def getMenuShortcutKeyMaskEx(self) -> int: ...
    @typing.overload
    def getPrintJob(self, frame: 'Frame', string: str, properties: java.util.Properties) -> PrintJob: ...
    @typing.overload
    def getPrintJob(self, frame: 'Frame', string: str, jobAttributes: 'JobAttributes', pageAttributes: 'PageAttributes') -> PrintJob: ...
    @staticmethod
    def getProperty(string: str, string2: str) -> str: ...
    @typing.overload
    def getPropertyChangeListeners(self) -> typing.List[java.beans.PropertyChangeListener]: ...
    @typing.overload
    def getPropertyChangeListeners(self, string: str) -> typing.List[java.beans.PropertyChangeListener]: ...
    def getScreenInsets(self, graphicsConfiguration: GraphicsConfiguration) -> Insets: ...
    def getScreenResolution(self) -> int: ...
    def getScreenSize(self) -> Dimension: ...
    def getSystemClipboard(self) -> java.awt.datatransfer.Clipboard: ...
    def getSystemEventQueue(self) -> EventQueue: ...
    def getSystemSelection(self) -> java.awt.datatransfer.Clipboard: ...
    def isAlwaysOnTopSupported(self) -> bool: ...
    def isDynamicLayoutActive(self) -> bool: ...
    def isFrameStateSupported(self, int: int) -> bool: ...
    def isModalExclusionTypeSupported(self, modalExclusionType: 'Dialog.ModalExclusionType') -> bool: ...
    def isModalityTypeSupported(self, modalityType: 'Dialog.ModalityType') -> bool: ...
    def mapInputMethodHighlight(self, inputMethodHighlight: java.awt.im.InputMethodHighlight) -> java.util.Map[java.awt.font.TextAttribute, typing.Any]: ...
    def prepareImage(self, image: Image, int: int, int2: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    def removeAWTEventListener(self, aWTEventListener: java.awt.event.AWTEventListener) -> None: ...
    def removePropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    def setDynamicLayout(self, boolean: bool) -> None: ...
    def setLockingKeyState(self, int: int, boolean: bool) -> None: ...
    def sync(self) -> None: ...

class Transparency:
    """
    Java class 'java.awt.Transparency'
    
      Attributes:
        OPAQUE (int): final static field
        BITMASK (int): final static field
        TRANSLUCENT (int): final static field
    
    """
    OPAQUE: typing.ClassVar[int] = ...
    BITMASK: typing.ClassVar[int] = ...
    TRANSLUCENT: typing.ClassVar[int] = ...
    def getTransparency(self) -> int: ...

class TrayIcon:
    """
    Java class 'java.awt.TrayIcon'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * TrayIcon(java.awt.Image, java.lang.String)
        * TrayIcon(java.awt.Image)
        * TrayIcon(java.awt.Image, java.lang.String, java.awt.PopupMenu)
    
    """
    @typing.overload
    def __init__(self, image: Image): ...
    @typing.overload
    def __init__(self, image: Image, string: str): ...
    @typing.overload
    def __init__(self, image: Image, string: str, popupMenu: 'PopupMenu'): ...
    def addActionListener(self, actionListener: java.awt.event.ActionListener) -> None: ...
    def addMouseListener(self, mouseListener: java.awt.event.MouseListener) -> None: ...
    def addMouseMotionListener(self, mouseMotionListener: java.awt.event.MouseMotionListener) -> None: ...
    def displayMessage(self, string: str, string2: str, messageType: 'TrayIcon.MessageType') -> None: ...
    def getActionCommand(self) -> str: ...
    def getActionListeners(self) -> typing.List[java.awt.event.ActionListener]: ...
    def getImage(self) -> Image: ...
    def getMouseListeners(self) -> typing.List[java.awt.event.MouseListener]: ...
    def getMouseMotionListeners(self) -> typing.List[java.awt.event.MouseMotionListener]: ...
    def getPopupMenu(self) -> 'PopupMenu': ...
    def getSize(self) -> Dimension: ...
    def getToolTip(self) -> str: ...
    def isImageAutoSize(self) -> bool: ...
    def removeActionListener(self, actionListener: java.awt.event.ActionListener) -> None: ...
    def removeMouseListener(self, mouseListener: java.awt.event.MouseListener) -> None: ...
    def removeMouseMotionListener(self, mouseMotionListener: java.awt.event.MouseMotionListener) -> None: ...
    def setActionCommand(self, string: str) -> None: ...
    def setImage(self, image: Image) -> None: ...
    def setImageAutoSize(self, boolean: bool) -> None: ...
    def setPopupMenu(self, popupMenu: 'PopupMenu') -> None: ...
    def setToolTip(self, string: str) -> None: ...
    class MessageType(java.lang.Enum['TrayIcon.MessageType']):
        """
        Java class 'java.awt.TrayIcon$MessageType'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            ERROR (java.awt.TrayIcon$MessageType): final static enum constant
            WARNING (java.awt.TrayIcon$MessageType): final static enum constant
            INFO (java.awt.TrayIcon$MessageType): final static enum constant
            NONE (java.awt.TrayIcon$MessageType): final static enum constant
        
        """
        ERROR: typing.ClassVar['TrayIcon.MessageType'] = ...
        WARNING: typing.ClassVar['TrayIcon.MessageType'] = ...
        INFO: typing.ClassVar['TrayIcon.MessageType'] = ...
        NONE: typing.ClassVar['TrayIcon.MessageType'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'TrayIcon.MessageType': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['TrayIcon.MessageType']: ...

class AlphaComposite(Composite):
    """
    Java class 'java.awt.AlphaComposite'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.Composite
    
      Attributes:
        CLEAR (int): final static field
        SRC (int): final static field
        DST (int): final static field
        SRC_OVER (int): final static field
        DST_OVER (int): final static field
        SRC_IN (int): final static field
        DST_IN (int): final static field
        SRC_OUT (int): final static field
        DST_OUT (int): final static field
        SRC_ATOP (int): final static field
        DST_ATOP (int): final static field
        XOR (int): final static field
        Clear (java.awt.AlphaComposite): final static field
        Src (java.awt.AlphaComposite): final static field
        Dst (java.awt.AlphaComposite): final static field
        SrcOver (java.awt.AlphaComposite): final static field
        DstOver (java.awt.AlphaComposite): final static field
        SrcIn (java.awt.AlphaComposite): final static field
        DstIn (java.awt.AlphaComposite): final static field
        SrcOut (java.awt.AlphaComposite): final static field
        DstOut (java.awt.AlphaComposite): final static field
        SrcAtop (java.awt.AlphaComposite): final static field
        DstAtop (java.awt.AlphaComposite): final static field
        Xor (java.awt.AlphaComposite): final static field
    
    """
    CLEAR: typing.ClassVar[int] = ...
    SRC: typing.ClassVar[int] = ...
    DST: typing.ClassVar[int] = ...
    SRC_OVER: typing.ClassVar[int] = ...
    DST_OVER: typing.ClassVar[int] = ...
    SRC_IN: typing.ClassVar[int] = ...
    DST_IN: typing.ClassVar[int] = ...
    SRC_OUT: typing.ClassVar[int] = ...
    DST_OUT: typing.ClassVar[int] = ...
    SRC_ATOP: typing.ClassVar[int] = ...
    DST_ATOP: typing.ClassVar[int] = ...
    XOR: typing.ClassVar[int] = ...
    Clear: typing.ClassVar['AlphaComposite'] = ...
    Src: typing.ClassVar['AlphaComposite'] = ...
    Dst: typing.ClassVar['AlphaComposite'] = ...
    SrcOver: typing.ClassVar['AlphaComposite'] = ...
    DstOver: typing.ClassVar['AlphaComposite'] = ...
    SrcIn: typing.ClassVar['AlphaComposite'] = ...
    DstIn: typing.ClassVar['AlphaComposite'] = ...
    SrcOut: typing.ClassVar['AlphaComposite'] = ...
    DstOut: typing.ClassVar['AlphaComposite'] = ...
    SrcAtop: typing.ClassVar['AlphaComposite'] = ...
    DstAtop: typing.ClassVar['AlphaComposite'] = ...
    Xor: typing.ClassVar['AlphaComposite'] = ...
    def createContext(self, colorModel: java.awt.image.ColorModel, colorModel2: java.awt.image.ColorModel, renderingHints: RenderingHints) -> CompositeContext: ...
    @typing.overload
    def derive(self, float: float) -> 'AlphaComposite': ...
    @typing.overload
    def derive(self, int: int) -> 'AlphaComposite': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAlpha(self) -> float: ...
    @typing.overload
    @staticmethod
    def getInstance(int: int) -> 'AlphaComposite': ...
    @typing.overload
    @staticmethod
    def getInstance(int: int, float: float) -> 'AlphaComposite': ...
    def getRule(self) -> int: ...
    def hashCode(self) -> int: ...

class BasicStroke(Stroke):
    """
    Java class 'java.awt.BasicStroke'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.Stroke
    
      Constructors:
        * BasicStroke()
        * BasicStroke(float)
        * BasicStroke(float, int, int)
        * BasicStroke(float, int, int, float)
        * BasicStroke(float, int, int, float, float[], float)
    
      Attributes:
        JOIN_MITER (int): final static field
        JOIN_ROUND (int): final static field
        JOIN_BEVEL (int): final static field
        CAP_BUTT (int): final static field
        CAP_ROUND (int): final static field
        CAP_SQUARE (int): final static field
    
    """
    JOIN_MITER: typing.ClassVar[int] = ...
    JOIN_ROUND: typing.ClassVar[int] = ...
    JOIN_BEVEL: typing.ClassVar[int] = ...
    CAP_BUTT: typing.ClassVar[int] = ...
    CAP_ROUND: typing.ClassVar[int] = ...
    CAP_SQUARE: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, float: float): ...
    @typing.overload
    def __init__(self, float: float, int: int, int2: int): ...
    @typing.overload
    def __init__(self, float: float, int: int, int2: int, float2: float): ...
    @typing.overload
    def __init__(self, float: float, int: int, int2: int, float2: float, floatArray: typing.List[float], float4: float): ...
    def createStrokedShape(self, shape: Shape) -> Shape: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDashArray(self) -> typing.List[float]: ...
    def getDashPhase(self) -> float: ...
    def getEndCap(self) -> int: ...
    def getLineJoin(self) -> int: ...
    def getLineWidth(self) -> float: ...
    def getMiterLimit(self) -> float: ...
    def hashCode(self) -> int: ...

class Component(java.awt.image.ImageObserver, MenuContainer, java.io.Serializable):
    """
    Java class 'java.awt.Component'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.image.ImageObserver, java.awt.MenuContainer,
            java.io.Serializable
    
      Attributes:
        TOP_ALIGNMENT (float): final static field
        CENTER_ALIGNMENT (float): final static field
        BOTTOM_ALIGNMENT (float): final static field
        LEFT_ALIGNMENT (float): final static field
        RIGHT_ALIGNMENT (float): final static field
    
    """
    TOP_ALIGNMENT: typing.ClassVar[float] = ...
    CENTER_ALIGNMENT: typing.ClassVar[float] = ...
    BOTTOM_ALIGNMENT: typing.ClassVar[float] = ...
    LEFT_ALIGNMENT: typing.ClassVar[float] = ...
    RIGHT_ALIGNMENT: typing.ClassVar[float] = ...
    def action(self, event: Event, object: typing.Any) -> bool: ...
    def add(self, popupMenu: 'PopupMenu') -> None: ...
    def addComponentListener(self, componentListener: java.awt.event.ComponentListener) -> None: ...
    def addFocusListener(self, focusListener: java.awt.event.FocusListener) -> None: ...
    def addHierarchyBoundsListener(self, hierarchyBoundsListener: java.awt.event.HierarchyBoundsListener) -> None: ...
    def addHierarchyListener(self, hierarchyListener: java.awt.event.HierarchyListener) -> None: ...
    def addInputMethodListener(self, inputMethodListener: java.awt.event.InputMethodListener) -> None: ...
    def addKeyListener(self, keyListener: java.awt.event.KeyListener) -> None: ...
    def addMouseListener(self, mouseListener: java.awt.event.MouseListener) -> None: ...
    def addMouseMotionListener(self, mouseMotionListener: java.awt.event.MouseMotionListener) -> None: ...
    def addMouseWheelListener(self, mouseWheelListener: java.awt.event.MouseWheelListener) -> None: ...
    def addNotify(self) -> None: ...
    @typing.overload
    def addPropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    @typing.overload
    def addPropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    def applyComponentOrientation(self, componentOrientation: ComponentOrientation) -> None: ...
    def areFocusTraversalKeysSet(self, int: int) -> bool: ...
    def bounds(self) -> 'Rectangle': ...
    @typing.overload
    def checkImage(self, image: Image, int: int, int2: int, imageObserver: java.awt.image.ImageObserver) -> int: ...
    @typing.overload
    def checkImage(self, image: Image, imageObserver: java.awt.image.ImageObserver) -> int: ...
    @typing.overload
    def contains(self, int: int, int2: int) -> bool: ...
    @typing.overload
    def contains(self, point: Point) -> bool: ...
    @typing.overload
    def createImage(self, int: int, int2: int) -> Image: ...
    @typing.overload
    def createImage(self, imageProducer: java.awt.image.ImageProducer) -> Image: ...
    @typing.overload
    def createVolatileImage(self, int: int, int2: int) -> java.awt.image.VolatileImage: ...
    @typing.overload
    def createVolatileImage(self, int: int, int2: int, imageCapabilities: ImageCapabilities) -> java.awt.image.VolatileImage: ...
    def deliverEvent(self, event: Event) -> None: ...
    def disable(self) -> None: ...
    def dispatchEvent(self, aWTEvent: AWTEvent) -> None: ...
    def doLayout(self) -> None: ...
    @typing.overload
    def enable(self) -> None: ...
    @typing.overload
    def enable(self, boolean: bool) -> None: ...
    def enableInputMethods(self, boolean: bool) -> None: ...
    @typing.overload
    def firePropertyChange(self, string: str, byte: int, byte2: int) -> None: ...
    @typing.overload
    def firePropertyChange(self, string: str, char: str, char2: str) -> None: ...
    @typing.overload
    def firePropertyChange(self, string: str, double: float, double2: float) -> None: ...
    @typing.overload
    def firePropertyChange(self, string: str, float: float, float2: float) -> None: ...
    @typing.overload
    def firePropertyChange(self, string: str, long: int, long2: int) -> None: ...
    @typing.overload
    def firePropertyChange(self, string: str, short: int, short2: int) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getAlignmentX(self) -> float: ...
    def getAlignmentY(self) -> float: ...
    def getBackground(self) -> 'Color': ...
    def getBaseline(self, int: int, int2: int) -> int: ...
    def getBaselineResizeBehavior(self) -> 'Component.BaselineResizeBehavior': ...
    @typing.overload
    def getBounds(self) -> 'Rectangle': ...
    @typing.overload
    def getBounds(self, rectangle: 'Rectangle') -> 'Rectangle': ...
    def getColorModel(self) -> java.awt.image.ColorModel: ...
    @typing.overload
    def getComponentAt(self, int: int, int2: int) -> 'Component': ...
    @typing.overload
    def getComponentAt(self, point: Point) -> 'Component': ...
    def getComponentListeners(self) -> typing.List[java.awt.event.ComponentListener]: ...
    def getComponentOrientation(self) -> ComponentOrientation: ...
    def getCursor(self) -> Cursor: ...
    def getDropTarget(self) -> java.awt.dnd.DropTarget: ...
    def getFocusCycleRootAncestor(self) -> 'Container': ...
    def getFocusListeners(self) -> typing.List[java.awt.event.FocusListener]: ...
    def getFocusTraversalKeys(self, int: int) -> java.util.Set[AWTKeyStroke]: ...
    def getFocusTraversalKeysEnabled(self) -> bool: ...
    def getFont(self) -> Font: ...
    def getFontMetrics(self, font: Font) -> FontMetrics: ...
    def getForeground(self) -> 'Color': ...
    def getGraphics(self) -> Graphics: ...
    def getGraphicsConfiguration(self) -> GraphicsConfiguration: ...
    def getHeight(self) -> int: ...
    def getHierarchyBoundsListeners(self) -> typing.List[java.awt.event.HierarchyBoundsListener]: ...
    def getHierarchyListeners(self) -> typing.List[java.awt.event.HierarchyListener]: ...
    def getIgnoreRepaint(self) -> bool: ...
    def getInputContext(self) -> java.awt.im.InputContext: ...
    def getInputMethodListeners(self) -> typing.List[java.awt.event.InputMethodListener]: ...
    def getInputMethodRequests(self) -> java.awt.im.InputMethodRequests: ...
    def getKeyListeners(self) -> typing.List[java.awt.event.KeyListener]: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    def getLocale(self) -> java.util.Locale: ...
    @typing.overload
    def getLocation(self) -> Point: ...
    @typing.overload
    def getLocation(self, point: Point) -> Point: ...
    def getLocationOnScreen(self) -> Point: ...
    def getMaximumSize(self) -> Dimension: ...
    def getMinimumSize(self) -> Dimension: ...
    def getMouseListeners(self) -> typing.List[java.awt.event.MouseListener]: ...
    def getMouseMotionListeners(self) -> typing.List[java.awt.event.MouseMotionListener]: ...
    def getMousePosition(self) -> Point: ...
    def getMouseWheelListeners(self) -> typing.List[java.awt.event.MouseWheelListener]: ...
    def getName(self) -> str: ...
    def getParent(self) -> 'Container': ...
    def getPreferredSize(self) -> Dimension: ...
    @typing.overload
    def getPropertyChangeListeners(self) -> typing.List[java.beans.PropertyChangeListener]: ...
    @typing.overload
    def getPropertyChangeListeners(self, string: str) -> typing.List[java.beans.PropertyChangeListener]: ...
    @typing.overload
    def getSize(self) -> Dimension: ...
    @typing.overload
    def getSize(self, dimension: Dimension) -> Dimension: ...
    def getToolkit(self) -> Toolkit: ...
    def getTreeLock(self) -> typing.Any: ...
    def getWidth(self) -> int: ...
    def getX(self) -> int: ...
    def getY(self) -> int: ...
    def gotFocus(self, event: Event, object: typing.Any) -> bool: ...
    def handleEvent(self, event: Event) -> bool: ...
    def hasFocus(self) -> bool: ...
    def hide(self) -> None: ...
    def imageUpdate(self, image: Image, int: int, int2: int, int3: int, int4: int, int5: int) -> bool: ...
    def inside(self, int: int, int2: int) -> bool: ...
    def invalidate(self) -> None: ...
    def isBackgroundSet(self) -> bool: ...
    def isCursorSet(self) -> bool: ...
    def isDisplayable(self) -> bool: ...
    def isDoubleBuffered(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isFocusCycleRoot(self, container: 'Container') -> bool: ...
    def isFocusOwner(self) -> bool: ...
    def isFocusTraversable(self) -> bool: ...
    def isFocusable(self) -> bool: ...
    def isFontSet(self) -> bool: ...
    def isForegroundSet(self) -> bool: ...
    def isLightweight(self) -> bool: ...
    def isMaximumSizeSet(self) -> bool: ...
    def isMinimumSizeSet(self) -> bool: ...
    def isOpaque(self) -> bool: ...
    def isPreferredSizeSet(self) -> bool: ...
    def isShowing(self) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def keyDown(self, event: Event, int: int) -> bool: ...
    def keyUp(self, event: Event, int: int) -> bool: ...
    def layout(self) -> None: ...
    @typing.overload
    def list(self) -> None: ...
    @typing.overload
    def list(self, printStream: java.io.PrintStream) -> None: ...
    @typing.overload
    def list(self, printStream: java.io.PrintStream, int: int) -> None: ...
    @typing.overload
    def list(self, printWriter: java.io.PrintWriter) -> None: ...
    @typing.overload
    def list(self, printWriter: java.io.PrintWriter, int: int) -> None: ...
    def locate(self, int: int, int2: int) -> 'Component': ...
    def location(self) -> Point: ...
    def lostFocus(self, event: Event, object: typing.Any) -> bool: ...
    def minimumSize(self) -> Dimension: ...
    def mouseDown(self, event: Event, int: int, int2: int) -> bool: ...
    def mouseDrag(self, event: Event, int: int, int2: int) -> bool: ...
    def mouseEnter(self, event: Event, int: int, int2: int) -> bool: ...
    def mouseExit(self, event: Event, int: int, int2: int) -> bool: ...
    def mouseMove(self, event: Event, int: int, int2: int) -> bool: ...
    def mouseUp(self, event: Event, int: int, int2: int) -> bool: ...
    def move(self, int: int, int2: int) -> None: ...
    def nextFocus(self) -> None: ...
    def paint(self, graphics: Graphics) -> None: ...
    def paintAll(self, graphics: Graphics) -> None: ...
    def postEvent(self, event: Event) -> bool: ...
    def preferredSize(self) -> Dimension: ...
    @typing.overload
    def prepareImage(self, image: Image, int: int, int2: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def prepareImage(self, image: Image, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    def printAll(self, graphics: Graphics) -> None: ...
    def remove(self, menuComponent: MenuComponent) -> None: ...
    def removeComponentListener(self, componentListener: java.awt.event.ComponentListener) -> None: ...
    def removeFocusListener(self, focusListener: java.awt.event.FocusListener) -> None: ...
    def removeHierarchyBoundsListener(self, hierarchyBoundsListener: java.awt.event.HierarchyBoundsListener) -> None: ...
    def removeHierarchyListener(self, hierarchyListener: java.awt.event.HierarchyListener) -> None: ...
    def removeInputMethodListener(self, inputMethodListener: java.awt.event.InputMethodListener) -> None: ...
    def removeKeyListener(self, keyListener: java.awt.event.KeyListener) -> None: ...
    def removeMouseListener(self, mouseListener: java.awt.event.MouseListener) -> None: ...
    def removeMouseMotionListener(self, mouseMotionListener: java.awt.event.MouseMotionListener) -> None: ...
    def removeMouseWheelListener(self, mouseWheelListener: java.awt.event.MouseWheelListener) -> None: ...
    def removeNotify(self) -> None: ...
    @typing.overload
    def removePropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    @typing.overload
    def removePropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    @typing.overload
    def repaint(self) -> None: ...
    @typing.overload
    def repaint(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def repaint(self, long: int) -> None: ...
    @typing.overload
    def repaint(self, long: int, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def requestFocus(self) -> None: ...
    @typing.overload
    def requestFocus(self, cause: java.awt.event.FocusEvent.Cause) -> None: ...
    @typing.overload
    def requestFocusInWindow(self) -> bool: ...
    @typing.overload
    def requestFocusInWindow(self, cause: java.awt.event.FocusEvent.Cause) -> bool: ...
    def reshape(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def resize(self, int: int, int2: int) -> None: ...
    @typing.overload
    def resize(self, dimension: Dimension) -> None: ...
    def revalidate(self) -> None: ...
    def setBackground(self, color: 'Color') -> None: ...
    @typing.overload
    def setBounds(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def setBounds(self, rectangle: 'Rectangle') -> None: ...
    def setComponentOrientation(self, componentOrientation: ComponentOrientation) -> None: ...
    def setCursor(self, cursor: Cursor) -> None: ...
    def setDropTarget(self, dropTarget: java.awt.dnd.DropTarget) -> None: ...
    def setEnabled(self, boolean: bool) -> None: ...
    def setFocusTraversalKeys(self, int: int, set: java.util.Set[AWTKeyStroke]) -> None: ...
    def setFocusTraversalKeysEnabled(self, boolean: bool) -> None: ...
    def setFocusable(self, boolean: bool) -> None: ...
    def setFont(self, font: Font) -> None: ...
    def setForeground(self, color: 'Color') -> None: ...
    def setIgnoreRepaint(self, boolean: bool) -> None: ...
    def setLocale(self, locale: java.util.Locale) -> None: ...
    @typing.overload
    def setLocation(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLocation(self, point: Point) -> None: ...
    def setMaximumSize(self, dimension: Dimension) -> None: ...
    def setMinimumSize(self, dimension: Dimension) -> None: ...
    def setMixingCutoutShape(self, shape: Shape) -> None: ...
    def setName(self, string: str) -> None: ...
    def setPreferredSize(self, dimension: Dimension) -> None: ...
    @typing.overload
    def setSize(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setSize(self, dimension: Dimension) -> None: ...
    def setVisible(self, boolean: bool) -> None: ...
    @typing.overload
    def show(self) -> None: ...
    @typing.overload
    def show(self, boolean: bool) -> None: ...
    def size(self) -> Dimension: ...
    def toString(self) -> str: ...
    def transferFocus(self) -> None: ...
    def transferFocusBackward(self) -> None: ...
    def transferFocusUpCycle(self) -> None: ...
    def update(self, graphics: Graphics) -> None: ...
    def validate(self) -> None: ...
    class BaselineResizeBehavior(java.lang.Enum['Component.BaselineResizeBehavior']):
        """
        Java class 'java.awt.Component$BaselineResizeBehavior'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            CONSTANT_ASCENT (java.awt.Component$BaselineResizeBehavior): final static enum constant
            CONSTANT_DESCENT (java.awt.Component$BaselineResizeBehavior): final static enum constant
            CENTER_OFFSET (java.awt.Component$BaselineResizeBehavior): final static enum constant
            OTHER (java.awt.Component$BaselineResizeBehavior): final static enum constant
        
        """
        CONSTANT_ASCENT: typing.ClassVar['Component.BaselineResizeBehavior'] = ...
        CONSTANT_DESCENT: typing.ClassVar['Component.BaselineResizeBehavior'] = ...
        CENTER_OFFSET: typing.ClassVar['Component.BaselineResizeBehavior'] = ...
        OTHER: typing.ClassVar['Component.BaselineResizeBehavior'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Component.BaselineResizeBehavior': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['Component.BaselineResizeBehavior']: ...

class ContainerOrderFocusTraversalPolicy(FocusTraversalPolicy, java.io.Serializable):
    """
    Java class 'java.awt.ContainerOrderFocusTraversalPolicy'
    
        Extends:
            java.awt.FocusTraversalPolicy
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * ContainerOrderFocusTraversalPolicy()
    
    """
    def __init__(self): ...
    def getComponentAfter(self, container: 'Container', component: Component) -> Component: ...
    def getComponentBefore(self, container: 'Container', component: Component) -> Component: ...
    def getDefaultComponent(self, container: 'Container') -> Component: ...
    def getFirstComponent(self, container: 'Container') -> Component: ...
    def getImplicitDownCycleTraversal(self) -> bool: ...
    def getLastComponent(self, container: 'Container') -> Component: ...
    def setImplicitDownCycleTraversal(self, boolean: bool) -> None: ...

class FlowLayout(LayoutManager, java.io.Serializable):
    """
    Java class 'java.awt.FlowLayout'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.LayoutManager, java.io.Serializable
    
      Constructors:
        * FlowLayout(int, int, int)
        * FlowLayout(int)
        * FlowLayout()
    
      Attributes:
        LEFT (int): final static field
        CENTER (int): final static field
        RIGHT (int): final static field
        LEADING (int): final static field
        TRAILING (int): final static field
    
    """
    LEFT: typing.ClassVar[int] = ...
    CENTER: typing.ClassVar[int] = ...
    RIGHT: typing.ClassVar[int] = ...
    LEADING: typing.ClassVar[int] = ...
    TRAILING: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...
    def addLayoutComponent(self, string: str, component: Component) -> None: ...
    def getAlignOnBaseline(self) -> bool: ...
    def getAlignment(self) -> int: ...
    def getHgap(self) -> int: ...
    def getVgap(self) -> int: ...
    def layoutContainer(self, container: 'Container') -> None: ...
    def minimumLayoutSize(self, container: 'Container') -> Dimension: ...
    def preferredLayoutSize(self, container: 'Container') -> Dimension: ...
    def removeLayoutComponent(self, component: Component) -> None: ...
    def setAlignOnBaseline(self, boolean: bool) -> None: ...
    def setAlignment(self, int: int) -> None: ...
    def setHgap(self, int: int) -> None: ...
    def setVgap(self, int: int) -> None: ...
    def toString(self) -> str: ...

class Graphics2D(Graphics):
    """
    Java class 'java.awt.Graphics2D'
    
        Extends:
            java.awt.Graphics
    
    """
    def addRenderingHints(self, map: typing.Union[java.util.Map[typing.Any, typing.Any], typing.Mapping[typing.Any, typing.Any]]) -> None: ...
    def clip(self, shape: Shape) -> None: ...
    def draw(self, shape: Shape) -> None: ...
    def draw3DRect(self, int: int, int2: int, int3: int, int4: int, boolean: bool) -> None: ...
    def drawGlyphVector(self, glyphVector: java.awt.font.GlyphVector, float: float, float2: float) -> None: ...
    @typing.overload
    def drawImage(self, image: Image, int: int, int2: int, int3: int, int4: int, int5: int, int6: int, int7: int, int8: int, color: 'Color', imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: Image, int: int, int2: int, int3: int, int4: int, int5: int, int6: int, int7: int, int8: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: Image, int: int, int2: int, int3: int, int4: int, color: 'Color', imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: Image, int: int, int2: int, int3: int, int4: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: Image, int: int, int2: int, color: 'Color', imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: Image, int: int, int2: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: Image, affineTransform: java.awt.geom.AffineTransform, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, bufferedImage: java.awt.image.BufferedImage, bufferedImageOp: java.awt.image.BufferedImageOp, int: int, int2: int) -> None: ...
    def drawRenderableImage(self, renderableImage: java.awt.image.renderable.RenderableImage, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    def drawRenderedImage(self, renderedImage: java.awt.image.RenderedImage, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    @typing.overload
    def drawString(self, string: str, float: float, float2: float) -> None: ...
    @typing.overload
    def drawString(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def drawString(self, attributedCharacterIterator: java.text.AttributedCharacterIterator, float: float, float2: float) -> None: ...
    @typing.overload
    def drawString(self, attributedCharacterIterator: java.text.AttributedCharacterIterator, int: int, int2: int) -> None: ...
    def fill(self, shape: Shape) -> None: ...
    def fill3DRect(self, int: int, int2: int, int3: int, int4: int, boolean: bool) -> None: ...
    def getBackground(self) -> 'Color': ...
    def getComposite(self) -> Composite: ...
    def getDeviceConfiguration(self) -> GraphicsConfiguration: ...
    def getFontRenderContext(self) -> java.awt.font.FontRenderContext: ...
    def getPaint(self) -> 'Paint': ...
    def getRenderingHint(self, key: RenderingHints.Key) -> typing.Any: ...
    def getRenderingHints(self) -> RenderingHints: ...
    def getStroke(self) -> Stroke: ...
    def getTransform(self) -> java.awt.geom.AffineTransform: ...
    def hit(self, rectangle: 'Rectangle', shape: Shape, boolean: bool) -> bool: ...
    @typing.overload
    def rotate(self, double: float) -> None: ...
    @typing.overload
    def rotate(self, double: float, double2: float, double3: float) -> None: ...
    def scale(self, double: float, double2: float) -> None: ...
    def setBackground(self, color: 'Color') -> None: ...
    def setComposite(self, composite: Composite) -> None: ...
    def setPaint(self, paint: 'Paint') -> None: ...
    def setRenderingHint(self, key: RenderingHints.Key, object: typing.Any) -> None: ...
    def setRenderingHints(self, map: typing.Union[java.util.Map[typing.Any, typing.Any], typing.Mapping[typing.Any, typing.Any]]) -> None: ...
    def setStroke(self, stroke: Stroke) -> None: ...
    def setTransform(self, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    def shear(self, double: float, double2: float) -> None: ...
    def transform(self, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    @typing.overload
    def translate(self, double: float, double2: float) -> None: ...
    @typing.overload
    def translate(self, int: int, int2: int) -> None: ...

class GridLayout(LayoutManager, java.io.Serializable):
    """
    Java class 'java.awt.GridLayout'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.LayoutManager, java.io.Serializable
    
      Constructors:
        * GridLayout(int, int, int, int)
        * GridLayout(int, int)
        * GridLayout()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int): ...
    def addLayoutComponent(self, string: str, component: Component) -> None: ...
    def getColumns(self) -> int: ...
    def getHgap(self) -> int: ...
    def getRows(self) -> int: ...
    def getVgap(self) -> int: ...
    def layoutContainer(self, container: 'Container') -> None: ...
    def minimumLayoutSize(self, container: 'Container') -> Dimension: ...
    def preferredLayoutSize(self, container: 'Container') -> Dimension: ...
    def removeLayoutComponent(self, component: Component) -> None: ...
    def setColumns(self, int: int) -> None: ...
    def setHgap(self, int: int) -> None: ...
    def setRows(self, int: int) -> None: ...
    def setVgap(self, int: int) -> None: ...
    def toString(self) -> str: ...

class KeyboardFocusManager(KeyEventDispatcher, KeyEventPostProcessor):
    """
    Java class 'java.awt.KeyboardFocusManager'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.KeyEventDispatcher, java.awt.KeyEventPostProcessor
    
      Constructors:
        * KeyboardFocusManager()
    
      Attributes:
        FORWARD_TRAVERSAL_KEYS (int): final static field
        BACKWARD_TRAVERSAL_KEYS (int): final static field
        UP_CYCLE_TRAVERSAL_KEYS (int): final static field
        DOWN_CYCLE_TRAVERSAL_KEYS (int): final static field
    
    """
    FORWARD_TRAVERSAL_KEYS: typing.ClassVar[int] = ...
    BACKWARD_TRAVERSAL_KEYS: typing.ClassVar[int] = ...
    UP_CYCLE_TRAVERSAL_KEYS: typing.ClassVar[int] = ...
    DOWN_CYCLE_TRAVERSAL_KEYS: typing.ClassVar[int] = ...
    def __init__(self): ...
    def addKeyEventDispatcher(self, keyEventDispatcher: typing.Union[KeyEventDispatcher, typing.Callable]) -> None: ...
    def addKeyEventPostProcessor(self, keyEventPostProcessor: typing.Union[KeyEventPostProcessor, typing.Callable]) -> None: ...
    @typing.overload
    def addPropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    @typing.overload
    def addPropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    @typing.overload
    def addVetoableChangeListener(self, vetoableChangeListener: java.beans.VetoableChangeListener) -> None: ...
    @typing.overload
    def addVetoableChangeListener(self, string: str, vetoableChangeListener: java.beans.VetoableChangeListener) -> None: ...
    def clearFocusOwner(self) -> None: ...
    def clearGlobalFocusOwner(self) -> None: ...
    def dispatchEvent(self, aWTEvent: AWTEvent) -> bool: ...
    def dispatchKeyEvent(self, keyEvent: java.awt.event.KeyEvent) -> bool: ...
    @typing.overload
    def downFocusCycle(self, container: 'Container') -> None: ...
    @typing.overload
    def downFocusCycle(self) -> None: ...
    @typing.overload
    def focusNextComponent(self, component: Component) -> None: ...
    @typing.overload
    def focusNextComponent(self) -> None: ...
    @typing.overload
    def focusPreviousComponent(self, component: Component) -> None: ...
    @typing.overload
    def focusPreviousComponent(self) -> None: ...
    def getActiveWindow(self) -> 'Window': ...
    def getCurrentFocusCycleRoot(self) -> 'Container': ...
    @staticmethod
    def getCurrentKeyboardFocusManager() -> 'KeyboardFocusManager': ...
    def getDefaultFocusTraversalKeys(self, int: int) -> java.util.Set[AWTKeyStroke]: ...
    def getDefaultFocusTraversalPolicy(self) -> FocusTraversalPolicy: ...
    def getFocusOwner(self) -> Component: ...
    def getFocusedWindow(self) -> 'Window': ...
    def getPermanentFocusOwner(self) -> Component: ...
    @typing.overload
    def getPropertyChangeListeners(self) -> typing.List[java.beans.PropertyChangeListener]: ...
    @typing.overload
    def getPropertyChangeListeners(self, string: str) -> typing.List[java.beans.PropertyChangeListener]: ...
    @typing.overload
    def getVetoableChangeListeners(self) -> typing.List[java.beans.VetoableChangeListener]: ...
    @typing.overload
    def getVetoableChangeListeners(self, string: str) -> typing.List[java.beans.VetoableChangeListener]: ...
    def postProcessKeyEvent(self, keyEvent: java.awt.event.KeyEvent) -> bool: ...
    def processKeyEvent(self, component: Component, keyEvent: java.awt.event.KeyEvent) -> None: ...
    def redispatchEvent(self, component: Component, aWTEvent: AWTEvent) -> None: ...
    def removeKeyEventDispatcher(self, keyEventDispatcher: typing.Union[KeyEventDispatcher, typing.Callable]) -> None: ...
    def removeKeyEventPostProcessor(self, keyEventPostProcessor: typing.Union[KeyEventPostProcessor, typing.Callable]) -> None: ...
    @typing.overload
    def removePropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    @typing.overload
    def removePropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    @typing.overload
    def removeVetoableChangeListener(self, vetoableChangeListener: java.beans.VetoableChangeListener) -> None: ...
    @typing.overload
    def removeVetoableChangeListener(self, string: str, vetoableChangeListener: java.beans.VetoableChangeListener) -> None: ...
    @staticmethod
    def setCurrentKeyboardFocusManager(keyboardFocusManager: 'KeyboardFocusManager') -> None: ...
    def setDefaultFocusTraversalKeys(self, int: int, set: java.util.Set[AWTKeyStroke]) -> None: ...
    def setDefaultFocusTraversalPolicy(self, focusTraversalPolicy: FocusTraversalPolicy) -> None: ...
    def setGlobalCurrentFocusCycleRoot(self, container: 'Container') -> None: ...
    @typing.overload
    def upFocusCycle(self, component: Component) -> None: ...
    @typing.overload
    def upFocusCycle(self) -> None: ...

class LayoutManager2(LayoutManager):
    """
    Java class 'java.awt.LayoutManager2'
    
        Interfaces:
            java.awt.LayoutManager
    
    """
    @typing.overload
    def addLayoutComponent(self, string: str, component: Component) -> None: ...
    @typing.overload
    def addLayoutComponent(self, component: Component, object: typing.Any) -> None: ...
    def getLayoutAlignmentX(self, container: 'Container') -> float: ...
    def getLayoutAlignmentY(self, container: 'Container') -> float: ...
    def invalidateLayout(self, container: 'Container') -> None: ...
    def maximumLayoutSize(self, container: 'Container') -> Dimension: ...

class MenuBar(MenuComponent, MenuContainer, javax.accessibility.Accessible):
    """
    Java class 'java.awt.MenuBar'
    
        Extends:
            java.awt.MenuComponent
    
        Interfaces:
            java.awt.MenuContainer, javax.accessibility.Accessible
    
      Constructors:
        * MenuBar()
    
      Raises:
        java.awt.HeadlessException: from java
    
    """
    def __init__(self): ...
    def add(self, menu: 'Menu') -> 'Menu': ...
    def addNotify(self) -> None: ...
    def countMenus(self) -> int: ...
    def deleteShortcut(self, menuShortcut: MenuShortcut) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getHelpMenu(self) -> 'Menu': ...
    def getMenu(self, int: int) -> 'Menu': ...
    def getMenuCount(self) -> int: ...
    def getShortcutMenuItem(self, menuShortcut: MenuShortcut) -> 'MenuItem': ...
    @typing.overload
    def remove(self, int: int) -> None: ...
    @typing.overload
    def remove(self, menuComponent: MenuComponent) -> None: ...
    def removeNotify(self) -> None: ...
    def setHelpMenu(self, menu: 'Menu') -> None: ...
    def shortcuts(self) -> java.util.Enumeration[MenuShortcut]: ...

class MenuItem(MenuComponent, javax.accessibility.Accessible):
    """
    Java class 'java.awt.MenuItem'
    
        Extends:
            java.awt.MenuComponent
    
        Interfaces:
            javax.accessibility.Accessible
    
      Constructors:
        * MenuItem(java.lang.String, java.awt.MenuShortcut)
        * MenuItem(java.lang.String)
        * MenuItem()
    
      Raises:
        java.awt.HeadlessException: from java
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, menuShortcut: MenuShortcut): ...
    def addActionListener(self, actionListener: java.awt.event.ActionListener) -> None: ...
    def addNotify(self) -> None: ...
    def deleteShortcut(self) -> None: ...
    def disable(self) -> None: ...
    @typing.overload
    def enable(self) -> None: ...
    @typing.overload
    def enable(self, boolean: bool) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getActionCommand(self) -> str: ...
    def getActionListeners(self) -> typing.List[java.awt.event.ActionListener]: ...
    def getLabel(self) -> str: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    def getShortcut(self) -> MenuShortcut: ...
    def isEnabled(self) -> bool: ...
    def paramString(self) -> str: ...
    def removeActionListener(self, actionListener: java.awt.event.ActionListener) -> None: ...
    def setActionCommand(self, string: str) -> None: ...
    def setEnabled(self, boolean: bool) -> None: ...
    def setLabel(self, string: str) -> None: ...
    def setShortcut(self, menuShortcut: MenuShortcut) -> None: ...

class Paint(Transparency):
    """
    Java class 'java.awt.Paint'
    
        Interfaces:
            java.awt.Transparency
    
    """
    def createContext(self, colorModel: java.awt.image.ColorModel, rectangle: 'Rectangle', rectangle2D: java.awt.geom.Rectangle2D, affineTransform: java.awt.geom.AffineTransform, renderingHints: RenderingHints) -> PaintContext: ...

class Polygon(Shape, java.io.Serializable):
    """
    Java class 'java.awt.Polygon'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.Shape, java.io.Serializable
    
      Constructors:
        * Polygon()
        * Polygon(int[], int[], int)
    
      Attributes:
        npoints (int): field
        xpoints ([I): field
        ypoints ([I): field
    
    """
    npoints: int = ...
    xpoints: typing.List[int] = ...
    ypoints: typing.List[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int): ...
    def addPoint(self, int: int, int2: int) -> None: ...
    @typing.overload
    def contains(self, double: float, double2: float) -> bool: ...
    @typing.overload
    def contains(self, double: float, double2: float, double3: float, double4: float) -> bool: ...
    @typing.overload
    def contains(self, int: int, int2: int) -> bool: ...
    @typing.overload
    def contains(self, point: Point) -> bool: ...
    @typing.overload
    def contains(self, point2D: java.awt.geom.Point2D) -> bool: ...
    @typing.overload
    def contains(self, rectangle2D: java.awt.geom.Rectangle2D) -> bool: ...
    def getBoundingBox(self) -> 'Rectangle': ...
    def getBounds(self) -> 'Rectangle': ...
    def getBounds2D(self) -> java.awt.geom.Rectangle2D: ...
    @typing.overload
    def getPathIterator(self, affineTransform: java.awt.geom.AffineTransform) -> java.awt.geom.PathIterator: ...
    @typing.overload
    def getPathIterator(self, affineTransform: java.awt.geom.AffineTransform, double: float) -> java.awt.geom.PathIterator: ...
    def inside(self, int: int, int2: int) -> bool: ...
    @typing.overload
    def intersects(self, double: float, double2: float, double3: float, double4: float) -> bool: ...
    @typing.overload
    def intersects(self, rectangle2D: java.awt.geom.Rectangle2D) -> bool: ...
    def invalidate(self) -> None: ...
    def reset(self) -> None: ...
    def translate(self, int: int, int2: int) -> None: ...

class Rectangle(java.awt.geom.Rectangle2D, Shape, java.io.Serializable):
    """
    Java class 'java.awt.Rectangle'
    
        Extends:
            java.awt.geom.Rectangle2D
    
        Interfaces:
            java.awt.Shape, java.io.Serializable
    
      Constructors:
        * Rectangle(int, int, int, int)
        * Rectangle(int, int)
        * Rectangle(java.awt.Dimension)
        * Rectangle(java.awt.Point)
        * Rectangle(java.awt.Rectangle)
        * Rectangle()
        * Rectangle(java.awt.Point, java.awt.Dimension)
    
      Attributes:
        x (int): field
        y (int): field
        width (int): field
        height (int): field
    
    """
    x: int = ...
    y: int = ...
    width: int = ...
    height: int = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int): ...
    @typing.overload
    def __init__(self, dimension: Dimension): ...
    @typing.overload
    def __init__(self, point: Point): ...
    @typing.overload
    def __init__(self, point: Point, dimension: Dimension): ...
    @typing.overload
    def __init__(self, rectangle: 'Rectangle'): ...
    @typing.overload
    def add(self, int: int, int2: int) -> None: ...
    @typing.overload
    def add(self, point: Point) -> None: ...
    @typing.overload
    def add(self, rectangle: 'Rectangle') -> None: ...
    @typing.overload
    def add(self, double: float, double2: float) -> None: ...
    @typing.overload
    def add(self, point2D: java.awt.geom.Point2D) -> None: ...
    @typing.overload
    def add(self, rectangle2D: java.awt.geom.Rectangle2D) -> None: ...
    @typing.overload
    def contains(self, int: int, int2: int) -> bool: ...
    @typing.overload
    def contains(self, int: int, int2: int, int3: int, int4: int) -> bool: ...
    @typing.overload
    def contains(self, point: Point) -> bool: ...
    @typing.overload
    def contains(self, rectangle: 'Rectangle') -> bool: ...
    @typing.overload
    def contains(self, double: float, double2: float) -> bool: ...
    @typing.overload
    def contains(self, double: float, double2: float, double3: float, double4: float) -> bool: ...
    @typing.overload
    def contains(self, point2D: java.awt.geom.Point2D) -> bool: ...
    @typing.overload
    def contains(self, rectangle2D: java.awt.geom.Rectangle2D) -> bool: ...
    def createIntersection(self, rectangle2D: java.awt.geom.Rectangle2D) -> java.awt.geom.Rectangle2D: ...
    def createUnion(self, rectangle2D: java.awt.geom.Rectangle2D) -> java.awt.geom.Rectangle2D: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBounds(self) -> 'Rectangle': ...
    def getBounds2D(self) -> java.awt.geom.Rectangle2D: ...
    def getHeight(self) -> float: ...
    def getLocation(self) -> Point: ...
    def getSize(self) -> Dimension: ...
    def getWidth(self) -> float: ...
    def getX(self) -> float: ...
    def getY(self) -> float: ...
    def grow(self, int: int, int2: int) -> None: ...
    def inside(self, int: int, int2: int) -> bool: ...
    def intersection(self, rectangle: 'Rectangle') -> 'Rectangle': ...
    @typing.overload
    def intersects(self, rectangle: 'Rectangle') -> bool: ...
    @typing.overload
    def intersects(self, double: float, double2: float, double3: float, double4: float) -> bool: ...
    @typing.overload
    def intersects(self, rectangle2D: java.awt.geom.Rectangle2D) -> bool: ...
    def isEmpty(self) -> bool: ...
    def move(self, int: int, int2: int) -> None: ...
    @typing.overload
    def outcode(self, double: float, double2: float) -> int: ...
    @typing.overload
    def outcode(self, point2D: java.awt.geom.Point2D) -> int: ...
    def reshape(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def resize(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setBounds(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def setBounds(self, rectangle: 'Rectangle') -> None: ...
    @typing.overload
    def setLocation(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLocation(self, point: Point) -> None: ...
    @typing.overload
    def setRect(self, double: float, double2: float, double3: float, double4: float) -> None: ...
    @typing.overload
    def setRect(self, rectangle2D: java.awt.geom.Rectangle2D) -> None: ...
    @typing.overload
    def setSize(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setSize(self, dimension: Dimension) -> None: ...
    def toString(self) -> str: ...
    def translate(self, int: int, int2: int) -> None: ...
    @typing.overload
    def union(self, rectangle: 'Rectangle') -> 'Rectangle': ...
    @typing.overload
    @staticmethod
    def union(rectangle2D: java.awt.geom.Rectangle2D, rectangle2D2: java.awt.geom.Rectangle2D, rectangle2D3: java.awt.geom.Rectangle2D) -> None: ...

class ScrollPaneAdjustable(Adjustable, java.io.Serializable):
    """
    Java class 'java.awt.ScrollPaneAdjustable'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.Adjustable, java.io.Serializable
    
    """
    def addAdjustmentListener(self, adjustmentListener: java.awt.event.AdjustmentListener) -> None: ...
    def getAdjustmentListeners(self) -> typing.List[java.awt.event.AdjustmentListener]: ...
    def getBlockIncrement(self) -> int: ...
    def getMaximum(self) -> int: ...
    def getMinimum(self) -> int: ...
    def getOrientation(self) -> int: ...
    def getUnitIncrement(self) -> int: ...
    def getValue(self) -> int: ...
    def getValueIsAdjusting(self) -> bool: ...
    def getVisibleAmount(self) -> int: ...
    def paramString(self) -> str: ...
    def removeAdjustmentListener(self, adjustmentListener: java.awt.event.AdjustmentListener) -> None: ...
    def setBlockIncrement(self, int: int) -> None: ...
    def setMaximum(self, int: int) -> None: ...
    def setMinimum(self, int: int) -> None: ...
    def setUnitIncrement(self, int: int) -> None: ...
    def setValue(self, int: int) -> None: ...
    def setValueIsAdjusting(self, boolean: bool) -> None: ...
    def setVisibleAmount(self, int: int) -> None: ...
    def toString(self) -> str: ...

class BorderLayout(LayoutManager2, java.io.Serializable):
    """
    Java class 'java.awt.BorderLayout'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.LayoutManager2, java.io.Serializable
    
      Constructors:
        * BorderLayout()
        * BorderLayout(int, int)
    
      Attributes:
        NORTH (java.lang.String): final static field
        SOUTH (java.lang.String): final static field
        EAST (java.lang.String): final static field
        WEST (java.lang.String): final static field
        CENTER (java.lang.String): final static field
        BEFORE_FIRST_LINE (java.lang.String): final static field
        AFTER_LAST_LINE (java.lang.String): final static field
        BEFORE_LINE_BEGINS (java.lang.String): final static field
        AFTER_LINE_ENDS (java.lang.String): final static field
        PAGE_START (java.lang.String): final static field
        PAGE_END (java.lang.String): final static field
        LINE_START (java.lang.String): final static field
        LINE_END (java.lang.String): final static field
    
    """
    NORTH: typing.ClassVar[str] = ...
    SOUTH: typing.ClassVar[str] = ...
    EAST: typing.ClassVar[str] = ...
    WEST: typing.ClassVar[str] = ...
    CENTER: typing.ClassVar[str] = ...
    BEFORE_FIRST_LINE: typing.ClassVar[str] = ...
    AFTER_LAST_LINE: typing.ClassVar[str] = ...
    BEFORE_LINE_BEGINS: typing.ClassVar[str] = ...
    AFTER_LINE_ENDS: typing.ClassVar[str] = ...
    PAGE_START: typing.ClassVar[str] = ...
    PAGE_END: typing.ClassVar[str] = ...
    LINE_START: typing.ClassVar[str] = ...
    LINE_END: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def addLayoutComponent(self, component: Component, object: typing.Any) -> None: ...
    @typing.overload
    def addLayoutComponent(self, string: str, component: Component) -> None: ...
    def getConstraints(self, component: Component) -> typing.Any: ...
    def getHgap(self) -> int: ...
    def getLayoutAlignmentX(self, container: 'Container') -> float: ...
    def getLayoutAlignmentY(self, container: 'Container') -> float: ...
    @typing.overload
    def getLayoutComponent(self, container: 'Container', object: typing.Any) -> Component: ...
    @typing.overload
    def getLayoutComponent(self, object: typing.Any) -> Component: ...
    def getVgap(self) -> int: ...
    def invalidateLayout(self, container: 'Container') -> None: ...
    def layoutContainer(self, container: 'Container') -> None: ...
    def maximumLayoutSize(self, container: 'Container') -> Dimension: ...
    def minimumLayoutSize(self, container: 'Container') -> Dimension: ...
    def preferredLayoutSize(self, container: 'Container') -> Dimension: ...
    def removeLayoutComponent(self, component: Component) -> None: ...
    def setHgap(self, int: int) -> None: ...
    def setVgap(self, int: int) -> None: ...
    def toString(self) -> str: ...

class Button(Component, javax.accessibility.Accessible):
    """
    Java class 'java.awt.Button'
    
        Extends:
            java.awt.Component
    
        Interfaces:
            javax.accessibility.Accessible
    
      Constructors:
        * Button(java.lang.String)
        * Button()
    
      Raises:
        java.awt.HeadlessException: from java
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    def addActionListener(self, actionListener: java.awt.event.ActionListener) -> None: ...
    def addNotify(self) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getActionCommand(self) -> str: ...
    def getActionListeners(self) -> typing.List[java.awt.event.ActionListener]: ...
    def getLabel(self) -> str: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    def removeActionListener(self, actionListener: java.awt.event.ActionListener) -> None: ...
    def setActionCommand(self, string: str) -> None: ...
    def setLabel(self, string: str) -> None: ...

class Canvas(Component, javax.accessibility.Accessible):
    """
    Java class 'java.awt.Canvas'
    
        Extends:
            java.awt.Component
    
        Interfaces:
            javax.accessibility.Accessible
    
      Constructors:
        * Canvas()
        * Canvas(java.awt.GraphicsConfiguration)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, graphicsConfiguration: GraphicsConfiguration): ...
    def addNotify(self) -> None: ...
    @typing.overload
    def createBufferStrategy(self, int: int) -> None: ...
    @typing.overload
    def createBufferStrategy(self, int: int, bufferCapabilities: 'BufferCapabilities') -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getBufferStrategy(self) -> java.awt.image.BufferStrategy: ...
    def paint(self, graphics: Graphics) -> None: ...
    def update(self, graphics: Graphics) -> None: ...

class CardLayout(LayoutManager2, java.io.Serializable):
    """
    Java class 'java.awt.CardLayout'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.LayoutManager2, java.io.Serializable
    
      Constructors:
        * CardLayout()
        * CardLayout(int, int)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def addLayoutComponent(self, component: Component, object: typing.Any) -> None: ...
    @typing.overload
    def addLayoutComponent(self, string: str, component: Component) -> None: ...
    def first(self, container: 'Container') -> None: ...
    def getHgap(self) -> int: ...
    def getLayoutAlignmentX(self, container: 'Container') -> float: ...
    def getLayoutAlignmentY(self, container: 'Container') -> float: ...
    def getVgap(self) -> int: ...
    def invalidateLayout(self, container: 'Container') -> None: ...
    def last(self, container: 'Container') -> None: ...
    def layoutContainer(self, container: 'Container') -> None: ...
    def maximumLayoutSize(self, container: 'Container') -> Dimension: ...
    def minimumLayoutSize(self, container: 'Container') -> Dimension: ...
    def next(self, container: 'Container') -> None: ...
    def preferredLayoutSize(self, container: 'Container') -> Dimension: ...
    def previous(self, container: 'Container') -> None: ...
    def removeLayoutComponent(self, component: Component) -> None: ...
    def setHgap(self, int: int) -> None: ...
    def setVgap(self, int: int) -> None: ...
    def show(self, container: 'Container', string: str) -> None: ...
    def toString(self) -> str: ...

class Checkbox(Component, ItemSelectable, javax.accessibility.Accessible):
    """
    Java class 'java.awt.Checkbox'
    
        Extends:
            java.awt.Component
    
        Interfaces:
            java.awt.ItemSelectable, javax.accessibility.Accessible
    
      Constructors:
        * Checkbox(java.lang.String, java.awt.CheckboxGroup, boolean)
        * Checkbox(java.lang.String, boolean)
        * Checkbox(java.lang.String)
        * Checkbox()
        * Checkbox(java.lang.String, boolean, java.awt.CheckboxGroup)
    
      Raises:
        java.awt.HeadlessException: from java
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, boolean: bool): ...
    @typing.overload
    def __init__(self, string: str, boolean: bool, checkboxGroup: CheckboxGroup): ...
    @typing.overload
    def __init__(self, string: str, checkboxGroup: CheckboxGroup, boolean: bool): ...
    def addItemListener(self, itemListener: java.awt.event.ItemListener) -> None: ...
    def addNotify(self) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getCheckboxGroup(self) -> CheckboxGroup: ...
    def getItemListeners(self) -> typing.List[java.awt.event.ItemListener]: ...
    def getLabel(self) -> str: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    def getSelectedObjects(self) -> typing.List[typing.Any]: ...
    def getState(self) -> bool: ...
    def removeItemListener(self, itemListener: java.awt.event.ItemListener) -> None: ...
    def setCheckboxGroup(self, checkboxGroup: CheckboxGroup) -> None: ...
    def setLabel(self, string: str) -> None: ...
    def setState(self, boolean: bool) -> None: ...

class CheckboxMenuItem(MenuItem, ItemSelectable, javax.accessibility.Accessible):
    """
    Java class 'java.awt.CheckboxMenuItem'
    
        Extends:
            java.awt.MenuItem
    
        Interfaces:
            java.awt.ItemSelectable, javax.accessibility.Accessible
    
      Constructors:
        * CheckboxMenuItem(java.lang.String, boolean)
        * CheckboxMenuItem(java.lang.String)
        * CheckboxMenuItem()
    
      Raises:
        java.awt.HeadlessException: from java
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, boolean: bool): ...
    def addItemListener(self, itemListener: java.awt.event.ItemListener) -> None: ...
    def addNotify(self) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getItemListeners(self) -> typing.List[java.awt.event.ItemListener]: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    def getSelectedObjects(self) -> typing.List[typing.Any]: ...
    def getState(self) -> bool: ...
    def paramString(self) -> str: ...
    def removeItemListener(self, itemListener: java.awt.event.ItemListener) -> None: ...
    def setState(self, boolean: bool) -> None: ...

class Choice(Component, ItemSelectable, javax.accessibility.Accessible):
    """
    Java class 'java.awt.Choice'
    
        Extends:
            java.awt.Component
    
        Interfaces:
            java.awt.ItemSelectable, javax.accessibility.Accessible
    
      Constructors:
        * Choice()
    
      Raises:
        java.awt.HeadlessException: from java
    
    """
    def __init__(self): ...
    @typing.overload
    def add(self, string: str) -> None: ...
    @typing.overload
    def add(self, popupMenu: 'PopupMenu') -> None: ...
    def addItem(self, string: str) -> None: ...
    def addItemListener(self, itemListener: java.awt.event.ItemListener) -> None: ...
    def addNotify(self) -> None: ...
    def countItems(self) -> int: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getItem(self, int: int) -> str: ...
    def getItemCount(self) -> int: ...
    def getItemListeners(self) -> typing.List[java.awt.event.ItemListener]: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    def getSelectedIndex(self) -> int: ...
    def getSelectedItem(self) -> str: ...
    def getSelectedObjects(self) -> typing.List[typing.Any]: ...
    def insert(self, string: str, int: int) -> None: ...
    @typing.overload
    def remove(self, int: int) -> None: ...
    @typing.overload
    def remove(self, string: str) -> None: ...
    @typing.overload
    def remove(self, menuComponent: MenuComponent) -> None: ...
    def removeAll(self) -> None: ...
    def removeItemListener(self, itemListener: java.awt.event.ItemListener) -> None: ...
    @typing.overload
    def select(self, int: int) -> None: ...
    @typing.overload
    def select(self, string: str) -> None: ...

class Color(Paint, java.io.Serializable):
    """
    Java class 'java.awt.Color'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.Paint, java.io.Serializable
    
      Constructors:
        * Color(float, float, float, float)
        * Color(int)
        * Color(int, boolean)
        * Color(float, float, float)
        * Color(int, int, int)
        * Color(java.awt.color.ColorSpace, float[], float)
        * Color(int, int, int, int)
    
      Attributes:
        white (java.awt.Color): final static field
        WHITE (java.awt.Color): final static field
        lightGray (java.awt.Color): final static field
        LIGHT_GRAY (java.awt.Color): final static field
        gray (java.awt.Color): final static field
        GRAY (java.awt.Color): final static field
        darkGray (java.awt.Color): final static field
        DARK_GRAY (java.awt.Color): final static field
        black (java.awt.Color): final static field
        BLACK (java.awt.Color): final static field
        red (java.awt.Color): final static field
        RED (java.awt.Color): final static field
        pink (java.awt.Color): final static field
        PINK (java.awt.Color): final static field
        orange (java.awt.Color): final static field
        ORANGE (java.awt.Color): final static field
        yellow (java.awt.Color): final static field
        YELLOW (java.awt.Color): final static field
        green (java.awt.Color): final static field
        GREEN (java.awt.Color): final static field
        magenta (java.awt.Color): final static field
        MAGENTA (java.awt.Color): final static field
        cyan (java.awt.Color): final static field
        CYAN (java.awt.Color): final static field
        blue (java.awt.Color): final static field
        BLUE (java.awt.Color): final static field
    
    """
    white: typing.ClassVar['Color'] = ...
    WHITE: typing.ClassVar['Color'] = ...
    lightGray: typing.ClassVar['Color'] = ...
    LIGHT_GRAY: typing.ClassVar['Color'] = ...
    gray: typing.ClassVar['Color'] = ...
    GRAY: typing.ClassVar['Color'] = ...
    darkGray: typing.ClassVar['Color'] = ...
    DARK_GRAY: typing.ClassVar['Color'] = ...
    black: typing.ClassVar['Color'] = ...
    BLACK: typing.ClassVar['Color'] = ...
    red: typing.ClassVar['Color'] = ...
    RED: typing.ClassVar['Color'] = ...
    pink: typing.ClassVar['Color'] = ...
    PINK: typing.ClassVar['Color'] = ...
    orange: typing.ClassVar['Color'] = ...
    ORANGE: typing.ClassVar['Color'] = ...
    yellow: typing.ClassVar['Color'] = ...
    YELLOW: typing.ClassVar['Color'] = ...
    green: typing.ClassVar['Color'] = ...
    GREEN: typing.ClassVar['Color'] = ...
    magenta: typing.ClassVar['Color'] = ...
    MAGENTA: typing.ClassVar['Color'] = ...
    cyan: typing.ClassVar['Color'] = ...
    CYAN: typing.ClassVar['Color'] = ...
    blue: typing.ClassVar['Color'] = ...
    BLUE: typing.ClassVar['Color'] = ...
    @typing.overload
    def __init__(self, float: float, float2: float, float3: float): ...
    @typing.overload
    def __init__(self, float: float, float2: float, float3: float, float4: float): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, boolean: bool): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int): ...
    @typing.overload
    def __init__(self, colorSpace: java.awt.color.ColorSpace, floatArray: typing.List[float], float2: float): ...
    @staticmethod
    def HSBtoRGB(float: float, float2: float, float3: float) -> int: ...
    @staticmethod
    def RGBtoHSB(int: int, int2: int, int3: int, floatArray: typing.List[float]) -> typing.List[float]: ...
    def brighter(self) -> 'Color': ...
    def createContext(self, colorModel: java.awt.image.ColorModel, rectangle: Rectangle, rectangle2D: java.awt.geom.Rectangle2D, affineTransform: java.awt.geom.AffineTransform, renderingHints: RenderingHints) -> PaintContext: ...
    def darker(self) -> 'Color': ...
    @staticmethod
    def decode(string: str) -> 'Color': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAlpha(self) -> int: ...
    def getBlue(self) -> int: ...
    @typing.overload
    @staticmethod
    def getColor(string: str) -> 'Color': ...
    @typing.overload
    @staticmethod
    def getColor(string: str, int: int) -> 'Color': ...
    @typing.overload
    @staticmethod
    def getColor(string: str, color: 'Color') -> 'Color': ...
    @typing.overload
    def getColorComponents(self, floatArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    def getColorComponents(self, colorSpace: java.awt.color.ColorSpace, floatArray: typing.List[float]) -> typing.List[float]: ...
    def getColorSpace(self) -> java.awt.color.ColorSpace: ...
    @typing.overload
    def getComponents(self, floatArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    def getComponents(self, colorSpace: java.awt.color.ColorSpace, floatArray: typing.List[float]) -> typing.List[float]: ...
    def getGreen(self) -> int: ...
    @staticmethod
    def getHSBColor(float: float, float2: float, float3: float) -> 'Color': ...
    def getRGB(self) -> int: ...
    def getRGBColorComponents(self, floatArray: typing.List[float]) -> typing.List[float]: ...
    def getRGBComponents(self, floatArray: typing.List[float]) -> typing.List[float]: ...
    def getRed(self) -> int: ...
    def getTransparency(self) -> int: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class Container(Component):
    """
    Java class 'java.awt.Container'
    
        Extends:
            java.awt.Component
    
      Constructors:
        * Container()
    
    """
    def __init__(self): ...
    @typing.overload
    def add(self, component: Component) -> Component: ...
    @typing.overload
    def add(self, component: Component, int: int) -> Component: ...
    @typing.overload
    def add(self, string: str, component: Component) -> Component: ...
    @typing.overload
    def add(self, popupMenu: 'PopupMenu') -> None: ...
    @typing.overload
    def add(self, component: Component, object: typing.Any) -> None: ...
    @typing.overload
    def add(self, component: Component, object: typing.Any, int: int) -> None: ...
    def addContainerListener(self, containerListener: java.awt.event.ContainerListener) -> None: ...
    def addNotify(self) -> None: ...
    @typing.overload
    def addPropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    @typing.overload
    def addPropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    def applyComponentOrientation(self, componentOrientation: ComponentOrientation) -> None: ...
    def areFocusTraversalKeysSet(self, int: int) -> bool: ...
    def countComponents(self) -> int: ...
    def deliverEvent(self, event: Event) -> None: ...
    def doLayout(self) -> None: ...
    @typing.overload
    def findComponentAt(self, int: int, int2: int) -> Component: ...
    @typing.overload
    def findComponentAt(self, point: Point) -> Component: ...
    def getAlignmentX(self) -> float: ...
    def getAlignmentY(self) -> float: ...
    def getComponent(self, int: int) -> Component: ...
    @typing.overload
    def getComponentAt(self, int: int, int2: int) -> Component: ...
    @typing.overload
    def getComponentAt(self, point: Point) -> Component: ...
    def getComponentCount(self) -> int: ...
    def getComponentZOrder(self, component: Component) -> int: ...
    def getComponents(self) -> typing.List[Component]: ...
    def getContainerListeners(self) -> typing.List[java.awt.event.ContainerListener]: ...
    def getFocusTraversalKeys(self, int: int) -> java.util.Set[AWTKeyStroke]: ...
    def getFocusTraversalPolicy(self) -> FocusTraversalPolicy: ...
    def getInsets(self) -> Insets: ...
    def getLayout(self) -> LayoutManager: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    def getMaximumSize(self) -> Dimension: ...
    def getMinimumSize(self) -> Dimension: ...
    @typing.overload
    def getMousePosition(self) -> Point: ...
    @typing.overload
    def getMousePosition(self, boolean: bool) -> Point: ...
    def getPreferredSize(self) -> Dimension: ...
    def insets(self) -> Insets: ...
    def invalidate(self) -> None: ...
    def isAncestorOf(self, component: Component) -> bool: ...
    @typing.overload
    def isFocusCycleRoot(self) -> bool: ...
    @typing.overload
    def isFocusCycleRoot(self, container: 'Container') -> bool: ...
    def isFocusTraversalPolicyProvider(self) -> bool: ...
    def isFocusTraversalPolicySet(self) -> bool: ...
    def isValidateRoot(self) -> bool: ...
    def layout(self) -> None: ...
    @typing.overload
    def list(self) -> None: ...
    @typing.overload
    def list(self, printStream: java.io.PrintStream) -> None: ...
    @typing.overload
    def list(self, printWriter: java.io.PrintWriter) -> None: ...
    @typing.overload
    def list(self, printStream: java.io.PrintStream, int: int) -> None: ...
    @typing.overload
    def list(self, printWriter: java.io.PrintWriter, int: int) -> None: ...
    def locate(self, int: int, int2: int) -> Component: ...
    def minimumSize(self) -> Dimension: ...
    def paint(self, graphics: Graphics) -> None: ...
    def paintComponents(self, graphics: Graphics) -> None: ...
    def preferredSize(self) -> Dimension: ...
    def printComponents(self, graphics: Graphics) -> None: ...
    @typing.overload
    def remove(self, menuComponent: MenuComponent) -> None: ...
    @typing.overload
    def remove(self, int: int) -> None: ...
    @typing.overload
    def remove(self, component: Component) -> None: ...
    def removeAll(self) -> None: ...
    def removeContainerListener(self, containerListener: java.awt.event.ContainerListener) -> None: ...
    def removeNotify(self) -> None: ...
    def setComponentZOrder(self, component: Component, int: int) -> None: ...
    def setFocusCycleRoot(self, boolean: bool) -> None: ...
    def setFocusTraversalKeys(self, int: int, set: java.util.Set[AWTKeyStroke]) -> None: ...
    def setFocusTraversalPolicy(self, focusTraversalPolicy: FocusTraversalPolicy) -> None: ...
    def setFocusTraversalPolicyProvider(self, boolean: bool) -> None: ...
    def setFont(self, font: Font) -> None: ...
    def setLayout(self, layoutManager: LayoutManager) -> None: ...
    def transferFocusDownCycle(self) -> None: ...
    def update(self, graphics: Graphics) -> None: ...
    def validate(self) -> None: ...

class DefaultFocusTraversalPolicy(ContainerOrderFocusTraversalPolicy):
    """
    Java class 'java.awt.DefaultFocusTraversalPolicy'
    
        Extends:
            java.awt.ContainerOrderFocusTraversalPolicy
    
      Constructors:
        * DefaultFocusTraversalPolicy()
    
    """
    def __init__(self): ...

class DefaultKeyboardFocusManager(KeyboardFocusManager):
    """
    Java class 'java.awt.DefaultKeyboardFocusManager'
    
        Extends:
            java.awt.KeyboardFocusManager
    
      Constructors:
        * DefaultKeyboardFocusManager()
    
    """
    def __init__(self): ...
    def dispatchEvent(self, aWTEvent: AWTEvent) -> bool: ...
    def dispatchKeyEvent(self, keyEvent: java.awt.event.KeyEvent) -> bool: ...
    @typing.overload
    def downFocusCycle(self) -> None: ...
    @typing.overload
    def downFocusCycle(self, container: Container) -> None: ...
    @typing.overload
    def focusNextComponent(self) -> None: ...
    @typing.overload
    def focusNextComponent(self, component: Component) -> None: ...
    @typing.overload
    def focusPreviousComponent(self) -> None: ...
    @typing.overload
    def focusPreviousComponent(self, component: Component) -> None: ...
    def postProcessKeyEvent(self, keyEvent: java.awt.event.KeyEvent) -> bool: ...
    def processKeyEvent(self, component: Component, keyEvent: java.awt.event.KeyEvent) -> None: ...
    @typing.overload
    def upFocusCycle(self) -> None: ...
    @typing.overload
    def upFocusCycle(self, component: Component) -> None: ...

class GradientPaint(Paint):
    """
    Java class 'java.awt.GradientPaint'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.Paint
    
      Constructors:
        * GradientPaint(java.awt.geom.Point2D, java.awt.Color, java.awt.geom.Point2D, java.awt.Color, boolean)
        * GradientPaint(float, float, java.awt.Color, float, float, java.awt.Color, boolean)
        * GradientPaint(java.awt.geom.Point2D, java.awt.Color, java.awt.geom.Point2D, java.awt.Color)
        * GradientPaint(float, float, java.awt.Color, float, float, java.awt.Color)
    
    """
    @typing.overload
    def __init__(self, float: float, float2: float, color: Color, float3: float, float4: float, color2: Color): ...
    @typing.overload
    def __init__(self, float: float, float2: float, color: Color, float3: float, float4: float, color2: Color, boolean: bool): ...
    @typing.overload
    def __init__(self, point2D: java.awt.geom.Point2D, color: Color, point2D2: java.awt.geom.Point2D, color2: Color): ...
    @typing.overload
    def __init__(self, point2D: java.awt.geom.Point2D, color: Color, point2D2: java.awt.geom.Point2D, color2: Color, boolean: bool): ...
    def createContext(self, colorModel: java.awt.image.ColorModel, rectangle: Rectangle, rectangle2D: java.awt.geom.Rectangle2D, affineTransform: java.awt.geom.AffineTransform, renderingHints: RenderingHints) -> PaintContext: ...
    def getColor1(self) -> Color: ...
    def getColor2(self) -> Color: ...
    def getPoint1(self) -> java.awt.geom.Point2D: ...
    def getPoint2(self) -> java.awt.geom.Point2D: ...
    def getTransparency(self) -> int: ...
    def isCyclic(self) -> bool: ...

class GridBagLayout(LayoutManager2, java.io.Serializable):
    """
    Java class 'java.awt.GridBagLayout'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.LayoutManager2, java.io.Serializable
    
      Constructors:
        * GridBagLayout()
    
      Attributes:
        columnWidths ([I): field
        rowHeights ([I): field
        columnWeights ([D): field
        rowWeights ([D): field
    
    """
    columnWidths: typing.List[int] = ...
    rowHeights: typing.List[int] = ...
    columnWeights: typing.List[float] = ...
    rowWeights: typing.List[float] = ...
    def __init__(self): ...
    @typing.overload
    def addLayoutComponent(self, component: Component, object: typing.Any) -> None: ...
    @typing.overload
    def addLayoutComponent(self, string: str, component: Component) -> None: ...
    def getConstraints(self, component: Component) -> GridBagConstraints: ...
    def getLayoutAlignmentX(self, container: Container) -> float: ...
    def getLayoutAlignmentY(self, container: Container) -> float: ...
    def getLayoutDimensions(self) -> typing.List[typing.List[int]]: ...
    def getLayoutOrigin(self) -> Point: ...
    def getLayoutWeights(self) -> typing.List[typing.List[float]]: ...
    def invalidateLayout(self, container: Container) -> None: ...
    def layoutContainer(self, container: Container) -> None: ...
    def location(self, int: int, int2: int) -> Point: ...
    def maximumLayoutSize(self, container: Container) -> Dimension: ...
    def minimumLayoutSize(self, container: Container) -> Dimension: ...
    def preferredLayoutSize(self, container: Container) -> Dimension: ...
    def removeLayoutComponent(self, component: Component) -> None: ...
    def setConstraints(self, component: Component, gridBagConstraints: GridBagConstraints) -> None: ...
    def toString(self) -> str: ...

class Label(Component, javax.accessibility.Accessible):
    """
    Java class 'java.awt.Label'
    
        Extends:
            java.awt.Component
    
        Interfaces:
            javax.accessibility.Accessible
    
      Constructors:
        * Label(java.lang.String, int)
        * Label(java.lang.String)
        * Label()
    
      Raises:
        java.awt.HeadlessException: from java
    
      Attributes:
        LEFT (int): final static field
        CENTER (int): final static field
        RIGHT (int): final static field
    
    """
    LEFT: typing.ClassVar[int] = ...
    CENTER: typing.ClassVar[int] = ...
    RIGHT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, int: int): ...
    def addNotify(self) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getAlignment(self) -> int: ...
    def getText(self) -> str: ...
    def setAlignment(self, int: int) -> None: ...
    def setText(self, string: str) -> None: ...

class List(Component, ItemSelectable, javax.accessibility.Accessible):
    """
    Java class 'java.awt.List'
    
        Extends:
            java.awt.Component
    
        Interfaces:
            java.awt.ItemSelectable, javax.accessibility.Accessible
    
      Constructors:
        * List(int, boolean)
        * List(int)
        * List()
    
      Raises:
        java.awt.HeadlessException: from java
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, boolean: bool): ...
    @typing.overload
    def add(self, popupMenu: 'PopupMenu') -> None: ...
    @typing.overload
    def add(self, string: str) -> None: ...
    @typing.overload
    def add(self, string: str, int: int) -> None: ...
    def addActionListener(self, actionListener: java.awt.event.ActionListener) -> None: ...
    @typing.overload
    def addItem(self, string: str, int: int) -> None: ...
    @typing.overload
    def addItem(self, string: str) -> None: ...
    def addItemListener(self, itemListener: java.awt.event.ItemListener) -> None: ...
    def addNotify(self) -> None: ...
    def allowsMultipleSelections(self) -> bool: ...
    def clear(self) -> None: ...
    def countItems(self) -> int: ...
    def delItem(self, int: int) -> None: ...
    def delItems(self, int: int, int2: int) -> None: ...
    def deselect(self, int: int) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getActionListeners(self) -> typing.List[java.awt.event.ActionListener]: ...
    def getItem(self, int: int) -> str: ...
    def getItemCount(self) -> int: ...
    def getItemListeners(self) -> typing.List[java.awt.event.ItemListener]: ...
    def getItems(self) -> typing.List[str]: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    @typing.overload
    def getMinimumSize(self) -> Dimension: ...
    @typing.overload
    def getMinimumSize(self, int: int) -> Dimension: ...
    @typing.overload
    def getPreferredSize(self) -> Dimension: ...
    @typing.overload
    def getPreferredSize(self, int: int) -> Dimension: ...
    def getRows(self) -> int: ...
    def getSelectedIndex(self) -> int: ...
    def getSelectedIndexes(self) -> typing.List[int]: ...
    def getSelectedItem(self) -> str: ...
    def getSelectedItems(self) -> typing.List[str]: ...
    def getSelectedObjects(self) -> typing.List[typing.Any]: ...
    def getVisibleIndex(self) -> int: ...
    def isIndexSelected(self, int: int) -> bool: ...
    def isMultipleMode(self) -> bool: ...
    def isSelected(self, int: int) -> bool: ...
    def makeVisible(self, int: int) -> None: ...
    @typing.overload
    def minimumSize(self) -> Dimension: ...
    @typing.overload
    def minimumSize(self, int: int) -> Dimension: ...
    @typing.overload
    def preferredSize(self) -> Dimension: ...
    @typing.overload
    def preferredSize(self, int: int) -> Dimension: ...
    @typing.overload
    def remove(self, string: str) -> None: ...
    @typing.overload
    def remove(self, menuComponent: MenuComponent) -> None: ...
    @typing.overload
    def remove(self, int: int) -> None: ...
    def removeActionListener(self, actionListener: java.awt.event.ActionListener) -> None: ...
    def removeAll(self) -> None: ...
    def removeItemListener(self, itemListener: java.awt.event.ItemListener) -> None: ...
    def removeNotify(self) -> None: ...
    def replaceItem(self, string: str, int: int) -> None: ...
    def select(self, int: int) -> None: ...
    def setMultipleMode(self, boolean: bool) -> None: ...
    def setMultipleSelections(self, boolean: bool) -> None: ...

class Menu(MenuItem, MenuContainer, javax.accessibility.Accessible):
    """
    Java class 'java.awt.Menu'
    
        Extends:
            java.awt.MenuItem
    
        Interfaces:
            java.awt.MenuContainer, javax.accessibility.Accessible
    
      Constructors:
        * Menu(java.lang.String, boolean)
        * Menu(java.lang.String)
        * Menu()
    
      Raises:
        java.awt.HeadlessException: from java
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, boolean: bool): ...
    @typing.overload
    def add(self, menuItem: MenuItem) -> MenuItem: ...
    @typing.overload
    def add(self, string: str) -> None: ...
    def addNotify(self) -> None: ...
    def addSeparator(self) -> None: ...
    def countItems(self) -> int: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getItem(self, int: int) -> MenuItem: ...
    def getItemCount(self) -> int: ...
    @typing.overload
    def insert(self, menuItem: MenuItem, int: int) -> None: ...
    @typing.overload
    def insert(self, string: str, int: int) -> None: ...
    def insertSeparator(self, int: int) -> None: ...
    def isTearOff(self) -> bool: ...
    def paramString(self) -> str: ...
    @typing.overload
    def remove(self, int: int) -> None: ...
    @typing.overload
    def remove(self, menuComponent: MenuComponent) -> None: ...
    def removeAll(self) -> None: ...
    def removeNotify(self) -> None: ...

class MultipleGradientPaint(Paint):
    """
    Java class 'java.awt.MultipleGradientPaint'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.Paint
    
    """
    def getColorSpace(self) -> 'MultipleGradientPaint.ColorSpaceType': ...
    def getColors(self) -> typing.List[Color]: ...
    def getCycleMethod(self) -> 'MultipleGradientPaint.CycleMethod': ...
    def getFractions(self) -> typing.List[float]: ...
    def getTransform(self) -> java.awt.geom.AffineTransform: ...
    def getTransparency(self) -> int: ...
    class ColorSpaceType(java.lang.Enum['MultipleGradientPaint.ColorSpaceType']):
        """
        Java class 'java.awt.MultipleGradientPaint$ColorSpaceType'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            SRGB (java.awt.MultipleGradientPaint$ColorSpaceType): final static enum constant
            LINEAR_RGB (java.awt.MultipleGradientPaint$ColorSpaceType): final static enum constant
        
        """
        SRGB: typing.ClassVar['MultipleGradientPaint.ColorSpaceType'] = ...
        LINEAR_RGB: typing.ClassVar['MultipleGradientPaint.ColorSpaceType'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'MultipleGradientPaint.ColorSpaceType': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['MultipleGradientPaint.ColorSpaceType']: ...
    class CycleMethod(java.lang.Enum['MultipleGradientPaint.CycleMethod']):
        """
        Java class 'java.awt.MultipleGradientPaint$CycleMethod'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            NO_CYCLE (java.awt.MultipleGradientPaint$CycleMethod): final static enum constant
            REFLECT (java.awt.MultipleGradientPaint$CycleMethod): final static enum constant
            REPEAT (java.awt.MultipleGradientPaint$CycleMethod): final static enum constant
        
        """
        NO_CYCLE: typing.ClassVar['MultipleGradientPaint.CycleMethod'] = ...
        REFLECT: typing.ClassVar['MultipleGradientPaint.CycleMethod'] = ...
        REPEAT: typing.ClassVar['MultipleGradientPaint.CycleMethod'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'MultipleGradientPaint.CycleMethod': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['MultipleGradientPaint.CycleMethod']: ...

class Scrollbar(Component, Adjustable, javax.accessibility.Accessible):
    """
    Java class 'java.awt.Scrollbar'
    
        Extends:
            java.awt.Component
    
        Interfaces:
            java.awt.Adjustable, javax.accessibility.Accessible
    
      Constructors:
        * Scrollbar(int)
        * Scrollbar()
        * Scrollbar(int, int, int, int, int)
    
      Raises:
        java.awt.HeadlessException: from java
    
      Attributes:
        HORIZONTAL (int): final static field
        VERTICAL (int): final static field
    
    """
    HORIZONTAL: typing.ClassVar[int] = ...
    VERTICAL: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int, int5: int): ...
    def addAdjustmentListener(self, adjustmentListener: java.awt.event.AdjustmentListener) -> None: ...
    def addNotify(self) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getAdjustmentListeners(self) -> typing.List[java.awt.event.AdjustmentListener]: ...
    def getBlockIncrement(self) -> int: ...
    def getLineIncrement(self) -> int: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    def getMaximum(self) -> int: ...
    def getMinimum(self) -> int: ...
    def getOrientation(self) -> int: ...
    def getPageIncrement(self) -> int: ...
    def getUnitIncrement(self) -> int: ...
    def getValue(self) -> int: ...
    def getValueIsAdjusting(self) -> bool: ...
    def getVisible(self) -> int: ...
    def getVisibleAmount(self) -> int: ...
    def removeAdjustmentListener(self, adjustmentListener: java.awt.event.AdjustmentListener) -> None: ...
    def setBlockIncrement(self, int: int) -> None: ...
    def setLineIncrement(self, int: int) -> None: ...
    def setMaximum(self, int: int) -> None: ...
    def setMinimum(self, int: int) -> None: ...
    def setOrientation(self, int: int) -> None: ...
    def setPageIncrement(self, int: int) -> None: ...
    def setUnitIncrement(self, int: int) -> None: ...
    def setValue(self, int: int) -> None: ...
    def setValueIsAdjusting(self, boolean: bool) -> None: ...
    def setValues(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def setVisibleAmount(self, int: int) -> None: ...

class TextComponent(Component, javax.accessibility.Accessible):
    """
    Java class 'java.awt.TextComponent'
    
        Extends:
            java.awt.Component
    
        Interfaces:
            javax.accessibility.Accessible
    
    """
    def addNotify(self) -> None: ...
    def addTextListener(self, textListener: java.awt.event.TextListener) -> None: ...
    def enableInputMethods(self, boolean: bool) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getBackground(self) -> Color: ...
    def getCaretPosition(self) -> int: ...
    def getInputMethodRequests(self) -> java.awt.im.InputMethodRequests: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    def getSelectedText(self) -> str: ...
    def getSelectionEnd(self) -> int: ...
    def getSelectionStart(self) -> int: ...
    def getText(self) -> str: ...
    def getTextListeners(self) -> typing.List[java.awt.event.TextListener]: ...
    def isEditable(self) -> bool: ...
    def removeNotify(self) -> None: ...
    def removeTextListener(self, textListener: java.awt.event.TextListener) -> None: ...
    def select(self, int: int, int2: int) -> None: ...
    def selectAll(self) -> None: ...
    def setBackground(self, color: Color) -> None: ...
    def setCaretPosition(self, int: int) -> None: ...
    def setEditable(self, boolean: bool) -> None: ...
    def setSelectionEnd(self, int: int) -> None: ...
    def setSelectionStart(self, int: int) -> None: ...
    def setText(self, string: str) -> None: ...

class TexturePaint(Paint):
    """
    Java class 'java.awt.TexturePaint'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.awt.Paint
    
      Constructors:
        * TexturePaint(java.awt.image.BufferedImage, java.awt.geom.Rectangle2D)
    
    """
    def __init__(self, bufferedImage: java.awt.image.BufferedImage, rectangle2D: java.awt.geom.Rectangle2D): ...
    def createContext(self, colorModel: java.awt.image.ColorModel, rectangle: Rectangle, rectangle2D: java.awt.geom.Rectangle2D, affineTransform: java.awt.geom.AffineTransform, renderingHints: RenderingHints) -> PaintContext: ...
    def getAnchorRect(self) -> java.awt.geom.Rectangle2D: ...
    def getImage(self) -> java.awt.image.BufferedImage: ...
    def getTransparency(self) -> int: ...

class LinearGradientPaint(MultipleGradientPaint):
    """
    Java class 'java.awt.LinearGradientPaint'
    
        Extends:
            java.awt.MultipleGradientPaint
    
      Constructors:
        * LinearGradientPaint(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod, java.awt.MultipleGradientPaint.ColorSpaceType, java.awt.geom.AffineTransform)
        * LinearGradientPaint(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod)
        * LinearGradientPaint(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], java.awt.Color[])
        * LinearGradientPaint(float, float, float, float, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod)
        * LinearGradientPaint(float, float, float, float, float[], java.awt.Color[])
    
    """
    @typing.overload
    def __init__(self, float: float, float2: float, float3: float, float4: float, floatArray: typing.List[float], colorArray: typing.List[Color]): ...
    @typing.overload
    def __init__(self, float: float, float2: float, float3: float, float4: float, floatArray: typing.List[float], colorArray: typing.List[Color], cycleMethod: MultipleGradientPaint.CycleMethod): ...
    @typing.overload
    def __init__(self, point2D: java.awt.geom.Point2D, point2D2: java.awt.geom.Point2D, floatArray: typing.List[float], colorArray: typing.List[Color]): ...
    @typing.overload
    def __init__(self, point2D: java.awt.geom.Point2D, point2D2: java.awt.geom.Point2D, floatArray: typing.List[float], colorArray: typing.List[Color], cycleMethod: MultipleGradientPaint.CycleMethod): ...
    @typing.overload
    def __init__(self, point2D: java.awt.geom.Point2D, point2D2: java.awt.geom.Point2D, floatArray: typing.List[float], colorArray: typing.List[Color], cycleMethod: MultipleGradientPaint.CycleMethod, colorSpaceType: MultipleGradientPaint.ColorSpaceType, affineTransform: java.awt.geom.AffineTransform): ...
    def createContext(self, colorModel: java.awt.image.ColorModel, rectangle: Rectangle, rectangle2D: java.awt.geom.Rectangle2D, affineTransform: java.awt.geom.AffineTransform, renderingHints: RenderingHints) -> PaintContext: ...
    def getEndPoint(self) -> java.awt.geom.Point2D: ...
    def getStartPoint(self) -> java.awt.geom.Point2D: ...

class Panel(Container, javax.accessibility.Accessible):
    """
    Java class 'java.awt.Panel'
    
        Extends:
            java.awt.Container
    
        Interfaces:
            javax.accessibility.Accessible
    
      Constructors:
        * Panel()
        * Panel(java.awt.LayoutManager)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, layoutManager: LayoutManager): ...
    def addNotify(self) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...

class PopupMenu(Menu):
    """
    Java class 'java.awt.PopupMenu'
    
        Extends:
            java.awt.Menu
    
      Constructors:
        * PopupMenu()
        * PopupMenu(java.lang.String)
    
      Raises:
        java.awt.HeadlessException: from java
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    def addNotify(self) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getParent(self) -> MenuContainer: ...
    def show(self, component: Component, int: int, int2: int) -> None: ...

class RadialGradientPaint(MultipleGradientPaint):
    """
    Java class 'java.awt.RadialGradientPaint'
    
        Extends:
            java.awt.MultipleGradientPaint
    
      Constructors:
        * RadialGradientPaint(float, float, float, float, float, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod)
        * RadialGradientPaint(java.awt.geom.Point2D, float, java.awt.geom.Point2D, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod)
        * RadialGradientPaint(java.awt.geom.Point2D, float, java.awt.geom.Point2D, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod, java.awt.MultipleGradientPaint.ColorSpaceType, java.awt.geom.AffineTransform)
        * RadialGradientPaint(java.awt.geom.Rectangle2D, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod)
        * RadialGradientPaint(float, float, float, float[], java.awt.Color[])
        * RadialGradientPaint(java.awt.geom.Point2D, float, float[], java.awt.Color[])
        * RadialGradientPaint(float, float, float, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod)
        * RadialGradientPaint(java.awt.geom.Point2D, float, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod)
    
    """
    @typing.overload
    def __init__(self, float: float, float2: float, float3: float, float4: float, float5: float, floatArray: typing.List[float], colorArray: typing.List[Color], cycleMethod: MultipleGradientPaint.CycleMethod): ...
    @typing.overload
    def __init__(self, float: float, float2: float, float3: float, floatArray: typing.List[float], colorArray: typing.List[Color]): ...
    @typing.overload
    def __init__(self, float: float, float2: float, float3: float, floatArray: typing.List[float], colorArray: typing.List[Color], cycleMethod: MultipleGradientPaint.CycleMethod): ...
    @typing.overload
    def __init__(self, point2D: java.awt.geom.Point2D, float: float, floatArray: typing.List[float], colorArray: typing.List[Color]): ...
    @typing.overload
    def __init__(self, point2D: java.awt.geom.Point2D, float: float, floatArray: typing.List[float], colorArray: typing.List[Color], cycleMethod: MultipleGradientPaint.CycleMethod): ...
    @typing.overload
    def __init__(self, point2D: java.awt.geom.Point2D, float: float, point2D2: java.awt.geom.Point2D, floatArray: typing.List[float], colorArray: typing.List[Color], cycleMethod: MultipleGradientPaint.CycleMethod): ...
    @typing.overload
    def __init__(self, point2D: java.awt.geom.Point2D, float: float, point2D2: java.awt.geom.Point2D, floatArray: typing.List[float], colorArray: typing.List[Color], cycleMethod: MultipleGradientPaint.CycleMethod, colorSpaceType: MultipleGradientPaint.ColorSpaceType, affineTransform: java.awt.geom.AffineTransform): ...
    @typing.overload
    def __init__(self, rectangle2D: java.awt.geom.Rectangle2D, floatArray: typing.List[float], colorArray: typing.List[Color], cycleMethod: MultipleGradientPaint.CycleMethod): ...
    def createContext(self, colorModel: java.awt.image.ColorModel, rectangle: Rectangle, rectangle2D: java.awt.geom.Rectangle2D, affineTransform: java.awt.geom.AffineTransform, renderingHints: RenderingHints) -> PaintContext: ...
    def getCenterPoint(self) -> java.awt.geom.Point2D: ...
    def getFocusPoint(self) -> java.awt.geom.Point2D: ...
    def getRadius(self) -> float: ...

class ScrollPane(Container, javax.accessibility.Accessible):
    """
    Java class 'java.awt.ScrollPane'
    
        Extends:
            java.awt.Container
    
        Interfaces:
            javax.accessibility.Accessible
    
      Constructors:
        * ScrollPane(int)
        * ScrollPane()
    
      Raises:
        java.awt.HeadlessException: from java
    
      Attributes:
        SCROLLBARS_AS_NEEDED (int): final static field
        SCROLLBARS_ALWAYS (int): final static field
        SCROLLBARS_NEVER (int): final static field
    
    """
    SCROLLBARS_AS_NEEDED: typing.ClassVar[int] = ...
    SCROLLBARS_ALWAYS: typing.ClassVar[int] = ...
    SCROLLBARS_NEVER: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    def addNotify(self) -> None: ...
    def doLayout(self) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getHAdjustable(self) -> Adjustable: ...
    def getHScrollbarHeight(self) -> int: ...
    def getScrollPosition(self) -> Point: ...
    def getScrollbarDisplayPolicy(self) -> int: ...
    def getVAdjustable(self) -> Adjustable: ...
    def getVScrollbarWidth(self) -> int: ...
    def getViewportSize(self) -> Dimension: ...
    def isWheelScrollingEnabled(self) -> bool: ...
    def layout(self) -> None: ...
    def paramString(self) -> str: ...
    def printComponents(self, graphics: Graphics) -> None: ...
    def setLayout(self, layoutManager: LayoutManager) -> None: ...
    @typing.overload
    def setScrollPosition(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setScrollPosition(self, point: Point) -> None: ...
    def setWheelScrollingEnabled(self, boolean: bool) -> None: ...

class SystemColor(Color, java.io.Serializable):
    """
    Java class 'java.awt.SystemColor'
    
        Extends:
            java.awt.Color
    
        Interfaces:
            java.io.Serializable
    
      Attributes:
        DESKTOP (int): final static field
        ACTIVE_CAPTION (int): final static field
        ACTIVE_CAPTION_TEXT (int): final static field
        ACTIVE_CAPTION_BORDER (int): final static field
        INACTIVE_CAPTION (int): final static field
        INACTIVE_CAPTION_TEXT (int): final static field
        INACTIVE_CAPTION_BORDER (int): final static field
        WINDOW (int): final static field
        WINDOW_BORDER (int): final static field
        WINDOW_TEXT (int): final static field
        MENU (int): final static field
        MENU_TEXT (int): final static field
        TEXT (int): final static field
        TEXT_TEXT (int): final static field
        TEXT_HIGHLIGHT (int): final static field
        TEXT_HIGHLIGHT_TEXT (int): final static field
        TEXT_INACTIVE_TEXT (int): final static field
        CONTROL (int): final static field
        CONTROL_TEXT (int): final static field
        CONTROL_HIGHLIGHT (int): final static field
        CONTROL_LT_HIGHLIGHT (int): final static field
        CONTROL_SHADOW (int): final static field
        CONTROL_DK_SHADOW (int): final static field
        SCROLLBAR (int): final static field
        INFO (int): final static field
        INFO_TEXT (int): final static field
        NUM_COLORS (int): final static field
        desktop (java.awt.SystemColor): final static field
        activeCaption (java.awt.SystemColor): final static field
        activeCaptionText (java.awt.SystemColor): final static field
        activeCaptionBorder (java.awt.SystemColor): final static field
        inactiveCaption (java.awt.SystemColor): final static field
        inactiveCaptionText (java.awt.SystemColor): final static field
        inactiveCaptionBorder (java.awt.SystemColor): final static field
        window (java.awt.SystemColor): final static field
        windowBorder (java.awt.SystemColor): final static field
        windowText (java.awt.SystemColor): final static field
        menu (java.awt.SystemColor): final static field
        menuText (java.awt.SystemColor): final static field
        text (java.awt.SystemColor): final static field
        textText (java.awt.SystemColor): final static field
        textHighlight (java.awt.SystemColor): final static field
        textHighlightText (java.awt.SystemColor): final static field
        textInactiveText (java.awt.SystemColor): final static field
        control (java.awt.SystemColor): final static field
        controlText (java.awt.SystemColor): final static field
        controlHighlight (java.awt.SystemColor): final static field
        controlLtHighlight (java.awt.SystemColor): final static field
        controlShadow (java.awt.SystemColor): final static field
        controlDkShadow (java.awt.SystemColor): final static field
        scrollbar (java.awt.SystemColor): final static field
        info (java.awt.SystemColor): final static field
        infoText (java.awt.SystemColor): final static field
    
    """
    DESKTOP: typing.ClassVar[int] = ...
    ACTIVE_CAPTION: typing.ClassVar[int] = ...
    ACTIVE_CAPTION_TEXT: typing.ClassVar[int] = ...
    ACTIVE_CAPTION_BORDER: typing.ClassVar[int] = ...
    INACTIVE_CAPTION: typing.ClassVar[int] = ...
    INACTIVE_CAPTION_TEXT: typing.ClassVar[int] = ...
    INACTIVE_CAPTION_BORDER: typing.ClassVar[int] = ...
    WINDOW: typing.ClassVar[int] = ...
    WINDOW_BORDER: typing.ClassVar[int] = ...
    WINDOW_TEXT: typing.ClassVar[int] = ...
    MENU: typing.ClassVar[int] = ...
    MENU_TEXT: typing.ClassVar[int] = ...
    TEXT: typing.ClassVar[int] = ...
    TEXT_TEXT: typing.ClassVar[int] = ...
    TEXT_HIGHLIGHT: typing.ClassVar[int] = ...
    TEXT_HIGHLIGHT_TEXT: typing.ClassVar[int] = ...
    TEXT_INACTIVE_TEXT: typing.ClassVar[int] = ...
    CONTROL: typing.ClassVar[int] = ...
    CONTROL_TEXT: typing.ClassVar[int] = ...
    CONTROL_HIGHLIGHT: typing.ClassVar[int] = ...
    CONTROL_LT_HIGHLIGHT: typing.ClassVar[int] = ...
    CONTROL_SHADOW: typing.ClassVar[int] = ...
    CONTROL_DK_SHADOW: typing.ClassVar[int] = ...
    SCROLLBAR: typing.ClassVar[int] = ...
    INFO: typing.ClassVar[int] = ...
    INFO_TEXT: typing.ClassVar[int] = ...
    NUM_COLORS: typing.ClassVar[int] = ...
    desktop: typing.ClassVar['SystemColor'] = ...
    activeCaption: typing.ClassVar['SystemColor'] = ...
    activeCaptionText: typing.ClassVar['SystemColor'] = ...
    activeCaptionBorder: typing.ClassVar['SystemColor'] = ...
    inactiveCaption: typing.ClassVar['SystemColor'] = ...
    inactiveCaptionText: typing.ClassVar['SystemColor'] = ...
    inactiveCaptionBorder: typing.ClassVar['SystemColor'] = ...
    window: typing.ClassVar['SystemColor'] = ...
    windowBorder: typing.ClassVar['SystemColor'] = ...
    windowText: typing.ClassVar['SystemColor'] = ...
    menu: typing.ClassVar['SystemColor'] = ...
    menuText: typing.ClassVar['SystemColor'] = ...
    text: typing.ClassVar['SystemColor'] = ...
    textText: typing.ClassVar['SystemColor'] = ...
    textHighlight: typing.ClassVar['SystemColor'] = ...
    textHighlightText: typing.ClassVar['SystemColor'] = ...
    textInactiveText: typing.ClassVar['SystemColor'] = ...
    control: typing.ClassVar['SystemColor'] = ...
    controlText: typing.ClassVar['SystemColor'] = ...
    controlHighlight: typing.ClassVar['SystemColor'] = ...
    controlLtHighlight: typing.ClassVar['SystemColor'] = ...
    controlShadow: typing.ClassVar['SystemColor'] = ...
    controlDkShadow: typing.ClassVar['SystemColor'] = ...
    scrollbar: typing.ClassVar['SystemColor'] = ...
    info: typing.ClassVar['SystemColor'] = ...
    infoText: typing.ClassVar['SystemColor'] = ...
    def toString(self) -> str: ...

class TextArea(TextComponent):
    """
    Java class 'java.awt.TextArea'
    
        Extends:
            java.awt.TextComponent
    
      Constructors:
        * TextArea(java.lang.String, int, int)
        * TextArea(int, int)
        * TextArea(java.lang.String)
        * TextArea()
        * TextArea(java.lang.String, int, int, int)
    
      Raises:
        java.awt.HeadlessException: from java
    
      Attributes:
        SCROLLBARS_BOTH (int): final static field
        SCROLLBARS_VERTICAL_ONLY (int): final static field
        SCROLLBARS_HORIZONTAL_ONLY (int): final static field
        SCROLLBARS_NONE (int): final static field
    
    """
    SCROLLBARS_BOTH: typing.ClassVar[int] = ...
    SCROLLBARS_VERTICAL_ONLY: typing.ClassVar[int] = ...
    SCROLLBARS_HORIZONTAL_ONLY: typing.ClassVar[int] = ...
    SCROLLBARS_NONE: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, int: int, int2: int): ...
    @typing.overload
    def __init__(self, string: str, int: int, int2: int, int3: int): ...
    def addNotify(self) -> None: ...
    def append(self, string: str) -> None: ...
    def appendText(self, string: str) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getColumns(self) -> int: ...
    @typing.overload
    def getMinimumSize(self) -> Dimension: ...
    @typing.overload
    def getMinimumSize(self, int: int, int2: int) -> Dimension: ...
    @typing.overload
    def getPreferredSize(self) -> Dimension: ...
    @typing.overload
    def getPreferredSize(self, int: int, int2: int) -> Dimension: ...
    def getRows(self) -> int: ...
    def getScrollbarVisibility(self) -> int: ...
    def insert(self, string: str, int: int) -> None: ...
    def insertText(self, string: str, int: int) -> None: ...
    @typing.overload
    def minimumSize(self) -> Dimension: ...
    @typing.overload
    def minimumSize(self, int: int, int2: int) -> Dimension: ...
    @typing.overload
    def preferredSize(self) -> Dimension: ...
    @typing.overload
    def preferredSize(self, int: int, int2: int) -> Dimension: ...
    def replaceRange(self, string: str, int: int, int2: int) -> None: ...
    def replaceText(self, string: str, int: int, int2: int) -> None: ...
    def setColumns(self, int: int) -> None: ...
    def setRows(self, int: int) -> None: ...

class TextField(TextComponent):
    """
    Java class 'java.awt.TextField'
    
        Extends:
            java.awt.TextComponent
    
      Constructors:
        * TextField(int)
        * TextField(java.lang.String)
        * TextField()
        * TextField(java.lang.String, int)
    
      Raises:
        java.awt.HeadlessException: from java
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, int: int): ...
    def addActionListener(self, actionListener: java.awt.event.ActionListener) -> None: ...
    def addNotify(self) -> None: ...
    def echoCharIsSet(self) -> bool: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getActionListeners(self) -> typing.List[java.awt.event.ActionListener]: ...
    def getColumns(self) -> int: ...
    def getEchoChar(self) -> str: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    @typing.overload
    def getMinimumSize(self) -> Dimension: ...
    @typing.overload
    def getMinimumSize(self, int: int) -> Dimension: ...
    @typing.overload
    def getPreferredSize(self) -> Dimension: ...
    @typing.overload
    def getPreferredSize(self, int: int) -> Dimension: ...
    @typing.overload
    def minimumSize(self) -> Dimension: ...
    @typing.overload
    def minimumSize(self, int: int) -> Dimension: ...
    @typing.overload
    def preferredSize(self) -> Dimension: ...
    @typing.overload
    def preferredSize(self, int: int) -> Dimension: ...
    def removeActionListener(self, actionListener: java.awt.event.ActionListener) -> None: ...
    def setColumns(self, int: int) -> None: ...
    def setEchoChar(self, char: str) -> None: ...
    def setEchoCharacter(self, char: str) -> None: ...
    def setText(self, string: str) -> None: ...

class Window(Container, javax.accessibility.Accessible):
    """
    Java class 'java.awt.Window'
    
        Extends:
            java.awt.Container
    
        Interfaces:
            javax.accessibility.Accessible
    
      Constructors:
        * Window(java.awt.Frame)
        * Window(java.awt.Window)
        * Window(java.awt.Window, java.awt.GraphicsConfiguration)
    
    """
    @typing.overload
    def __init__(self, frame: 'Frame'): ...
    @typing.overload
    def __init__(self, window: 'Window'): ...
    @typing.overload
    def __init__(self, window: 'Window', graphicsConfiguration: GraphicsConfiguration): ...
    def addNotify(self) -> None: ...
    @typing.overload
    def addPropertyChangeListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    @typing.overload
    def addPropertyChangeListener(self, string: str, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    def addWindowFocusListener(self, windowFocusListener: java.awt.event.WindowFocusListener) -> None: ...
    def addWindowListener(self, windowListener: java.awt.event.WindowListener) -> None: ...
    def addWindowStateListener(self, windowStateListener: java.awt.event.WindowStateListener) -> None: ...
    @typing.overload
    def applyResourceBundle(self, string: str) -> None: ...
    @typing.overload
    def applyResourceBundle(self, resourceBundle: java.util.ResourceBundle) -> None: ...
    @typing.overload
    def createBufferStrategy(self, int: int) -> None: ...
    @typing.overload
    def createBufferStrategy(self, int: int, bufferCapabilities: 'BufferCapabilities') -> None: ...
    def dispose(self) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getBackground(self) -> Color: ...
    def getBufferStrategy(self) -> java.awt.image.BufferStrategy: ...
    def getFocusCycleRootAncestor(self) -> Container: ...
    def getFocusOwner(self) -> Component: ...
    def getFocusTraversalKeys(self, int: int) -> java.util.Set[AWTKeyStroke]: ...
    def getFocusableWindowState(self) -> bool: ...
    def getIconImages(self) -> java.util.List[Image]: ...
    def getInputContext(self) -> java.awt.im.InputContext: ...
    _getListeners__T = typing.TypeVar('_getListeners__T', bound=java.util.EventListener)  # <T>
    def getListeners(self, class_: typing.Type[_getListeners__T]) -> typing.List[_getListeners__T]: ...
    def getLocale(self) -> java.util.Locale: ...
    def getModalExclusionType(self) -> 'Dialog.ModalExclusionType': ...
    def getMostRecentFocusOwner(self) -> Component: ...
    def getOpacity(self) -> float: ...
    def getOwnedWindows(self) -> typing.List['Window']: ...
    def getOwner(self) -> 'Window': ...
    @staticmethod
    def getOwnerlessWindows() -> typing.List['Window']: ...
    def getShape(self) -> Shape: ...
    def getToolkit(self) -> Toolkit: ...
    def getType(self) -> 'Window.Type': ...
    def getWarningString(self) -> str: ...
    def getWindowFocusListeners(self) -> typing.List[java.awt.event.WindowFocusListener]: ...
    def getWindowListeners(self) -> typing.List[java.awt.event.WindowListener]: ...
    def getWindowStateListeners(self) -> typing.List[java.awt.event.WindowStateListener]: ...
    @staticmethod
    def getWindows() -> typing.List['Window']: ...
    def hide(self) -> None: ...
    def isActive(self) -> bool: ...
    def isAlwaysOnTop(self) -> bool: ...
    def isAlwaysOnTopSupported(self) -> bool: ...
    def isAutoRequestFocus(self) -> bool: ...
    @typing.overload
    def isFocusCycleRoot(self, container: Container) -> bool: ...
    @typing.overload
    def isFocusCycleRoot(self) -> bool: ...
    def isFocusableWindow(self) -> bool: ...
    def isFocused(self) -> bool: ...
    def isLocationByPlatform(self) -> bool: ...
    def isOpaque(self) -> bool: ...
    def isShowing(self) -> bool: ...
    def isValidateRoot(self) -> bool: ...
    def pack(self) -> None: ...
    def paint(self, graphics: Graphics) -> None: ...
    def postEvent(self, event: Event) -> bool: ...
    def removeNotify(self) -> None: ...
    def removeWindowFocusListener(self, windowFocusListener: java.awt.event.WindowFocusListener) -> None: ...
    def removeWindowListener(self, windowListener: java.awt.event.WindowListener) -> None: ...
    def removeWindowStateListener(self, windowStateListener: java.awt.event.WindowStateListener) -> None: ...
    def reshape(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def setAlwaysOnTop(self, boolean: bool) -> None: ...
    def setAutoRequestFocus(self, boolean: bool) -> None: ...
    def setBackground(self, color: Color) -> None: ...
    @typing.overload
    def setBounds(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def setBounds(self, rectangle: Rectangle) -> None: ...
    def setCursor(self, cursor: Cursor) -> None: ...
    def setFocusCycleRoot(self, boolean: bool) -> None: ...
    def setFocusableWindowState(self, boolean: bool) -> None: ...
    def setIconImage(self, image: Image) -> None: ...
    def setIconImages(self, list: java.util.List[Image]) -> None: ...
    @typing.overload
    def setLocation(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLocation(self, point: Point) -> None: ...
    def setLocationByPlatform(self, boolean: bool) -> None: ...
    def setLocationRelativeTo(self, component: Component) -> None: ...
    def setMinimumSize(self, dimension: Dimension) -> None: ...
    def setModalExclusionType(self, modalExclusionType: 'Dialog.ModalExclusionType') -> None: ...
    def setOpacity(self, float: float) -> None: ...
    def setShape(self, shape: Shape) -> None: ...
    @typing.overload
    def setSize(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setSize(self, dimension: Dimension) -> None: ...
    def setType(self, type: 'Window.Type') -> None: ...
    def setVisible(self, boolean: bool) -> None: ...
    @typing.overload
    def show(self, boolean: bool) -> None: ...
    @typing.overload
    def show(self) -> None: ...
    def toBack(self) -> None: ...
    def toFront(self) -> None: ...
    class Type(java.lang.Enum['Window.Type']):
        """
        Java class 'java.awt.Window$Type'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            NORMAL (java.awt.Window$Type): final static enum constant
            UTILITY (java.awt.Window$Type): final static enum constant
            POPUP (java.awt.Window$Type): final static enum constant
        
        """
        NORMAL: typing.ClassVar['Window.Type'] = ...
        UTILITY: typing.ClassVar['Window.Type'] = ...
        POPUP: typing.ClassVar['Window.Type'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Window.Type': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['Window.Type']: ...

class Dialog(Window):
    """
    Java class 'java.awt.Dialog'
    
        Extends:
            java.awt.Window
    
      Constructors:
        * Dialog(java.awt.Window, java.lang.String)
        * Dialog(java.awt.Window)
        * Dialog(java.awt.Dialog, java.lang.String, boolean, java.awt.GraphicsConfiguration)
        * Dialog(java.awt.Dialog, java.lang.String, boolean)
        * Dialog(java.awt.Window, java.awt.Dialog.ModalityType)
        * Dialog(java.awt.Window, java.lang.String, java.awt.Dialog.ModalityType)
        * Dialog(java.awt.Window, java.lang.String, java.awt.Dialog.ModalityType, java.awt.GraphicsConfiguration)
        * Dialog(java.awt.Frame, java.lang.String, boolean)
        * Dialog(java.awt.Frame, java.lang.String)
        * Dialog(java.awt.Frame, boolean)
        * Dialog(java.awt.Frame)
        * Dialog(java.awt.Dialog, java.lang.String)
        * Dialog(java.awt.Dialog)
        * Dialog(java.awt.Frame, java.lang.String, boolean, java.awt.GraphicsConfiguration)
    
      Attributes:
        DEFAULT_MODALITY_TYPE (java.awt.Dialog$ModalityType): final static field
    
    """
    DEFAULT_MODALITY_TYPE: typing.ClassVar['Dialog.ModalityType'] = ...
    @typing.overload
    def __init__(self, dialog: 'Dialog'): ...
    @typing.overload
    def __init__(self, dialog: 'Dialog', string: str): ...
    @typing.overload
    def __init__(self, dialog: 'Dialog', string: str, boolean: bool): ...
    @typing.overload
    def __init__(self, dialog: 'Dialog', string: str, boolean: bool, graphicsConfiguration: GraphicsConfiguration): ...
    @typing.overload
    def __init__(self, frame: 'Frame'): ...
    @typing.overload
    def __init__(self, frame: 'Frame', boolean: bool): ...
    @typing.overload
    def __init__(self, frame: 'Frame', string: str): ...
    @typing.overload
    def __init__(self, frame: 'Frame', string: str, boolean: bool): ...
    @typing.overload
    def __init__(self, frame: 'Frame', string: str, boolean: bool, graphicsConfiguration: GraphicsConfiguration): ...
    @typing.overload
    def __init__(self, window: Window): ...
    @typing.overload
    def __init__(self, window: Window, modalityType: 'Dialog.ModalityType'): ...
    @typing.overload
    def __init__(self, window: Window, string: str): ...
    @typing.overload
    def __init__(self, window: Window, string: str, modalityType: 'Dialog.ModalityType'): ...
    @typing.overload
    def __init__(self, window: Window, string: str, modalityType: 'Dialog.ModalityType', graphicsConfiguration: GraphicsConfiguration): ...
    def addNotify(self) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getModalityType(self) -> 'Dialog.ModalityType': ...
    def getTitle(self) -> str: ...
    def hide(self) -> None: ...
    def isModal(self) -> bool: ...
    def isResizable(self) -> bool: ...
    def isUndecorated(self) -> bool: ...
    def setBackground(self, color: Color) -> None: ...
    def setModal(self, boolean: bool) -> None: ...
    def setModalityType(self, modalityType: 'Dialog.ModalityType') -> None: ...
    def setOpacity(self, float: float) -> None: ...
    def setResizable(self, boolean: bool) -> None: ...
    def setShape(self, shape: Shape) -> None: ...
    def setTitle(self, string: str) -> None: ...
    def setUndecorated(self, boolean: bool) -> None: ...
    def setVisible(self, boolean: bool) -> None: ...
    @typing.overload
    def show(self, boolean: bool) -> None: ...
    @typing.overload
    def show(self) -> None: ...
    def toBack(self) -> None: ...
    class ModalExclusionType(java.lang.Enum['Dialog.ModalExclusionType']):
        """
        Java class 'java.awt.Dialog$ModalExclusionType'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            NO_EXCLUDE (java.awt.Dialog$ModalExclusionType): final static enum constant
            APPLICATION_EXCLUDE (java.awt.Dialog$ModalExclusionType): final static enum constant
            TOOLKIT_EXCLUDE (java.awt.Dialog$ModalExclusionType): final static enum constant
        
        """
        NO_EXCLUDE: typing.ClassVar['Dialog.ModalExclusionType'] = ...
        APPLICATION_EXCLUDE: typing.ClassVar['Dialog.ModalExclusionType'] = ...
        TOOLKIT_EXCLUDE: typing.ClassVar['Dialog.ModalExclusionType'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Dialog.ModalExclusionType': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['Dialog.ModalExclusionType']: ...
    class ModalityType(java.lang.Enum['Dialog.ModalityType']):
        """
        Java class 'java.awt.Dialog$ModalityType'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            MODELESS (java.awt.Dialog$ModalityType): final static enum constant
            DOCUMENT_MODAL (java.awt.Dialog$ModalityType): final static enum constant
            APPLICATION_MODAL (java.awt.Dialog$ModalityType): final static enum constant
            TOOLKIT_MODAL (java.awt.Dialog$ModalityType): final static enum constant
        
        """
        MODELESS: typing.ClassVar['Dialog.ModalityType'] = ...
        DOCUMENT_MODAL: typing.ClassVar['Dialog.ModalityType'] = ...
        APPLICATION_MODAL: typing.ClassVar['Dialog.ModalityType'] = ...
        TOOLKIT_MODAL: typing.ClassVar['Dialog.ModalityType'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Dialog.ModalityType': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['Dialog.ModalityType']: ...

class Frame(Window, MenuContainer):
    """
    Java class 'java.awt.Frame'
    
        Extends:
            java.awt.Window
    
        Interfaces:
            java.awt.MenuContainer
    
      Constructors:
        * Frame(java.lang.String, java.awt.GraphicsConfiguration)
        * Frame(java.lang.String)
        * Frame(java.awt.GraphicsConfiguration)
        * Frame()
    
      Raises:
        java.awt.HeadlessException: from java
    
      Attributes:
        DEFAULT_CURSOR (int): final static field
        CROSSHAIR_CURSOR (int): final static field
        TEXT_CURSOR (int): final static field
        WAIT_CURSOR (int): final static field
        SW_RESIZE_CURSOR (int): final static field
        SE_RESIZE_CURSOR (int): final static field
        NW_RESIZE_CURSOR (int): final static field
        NE_RESIZE_CURSOR (int): final static field
        N_RESIZE_CURSOR (int): final static field
        S_RESIZE_CURSOR (int): final static field
        W_RESIZE_CURSOR (int): final static field
        E_RESIZE_CURSOR (int): final static field
        HAND_CURSOR (int): final static field
        MOVE_CURSOR (int): final static field
        NORMAL (int): final static field
        ICONIFIED (int): final static field
        MAXIMIZED_HORIZ (int): final static field
        MAXIMIZED_VERT (int): final static field
        MAXIMIZED_BOTH (int): final static field
    
    """
    DEFAULT_CURSOR: typing.ClassVar[int] = ...
    CROSSHAIR_CURSOR: typing.ClassVar[int] = ...
    TEXT_CURSOR: typing.ClassVar[int] = ...
    WAIT_CURSOR: typing.ClassVar[int] = ...
    SW_RESIZE_CURSOR: typing.ClassVar[int] = ...
    SE_RESIZE_CURSOR: typing.ClassVar[int] = ...
    NW_RESIZE_CURSOR: typing.ClassVar[int] = ...
    NE_RESIZE_CURSOR: typing.ClassVar[int] = ...
    N_RESIZE_CURSOR: typing.ClassVar[int] = ...
    S_RESIZE_CURSOR: typing.ClassVar[int] = ...
    W_RESIZE_CURSOR: typing.ClassVar[int] = ...
    E_RESIZE_CURSOR: typing.ClassVar[int] = ...
    HAND_CURSOR: typing.ClassVar[int] = ...
    MOVE_CURSOR: typing.ClassVar[int] = ...
    NORMAL: typing.ClassVar[int] = ...
    ICONIFIED: typing.ClassVar[int] = ...
    MAXIMIZED_HORIZ: typing.ClassVar[int] = ...
    MAXIMIZED_VERT: typing.ClassVar[int] = ...
    MAXIMIZED_BOTH: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, graphicsConfiguration: GraphicsConfiguration): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, graphicsConfiguration: GraphicsConfiguration): ...
    def addNotify(self) -> None: ...
    def getAccessibleContext(self) -> javax.accessibility.AccessibleContext: ...
    def getCursorType(self) -> int: ...
    def getExtendedState(self) -> int: ...
    @staticmethod
    def getFrames() -> typing.List['Frame']: ...
    def getIconImage(self) -> Image: ...
    def getMaximizedBounds(self) -> Rectangle: ...
    def getMenuBar(self) -> MenuBar: ...
    def getState(self) -> int: ...
    def getTitle(self) -> str: ...
    def isResizable(self) -> bool: ...
    def isUndecorated(self) -> bool: ...
    @typing.overload
    def remove(self, int: int) -> None: ...
    @typing.overload
    def remove(self, component: Component) -> None: ...
    @typing.overload
    def remove(self, menuComponent: MenuComponent) -> None: ...
    def removeNotify(self) -> None: ...
    def setBackground(self, color: Color) -> None: ...
    @typing.overload
    def setCursor(self, int: int) -> None: ...
    @typing.overload
    def setCursor(self, cursor: Cursor) -> None: ...
    def setExtendedState(self, int: int) -> None: ...
    def setIconImage(self, image: Image) -> None: ...
    def setMaximizedBounds(self, rectangle: Rectangle) -> None: ...
    def setMenuBar(self, menuBar: MenuBar) -> None: ...
    def setOpacity(self, float: float) -> None: ...
    def setResizable(self, boolean: bool) -> None: ...
    def setShape(self, shape: Shape) -> None: ...
    def setState(self, int: int) -> None: ...
    def setTitle(self, string: str) -> None: ...
    def setUndecorated(self, boolean: bool) -> None: ...

class FileDialog(Dialog):
    """
    Java class 'java.awt.FileDialog'
    
        Extends:
            java.awt.Dialog
    
      Constructors:
        * FileDialog(java.awt.Dialog, java.lang.String, int)
        * FileDialog(java.awt.Dialog)
        * FileDialog(java.awt.Frame, java.lang.String, int)
        * FileDialog(java.awt.Frame, java.lang.String)
        * FileDialog(java.awt.Frame)
        * FileDialog(java.awt.Dialog, java.lang.String)
    
      Attributes:
        LOAD (int): final static field
        SAVE (int): final static field
    
    """
    LOAD: typing.ClassVar[int] = ...
    SAVE: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, dialog: Dialog): ...
    @typing.overload
    def __init__(self, dialog: Dialog, string: str): ...
    @typing.overload
    def __init__(self, dialog: Dialog, string: str, int: int): ...
    @typing.overload
    def __init__(self, frame: Frame): ...
    @typing.overload
    def __init__(self, frame: Frame, string: str): ...
    @typing.overload
    def __init__(self, frame: Frame, string: str, int: int): ...
    def addNotify(self) -> None: ...
    def getDirectory(self) -> str: ...
    def getFile(self) -> str: ...
    def getFilenameFilter(self) -> java.io.FilenameFilter: ...
    def getFiles(self) -> typing.List[java.io.File]: ...
    def getMode(self) -> int: ...
    def isMultipleMode(self) -> bool: ...
    def setDirectory(self, string: str) -> None: ...
    def setFile(self, string: str) -> None: ...
    def setFilenameFilter(self, filenameFilter: typing.Union[java.io.FilenameFilter, typing.Callable]) -> None: ...
    def setMode(self, int: int) -> None: ...
    def setMultipleMode(self, boolean: bool) -> None: ...
    def setTitle(self, string: str) -> None: ...

class BufferCapabilities(java.lang.Cloneable):
    """
    Java class 'java.awt.BufferCapabilities'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.lang.Cloneable
    
      Constructors:
        * BufferCapabilities(java.awt.ImageCapabilities, java.awt.ImageCapabilities, java.awt.BufferCapabilities.FlipContents)
    
    """
    def __init__(self, imageCapabilities: ImageCapabilities, imageCapabilities2: ImageCapabilities, flipContents: 'BufferCapabilities.FlipContents'): ...
    def clone(self) -> typing.Any: ...
    def getBackBufferCapabilities(self) -> ImageCapabilities: ...
    def getFlipContents(self) -> 'BufferCapabilities.FlipContents': ...
    def getFrontBufferCapabilities(self) -> ImageCapabilities: ...
    def isFullScreenRequired(self) -> bool: ...
    def isMultiBufferAvailable(self) -> bool: ...
    def isPageFlipping(self) -> bool: ...
    class FlipContents(java.awt.AttributeValue):
        """
        Java class 'java.awt.BufferCapabilities$FlipContents'
        
            Extends:
                java.awt.AttributeValue
        
          Attributes:
            UNDEFINED (java.awt.BufferCapabilities$FlipContents): final static field
            BACKGROUND (java.awt.BufferCapabilities$FlipContents): final static field
            PRIOR (java.awt.BufferCapabilities$FlipContents): final static field
            COPIED (java.awt.BufferCapabilities$FlipContents): final static field
        
        """
        UNDEFINED: typing.ClassVar['BufferCapabilities.FlipContents'] = ...
        BACKGROUND: typing.ClassVar['BufferCapabilities.FlipContents'] = ...
        PRIOR: typing.ClassVar['BufferCapabilities.FlipContents'] = ...
        COPIED: typing.ClassVar['BufferCapabilities.FlipContents'] = ...

class JobAttributes(java.lang.Cloneable):
    """
    Java class 'java.awt.JobAttributes'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.lang.Cloneable
    
      Constructors:
        * JobAttributes(int, java.awt.JobAttributes.DefaultSelectionType, java.awt.JobAttributes.DestinationType, java.awt.JobAttributes.DialogType, java.lang.String, int, int, java.awt.JobAttributes.MultipleDocumentHandlingType, int[][], java.lang.String, java.awt.JobAttributes.SidesType)
        * JobAttributes(java.awt.JobAttributes)
        * JobAttributes()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, defaultSelectionType: 'JobAttributes.DefaultSelectionType', destinationType: 'JobAttributes.DestinationType', dialogType: 'JobAttributes.DialogType', string: str, int2: int, int3: int, multipleDocumentHandlingType: 'JobAttributes.MultipleDocumentHandlingType', intArray: typing.List[typing.List[int]], string2: str, sidesType: 'JobAttributes.SidesType'): ...
    @typing.overload
    def __init__(self, jobAttributes: 'JobAttributes'): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getCopies(self) -> int: ...
    def getDefaultSelection(self) -> 'JobAttributes.DefaultSelectionType': ...
    def getDestination(self) -> 'JobAttributes.DestinationType': ...
    def getDialog(self) -> 'JobAttributes.DialogType': ...
    def getFileName(self) -> str: ...
    def getFromPage(self) -> int: ...
    def getMaxPage(self) -> int: ...
    def getMinPage(self) -> int: ...
    def getMultipleDocumentHandling(self) -> 'JobAttributes.MultipleDocumentHandlingType': ...
    def getPageRanges(self) -> typing.List[typing.List[int]]: ...
    def getPrinter(self) -> str: ...
    def getSides(self) -> 'JobAttributes.SidesType': ...
    def getToPage(self) -> int: ...
    def hashCode(self) -> int: ...
    def set(self, jobAttributes: 'JobAttributes') -> None: ...
    def setCopies(self, int: int) -> None: ...
    def setCopiesToDefault(self) -> None: ...
    def setDefaultSelection(self, defaultSelectionType: 'JobAttributes.DefaultSelectionType') -> None: ...
    def setDestination(self, destinationType: 'JobAttributes.DestinationType') -> None: ...
    def setDialog(self, dialogType: 'JobAttributes.DialogType') -> None: ...
    def setFileName(self, string: str) -> None: ...
    def setFromPage(self, int: int) -> None: ...
    def setMaxPage(self, int: int) -> None: ...
    def setMinPage(self, int: int) -> None: ...
    def setMultipleDocumentHandling(self, multipleDocumentHandlingType: 'JobAttributes.MultipleDocumentHandlingType') -> None: ...
    def setMultipleDocumentHandlingToDefault(self) -> None: ...
    def setPageRanges(self, intArray: typing.List[typing.List[int]]) -> None: ...
    def setPrinter(self, string: str) -> None: ...
    def setSides(self, sidesType: 'JobAttributes.SidesType') -> None: ...
    def setSidesToDefault(self) -> None: ...
    def setToPage(self, int: int) -> None: ...
    def toString(self) -> str: ...
    class DefaultSelectionType(java.awt.AttributeValue):
        """
        Java class 'java.awt.JobAttributes$DefaultSelectionType'
        
            Extends:
                java.awt.AttributeValue
        
          Attributes:
            ALL (java.awt.JobAttributes$DefaultSelectionType): final static field
            RANGE (java.awt.JobAttributes$DefaultSelectionType): final static field
            SELECTION (java.awt.JobAttributes$DefaultSelectionType): final static field
        
        """
        ALL: typing.ClassVar['JobAttributes.DefaultSelectionType'] = ...
        RANGE: typing.ClassVar['JobAttributes.DefaultSelectionType'] = ...
        SELECTION: typing.ClassVar['JobAttributes.DefaultSelectionType'] = ...
    class DestinationType(java.awt.AttributeValue):
        """
        Java class 'java.awt.JobAttributes$DestinationType'
        
            Extends:
                java.awt.AttributeValue
        
          Attributes:
            FILE (java.awt.JobAttributes$DestinationType): final static field
            PRINTER (java.awt.JobAttributes$DestinationType): final static field
        
        """
        FILE: typing.ClassVar['JobAttributes.DestinationType'] = ...
        PRINTER: typing.ClassVar['JobAttributes.DestinationType'] = ...
    class DialogType(java.awt.AttributeValue):
        """
        Java class 'java.awt.JobAttributes$DialogType'
        
            Extends:
                java.awt.AttributeValue
        
          Attributes:
            COMMON (java.awt.JobAttributes$DialogType): final static field
            NATIVE (java.awt.JobAttributes$DialogType): final static field
            NONE (java.awt.JobAttributes$DialogType): final static field
        
        """
        COMMON: typing.ClassVar['JobAttributes.DialogType'] = ...
        NATIVE: typing.ClassVar['JobAttributes.DialogType'] = ...
        NONE: typing.ClassVar['JobAttributes.DialogType'] = ...
    class MultipleDocumentHandlingType(java.awt.AttributeValue):
        """
        Java class 'java.awt.JobAttributes$MultipleDocumentHandlingType'
        
            Extends:
                java.awt.AttributeValue
        
          Attributes:
            SEPARATE_DOCUMENTS_COLLATED_COPIES (java.awt.JobAttributes$MultipleDocumentHandlingType): final static field
            SEPARATE_DOCUMENTS_UNCOLLATED_COPIES (java.awt.JobAttributes$MultipleDocumentHandlingType): final static field
        
        """
        SEPARATE_DOCUMENTS_COLLATED_COPIES: typing.ClassVar['JobAttributes.MultipleDocumentHandlingType'] = ...
        SEPARATE_DOCUMENTS_UNCOLLATED_COPIES: typing.ClassVar['JobAttributes.MultipleDocumentHandlingType'] = ...
    class SidesType(java.awt.AttributeValue):
        """
        Java class 'java.awt.JobAttributes$SidesType'
        
            Extends:
                java.awt.AttributeValue
        
          Attributes:
            ONE_SIDED (java.awt.JobAttributes$SidesType): final static field
            TWO_SIDED_LONG_EDGE (java.awt.JobAttributes$SidesType): final static field
            TWO_SIDED_SHORT_EDGE (java.awt.JobAttributes$SidesType): final static field
        
        """
        ONE_SIDED: typing.ClassVar['JobAttributes.SidesType'] = ...
        TWO_SIDED_LONG_EDGE: typing.ClassVar['JobAttributes.SidesType'] = ...
        TWO_SIDED_SHORT_EDGE: typing.ClassVar['JobAttributes.SidesType'] = ...

class PageAttributes(java.lang.Cloneable):
    """
    Java class 'java.awt.PageAttributes'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.lang.Cloneable
    
      Constructors:
        * PageAttributes(java.awt.PageAttributes.ColorType, java.awt.PageAttributes.MediaType, java.awt.PageAttributes.OrientationRequestedType, java.awt.PageAttributes.OriginType, java.awt.PageAttributes.PrintQualityType, int[])
        * PageAttributes(java.awt.PageAttributes)
        * PageAttributes()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, colorType: 'PageAttributes.ColorType', mediaType: 'PageAttributes.MediaType', orientationRequestedType: 'PageAttributes.OrientationRequestedType', originType: 'PageAttributes.OriginType', printQualityType: 'PageAttributes.PrintQualityType', intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, pageAttributes: 'PageAttributes'): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getColor(self) -> 'PageAttributes.ColorType': ...
    def getMedia(self) -> 'PageAttributes.MediaType': ...
    def getOrientationRequested(self) -> 'PageAttributes.OrientationRequestedType': ...
    def getOrigin(self) -> 'PageAttributes.OriginType': ...
    def getPrintQuality(self) -> 'PageAttributes.PrintQualityType': ...
    def getPrinterResolution(self) -> typing.List[int]: ...
    def hashCode(self) -> int: ...
    def set(self, pageAttributes: 'PageAttributes') -> None: ...
    def setColor(self, colorType: 'PageAttributes.ColorType') -> None: ...
    def setMedia(self, mediaType: 'PageAttributes.MediaType') -> None: ...
    def setMediaToDefault(self) -> None: ...
    @typing.overload
    def setOrientationRequested(self, int: int) -> None: ...
    @typing.overload
    def setOrientationRequested(self, orientationRequestedType: 'PageAttributes.OrientationRequestedType') -> None: ...
    def setOrientationRequestedToDefault(self) -> None: ...
    def setOrigin(self, originType: 'PageAttributes.OriginType') -> None: ...
    @typing.overload
    def setPrintQuality(self, int: int) -> None: ...
    @typing.overload
    def setPrintQuality(self, printQualityType: 'PageAttributes.PrintQualityType') -> None: ...
    def setPrintQualityToDefault(self) -> None: ...
    @typing.overload
    def setPrinterResolution(self, int: int) -> None: ...
    @typing.overload
    def setPrinterResolution(self, intArray: typing.List[int]) -> None: ...
    def setPrinterResolutionToDefault(self) -> None: ...
    def toString(self) -> str: ...
    class ColorType(java.awt.AttributeValue):
        """
        Java class 'java.awt.PageAttributes$ColorType'
        
            Extends:
                java.awt.AttributeValue
        
          Attributes:
            COLOR (java.awt.PageAttributes$ColorType): final static field
            MONOCHROME (java.awt.PageAttributes$ColorType): final static field
        
        """
        COLOR: typing.ClassVar['PageAttributes.ColorType'] = ...
        MONOCHROME: typing.ClassVar['PageAttributes.ColorType'] = ...
    class MediaType(java.awt.AttributeValue):
        """
        Java class 'java.awt.PageAttributes$MediaType'
        
            Extends:
                java.awt.AttributeValue
        
          Attributes:
            ISO_4A0 (java.awt.PageAttributes$MediaType): final static field
            ISO_2A0 (java.awt.PageAttributes$MediaType): final static field
            ISO_A0 (java.awt.PageAttributes$MediaType): final static field
            ISO_A1 (java.awt.PageAttributes$MediaType): final static field
            ISO_A2 (java.awt.PageAttributes$MediaType): final static field
            ISO_A3 (java.awt.PageAttributes$MediaType): final static field
            ISO_A4 (java.awt.PageAttributes$MediaType): final static field
            ISO_A5 (java.awt.PageAttributes$MediaType): final static field
            ISO_A6 (java.awt.PageAttributes$MediaType): final static field
            ISO_A7 (java.awt.PageAttributes$MediaType): final static field
            ISO_A8 (java.awt.PageAttributes$MediaType): final static field
            ISO_A9 (java.awt.PageAttributes$MediaType): final static field
            ISO_A10 (java.awt.PageAttributes$MediaType): final static field
            ISO_B0 (java.awt.PageAttributes$MediaType): final static field
            ISO_B1 (java.awt.PageAttributes$MediaType): final static field
            ISO_B2 (java.awt.PageAttributes$MediaType): final static field
            ISO_B3 (java.awt.PageAttributes$MediaType): final static field
            ISO_B4 (java.awt.PageAttributes$MediaType): final static field
            ISO_B5 (java.awt.PageAttributes$MediaType): final static field
            ISO_B6 (java.awt.PageAttributes$MediaType): final static field
            ISO_B7 (java.awt.PageAttributes$MediaType): final static field
            ISO_B8 (java.awt.PageAttributes$MediaType): final static field
            ISO_B9 (java.awt.PageAttributes$MediaType): final static field
            ISO_B10 (java.awt.PageAttributes$MediaType): final static field
            JIS_B0 (java.awt.PageAttributes$MediaType): final static field
            JIS_B1 (java.awt.PageAttributes$MediaType): final static field
            JIS_B2 (java.awt.PageAttributes$MediaType): final static field
            JIS_B3 (java.awt.PageAttributes$MediaType): final static field
            JIS_B4 (java.awt.PageAttributes$MediaType): final static field
            JIS_B5 (java.awt.PageAttributes$MediaType): final static field
            JIS_B6 (java.awt.PageAttributes$MediaType): final static field
            JIS_B7 (java.awt.PageAttributes$MediaType): final static field
            JIS_B8 (java.awt.PageAttributes$MediaType): final static field
            JIS_B9 (java.awt.PageAttributes$MediaType): final static field
            JIS_B10 (java.awt.PageAttributes$MediaType): final static field
            ISO_C0 (java.awt.PageAttributes$MediaType): final static field
            ISO_C1 (java.awt.PageAttributes$MediaType): final static field
            ISO_C2 (java.awt.PageAttributes$MediaType): final static field
            ISO_C3 (java.awt.PageAttributes$MediaType): final static field
            ISO_C4 (java.awt.PageAttributes$MediaType): final static field
            ISO_C5 (java.awt.PageAttributes$MediaType): final static field
            ISO_C6 (java.awt.PageAttributes$MediaType): final static field
            ISO_C7 (java.awt.PageAttributes$MediaType): final static field
            ISO_C8 (java.awt.PageAttributes$MediaType): final static field
            ISO_C9 (java.awt.PageAttributes$MediaType): final static field
            ISO_C10 (java.awt.PageAttributes$MediaType): final static field
            ISO_DESIGNATED_LONG (java.awt.PageAttributes$MediaType): final static field
            EXECUTIVE (java.awt.PageAttributes$MediaType): final static field
            FOLIO (java.awt.PageAttributes$MediaType): final static field
            INVOICE (java.awt.PageAttributes$MediaType): final static field
            LEDGER (java.awt.PageAttributes$MediaType): final static field
            NA_LETTER (java.awt.PageAttributes$MediaType): final static field
            NA_LEGAL (java.awt.PageAttributes$MediaType): final static field
            QUARTO (java.awt.PageAttributes$MediaType): final static field
            A (java.awt.PageAttributes$MediaType): final static field
            B (java.awt.PageAttributes$MediaType): final static field
            C (java.awt.PageAttributes$MediaType): final static field
            D (java.awt.PageAttributes$MediaType): final static field
            E (java.awt.PageAttributes$MediaType): final static field
            NA_10X15_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            NA_10X14_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            NA_10X13_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            NA_9X12_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            NA_9X11_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            NA_7X9_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            NA_6X9_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            NA_NUMBER_9_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            NA_NUMBER_10_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            NA_NUMBER_11_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            NA_NUMBER_12_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            NA_NUMBER_14_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            INVITE_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            ITALY_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            MONARCH_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            PERSONAL_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            A0 (java.awt.PageAttributes$MediaType): final static field
            A1 (java.awt.PageAttributes$MediaType): final static field
            A2 (java.awt.PageAttributes$MediaType): final static field
            A3 (java.awt.PageAttributes$MediaType): final static field
            A4 (java.awt.PageAttributes$MediaType): final static field
            A5 (java.awt.PageAttributes$MediaType): final static field
            A6 (java.awt.PageAttributes$MediaType): final static field
            A7 (java.awt.PageAttributes$MediaType): final static field
            A8 (java.awt.PageAttributes$MediaType): final static field
            A9 (java.awt.PageAttributes$MediaType): final static field
            A10 (java.awt.PageAttributes$MediaType): final static field
            B0 (java.awt.PageAttributes$MediaType): final static field
            B1 (java.awt.PageAttributes$MediaType): final static field
            B2 (java.awt.PageAttributes$MediaType): final static field
            B3 (java.awt.PageAttributes$MediaType): final static field
            B4 (java.awt.PageAttributes$MediaType): final static field
            ISO_B4_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            B5 (java.awt.PageAttributes$MediaType): final static field
            ISO_B5_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            B6 (java.awt.PageAttributes$MediaType): final static field
            B7 (java.awt.PageAttributes$MediaType): final static field
            B8 (java.awt.PageAttributes$MediaType): final static field
            B9 (java.awt.PageAttributes$MediaType): final static field
            B10 (java.awt.PageAttributes$MediaType): final static field
            C0 (java.awt.PageAttributes$MediaType): final static field
            ISO_C0_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            C1 (java.awt.PageAttributes$MediaType): final static field
            ISO_C1_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            C2 (java.awt.PageAttributes$MediaType): final static field
            ISO_C2_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            C3 (java.awt.PageAttributes$MediaType): final static field
            ISO_C3_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            C4 (java.awt.PageAttributes$MediaType): final static field
            ISO_C4_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            C5 (java.awt.PageAttributes$MediaType): final static field
            ISO_C5_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            C6 (java.awt.PageAttributes$MediaType): final static field
            ISO_C6_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            C7 (java.awt.PageAttributes$MediaType): final static field
            ISO_C7_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            C8 (java.awt.PageAttributes$MediaType): final static field
            ISO_C8_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            C9 (java.awt.PageAttributes$MediaType): final static field
            ISO_C9_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            C10 (java.awt.PageAttributes$MediaType): final static field
            ISO_C10_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            ISO_DESIGNATED_LONG_ENVELOPE (java.awt.PageAttributes$MediaType): final static field
            STATEMENT (java.awt.PageAttributes$MediaType): final static field
            TABLOID (java.awt.PageAttributes$MediaType): final static field
            LETTER (java.awt.PageAttributes$MediaType): final static field
            NOTE (java.awt.PageAttributes$MediaType): final static field
            LEGAL (java.awt.PageAttributes$MediaType): final static field
            ENV_10X15 (java.awt.PageAttributes$MediaType): final static field
            ENV_10X14 (java.awt.PageAttributes$MediaType): final static field
            ENV_10X13 (java.awt.PageAttributes$MediaType): final static field
            ENV_9X12 (java.awt.PageAttributes$MediaType): final static field
            ENV_9X11 (java.awt.PageAttributes$MediaType): final static field
            ENV_7X9 (java.awt.PageAttributes$MediaType): final static field
            ENV_6X9 (java.awt.PageAttributes$MediaType): final static field
            ENV_9 (java.awt.PageAttributes$MediaType): final static field
            ENV_10 (java.awt.PageAttributes$MediaType): final static field
            ENV_11 (java.awt.PageAttributes$MediaType): final static field
            ENV_12 (java.awt.PageAttributes$MediaType): final static field
            ENV_14 (java.awt.PageAttributes$MediaType): final static field
            ENV_INVITE (java.awt.PageAttributes$MediaType): final static field
            ENV_ITALY (java.awt.PageAttributes$MediaType): final static field
            ENV_MONARCH (java.awt.PageAttributes$MediaType): final static field
            ENV_PERSONAL (java.awt.PageAttributes$MediaType): final static field
            INVITE (java.awt.PageAttributes$MediaType): final static field
            ITALY (java.awt.PageAttributes$MediaType): final static field
            MONARCH (java.awt.PageAttributes$MediaType): final static field
            PERSONAL (java.awt.PageAttributes$MediaType): final static field
        
        """
        ISO_4A0: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_2A0: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_A0: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_A1: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_A2: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_A3: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_A4: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_A5: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_A6: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_A7: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_A8: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_A9: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_A10: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B0: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B1: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B2: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B3: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B4: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B5: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B6: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B7: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B8: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B9: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B10: typing.ClassVar['PageAttributes.MediaType'] = ...
        JIS_B0: typing.ClassVar['PageAttributes.MediaType'] = ...
        JIS_B1: typing.ClassVar['PageAttributes.MediaType'] = ...
        JIS_B2: typing.ClassVar['PageAttributes.MediaType'] = ...
        JIS_B3: typing.ClassVar['PageAttributes.MediaType'] = ...
        JIS_B4: typing.ClassVar['PageAttributes.MediaType'] = ...
        JIS_B5: typing.ClassVar['PageAttributes.MediaType'] = ...
        JIS_B6: typing.ClassVar['PageAttributes.MediaType'] = ...
        JIS_B7: typing.ClassVar['PageAttributes.MediaType'] = ...
        JIS_B8: typing.ClassVar['PageAttributes.MediaType'] = ...
        JIS_B9: typing.ClassVar['PageAttributes.MediaType'] = ...
        JIS_B10: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C0: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C1: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C2: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C3: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C4: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C5: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C6: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C7: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C8: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C9: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C10: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_DESIGNATED_LONG: typing.ClassVar['PageAttributes.MediaType'] = ...
        EXECUTIVE: typing.ClassVar['PageAttributes.MediaType'] = ...
        FOLIO: typing.ClassVar['PageAttributes.MediaType'] = ...
        INVOICE: typing.ClassVar['PageAttributes.MediaType'] = ...
        LEDGER: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_LETTER: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_LEGAL: typing.ClassVar['PageAttributes.MediaType'] = ...
        QUARTO: typing.ClassVar['PageAttributes.MediaType'] = ...
        A: typing.ClassVar['PageAttributes.MediaType'] = ...
        B: typing.ClassVar['PageAttributes.MediaType'] = ...
        C: typing.ClassVar['PageAttributes.MediaType'] = ...
        D: typing.ClassVar['PageAttributes.MediaType'] = ...
        E: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_10X15_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_10X14_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_10X13_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_9X12_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_9X11_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_7X9_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_6X9_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_NUMBER_9_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_NUMBER_10_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_NUMBER_11_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_NUMBER_12_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        NA_NUMBER_14_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        INVITE_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        ITALY_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        MONARCH_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        PERSONAL_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        A0: typing.ClassVar['PageAttributes.MediaType'] = ...
        A1: typing.ClassVar['PageAttributes.MediaType'] = ...
        A2: typing.ClassVar['PageAttributes.MediaType'] = ...
        A3: typing.ClassVar['PageAttributes.MediaType'] = ...
        A4: typing.ClassVar['PageAttributes.MediaType'] = ...
        A5: typing.ClassVar['PageAttributes.MediaType'] = ...
        A6: typing.ClassVar['PageAttributes.MediaType'] = ...
        A7: typing.ClassVar['PageAttributes.MediaType'] = ...
        A8: typing.ClassVar['PageAttributes.MediaType'] = ...
        A9: typing.ClassVar['PageAttributes.MediaType'] = ...
        A10: typing.ClassVar['PageAttributes.MediaType'] = ...
        B0: typing.ClassVar['PageAttributes.MediaType'] = ...
        B1: typing.ClassVar['PageAttributes.MediaType'] = ...
        B2: typing.ClassVar['PageAttributes.MediaType'] = ...
        B3: typing.ClassVar['PageAttributes.MediaType'] = ...
        B4: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B4_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        B5: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_B5_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        B6: typing.ClassVar['PageAttributes.MediaType'] = ...
        B7: typing.ClassVar['PageAttributes.MediaType'] = ...
        B8: typing.ClassVar['PageAttributes.MediaType'] = ...
        B9: typing.ClassVar['PageAttributes.MediaType'] = ...
        B10: typing.ClassVar['PageAttributes.MediaType'] = ...
        C0: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C0_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        C1: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C1_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        C2: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C2_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        C3: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C3_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        C4: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C4_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        C5: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C5_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        C6: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C6_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        C7: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C7_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        C8: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C8_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        C9: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C9_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        C10: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_C10_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        ISO_DESIGNATED_LONG_ENVELOPE: typing.ClassVar['PageAttributes.MediaType'] = ...
        STATEMENT: typing.ClassVar['PageAttributes.MediaType'] = ...
        TABLOID: typing.ClassVar['PageAttributes.MediaType'] = ...
        LETTER: typing.ClassVar['PageAttributes.MediaType'] = ...
        NOTE: typing.ClassVar['PageAttributes.MediaType'] = ...
        LEGAL: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_10X15: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_10X14: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_10X13: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_9X12: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_9X11: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_7X9: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_6X9: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_9: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_10: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_11: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_12: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_14: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_INVITE: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_ITALY: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_MONARCH: typing.ClassVar['PageAttributes.MediaType'] = ...
        ENV_PERSONAL: typing.ClassVar['PageAttributes.MediaType'] = ...
        INVITE: typing.ClassVar['PageAttributes.MediaType'] = ...
        ITALY: typing.ClassVar['PageAttributes.MediaType'] = ...
        MONARCH: typing.ClassVar['PageAttributes.MediaType'] = ...
        PERSONAL: typing.ClassVar['PageAttributes.MediaType'] = ...
    class OrientationRequestedType(java.awt.AttributeValue):
        """
        Java class 'java.awt.PageAttributes$OrientationRequestedType'
        
            Extends:
                java.awt.AttributeValue
        
          Attributes:
            PORTRAIT (java.awt.PageAttributes$OrientationRequestedType): final static field
            LANDSCAPE (java.awt.PageAttributes$OrientationRequestedType): final static field
        
        """
        PORTRAIT: typing.ClassVar['PageAttributes.OrientationRequestedType'] = ...
        LANDSCAPE: typing.ClassVar['PageAttributes.OrientationRequestedType'] = ...
    class OriginType(java.awt.AttributeValue):
        """
        Java class 'java.awt.PageAttributes$OriginType'
        
            Extends:
                java.awt.AttributeValue
        
          Attributes:
            PHYSICAL (java.awt.PageAttributes$OriginType): final static field
            PRINTABLE (java.awt.PageAttributes$OriginType): final static field
        
        """
        PHYSICAL: typing.ClassVar['PageAttributes.OriginType'] = ...
        PRINTABLE: typing.ClassVar['PageAttributes.OriginType'] = ...
    class PrintQualityType(java.awt.AttributeValue):
        """
        Java class 'java.awt.PageAttributes$PrintQualityType'
        
            Extends:
                java.awt.AttributeValue
        
          Attributes:
            HIGH (java.awt.PageAttributes$PrintQualityType): final static field
            NORMAL (java.awt.PageAttributes$PrintQualityType): final static field
            DRAFT (java.awt.PageAttributes$PrintQualityType): final static field
        
        """
        HIGH: typing.ClassVar['PageAttributes.PrintQualityType'] = ...
        NORMAL: typing.ClassVar['PageAttributes.PrintQualityType'] = ...
        DRAFT: typing.ClassVar['PageAttributes.PrintQualityType'] = ...

class AttributeValue: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("java.awt")``.

    AWTError: typing.Type[AWTError]
    AWTEvent: typing.Type[AWTEvent]
    AWTEventMulticaster: typing.Type[AWTEventMulticaster]
    AWTException: typing.Type[AWTException]
    AWTKeyStroke: typing.Type[AWTKeyStroke]
    AWTPermission: typing.Type[AWTPermission]
    ActiveEvent: typing.Type[ActiveEvent]
    Adjustable: typing.Type[Adjustable]
    AlphaComposite: typing.Type[AlphaComposite]
    AttributeValue: typing.Type[AttributeValue]
    BasicStroke: typing.Type[BasicStroke]
    BorderLayout: typing.Type[BorderLayout]
    BufferCapabilities: typing.Type[BufferCapabilities]
    Button: typing.Type[Button]
    Canvas: typing.Type[Canvas]
    CardLayout: typing.Type[CardLayout]
    Checkbox: typing.Type[Checkbox]
    CheckboxGroup: typing.Type[CheckboxGroup]
    CheckboxMenuItem: typing.Type[CheckboxMenuItem]
    Choice: typing.Type[Choice]
    Color: typing.Type[Color]
    Component: typing.Type[Component]
    ComponentOrientation: typing.Type[ComponentOrientation]
    Composite: typing.Type[Composite]
    CompositeContext: typing.Type[CompositeContext]
    Container: typing.Type[Container]
    ContainerOrderFocusTraversalPolicy: typing.Type[ContainerOrderFocusTraversalPolicy]
    Cursor: typing.Type[Cursor]
    DefaultFocusTraversalPolicy: typing.Type[DefaultFocusTraversalPolicy]
    DefaultKeyboardFocusManager: typing.Type[DefaultKeyboardFocusManager]
    Desktop: typing.Type[Desktop]
    Dialog: typing.Type[Dialog]
    Dimension: typing.Type[Dimension]
    DisplayMode: typing.Type[DisplayMode]
    Event: typing.Type[Event]
    EventQueue: typing.Type[EventQueue]
    FileDialog: typing.Type[FileDialog]
    FlowLayout: typing.Type[FlowLayout]
    FocusTraversalPolicy: typing.Type[FocusTraversalPolicy]
    Font: typing.Type[Font]
    FontFormatException: typing.Type[FontFormatException]
    FontMetrics: typing.Type[FontMetrics]
    Frame: typing.Type[Frame]
    GradientPaint: typing.Type[GradientPaint]
    Graphics: typing.Type[Graphics]
    Graphics2D: typing.Type[Graphics2D]
    GraphicsConfigTemplate: typing.Type[GraphicsConfigTemplate]
    GraphicsConfiguration: typing.Type[GraphicsConfiguration]
    GraphicsDevice: typing.Type[GraphicsDevice]
    GraphicsEnvironment: typing.Type[GraphicsEnvironment]
    GridBagConstraints: typing.Type[GridBagConstraints]
    GridBagLayout: typing.Type[GridBagLayout]
    GridBagLayoutInfo: typing.Type[GridBagLayoutInfo]
    GridLayout: typing.Type[GridLayout]
    HeadlessException: typing.Type[HeadlessException]
    IllegalComponentStateException: typing.Type[IllegalComponentStateException]
    Image: typing.Type[Image]
    ImageCapabilities: typing.Type[ImageCapabilities]
    Insets: typing.Type[Insets]
    ItemSelectable: typing.Type[ItemSelectable]
    JobAttributes: typing.Type[JobAttributes]
    KeyEventDispatcher: typing.Type[KeyEventDispatcher]
    KeyEventPostProcessor: typing.Type[KeyEventPostProcessor]
    KeyboardFocusManager: typing.Type[KeyboardFocusManager]
    Label: typing.Type[Label]
    LayoutManager: typing.Type[LayoutManager]
    LayoutManager2: typing.Type[LayoutManager2]
    LinearGradientPaint: typing.Type[LinearGradientPaint]
    List: typing.Type[List]
    MediaTracker: typing.Type[MediaTracker]
    Menu: typing.Type[Menu]
    MenuBar: typing.Type[MenuBar]
    MenuComponent: typing.Type[MenuComponent]
    MenuContainer: typing.Type[MenuContainer]
    MenuItem: typing.Type[MenuItem]
    MenuShortcut: typing.Type[MenuShortcut]
    MouseInfo: typing.Type[MouseInfo]
    MultipleGradientPaint: typing.Type[MultipleGradientPaint]
    PageAttributes: typing.Type[PageAttributes]
    Paint: typing.Type[Paint]
    PaintContext: typing.Type[PaintContext]
    Panel: typing.Type[Panel]
    Point: typing.Type[Point]
    PointerInfo: typing.Type[PointerInfo]
    Polygon: typing.Type[Polygon]
    PopupMenu: typing.Type[PopupMenu]
    PrintGraphics: typing.Type[PrintGraphics]
    PrintJob: typing.Type[PrintJob]
    RadialGradientPaint: typing.Type[RadialGradientPaint]
    Rectangle: typing.Type[Rectangle]
    RenderingHints: typing.Type[RenderingHints]
    Robot: typing.Type[Robot]
    ScrollPane: typing.Type[ScrollPane]
    ScrollPaneAdjustable: typing.Type[ScrollPaneAdjustable]
    Scrollbar: typing.Type[Scrollbar]
    SecondaryLoop: typing.Type[SecondaryLoop]
    Shape: typing.Type[Shape]
    SplashScreen: typing.Type[SplashScreen]
    Stroke: typing.Type[Stroke]
    SystemColor: typing.Type[SystemColor]
    SystemTray: typing.Type[SystemTray]
    Taskbar: typing.Type[Taskbar]
    TextArea: typing.Type[TextArea]
    TextComponent: typing.Type[TextComponent]
    TextField: typing.Type[TextField]
    TexturePaint: typing.Type[TexturePaint]
    Toolkit: typing.Type[Toolkit]
    Transparency: typing.Type[Transparency]
    TrayIcon: typing.Type[TrayIcon]
    Window: typing.Type[Window]
    color: java.awt.color.__module_protocol__
    datatransfer: java.awt.datatransfer.__module_protocol__
    desktop: java.awt.desktop.__module_protocol__
    dnd: java.awt.dnd.__module_protocol__
    event: java.awt.event.__module_protocol__
    font: java.awt.font.__module_protocol__
    geom: java.awt.geom.__module_protocol__
    im: java.awt.im.__module_protocol__
    image: java.awt.image.__module_protocol__
    peer: java.awt.peer.__module_protocol__
    print_: java.awt.print_.__module_protocol__
