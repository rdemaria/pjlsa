from typing import Any as _py_Any
from typing import overload
import java.net
import java.nio.channels
import java.util.concurrent


class AbstractInterruptibleChannel(java.nio.channels.Channel, java.nio.channels.InterruptibleChannel):
    def close(self) -> None: ...
    def isOpen(self) -> bool: ...

class AbstractSelectableChannel(java.nio.channels.SelectableChannel):
    def blockingLock(self) -> _py_Any: ...
    def configureBlocking(self, boolean: bool) -> java.nio.channels.SelectableChannel: ...
    def isBlocking(self) -> bool: ...
    def isRegistered(self) -> bool: ...
    def keyFor(self, selector: java.nio.channels.Selector) -> java.nio.channels.SelectionKey: ...
    def provider(self) -> 'SelectorProvider': ...
    @overload
    def register(self, selector: java.nio.channels.Selector, int: int) -> java.nio.channels.SelectionKey: ...
    @overload
    def register(self, selector: java.nio.channels.Selector, int: int, object: _py_Any) -> java.nio.channels.SelectionKey: ...

class AbstractSelectionKey(java.nio.channels.SelectionKey):
    def cancel(self) -> None: ...
    def isValid(self) -> bool: ...

class AbstractSelector(java.nio.channels.Selector):
    def close(self) -> None: ...
    def isOpen(self) -> bool: ...
    def provider(self) -> 'SelectorProvider': ...

class AsynchronousChannelProvider:
    @overload
    def openAsynchronousChannelGroup(self, int: int, threadFactory: java.util.concurrent.ThreadFactory) -> java.nio.channels.AsynchronousChannelGroup: ...
    @overload
    def openAsynchronousChannelGroup(self, executorService: java.util.concurrent.ExecutorService, int: int) -> java.nio.channels.AsynchronousChannelGroup: ...
    def openAsynchronousServerSocketChannel(self, asynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup) -> java.nio.channels.AsynchronousServerSocketChannel: ...
    def openAsynchronousSocketChannel(self, asynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup) -> java.nio.channels.AsynchronousSocketChannel: ...
    @classmethod
    def provider(cls) -> 'AsynchronousChannelProvider': ...

class SelectorProvider:
    def inheritedChannel(self) -> java.nio.channels.Channel: ...
    @overload
    def openDatagramChannel(self) -> java.nio.channels.DatagramChannel: ...
    @overload
    def openDatagramChannel(self, protocolFamily: java.net.ProtocolFamily) -> java.nio.channels.DatagramChannel: ...
    def openPipe(self) -> java.nio.channels.Pipe: ...
    def openSelector(self) -> AbstractSelector: ...
    def openServerSocketChannel(self) -> java.nio.channels.ServerSocketChannel: ...
    def openSocketChannel(self) -> java.nio.channels.SocketChannel: ...
    @classmethod
    def provider(cls) -> 'SelectorProvider': ...
