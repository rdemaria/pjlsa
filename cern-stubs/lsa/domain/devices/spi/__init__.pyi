import cern.accsoft.commons.domain
import cern.accsoft.commons.domain.particletransfers
import cern.accsoft.commons.domain.zones
import cern.lsa.domain.commons.spi
import cern.lsa.domain.devices
import cern.lsa.domain.devices.spi.type
import cern.lsa.domain.settings
import java.io
import java.util
import typing



class DeviceGroupImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity[cern.lsa.domain.devices.DeviceGroup], cern.lsa.domain.devices.DeviceGroup):
    """
    Java class 'cern.lsa.domain.devices.spi.DeviceGroupImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity
    
        Interfaces:
            cern.lsa.domain.devices.DeviceGroup
    
      Constructors:
        * DeviceGroupImpl(cern.lsa.domain.devices.DeviceGroup)
        * DeviceGroupImpl(java.lang.String, cern.lsa.domain.devices.DeviceGroupType, cern.accsoft.commons.domain.Accelerator)
        * DeviceGroupImpl()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, deviceGroup: cern.lsa.domain.devices.DeviceGroup): ...
    @typing.overload
    def __init__(self, string: str, deviceGroupType: cern.lsa.domain.devices.DeviceGroupType, accelerator: cern.accsoft.commons.domain.Accelerator): ...
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getChildGroups(self) -> java.util.Set[cern.lsa.domain.devices.DeviceGroup]: ...
    def getCreateTime(self) -> java.util.Date: ...
    def getCreator(self) -> str: ...
    def getDisplayName(self) -> str: ...
    def getModifier(self) -> str: ...
    def getModifyTime(self) -> java.util.Date: ...
    def getType(self) -> cern.lsa.domain.devices.DeviceGroupType: ...
    def isOperational(self) -> bool: ...
    def setAccelerator(self, accelerator: cern.accsoft.commons.domain.Accelerator) -> None: ...
    def setChildGroups(self, set: java.util.Set[cern.lsa.domain.devices.DeviceGroup]) -> None: ...
    def setCreateTime(self, date: java.util.Date) -> None: ...
    def setCreator(self, string: str) -> None: ...
    def setDisplayName(self, string: str) -> None: ...
    def setModifier(self, string: str) -> None: ...
    def setModifyTime(self, date: java.util.Date) -> None: ...
    def setOperational(self, boolean: bool) -> None: ...
    def setType(self, deviceGroupType: cern.lsa.domain.devices.DeviceGroupType) -> None: ...
    def toString(self) -> str: ...

class DeviceGroupsRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.devices.DeviceGroupsRequest):
    """
    Java class 'cern.lsa.domain.devices.spi.DeviceGroupsRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.devices.DeviceGroupsRequest
    
      Constructors:
        * DeviceGroupsRequestImpl(java.util.Map)
    
      Attributes:
        ACCELERATOR (java.lang.String): final static field
        DEVICE_GROUP_NAME_PATTERN (java.lang.String): final static field
        DEVICE_GROUP_NAMES (java.lang.String): final static field
        DEVICE_GROUP_TYPES (java.lang.String): final static field
    
    """
    ACCELERATOR: typing.ClassVar[str] = ...
    DEVICE_GROUP_NAME_PATTERN: typing.ClassVar[str] = ...
    DEVICE_GROUP_NAMES: typing.ClassVar[str] = ...
    DEVICE_GROUP_TYPES: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getDeviceGroupNamePattern(self) -> str: ...
    def getDeviceGroupNames(self) -> java.util.Set[str]: ...
    def getDeviceGroupTypes(self) -> java.util.Set[cern.lsa.domain.devices.DeviceGroupType]: ...

class DeviceImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity[cern.lsa.domain.devices.Device], cern.lsa.domain.devices.Device):
    """
    Java class 'cern.lsa.domain.devices.spi.DeviceImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity
    
        Interfaces:
            cern.lsa.domain.devices.Device
    
      Constructors:
        * DeviceImpl(long, java.lang.String)
        * DeviceImpl(cern.lsa.domain.devices.Device)
    
    """
    @typing.overload
    def __init__(self, device: cern.lsa.domain.devices.Device): ...
    @typing.overload
    def __init__(self, long: int, string: str): ...
    def addDeviceGroup(self, string: str) -> None: ...
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getAcceleratorZone(self) -> cern.accsoft.commons.domain.zones.AcceleratorZone: ...
    def getAlias(self) -> str: ...
    def getDescription(self) -> str: ...
    def getDeviceGroups(self) -> java.util.Set[str]: ...
    def getDeviceType(self) -> cern.lsa.domain.devices.DeviceType: ...
    def getDeviceTypeVersion(self) -> cern.lsa.domain.devices.DeviceTypeVersion: ...
    def getFecName(self) -> str: ...
    def getPosition(self) -> float: ...
    def getServerName(self) -> str: ...
    def getSortOrder(self) -> int: ...
    def getState(self) -> cern.lsa.domain.devices.Device.DeviceState: ...
    def isCycleBound(self) -> bool: ...
    def isLsaImplementation(self) -> bool: ...
    def isMultiplexed(self) -> bool: ...
    def setAcceleratorZone(self, acceleratorZone: cern.accsoft.commons.domain.zones.AcceleratorZone) -> None: ...
    def setAlias(self, string: str) -> None: ...
    def setCycleBound(self, boolean: bool) -> None: ...
    def setDescription(self, string: str) -> None: ...
    def setDeviceGroups(self, set: java.util.Set[str]) -> None: ...
    def setDeviceTypeVersion(self, deviceTypeVersion: cern.lsa.domain.devices.DeviceTypeVersion) -> None: ...
    def setFecName(self, string: str) -> None: ...
    def setLsaImplementation(self, boolean: bool) -> None: ...
    def setMultiplexed(self, boolean: bool) -> None: ...
    def setPosition(self, double: float) -> None: ...
    def setServerName(self, string: str) -> None: ...
    def setSortOrder(self, int: int) -> None: ...
    def setState(self, deviceState: cern.lsa.domain.devices.Device.DeviceState) -> None: ...
    def toString(self) -> str: ...

class DeviceTypeImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity[cern.lsa.domain.devices.DeviceType], cern.lsa.domain.devices.DeviceType):
    """
    Java class 'cern.lsa.domain.devices.spi.DeviceTypeImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity
    
        Interfaces:
            cern.lsa.domain.devices.DeviceType
    
      Constructors:
        * DeviceTypeImpl(long, java.lang.String)
    
    """
    def __init__(self, long: int, string: str): ...
    def addVersion(self, deviceTypeVersion: cern.lsa.domain.devices.DeviceTypeVersion) -> None: ...
    def compareTo(self, deviceType: cern.lsa.domain.devices.DeviceType) -> int: ...
    def getDescription(self) -> str: ...
    def getMetaType(self) -> cern.lsa.domain.devices.DeviceMetaTypeEnum: ...
    def getVersions(self) -> java.util.SortedSet[cern.lsa.domain.devices.DeviceTypeVersion]: ...
    def setDescription(self, string: str) -> None: ...
    def setMetaType(self, deviceMetaTypeEnum: cern.lsa.domain.devices.DeviceMetaTypeEnum) -> None: ...
    def setVersions(self, set: java.util.Set[cern.lsa.domain.devices.DeviceTypeVersion]) -> None: ...
    def toString(self) -> str: ...

class DeviceTypeVersionImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedEntity[cern.lsa.domain.devices.DeviceTypeVersion], cern.lsa.domain.devices.DeviceTypeVersion):
    """
    Java class 'cern.lsa.domain.devices.spi.DeviceTypeVersionImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedEntity
    
        Interfaces:
            cern.lsa.domain.devices.DeviceTypeVersion
    
      Constructors:
        * DeviceTypeVersionImpl(long, cern.lsa.domain.devices.DeviceType, cern.lsa.domain.devices.DeviceTypeImplementation, cern.lsa.domain.devices.DeviceTypeVersionNumber)
    
    """
    def __init__(self, long: int, deviceType: cern.lsa.domain.devices.DeviceType, deviceTypeImplementation: cern.lsa.domain.devices.DeviceTypeImplementation, deviceTypeVersionNumber: cern.lsa.domain.devices.DeviceTypeVersionNumber): ...
    def compareTo(self, deviceTypeVersion: cern.lsa.domain.devices.DeviceTypeVersion) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDeviceType(self) -> cern.lsa.domain.devices.DeviceType: ...
    def getImplementation(self) -> cern.lsa.domain.devices.DeviceTypeImplementation: ...
    def getVersionNumber(self) -> cern.lsa.domain.devices.DeviceTypeVersionNumber: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class DeviceTypeVersionNumberImpl(cern.lsa.domain.devices.DeviceTypeVersionNumber, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.devices.spi.DeviceTypeVersionNumberImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.devices.DeviceTypeVersionNumber,
            java.io.Serializable
    
      Constructors:
        * DeviceTypeVersionNumberImpl(int, int)
    
    """
    def __init__(self, int: int, int2: int): ...
    def compareTo(self, deviceTypeVersionNumber: cern.lsa.domain.devices.DeviceTypeVersionNumber) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getMajor(self) -> int: ...
    def getMinor(self) -> int: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class DeviceTypesRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.devices.DeviceTypesRequest):
    """
    Java class 'cern.lsa.domain.devices.spi.DeviceTypesRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.devices.DeviceTypesRequest
    
      Constructors:
        * DeviceTypesRequestImpl(java.util.Map)
    
      Attributes:
        ACCELERATOR (java.lang.String): final static field
        ALL_DEV_TYPES_REQUESTED (java.lang.String): final static field
        DEVICE_TYPE_NAMES (java.lang.String): final static field
        DEVICE_TYPE_NAME_PATTERN (java.lang.String): final static field
        DEVICE_TYPE_VERSION_NUMBER (java.lang.String): final static field
        DEVICE_TYPE_IMPLEMENTATION (java.lang.String): final static field
    
    """
    ACCELERATOR: typing.ClassVar[str] = ...
    ALL_DEV_TYPES_REQUESTED: typing.ClassVar[str] = ...
    DEVICE_TYPE_NAMES: typing.ClassVar[str] = ...
    DEVICE_TYPE_NAME_PATTERN: typing.ClassVar[str] = ...
    DEVICE_TYPE_VERSION_NUMBER: typing.ClassVar[str] = ...
    DEVICE_TYPE_IMPLEMENTATION: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getAllTypesRequested(self) -> bool: ...
    def getDeviceTypeImplementations(self) -> java.util.Set[cern.lsa.domain.devices.DeviceTypeImplementation]: ...
    def getDeviceTypeNamePattern(self) -> str: ...
    def getDeviceTypeNames(self) -> java.util.Set[str]: ...
    def getDeviceTypeVersionNumber(self) -> cern.lsa.domain.devices.DeviceTypeVersionNumber: ...

class DevicesRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.devices.DevicesRequest):
    """
    Java class 'cern.lsa.domain.devices.spi.DevicesRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.devices.DevicesRequest
    
      Constructors:
        * DevicesRequestImpl(java.util.Map)
    
      Attributes:
        ACCELERATOR (java.lang.String): final static field
        ACCELERATOR_ZONES (java.lang.String): final static field
        PARTICLE_TRANSFERS (java.lang.String): final static field
        DEVICE_TYPE_NAMES (java.lang.String): final static field
        DEVICE_TYPE_NAME_PATTERN (java.lang.String): final static field
        META_TYPE (java.lang.String): final static field
        DEVICE_NAMES (java.lang.String): final static field
        DEVICE_NAME_PATTERN (java.lang.String): final static field
        MULTIPLEXED (java.lang.String): final static field
        DEVICE_GROUP_IDS (java.lang.String): final static field
        DEVICE_GROUP_NAMES (java.lang.String): final static field
        ELEMENT_NAME (java.lang.String): final static field
        DEVICE_ALIAS (java.lang.String): final static field
        FEC_NAMES (java.lang.String): final static field
        SERVER_NAMES (java.lang.String): final static field
        DEVICE_TYPE_VERSIONS (java.lang.String): final static field
        EXIST_IN_LSA_ONLY (java.lang.String): final static field
    
    """
    ACCELERATOR: typing.ClassVar[str] = ...
    ACCELERATOR_ZONES: typing.ClassVar[str] = ...
    PARTICLE_TRANSFERS: typing.ClassVar[str] = ...
    DEVICE_TYPE_NAMES: typing.ClassVar[str] = ...
    DEVICE_TYPE_NAME_PATTERN: typing.ClassVar[str] = ...
    META_TYPE: typing.ClassVar[str] = ...
    DEVICE_NAMES: typing.ClassVar[str] = ...
    DEVICE_NAME_PATTERN: typing.ClassVar[str] = ...
    MULTIPLEXED: typing.ClassVar[str] = ...
    DEVICE_GROUP_IDS: typing.ClassVar[str] = ...
    DEVICE_GROUP_NAMES: typing.ClassVar[str] = ...
    ELEMENT_NAME: typing.ClassVar[str] = ...
    DEVICE_ALIAS: typing.ClassVar[str] = ...
    FEC_NAMES: typing.ClassVar[str] = ...
    SERVER_NAMES: typing.ClassVar[str] = ...
    DEVICE_TYPE_VERSIONS: typing.ClassVar[str] = ...
    EXIST_IN_LSA_ONLY: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def existInLsaOnly(self) -> bool: ...
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getAcceleratorZones(self) -> java.util.Set[cern.accsoft.commons.domain.zones.AcceleratorZone]: ...
    def getDeviceAliases(self) -> java.util.Set[str]: ...
    def getDeviceGroupIds(self) -> java.util.Set[int]: ...
    def getDeviceGroupNames(self) -> java.util.Set[str]: ...
    def getDeviceNamePattern(self) -> str: ...
    def getDeviceNames(self) -> java.util.Set[str]: ...
    def getDeviceTypeNamePattern(self) -> str: ...
    def getDeviceTypeNames(self) -> java.util.Set[str]: ...
    def getDeviceTypeVersions(self) -> java.util.Set[cern.lsa.domain.devices.DeviceTypeVersion]: ...
    def getElementName(self) -> str: ...
    def getFecNames(self) -> java.util.Set[str]: ...
    def getMetaType(self) -> cern.lsa.domain.devices.DeviceMetaTypeEnum: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    def getServerNames(self) -> java.util.Set[str]: ...
    def isMultiplexed(self) -> bool: ...

class ParameterGroupImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity[cern.lsa.domain.settings.ParameterGroup], cern.lsa.domain.settings.ParameterGroup):
    """
    Java class 'cern.lsa.domain.devices.spi.ParameterGroupImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity
    
        Interfaces:
            cern.lsa.domain.settings.ParameterGroup
    
      Constructors:
        * ParameterGroupImpl()
        * ParameterGroupImpl(long, java.lang.String)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, long: int, string: str): ...
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getCreateDate(self) -> java.util.Date: ...
    def getCreator(self) -> str: ...
    def getDescription(self) -> str: ...
    def setAccelerator(self, accelerator: cern.accsoft.commons.domain.Accelerator) -> None: ...
    def setCreateDate(self, date: java.util.Date) -> None: ...
    def setCreator(self, string: str) -> None: ...
    def setDescription(self, string: str) -> None: ...
    def toString(self) -> str: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.devices.spi")``.

    DeviceGroupImpl: typing.Type[DeviceGroupImpl]
    DeviceGroupsRequestImpl: typing.Type[DeviceGroupsRequestImpl]
    DeviceImpl: typing.Type[DeviceImpl]
    DeviceTypeImpl: typing.Type[DeviceTypeImpl]
    DeviceTypeVersionImpl: typing.Type[DeviceTypeVersionImpl]
    DeviceTypeVersionNumberImpl: typing.Type[DeviceTypeVersionNumberImpl]
    DeviceTypesRequestImpl: typing.Type[DeviceTypesRequestImpl]
    DevicesRequestImpl: typing.Type[DevicesRequestImpl]
    ParameterGroupImpl: typing.Type[ParameterGroupImpl]
    type: cern.lsa.domain.devices.spi.type.__module_protocol__
