from typing import overload
import cern.lsa.domain.devices
import cern.lsa.domain.devices.type
import java.util


class PropertyVersionsRequestBuilder:
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.devices.type.PropertyVersionsRequest: ...
    @classmethod
    def byDeviceTypeName(cls, string: str) -> cern.lsa.domain.devices.type.PropertyVersionsRequest: ...
    @classmethod
    def byDeviceTypeNames(cls, collection: java.util.Collection[str]) -> cern.lsa.domain.devices.type.PropertyVersionsRequest: ...
    @classmethod
    def byDeviceTypeVersion(cls, deviceTypeVersion: cern.lsa.domain.devices.DeviceTypeVersion) -> cern.lsa.domain.devices.type.PropertyVersionsRequest: ...
    @classmethod
    def byDeviceTypeVersions(cls, collection: java.util.Collection[cern.lsa.domain.devices.DeviceTypeVersion]) -> cern.lsa.domain.devices.type.PropertyVersionsRequest: ...
    @classmethod
    @overload
    def byDeviceTypes(cls, deviceType: cern.lsa.domain.devices.DeviceType) -> cern.lsa.domain.devices.type.PropertyVersionsRequest: ...
    @classmethod
    @overload
    def byDeviceTypes(cls, collection: java.util.Collection[cern.lsa.domain.devices.DeviceType]) -> cern.lsa.domain.devices.type.PropertyVersionsRequest: ...
    def setDeviceTypeName(self, string: str) -> 'PropertyVersionsRequestBuilder': ...
    def setDeviceTypeNames(self, collection: java.util.Collection[str]) -> 'PropertyVersionsRequestBuilder': ...
    def setDeviceTypeVersion(self, deviceTypeVersion: cern.lsa.domain.devices.DeviceTypeVersion) -> 'PropertyVersionsRequestBuilder': ...
    def setDeviceTypeVersions(self, collection: java.util.Collection[cern.lsa.domain.devices.DeviceTypeVersion]) -> 'PropertyVersionsRequestBuilder': ...
    def setPropertyName(self, string: str) -> 'PropertyVersionsRequestBuilder': ...
    def setPropertyNames(self, collection: java.util.Collection[str]) -> 'PropertyVersionsRequestBuilder': ...
