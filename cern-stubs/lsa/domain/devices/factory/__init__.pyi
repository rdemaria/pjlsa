import cern.accsoft.commons.domain
import cern.accsoft.commons.domain.particletransfers
import cern.accsoft.commons.domain.zones
import cern.lsa.domain.devices
import cern.lsa.domain.devices.factory.type
import java.util
import typing



class DeviceGroupsRequestBuilder:
    """
    Java class 'cern.lsa.domain.devices.factory.DeviceGroupsRequestBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * DeviceGroupsRequestBuilder()
    
    """
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.devices.DeviceGroupsRequest: ...
    @staticmethod
    def byAccelerator(accelerator: cern.accsoft.commons.domain.Accelerator) -> cern.lsa.domain.devices.DeviceGroupsRequest: ...
    @staticmethod
    def byDeviceGroupNamePattern(string: str) -> cern.lsa.domain.devices.DeviceGroupsRequest: ...
    @staticmethod
    def byDeviceGroupNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.devices.DeviceGroupsRequest: ...
    @staticmethod
    def byDeviceGroupType(deviceGroupType: cern.lsa.domain.devices.DeviceGroupType) -> cern.lsa.domain.devices.DeviceGroupsRequest: ...
    @staticmethod
    def byDeviceGroupTypes(collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.DeviceGroupType], typing.Sequence[cern.lsa.domain.devices.DeviceGroupType]]) -> cern.lsa.domain.devices.DeviceGroupsRequest: ...
    def setAccelerator(self, accelerator: cern.accsoft.commons.domain.Accelerator) -> 'DeviceGroupsRequestBuilder': ...
    def setDeviceGroupName(self, string: str) -> 'DeviceGroupsRequestBuilder': ...
    def setDeviceGroupNamePattern(self, string: str) -> 'DeviceGroupsRequestBuilder': ...
    def setDeviceGroupNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DeviceGroupsRequestBuilder': ...
    def setDeviceGroupType(self, deviceGroupType: cern.lsa.domain.devices.DeviceGroupType) -> 'DeviceGroupsRequestBuilder': ...
    def setDeviceGroupTypes(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.DeviceGroupType], typing.Sequence[cern.lsa.domain.devices.DeviceGroupType]]) -> 'DeviceGroupsRequestBuilder': ...

class DeviceTypesRequestBuilder:
    """
    Java class 'cern.lsa.domain.devices.factory.DeviceTypesRequestBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * DeviceTypesRequestBuilder()
    
      Attributes:
        ALL_DEVICE_TYPES (cern.lsa.domain.devices.DeviceTypesRequest): final static field
    
    """
    ALL_DEVICE_TYPES: typing.ClassVar[cern.lsa.domain.devices.DeviceTypesRequest] = ...
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.devices.DeviceTypesRequest: ...
    @staticmethod
    def byAccelerator(accelerator: cern.accsoft.commons.domain.Accelerator) -> cern.lsa.domain.devices.DeviceTypesRequest: ...
    @staticmethod
    def byDeviceTypeNameImplementation(collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.DeviceTypeImplementation], typing.Sequence[cern.lsa.domain.devices.DeviceTypeImplementation]]) -> cern.lsa.domain.devices.DeviceTypesRequest: ...
    @staticmethod
    def byDeviceTypeNamePattern(string: str) -> cern.lsa.domain.devices.DeviceTypesRequest: ...
    @staticmethod
    def byDeviceTypeNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.devices.DeviceTypesRequest: ...
    def setAccelerator(self, accelerator: cern.accsoft.commons.domain.Accelerator) -> 'DeviceTypesRequestBuilder': ...
    def setDeviceTypeImplementation(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.DeviceTypeImplementation], typing.Sequence[cern.lsa.domain.devices.DeviceTypeImplementation]]) -> 'DeviceTypesRequestBuilder': ...
    def setDeviceTypeNamePattern(self, string: str) -> 'DeviceTypesRequestBuilder': ...
    def setDeviceTypeNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DeviceTypesRequestBuilder': ...
    def setDeviceTypeVersionNumber(self, deviceTypeVersionNumber: cern.lsa.domain.devices.DeviceTypeVersionNumber) -> 'DeviceTypesRequestBuilder': ...

class DevicesRequestBuilder:
    """
    Java class 'cern.lsa.domain.devices.factory.DevicesRequestBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * DevicesRequestBuilder()
    
    """
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byAccelerator(accelerator: cern.accsoft.commons.domain.Accelerator) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byAcceleratorZone(acceleratorZone: cern.accsoft.commons.domain.zones.AcceleratorZone) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byAcceleratorZones(collection: typing.Union[java.util.Collection[cern.accsoft.commons.domain.zones.AcceleratorZone], typing.Sequence[cern.accsoft.commons.domain.zones.AcceleratorZone]]) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceAliases(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceGroup(deviceGroup: cern.lsa.domain.devices.DeviceGroup) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceGroupName(string: str) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceGroupNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceGroups(collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.DeviceGroup], typing.Sequence[cern.lsa.domain.devices.DeviceGroup]]) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceName(string: str) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceNamePattern(string: str) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceTypeName(string: str) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceTypeNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceTypeVersion(deviceTypeVersion: cern.lsa.domain.devices.DeviceTypeVersion) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byDeviceTypeVersions(collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.DeviceTypeVersion], typing.Sequence[cern.lsa.domain.devices.DeviceTypeVersion]]) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byElementName(string: str) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byFecName(string: str) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byFecNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byParticleTransfer(particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byParticleTransfers(collection: typing.Union[java.util.Collection[cern.accsoft.commons.domain.particletransfers.ParticleTransfer], typing.Sequence[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]]) -> cern.lsa.domain.devices.DevicesRequest: ...
    @staticmethod
    def byServerName(string: str) -> cern.lsa.domain.devices.DevicesRequest: ...
    def setAccelerator(self, accelerator: cern.accsoft.commons.domain.Accelerator) -> 'DevicesRequestBuilder': ...
    def setAcceleratorZone(self, acceleratorZone: cern.accsoft.commons.domain.zones.AcceleratorZone) -> 'DevicesRequestBuilder': ...
    def setAcceleratorZones(self, collection: typing.Union[java.util.Collection[cern.accsoft.commons.domain.zones.AcceleratorZone], typing.Sequence[cern.accsoft.commons.domain.zones.AcceleratorZone]]) -> 'DevicesRequestBuilder': ...
    def setDeviceAliases(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DevicesRequestBuilder': ...
    def setDeviceGroup(self, deviceGroup: cern.lsa.domain.devices.DeviceGroup) -> 'DevicesRequestBuilder': ...
    def setDeviceGroupName(self, string: str) -> 'DevicesRequestBuilder': ...
    def setDeviceGroupNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DevicesRequestBuilder': ...
    def setDeviceGroups(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.DeviceGroup], typing.Sequence[cern.lsa.domain.devices.DeviceGroup]]) -> 'DevicesRequestBuilder': ...
    def setDeviceName(self, string: str) -> 'DevicesRequestBuilder': ...
    def setDeviceNamePattern(self, string: str) -> 'DevicesRequestBuilder': ...
    def setDeviceNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DevicesRequestBuilder': ...
    def setDeviceTypeName(self, string: str) -> 'DevicesRequestBuilder': ...
    def setDeviceTypeNamePattern(self, string: str) -> 'DevicesRequestBuilder': ...
    def setDeviceTypeNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DevicesRequestBuilder': ...
    def setDeviceTypeVersion(self, deviceTypeVersion: cern.lsa.domain.devices.DeviceTypeVersion) -> 'DevicesRequestBuilder': ...
    def setDeviceTypeVersions(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.DeviceTypeVersion], typing.Sequence[cern.lsa.domain.devices.DeviceTypeVersion]]) -> 'DevicesRequestBuilder': ...
    def setElementName(self, string: str) -> 'DevicesRequestBuilder': ...
    def setExistInLsaOnly(self, boolean: bool) -> 'DevicesRequestBuilder': ...
    def setFecName(self, string: str) -> 'DevicesRequestBuilder': ...
    def setFecNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DevicesRequestBuilder': ...
    def setMetaType(self, deviceMetaTypeEnum: cern.lsa.domain.devices.DeviceMetaTypeEnum) -> 'DevicesRequestBuilder': ...
    def setMultiplexed(self, boolean: bool) -> 'DevicesRequestBuilder': ...
    def setParticleTransfer(self, particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer) -> 'DevicesRequestBuilder': ...
    def setParticleTransfers(self, collection: typing.Union[java.util.Collection[cern.accsoft.commons.domain.particletransfers.ParticleTransfer], typing.Sequence[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]]) -> 'DevicesRequestBuilder': ...
    def setServerName(self, string: str) -> 'DevicesRequestBuilder': ...
    def setServerNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DevicesRequestBuilder': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.devices.factory")``.

    DeviceGroupsRequestBuilder: typing.Type[DeviceGroupsRequestBuilder]
    DeviceTypesRequestBuilder: typing.Type[DeviceTypesRequestBuilder]
    DevicesRequestBuilder: typing.Type[DevicesRequestBuilder]
    type: cern.lsa.domain.devices.factory.type.__module_protocol__
