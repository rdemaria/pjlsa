import cern.accsoft.commons.util
import cern.accsoft.commons.value
import cern.lsa.domain.commons
import cern.lsa.domain.devices
import cern.lsa.domain.devices.factory.type
import cern.lsa.domain.devices.spi.type
import com.google.common.collect
import java.io
import java.lang
import java.util
import typing



class LsaAddedPropertyFieldSaveRequest:
    """
    Java class 'cern.lsa.domain.devices.type.LsaAddedPropertyFieldSaveRequest'
    
    """
    @staticmethod
    def builder() -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
    def getDescription(self) -> str: ...
    def getDeviceTypeName(self) -> str: ...
    def getExistingPropertyHandling(self) -> 'LsaAddedPropertyFieldSaveRequest.ExistingPropertyHandling': ...
    def getFieldAccess(self) -> cern.lsa.domain.devices.spi.type.PropertyFieldAccess: ...
    def getFieldMaxValue(self) -> float: ...
    def getFieldMinValue(self) -> float: ...
    def getFieldName(self) -> str: ...
    def getFieldUnit(self) -> str: ...
    def getFieldValueType(self) -> cern.accsoft.commons.value.Type: ...
    def getPropertyName(self) -> str: ...
    def getReasonForAdding(self) -> str: ...
    def isPropertyCycleBound(self) -> bool: ...
    def isPropertyMultiplexed(self) -> bool: ...
    def isPropertyReadable(self) -> bool: ...
    def isPropertyWritable(self) -> bool: ...
    class ExistingPropertyHandling(java.lang.Enum['LsaAddedPropertyFieldSaveRequest.ExistingPropertyHandling']):
        """
        Java class 'cern.lsa.domain.devices.type.LsaAddedPropertyFieldSaveRequest$ExistingPropertyHandling'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            THROW (cern.lsa.domain.devices.type.LsaAddedPropertyFieldSaveRequest$ExistingPropertyHandling): final static enum constant
            REUSE_EXISTING_PROPERTY (cern.lsa.domain.devices.type.LsaAddedPropertyFieldSaveRequest$ExistingPropertyHandling): final static enum constant
            ASSERT_EXISTING_PROPERTY_MATCH (cern.lsa.domain.devices.type.LsaAddedPropertyFieldSaveRequest$ExistingPropertyHandling): final static enum constant
            UPDATE_EXISTING_PROPERTY (cern.lsa.domain.devices.type.LsaAddedPropertyFieldSaveRequest$ExistingPropertyHandling): final static enum constant
        
        """
        THROW: typing.ClassVar['LsaAddedPropertyFieldSaveRequest.ExistingPropertyHandling'] = ...
        REUSE_EXISTING_PROPERTY: typing.ClassVar['LsaAddedPropertyFieldSaveRequest.ExistingPropertyHandling'] = ...
        ASSERT_EXISTING_PROPERTY_MATCH: typing.ClassVar['LsaAddedPropertyFieldSaveRequest.ExistingPropertyHandling'] = ...
        UPDATE_EXISTING_PROPERTY: typing.ClassVar['LsaAddedPropertyFieldSaveRequest.ExistingPropertyHandling'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'LsaAddedPropertyFieldSaveRequest.ExistingPropertyHandling': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['LsaAddedPropertyFieldSaveRequest.ExistingPropertyHandling']: ...

class PropertyField(cern.lsa.domain.commons.IdentifiedEntity):
    """
    Java class 'cern.lsa.domain.devices.type.PropertyField'
    
        Interfaces:
            cern.lsa.domain.commons.IdentifiedEntity
    
    """
    @staticmethod
    def builder() -> 'DefaultPropertyField.Builder': ...
    def getDeviceTypeName(self) -> str: ...
    def getFieldName(self) -> str: ...
    def getPropertyName(self) -> str: ...

class PropertyFieldVersion(cern.accsoft.commons.util.Named):
    """
    Java class 'cern.lsa.domain.devices.type.PropertyFieldVersion'
    
        Interfaces:
            cern.accsoft.commons.util.Named
    
    """
    def getDescription(self) -> str: ...
    def getPropertyField(self) -> PropertyField: ...
    def getPropertyVersion(self) -> 'PropertyVersion': ...
    def getValueDescriptor(self) -> cern.accsoft.commons.value.ValueDescriptor: ...
    def getValueType(self) -> cern.accsoft.commons.value.Type: ...
    def isReadable(self) -> bool: ...
    def isWritable(self) -> bool: ...

class PropertyFields:
    """
    Java class 'cern.lsa.domain.devices.type.PropertyFields'
    
        Extends:
            java.lang.Object
    
    """
    @staticmethod
    def buildPropertyFieldDisplayName(string: str, string2: str) -> str: ...

class PropertyFieldsRequest:
    """
    Java class 'cern.lsa.domain.devices.type.PropertyFieldsRequest'
    
    """
    @staticmethod
    def builder() -> 'DefaultPropertyFieldsRequest.Builder': ...
    @staticmethod
    def byDeviceTypeAndProperty(string: str, string2: str) -> 'DefaultPropertyFieldsRequest': ...
    @staticmethod
    def byDeviceTypeName(string: str) -> 'DefaultPropertyFieldsRequest': ...
    @staticmethod
    def byDeviceTypeNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DefaultPropertyFieldsRequest': ...
    @staticmethod
    def byDeviceTypePropertyAndField(string: str, string2: str, string3: str) -> 'DefaultPropertyFieldsRequest': ...
    def getDeviceTypeNames(self) -> java.util.Set[str]: ...
    def getFieldNames(self) -> java.util.Set[str]: ...
    def getPropertyNames(self) -> java.util.Set[str]: ...

class PropertyVersion(cern.accsoft.commons.util.Named):
    """
    Java class 'cern.lsa.domain.devices.type.PropertyVersion'
    
        Interfaces:
            cern.accsoft.commons.util.Named
    
    """
    def getDescription(self) -> str: ...
    def getDeviceTypeVersion(self) -> cern.lsa.domain.devices.DeviceTypeVersion: ...
    def getFields(self) -> java.util.Set[PropertyFieldVersion]: ...
    def getPropertyVisibility(self) -> 'PropertyVersion.PropertyVisibility': ...
    def isAddedInLsa(self) -> bool: ...
    def isCycleBound(self) -> bool: ...
    def isMonitorable(self) -> bool: ...
    def isMultiplexed(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isSupportingPartialSet(self) -> bool: ...
    def isWritable(self) -> bool: ...
    class PropertyVisibility(java.lang.Enum['PropertyVersion.PropertyVisibility']):
        """
        Java class 'cern.lsa.domain.devices.type.PropertyVersion$PropertyVisibility'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            OPERATIONAL (cern.lsa.domain.devices.type.PropertyVersion$PropertyVisibility): final static enum constant
            EXPERT (cern.lsa.domain.devices.type.PropertyVersion$PropertyVisibility): final static enum constant
            DEVELOPMENT (cern.lsa.domain.devices.type.PropertyVersion$PropertyVisibility): final static enum constant
            DEPRECATED (cern.lsa.domain.devices.type.PropertyVersion$PropertyVisibility): final static enum constant
        
        """
        OPERATIONAL: typing.ClassVar['PropertyVersion.PropertyVisibility'] = ...
        EXPERT: typing.ClassVar['PropertyVersion.PropertyVisibility'] = ...
        DEVELOPMENT: typing.ClassVar['PropertyVersion.PropertyVisibility'] = ...
        DEPRECATED: typing.ClassVar['PropertyVersion.PropertyVisibility'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'PropertyVersion.PropertyVisibility': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['PropertyVersion.PropertyVisibility']: ...

class PropertyVersionFilter(cern.accsoft.commons.util.Filters.Filter[PropertyVersion]):
    """
    Java class 'cern.lsa.domain.devices.type.PropertyVersionFilter'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.accsoft.commons.util.Filters.Filter
    
      Constructors:
        * PropertyVersionFilter()
    
    """
    def __init__(self): ...
    def accepts(self, propertyVersion: PropertyVersion) -> bool: ...
    @staticmethod
    def deviceType(deviceType: cern.lsa.domain.devices.DeviceType) -> 'PropertyVersionFilter': ...
    @staticmethod
    def deviceTypeIn(collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.DeviceType], typing.Sequence[cern.lsa.domain.devices.DeviceType]]) -> 'PropertyVersionFilter': ...
    @staticmethod
    def deviceTypeName(string: str) -> 'PropertyVersionFilter': ...
    @staticmethod
    def deviceTypeNameIn(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'PropertyVersionFilter': ...
    @staticmethod
    def multiplexed(boolean: bool) -> 'PropertyVersionFilter': ...
    @staticmethod
    def propertyName(string: str) -> 'PropertyVersionFilter': ...
    @staticmethod
    def propertyNameIn(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'PropertyVersionFilter': ...
    def setDeviceType(self, deviceType: cern.lsa.domain.devices.DeviceType) -> 'PropertyVersionFilter': ...
    def setDeviceTypeName(self, string: str) -> 'PropertyVersionFilter': ...
    def setDeviceTypeNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'PropertyVersionFilter': ...
    def setDeviceTypes(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.DeviceType], typing.Sequence[cern.lsa.domain.devices.DeviceType]]) -> 'PropertyVersionFilter': ...
    def setMultiplexed(self, boolean: bool) -> 'PropertyVersionFilter': ...
    def setPropertyName(self, string: str) -> 'PropertyVersionFilter': ...
    def setPropertyNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'PropertyVersionFilter': ...

class PropertyVersions:
    """
    Java class 'cern.lsa.domain.devices.type.PropertyVersions'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * PropertyVersions()
    
    """
    def __init__(self): ...
    @staticmethod
    def findPropertyVersion(string: str, sortedMap: java.util.SortedMap[cern.lsa.domain.devices.DeviceTypeVersion, java.util.Set[PropertyVersion]], device: cern.lsa.domain.devices.Device) -> PropertyVersion: ...
    @staticmethod
    def isCycleDependent(propertyVersion: PropertyVersion) -> bool: ...
    @staticmethod
    def toDeviceTypeNamesMap(set: java.util.Set[PropertyVersion]) -> java.util.Map[str, java.util.Set[PropertyVersion]]: ...
    @staticmethod
    def toNamesMap(map: typing.Union[java.util.Map[str, java.util.Set[PropertyVersion]], typing.Mapping[str, java.util.Set[PropertyVersion]]]) -> java.util.Map[str, java.util.Map[str, PropertyVersion]]: ...

class PropertyVersionsRequest:
    """
    Java class 'cern.lsa.domain.devices.type.PropertyVersionsRequest'
    
    """
    @staticmethod
    def builder() -> cern.lsa.domain.devices.factory.type.PropertyVersionsRequestBuilder: ...
    def getDeviceTypeNames(self) -> java.util.Set[str]: ...
    def getDeviceTypeVersions(self) -> java.util.Set[cern.lsa.domain.devices.DeviceTypeVersion]: ...
    def getPropertyNames(self) -> java.util.Set[str]: ...

class DefaultLsaAddedPropertyFieldSaveRequest(LsaAddedPropertyFieldSaveRequest, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.devices.type.DefaultLsaAddedPropertyFieldSaveRequest'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.devices.type.LsaAddedPropertyFieldSaveRequest,
            java.io.Serializable
    
    """
    @staticmethod
    def builder() -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
    @staticmethod
    def copyOf(lsaAddedPropertyFieldSaveRequest: LsaAddedPropertyFieldSaveRequest) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDescription(self) -> str: ...
    def getDeviceTypeName(self) -> str: ...
    def getExistingPropertyHandling(self) -> LsaAddedPropertyFieldSaveRequest.ExistingPropertyHandling: ...
    def getFieldAccess(self) -> cern.lsa.domain.devices.spi.type.PropertyFieldAccess: ...
    def getFieldMaxValue(self) -> float: ...
    def getFieldMinValue(self) -> float: ...
    def getFieldName(self) -> str: ...
    def getFieldUnit(self) -> str: ...
    def getFieldValueType(self) -> cern.accsoft.commons.value.Type: ...
    def getPropertyName(self) -> str: ...
    def getReasonForAdding(self) -> str: ...
    def hashCode(self) -> int: ...
    def isPropertyCycleBound(self) -> bool: ...
    def isPropertyMultiplexed(self) -> bool: ...
    def isPropertyReadable(self) -> bool: ...
    def isPropertyWritable(self) -> bool: ...
    def toString(self) -> str: ...
    def withDescription(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withDeviceTypeName(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withExistingPropertyHandling(self, existingPropertyHandling: LsaAddedPropertyFieldSaveRequest.ExistingPropertyHandling) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withFieldAccess(self, propertyFieldAccess: cern.lsa.domain.devices.spi.type.PropertyFieldAccess) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withFieldMaxValue(self, double: float) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withFieldMinValue(self, double: float) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withFieldName(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withFieldUnit(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withFieldValueType(self, type: cern.accsoft.commons.value.Type) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withPropertyCycleBound(self, boolean: bool) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withPropertyMultiplexed(self, boolean: bool) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withPropertyName(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withPropertyReadable(self, boolean: bool) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withPropertyWritable(self, boolean: bool) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    def withReasonForAdding(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
    class Builder:
        """
        Java class 'cern.lsa.domain.devices.type.DefaultLsaAddedPropertyFieldSaveRequest$Builder'
        
            Extends:
                java.lang.Object
        
        """
        def build(self) -> 'DefaultLsaAddedPropertyFieldSaveRequest': ...
        def description(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def deviceTypeName(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def existingPropertyHandling(self, existingPropertyHandling: LsaAddedPropertyFieldSaveRequest.ExistingPropertyHandling) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def fieldAccess(self, propertyFieldAccess: cern.lsa.domain.devices.spi.type.PropertyFieldAccess) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def fieldMaxValue(self, double: float) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def fieldMinValue(self, double: float) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def fieldName(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def fieldUnit(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def fieldValueType(self, type: cern.accsoft.commons.value.Type) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def propertyCycleBound(self, boolean: bool) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def propertyMultiplexed(self, boolean: bool) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def propertyName(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def propertyReadable(self, boolean: bool) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def propertyWritable(self, boolean: bool) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...
        def reasonForAdding(self, string: str) -> 'DefaultLsaAddedPropertyFieldSaveRequest.Builder': ...

class DefaultPropertyField(PropertyField, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.devices.type.DefaultPropertyField'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.devices.type.PropertyField,
            java.io.Serializable
    
    """
    @staticmethod
    def builder() -> 'DefaultPropertyField.Builder': ...
    @staticmethod
    def copyOf(propertyField: PropertyField) -> 'DefaultPropertyField': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDeviceTypeName(self) -> str: ...
    def getFieldName(self) -> str: ...
    def getId(self) -> int: ...
    def getPropertyName(self) -> str: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def withDeviceTypeName(self, string: str) -> 'DefaultPropertyField': ...
    def withFieldName(self, string: str) -> 'DefaultPropertyField': ...
    def withId(self, long: int) -> 'DefaultPropertyField': ...
    def withPropertyName(self, string: str) -> 'DefaultPropertyField': ...
    class Builder:
        """
        Java class 'cern.lsa.domain.devices.type.DefaultPropertyField$Builder'
        
            Extends:
                java.lang.Object
        
        """
        def build(self) -> 'DefaultPropertyField': ...
        def deviceTypeName(self, string: str) -> 'DefaultPropertyField.Builder': ...
        def fieldName(self, string: str) -> 'DefaultPropertyField.Builder': ...
        def id(self, long: int) -> 'DefaultPropertyField.Builder': ...
        def propertyName(self, string: str) -> 'DefaultPropertyField.Builder': ...

class DefaultPropertyFieldsRequest(PropertyFieldsRequest, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.devices.type.DefaultPropertyFieldsRequest'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.devices.type.PropertyFieldsRequest,
            java.io.Serializable
    
    """
    @staticmethod
    def builder() -> 'DefaultPropertyFieldsRequest.Builder': ...
    @staticmethod
    def copyOf(propertyFieldsRequest: PropertyFieldsRequest) -> 'DefaultPropertyFieldsRequest': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDeviceTypeNames(self) -> com.google.common.collect.ImmutableSet[str]: ...
    def getFieldNames(self) -> com.google.common.collect.ImmutableSet[str]: ...
    def getPropertyNames(self) -> com.google.common.collect.ImmutableSet[str]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    @typing.overload
    def withDeviceTypeNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyFieldsRequest': ...
    @typing.overload
    def withDeviceTypeNames(self, stringArray: typing.List[str]) -> 'DefaultPropertyFieldsRequest': ...
    @typing.overload
    def withFieldNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyFieldsRequest': ...
    @typing.overload
    def withFieldNames(self, stringArray: typing.List[str]) -> 'DefaultPropertyFieldsRequest': ...
    @typing.overload
    def withPropertyNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyFieldsRequest': ...
    @typing.overload
    def withPropertyNames(self, stringArray: typing.List[str]) -> 'DefaultPropertyFieldsRequest': ...
    class Builder:
        """
        Java class 'cern.lsa.domain.devices.type.DefaultPropertyFieldsRequest$Builder'
        
            Extends:
                java.lang.Object
        
        """
        def addAllDeviceTypeNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyFieldsRequest.Builder': ...
        def addAllFieldNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyFieldsRequest.Builder': ...
        def addAllPropertyNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyFieldsRequest.Builder': ...
        def addDeviceTypeName(self, string: str) -> 'DefaultPropertyFieldsRequest.Builder': ...
        def addDeviceTypeNames(self, stringArray: typing.List[str]) -> 'DefaultPropertyFieldsRequest.Builder': ...
        def addFieldName(self, string: str) -> 'DefaultPropertyFieldsRequest.Builder': ...
        def addFieldNames(self, stringArray: typing.List[str]) -> 'DefaultPropertyFieldsRequest.Builder': ...
        def addPropertyName(self, string: str) -> 'DefaultPropertyFieldsRequest.Builder': ...
        def addPropertyNames(self, stringArray: typing.List[str]) -> 'DefaultPropertyFieldsRequest.Builder': ...
        def build(self) -> 'DefaultPropertyFieldsRequest': ...
        def deviceTypeNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyFieldsRequest.Builder': ...
        def fieldNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyFieldsRequest.Builder': ...
        def propertyNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyFieldsRequest.Builder': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.devices.type")``.

    DefaultLsaAddedPropertyFieldSaveRequest: typing.Type[DefaultLsaAddedPropertyFieldSaveRequest]
    DefaultPropertyField: typing.Type[DefaultPropertyField]
    DefaultPropertyFieldsRequest: typing.Type[DefaultPropertyFieldsRequest]
    LsaAddedPropertyFieldSaveRequest: typing.Type[LsaAddedPropertyFieldSaveRequest]
    PropertyField: typing.Type[PropertyField]
    PropertyFieldVersion: typing.Type[PropertyFieldVersion]
    PropertyFields: typing.Type[PropertyFields]
    PropertyFieldsRequest: typing.Type[PropertyFieldsRequest]
    PropertyVersion: typing.Type[PropertyVersion]
    PropertyVersionFilter: typing.Type[PropertyVersionFilter]
    PropertyVersions: typing.Type[PropertyVersions]
    PropertyVersionsRequest: typing.Type[PropertyVersionsRequest]
