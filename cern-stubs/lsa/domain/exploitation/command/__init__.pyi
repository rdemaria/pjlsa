import cern.accsoft.commons.domain
import cern.accsoft.commons.util
import cern.accsoft.commons.value
import cern.japc.core
import cern.lsa.domain.commons
import cern.lsa.domain.devices.type
import cern.lsa.domain.exploitation
import cern.lsa.domain.settings
import java.io
import java.lang
import java.util
import typing



class CommandType(java.lang.Enum['CommandType']):
    """
    public enum CommandType extends `Enum <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Enum.html?is-external=true>`<:class:`~cern.lsa.domain.exploitation.command.CommandType`>
    """
    READ: typing.ClassVar['CommandType'] = ...
    STATE: typing.ClassVar['CommandType'] = ...
    WRITE: typing.ClassVar['CommandType'] = ...
    LOAD: typing.ClassVar['CommandType'] = ...
    CHECK_SETTINGS: typing.ClassVar['CommandType'] = ...
    def getType(self) -> str:
        """
            This method should be used to return the type as one-letter character. Since READ.name would not return the name as
            one-letter !!
        
            Returns:
                short form of the access type, used e.g. in the database
        
        
        """
        ...
    def isWriteType(self) -> bool:
        """
            Returns true, if this command type writes something to the hardware, i.e. changes the state of value of the hardware.
            (These calls must be e.g. disabled from test environments)
        
            Returns:
                true, if the type writes something to the hardware, false otherwise
        
        
        """
        ...
    def toString(self) -> str:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CommandType':
        """
            Returns the enum constant of this type with the specified name. The string must match *exactly* an identifier used to
            declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the enum constant to be returned.
        
            Returns:
                the enum constant with the specified name
        
            Raises:
                : if this enum type has no constant with the specified name
                : if the argument is null
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def valueOfType(string: str) -> 'CommandType':
        """
            Returns for a String like W, R.. the corresponding command type
        
            Parameters:
                type (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): 
            Returns:
        
        
        """
        ...
    @staticmethod
    def values() -> typing.List['CommandType']:
        """
            Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to
            iterate over the constants as follows:
        
            .. code-block: java
            
            for (CommandType c : CommandType.values())
                System.out.println(c);
            
        
            Returns:
                an array containing the constants of this enum type, in the order they are declared
        
        
        """
        ...

class HwCommand(cern.accsoft.commons.util.Named):
    """
    public interface HwCommand extends cern.accsoft.commons.util.Named
    
        An hardware command provides a way to interact with an equipment
    """
    def getArgumentParameters(self) -> java.util.Set['HwCommandParameter']: ...
    def getDeviceTypes(self) -> java.util.Set[str]: ...
    def getDisplayMode(self) -> cern.lsa.domain.exploitation.DisplayMode:
        """
            Returns a way to show the results
        
            Returns:
                a way to show the results
        
        
        """
        ...
    def getDisplayName(self) -> str:
        """
            Returns the name used to display this command
        
            Returns:
                the name used to display this command
        
        
        """
        ...
    def getParameter(self, string: str) -> 'HwCommandParameter':
        """
            Returns a specific parameter of this command
        
            Parameters:
                parameterName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): parameter to fetch
        
            Returns:
                parameter if found, otherwise null
        
        
        """
        ...
    def getRank(self) -> int:
        """
            Returns an int giving the rank of the command over others. In order words the command having the smaller rank are the
            most commonly used. The bigger the rank, the more exotic the command.
        
            Returns:
                an int giving the rank of the command over others
        
        
        """
        ...
    def getReadBackCommand(self) -> 'HwCommand': ...
    def getResultParameters(self) -> java.util.Set['HwCommandParameter']: ...
    def getType(self) -> CommandType:
        """
            Returns the type of this command.
        
            Returns:
                the type of this command (read, write, state, etc.)
        
        
        """
        ...
    def isContextDependent(self) -> bool:
        """
            Returns :code:`true`, if it is a property (not-custom) command associated to a cycle-dependent property
        
            Returns:
                :code:`true`, if it is a property (not-custom) command associated to a cycle-dependent property
        
        
        """
        ...
    def isCustomCommand(self) -> bool:
        """
            Returns :code:`true`, if this command is a custom (not property) command
        
        """
        ...

class HwCommandExecutionRequest:
    """
    public interface HwCommandExecutionRequest
    
        This interface represents a request for the execution of a hardware command. The set of devices that the command will be
        executed on can be specified in three ways: by giving device names, hardware group names or system names.
    """
    def areNonResidentContextsEnabled(self) -> bool:
        """
        
            Returns:
                true if the hw command should be executed even if the given contexts are not resident
        
        
        """
        ...
    @staticmethod
    def create(hwCommand: HwCommand) -> 'HwCommandExecutionRequest':
        """
            Create @:class:`~cern.lsa.domain.exploitation.command.HwCommandExecutionRequest` for a
            @:class:`~cern.lsa.domain.exploitation.command.HwCommand`.
        
            Parameters:
                hwCommand (:class:`~cern.lsa.domain.exploitation.command.HwCommand`): HW command definition
        
            Returns:
                HwCommandExecutionRequest
        
        
        """
        ...
    def getCommand(self) -> HwCommand:
        """
            The name of the command to execute
        
            Returns:
                the name of the command to execute
        
        
        """
        ...
    def getContexts(self) -> java.util.Set[cern.lsa.domain.settings.DrivableContext]: ...
    def getDeviceNames(self) -> java.util.List[str]: ...
    def getHardwareGroups(self) -> java.util.List[str]: ...
    def getParameters(self) -> java.util.Map[str, cern.accsoft.commons.value.ImmutableScalar]: ...
    def setContexts(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.DrivableContext], typing.Sequence[cern.lsa.domain.settings.DrivableContext]]) -> None: ...
    def setDeviceNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> None: ...
    def setHardwareGroups(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> None: ...
    def setNonResidentContextsEnabled(self, boolean: bool) -> None: ...
    @typing.overload
    def setParameter(self, string: str, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> None:
        """
            Sets a specific parameter value to the request. Note that constant (fixed) parameters can not be modified.
        
            Parameters:
                parameterName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): parameter to set
                value (cern.accsoft.commons.value.ImmutableScalar): value
        
            Raises:
                :             if the HW command does not support the specified parameter, or an attempt is made to modify a constant (fixed) parameter
        
            Sets a specific parameter value as String, internally the value is converted into the correct data type before setting
            it
        
            Parameters:
                parameterName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): parameter to set
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): value as String
        
        
        """
        ...
    @typing.overload
    def setParameter(self, string: str, string2: str) -> None: ...
    def setParameters(self, map: typing.Union[java.util.Map[str, cern.accsoft.commons.value.ImmutableScalar], typing.Mapping[str, cern.accsoft.commons.value.ImmutableScalar]]) -> None: ...

class HwCommandExecutionResponse:
    """
    public interface HwCommandExecutionResponse
    """
    def getCommand(self) -> HwCommand:
        """
            Returns the hardware command this response belongs to
        
            Returns:
                hw command
        
        
        """
        ...
    def getContexts(self) -> java.util.Set[cern.lsa.domain.settings.DrivableContext]: ...
    def getDeviceNames(self) -> java.util.List[str]: ...
    def getDeviceResponses(self) -> java.util.List[cern.japc.core.FailSafeParameterValue]: ...

class HwCommandParameter(cern.accsoft.commons.util.Named):
    """
    @Immutable public interface HwCommandParameter extends cern.accsoft.commons.util.Named
    
        Represents the parameter of a command
    """
    @staticmethod
    def builder() -> 'DefaultHwCommandParameter.Builder': ...
    def getDefaultValue(self) -> cern.accsoft.commons.value.ImmutableScalar: ...
    def getDisplayName(self) -> str:
        """
            Returns the display name of the command parameter
        
            Returns:
                the display name of the command parameter
        
        
        """
        ...
    def getOrder(self) -> int:
        """
            Returns the ordering number of this parameter.
        
            Returns:
                the ordering number of this parameter
        
        
        """
        ...
    def getValueDescriptor(self) -> cern.accsoft.commons.value.ValueDescriptor:
        """
            Returns the value descriptor of this parameter
        
            Returns:
                value descriptor
        
        
        """
        ...
    def getValueType(self) -> cern.accsoft.commons.value.Type:
        """
            Returns the type of the value of the command parameter (as a java type)
        
            Returns:
                the type of the value of the command parameter (as a java type)
        
        
        """
        ...
    def isArgument(self) -> bool:
        """
            Determines if this parameter is an argument
        
            Returns:
                :code:`true` if this parameter is an argument
        
        
        """
        ...
    def isConstant(self) -> bool:
        """
            Determines if this parameter has a constant value or can be modified (adjusted) by user before the command will be
            executed.
        
            Returns:
                :code:`true` if this parameter has a constant value or can be modified (adjusted) by user before the command will be
                executed
        
        
        """
        ...

class HwCommands:
    """
    public final class HwCommands extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    
        Utility class for hardware commands.
    """
    SIGNATURE_CHECK_PARAMETER_NAME: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` SIGNATURE_CHECK_PARAMETER_NAME
    
        Name of the HW command parameter that determines whether the signature check should be performed or not:
        :code:`signatureCheck`.
    
        Also see:
            :meth:`~constant`
    
    
    """
    NAME_SEPARATOR: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` NAME_SEPARATOR
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    READ_COMMAND_SUFFIX: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` READ_COMMAND_SUFFIX
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    WRITE_COMMAND_SUFFIX: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` WRITE_COMMAND_SUFFIX
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    HARDWARE_CHECK_PARAMETER_NAME: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` HARDWARE_CHECK_PARAMETER_NAME
    
        Name of the HW command parameter that determines whether the hardware check should be performed or not:
        :code:`hardwareCheck`.
    
        Also see:
            :meth:`~constant`
    
    
    """
    @staticmethod
    def buildCommandName(string: str, string2: str, commandType: CommandType) -> str:
        """
            Builds and returns command name based on device type, property name and command type. The name returned has the
            following format :code:`deviceType:propertyName:[READ|WRITE]`.
        
            Parameters:
                deviceType (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): name of associated device type
                propertyName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): name of property
                commandType (:class:`~cern.lsa.domain.exploitation.command.CommandType`): command type
        
        
        """
        ...
    @staticmethod
    def createTemplateArgumentsMap(hwCommand: HwCommand) -> java.util.Map[str, cern.accsoft.commons.value.ImmutableScalar]: ...
    _getContextIndependentCommands__T = typing.TypeVar('_getContextIndependentCommands__T', bound=HwCommand)  # <T>
    @staticmethod
    def getContextIndependentCommands(set: java.util.Set[_getContextIndependentCommands__T]) -> java.util.Set[_getContextIndependentCommands__T]: ...
    @staticmethod
    def getCorrespondingReadCommandName(string: str) -> str:
        """
            For a given command name created from a property, the method returns corresponding read command name.
        
        """
        ...
    _getReadCommands__T = typing.TypeVar('_getReadCommands__T', bound=HwCommand)  # <T>
    @staticmethod
    def getReadCommands(set: java.util.Set[_getReadCommands__T]) -> java.util.Set[_getReadCommands__T]: ...
    _getStateCommands__T = typing.TypeVar('_getStateCommands__T', bound=HwCommand)  # <T>
    @staticmethod
    def getStateCommands(set: java.util.Set[_getStateCommands__T]) -> java.util.Set[_getStateCommands__T]: ...
    _getWriteCommands__T = typing.TypeVar('_getWriteCommands__T', bound=HwCommand)  # <T>
    @staticmethod
    def getWriteCommands(set: java.util.Set[_getWriteCommands__T]) -> java.util.Set[_getWriteCommands__T]: ...
    @staticmethod
    def sortHwCommandParameters(set: java.util.Set[HwCommandParameter]) -> java.util.SortedSet[HwCommandParameter]: ...

class HwCommandsRequest:
    """
    @Immutable public interface HwCommandsRequest
    
        Request object for searching for hardware commands. Please note that accelerator field is mandatory and in future
        releases the builder will disallow building request objects without accelerator set.
    """
    @staticmethod
    def builder() -> 'DefaultHwCommandsRequest.Builder': ...
    @staticmethod
    def byDeviceTypeName(string: str) -> 'DefaultHwCommandsRequest': ...
    @staticmethod
    def byDeviceTypeNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DefaultHwCommandsRequest': ...
    @staticmethod
    def byHwCommandName(string: str) -> 'DefaultHwCommandsRequest': ...
    @staticmethod
    def byHwCommandNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DefaultHwCommandsRequest': ...
    @staticmethod
    def byPropertyName(string: str) -> 'DefaultHwCommandsRequest': ...
    @staticmethod
    def byPropertyNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DefaultHwCommandsRequest': ...
    def check(self) -> None: ...
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getCommandTypes(self) -> java.util.Set[CommandType]: ...
    def getDeviceTypeNames(self) -> java.util.Set[str]: ...
    def getHwCommandNames(self) -> java.util.Set[str]: ...
    def getPropertyNames(self) -> java.util.Set[str]: ...

class CustomHwCommand(HwCommand, cern.lsa.domain.commons.IdentifiedEntity):
    """
    @Immutable public interface CustomHwCommand extends :class:`~cern.lsa.domain.exploitation.command.HwCommand`, :class:`~cern.lsa.domain.commons.IdentifiedEntity`
    """
    @staticmethod
    def builder() -> 'DefaultCustomHwCommand.Builder': ...
    def check(self) -> None: ...
    def isContextDependent(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.command.HwCommand.isContextDependent`
            Returns :code:`true`, if it is a property (not-custom) command associated to a cycle-dependent property
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.isContextDependent`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
            Returns:
                :code:`true`, if it is a property (not-custom) command associated to a cycle-dependent property
        
        
        """
        ...
    def isCustomCommand(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.command.HwCommand.isCustomCommand`
            Returns :code:`true`, if this command is a custom (not property) command
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.isCustomCommand`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
        
        """
        ...

class DefaultHwCommandParameter(HwCommandParameter, java.io.Serializable):
    """
    `@ParametersAreNonnullByDefault <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/ParametersAreNonnullByDefault.html?is-external=true>` `@Generated <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/Generated.html?is-external=true>`("org.immutables.processor.ProxyProcessor") @Immutable `@CheckReturnValue <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/CheckReturnValue.html?is-external=true>` public final class DefaultHwCommandParameter extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
        Immutable implementation of :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`.
    
        Use the builder to create immutable instances: :code:`DefaultHwCommandParameter.builder()`.
    
        Also see:
            :meth:`~serialized`
    """
    @staticmethod
    def builder() -> 'DefaultHwCommandParameter.Builder':
        """
            Creates a builder for :class:`~cern.lsa.domain.exploitation.command.DefaultHwCommandParameter`.
        
            .. code-block: java
            
             DefaultHwCommandParameter.builder()
                .name(String) // required name
                .displayName(String) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getDisplayName`
                .valueType(cern.accsoft.commons.value.Type) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getValueType`
                .argument(boolean) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.isArgument`
                .constant(boolean) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.isConstant`
                .order(int) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getOrder`
                .defaultValue(cern.accsoft.commons.value.ImmutableScalar | null) // nullable :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getDefaultValue`
                .valueDescriptor(cern.accsoft.commons.value.ValueDescriptor) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getValueDescriptor`
                .build();
             
        
            Returns:
                A new DefaultHwCommandParameter builder
        
        
        """
        ...
    @staticmethod
    def copyOf(hwCommandParameter: HwCommandParameter) -> 'DefaultHwCommandParameter':
        """
            Creates an immutable copy of a :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter` value. Uses accessors
            to get values to initialize the new immutable instance. If an instance is already immutable, it is returned as is.
        
            Parameters:
                instance (:class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`): The instance to copy
        
            Returns:
                A copied immutable HwCommandParameter instance
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDefaultValue(self) -> cern.accsoft.commons.value.ImmutableScalar: ...
    def getDisplayName(self) -> str:
        """
            Returns the display name of the command parameter
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getDisplayName`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`
        
            Returns:
                the display name of the command parameter
        
        
        """
        ...
    def getName(self) -> str:
        """
        
            Specified by:
                :code:`getName` in interface :code:`cern.accsoft.commons.util.Named`
        
            Returns:
                The value of the :code:`name` attribute
        
        
        """
        ...
    def getOrder(self) -> int:
        """
            Returns the ordering number of this parameter.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getOrder`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`
        
            Returns:
                the ordering number of this parameter
        
        
        """
        ...
    def getValueDescriptor(self) -> cern.accsoft.commons.value.ValueDescriptor:
        """
            Returns the value descriptor of this parameter
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getValueDescriptor`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`
        
            Returns:
                value descriptor
        
        
        """
        ...
    def getValueType(self) -> cern.accsoft.commons.value.Type:
        """
            Returns the type of the value of the command parameter (as a java type)
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getValueType`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`
        
            Returns:
                the type of the value of the command parameter (as a java type)
        
        
        """
        ...
    def hashCode(self) -> int:
        """
            Computes a hash code from attributes: :code:`name`, :code:`displayName`, :code:`valueType`, :code:`argument`,
            :code:`constant`, :code:`order`, :code:`defaultValue`, :code:`valueDescriptor`.
        
            Overrides:
                 in class 
        
            Returns:
                hashCode value
        
        
        """
        ...
    def isArgument(self) -> bool:
        """
            Determines if this parameter is an argument
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.isArgument`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`
        
            Returns:
                :code:`true` if this parameter is an argument
        
        
        """
        ...
    def isConstant(self) -> bool:
        """
            Determines if this parameter has a constant value or can be modified (adjusted) by user before the command will be
            executed.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.isConstant`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`
        
            Returns:
                :code:`true` if this parameter has a constant value or can be modified (adjusted) by user before the command will be
                executed
        
        
        """
        ...
    def toString(self) -> str:
        """
            Prints the immutable value :code:`HwCommandParameter` with attribute values.
        
            Overrides:
                 in class 
        
            Returns:
                A string representation of the value
        
        
        """
        ...
    def withArgument(self, boolean: bool) -> 'DefaultHwCommandParameter':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.isArgument` attribute. A value equality check is used to
            prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                value (boolean): A new value for argument
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withConstant(self, boolean: bool) -> 'DefaultHwCommandParameter':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.isConstant` attribute. A value equality check is used to
            prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                value (boolean): A new value for constant
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withDefaultValue(self, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> 'DefaultHwCommandParameter': ...
    def withDisplayName(self, string: str) -> 'DefaultHwCommandParameter':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getDisplayName` attribute. An equals check used to
            prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): A new value for displayName
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withName(self, string: str) -> 'DefaultHwCommandParameter':
        """
            Copy the current immutable object by setting a value for the :code:`name` attribute. An equals check used to prevent
            copying of the same value by returning :code:`this`.
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): A new value for name
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withOrder(self, int: int) -> 'DefaultHwCommandParameter':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getOrder` attribute. A value equality check is used to
            prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                value (int): A new value for order
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withValueDescriptor(self, valueDescriptor: cern.accsoft.commons.value.ValueDescriptor) -> 'DefaultHwCommandParameter':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getValueDescriptor` attribute. A shallow reference
            equality check is used to prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                value (cern.accsoft.commons.value.ValueDescriptor): A new value for valueDescriptor
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withValueType(self, type: cern.accsoft.commons.value.Type) -> 'DefaultHwCommandParameter':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommandParameter.getValueType` attribute. A value equality check is used
            to prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                value (cern.accsoft.commons.value.Type): A new value for valueType
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    class Builder:
        def argument(self, boolean: bool) -> 'DefaultHwCommandParameter.Builder': ...
        def build(self) -> 'DefaultHwCommandParameter': ...
        def constant(self, boolean: bool) -> 'DefaultHwCommandParameter.Builder': ...
        def defaultValue(self, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> 'DefaultHwCommandParameter.Builder': ...
        def displayName(self, string: str) -> 'DefaultHwCommandParameter.Builder': ...
        def name(self, string: str) -> 'DefaultHwCommandParameter.Builder': ...
        def order(self, int: int) -> 'DefaultHwCommandParameter.Builder': ...
        def valueDescriptor(self, valueDescriptor: cern.accsoft.commons.value.ValueDescriptor) -> 'DefaultHwCommandParameter.Builder': ...
        def valueType(self, type: cern.accsoft.commons.value.Type) -> 'DefaultHwCommandParameter.Builder': ...

class DefaultHwCommandsRequest(HwCommandsRequest, java.io.Serializable):
    """
    `@ParametersAreNonnullByDefault <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/ParametersAreNonnullByDefault.html?is-external=true>` `@Generated <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/Generated.html?is-external=true>`("org.immutables.processor.ProxyProcessor") @Immutable `@CheckReturnValue <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/CheckReturnValue.html?is-external=true>` public final class DefaultHwCommandsRequest extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements :class:`~cern.lsa.domain.exploitation.command.HwCommandsRequest`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
        Immutable implementation of :class:`~cern.lsa.domain.exploitation.command.HwCommandsRequest`.
    
        Use the builder to create immutable instances: :code:`DefaultHwCommandsRequest.builder()`.
    
        Also see:
            :meth:`~serialized`
    """
    @staticmethod
    def builder() -> 'DefaultHwCommandsRequest.Builder':
        """
            Creates a builder for :class:`~cern.lsa.domain.exploitation.command.DefaultHwCommandsRequest`.
        
            .. code-block: java
            
             DefaultHwCommandsRequest.builder()
                .hwCommandNames(Set<String> | null) // nullable :meth:`~cern.lsa.domain.exploitation.command.HwCommandsRequest.getHwCommandNames`
                .deviceTypeNames(Set<String> | null) // nullable :meth:`~cern.lsa.domain.exploitation.command.HwCommandsRequest.getDeviceTypeNames`
                .accelerator(cern.accsoft.commons.domain.Accelerator | null) // nullable :meth:`~cern.lsa.domain.exploitation.command.HwCommandsRequest.getAccelerator`
                .commandTypes(Set<cern.lsa.domain.exploitation.command.CommandType> | null) // nullable :meth:`~cern.lsa.domain.exploitation.command.HwCommandsRequest.getCommandTypes`
                .propertyNames(Set<String> | null) // nullable :meth:`~cern.lsa.domain.exploitation.command.HwCommandsRequest.getPropertyNames`
                .build();
             
        
            Returns:
                A new DefaultHwCommandsRequest builder
        
        
        """
        ...
    @staticmethod
    def copyOf(hwCommandsRequest: HwCommandsRequest) -> 'DefaultHwCommandsRequest':
        """
            Creates an immutable copy of a :class:`~cern.lsa.domain.exploitation.command.HwCommandsRequest` value. Uses accessors to
            get values to initialize the new immutable instance. If an instance is already immutable, it is returned as is.
        
            Parameters:
                instance (:class:`~cern.lsa.domain.exploitation.command.HwCommandsRequest`): The instance to copy
        
            Returns:
                A copied immutable HwCommandsRequest instance
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getCommandTypes(self) -> java.util.Set[CommandType]: ...
    def getDeviceTypeNames(self) -> java.util.Set[str]: ...
    def getHwCommandNames(self) -> java.util.Set[str]: ...
    def getPropertyNames(self) -> java.util.Set[str]: ...
    def hashCode(self) -> int:
        """
            Computes a hash code from attributes: :code:`hwCommandNames`, :code:`deviceTypeNames`, :code:`accelerator`,
            :code:`commandTypes`, :code:`propertyNames`.
        
            Overrides:
                 in class 
        
            Returns:
                hashCode value
        
        
        """
        ...
    def toString(self) -> str:
        """
            Prints the immutable value :code:`HwCommandsRequest` with attribute values.
        
            Overrides:
                 in class 
        
            Returns:
                A string representation of the value
        
        
        """
        ...
    def withAccelerator(self, accelerator: cern.accsoft.commons.domain.Accelerator) -> 'DefaultHwCommandsRequest': ...
    @typing.overload
    def withCommandTypes(self, commandTypeArray: typing.List[CommandType]) -> 'DefaultHwCommandsRequest': ...
    @typing.overload
    def withCommandTypes(self, iterable: java.lang.Iterable[CommandType]) -> 'DefaultHwCommandsRequest': ...
    @typing.overload
    def withDeviceTypeNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultHwCommandsRequest': ...
    @typing.overload
    def withDeviceTypeNames(self, stringArray: typing.List[str]) -> 'DefaultHwCommandsRequest': ...
    @typing.overload
    def withHwCommandNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultHwCommandsRequest': ...
    @typing.overload
    def withHwCommandNames(self, stringArray: typing.List[str]) -> 'DefaultHwCommandsRequest': ...
    @typing.overload
    def withPropertyNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultHwCommandsRequest': ...
    @typing.overload
    def withPropertyNames(self, stringArray: typing.List[str]) -> 'DefaultHwCommandsRequest': ...
    class Builder:
        def accelerator(self, accelerator: cern.accsoft.commons.domain.Accelerator) -> 'DefaultHwCommandsRequest.Builder': ...
        def addAllCommandTypes(self, iterable: java.lang.Iterable[CommandType]) -> 'DefaultHwCommandsRequest.Builder': ...
        def addAllDeviceTypeNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultHwCommandsRequest.Builder': ...
        def addAllHwCommandNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultHwCommandsRequest.Builder': ...
        def addAllPropertyNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultHwCommandsRequest.Builder': ...
        def addCommandType(self, commandType: CommandType) -> 'DefaultHwCommandsRequest.Builder': ...
        def addCommandTypes(self, commandTypeArray: typing.List[CommandType]) -> 'DefaultHwCommandsRequest.Builder': ...
        def addDeviceTypeName(self, string: str) -> 'DefaultHwCommandsRequest.Builder': ...
        def addDeviceTypeNames(self, stringArray: typing.List[str]) -> 'DefaultHwCommandsRequest.Builder': ...
        def addHwCommandName(self, string: str) -> 'DefaultHwCommandsRequest.Builder': ...
        def addHwCommandNames(self, stringArray: typing.List[str]) -> 'DefaultHwCommandsRequest.Builder': ...
        def addPropertyName(self, string: str) -> 'DefaultHwCommandsRequest.Builder': ...
        def addPropertyNames(self, stringArray: typing.List[str]) -> 'DefaultHwCommandsRequest.Builder': ...
        def build(self) -> 'DefaultHwCommandsRequest': ...
        def commandTypes(self, iterable: java.lang.Iterable[CommandType]) -> 'DefaultHwCommandsRequest.Builder': ...
        def deviceTypeNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultHwCommandsRequest.Builder': ...
        def hwCommandNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultHwCommandsRequest.Builder': ...
        def propertyNames(self, iterable: java.lang.Iterable[str]) -> 'DefaultHwCommandsRequest.Builder': ...

class PropertyHwCommand(HwCommand):
    """
    @Immutable public interface PropertyHwCommand extends :class:`~cern.lsa.domain.exploitation.command.HwCommand`
    """
    DEFAULT_RANK: typing.ClassVar[int] = ...
    """
    static final int DEFAULT_RANK
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    @staticmethod
    def builder() -> 'DefaultPropertyHwCommand.Builder': ...
    def check(self) -> None: ...
    def getDisplayMode(self) -> cern.lsa.domain.exploitation.DisplayMode:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDisplayMode`
            Returns a way to show the results
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDisplayMode`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
            Returns:
                a way to show the results
        
        
        """
        ...
    def getPropertyVersion(self) -> cern.lsa.domain.devices.type.PropertyVersion: ...
    def getRank(self) -> int:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getRank`
            Returns an int giving the rank of the command over others. In order words the command having the smaller rank are the
            most commonly used. The bigger the rank, the more exotic the command.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getRank`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
            Returns:
                an int giving the rank of the command over others
        
        
        """
        ...
    def isCustomCommand(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.command.HwCommand.isCustomCommand`
            Returns :code:`true`, if this command is a custom (not property) command
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.isCustomCommand`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
        
        """
        ...

class DefaultCustomHwCommand(CustomHwCommand, java.io.Serializable):
    """
    `@ParametersAreNonnullByDefault <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/ParametersAreNonnullByDefault.html?is-external=true>` `@Generated <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/Generated.html?is-external=true>`("org.immutables.processor.ProxyProcessor") @Immutable `@CheckReturnValue <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/CheckReturnValue.html?is-external=true>` public final class DefaultCustomHwCommand extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements :class:`~cern.lsa.domain.exploitation.command.CustomHwCommand`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
        Immutable implementation of :class:`~cern.lsa.domain.exploitation.command.CustomHwCommand`.
    
        Use the builder to create immutable instances: :code:`DefaultCustomHwCommand.builder()`.
    
        Also see:
            :meth:`~serialized`
    """
    @staticmethod
    def builder() -> 'DefaultCustomHwCommand.Builder':
        """
            Creates a builder for :class:`~cern.lsa.domain.exploitation.command.DefaultCustomHwCommand`.
        
            .. code-block: java
            
             DefaultCustomHwCommand.builder()
                .name(String) // required name
                .displayName(String) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDisplayName`
                .addDeviceType|addAllDeviceTypes(String) // :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDeviceTypes` elements
                .type(cern.lsa.domain.exploitation.command.CommandType) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getType`
                .rank(int) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getRank`
                .displayMode(cern.lsa.domain.exploitation.DisplayMode) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDisplayMode`
                .addResultParameter|addAllResultParameters(cern.lsa.domain.exploitation.command.HwCommandParameter) // :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getResultParameters` elements
                .addArgumentParameter|addAllArgumentParameters(cern.lsa.domain.exploitation.command.HwCommandParameter) // :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getArgumentParameters` elements
                .readBackCommand(cern.lsa.domain.exploitation.command.HwCommand | null) // nullable :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getReadBackCommand`
                .id(long) // required :meth:`~cern.lsa.domain.commons.IdentifiedEntity.getId`
                .build();
             
        
            Returns:
                A new DefaultCustomHwCommand builder
        
        
        """
        ...
    @staticmethod
    def copyOf(customHwCommand: CustomHwCommand) -> 'DefaultCustomHwCommand':
        """
            Creates an immutable copy of a :class:`~cern.lsa.domain.exploitation.command.CustomHwCommand` value. Uses accessors to
            get values to initialize the new immutable instance. If an instance is already immutable, it is returned as is.
        
            Parameters:
                instance (:class:`~cern.lsa.domain.exploitation.command.CustomHwCommand`): The instance to copy
        
            Returns:
                A copied immutable CustomHwCommand instance
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArgumentParameters(self) -> java.util.Set[HwCommandParameter]: ...
    def getDeviceTypes(self) -> java.util.Set[str]: ...
    def getDisplayMode(self) -> cern.lsa.domain.exploitation.DisplayMode:
        """
            Returns a way to show the results
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDisplayMode`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
            Returns:
                a way to show the results
        
        
        """
        ...
    def getDisplayName(self) -> str:
        """
            Returns the name used to display this command
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDisplayName`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
            Returns:
                the name used to display this command
        
        
        """
        ...
    def getId(self) -> int:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.commons.IdentifiedEntity.getId` in interface :class:`~cern.lsa.domain.commons.IdentifiedEntity`
        
            Returns:
                identifier of this entity, any long number - positive, negative or 0
        
        
        """
        ...
    def getName(self) -> str:
        """
        
            Specified by:
                :code:`getName` in interface :code:`cern.accsoft.commons.util.Named`
        
            Returns:
                The value of the :code:`name` attribute
        
        
        """
        ...
    def getRank(self) -> int:
        """
            Returns an int giving the rank of the command over others. In order words the command having the smaller rank are the
            most commonly used. The bigger the rank, the more exotic the command.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getRank`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
            Returns:
                an int giving the rank of the command over others
        
        
        """
        ...
    def getReadBackCommand(self) -> HwCommand: ...
    def getResultParameters(self) -> java.util.Set[HwCommandParameter]: ...
    def getType(self) -> CommandType:
        """
            Returns the type of this command.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getType`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
            Returns:
                the type of this command (read, write, state, etc.)
        
        
        """
        ...
    def hashCode(self) -> int:
        """
            Computes a hash code from attributes: :code:`name`, :code:`displayName`, :code:`deviceTypes`, :code:`type`,
            :code:`rank`, :code:`displayMode`, :code:`resultParameters`, :code:`argumentParameters`, :code:`readBackCommand`,
            :code:`id`.
        
            Overrides:
                 in class 
        
            Returns:
                hashCode value
        
        
        """
        ...
    def toString(self) -> str:
        """
            Prints the immutable value :code:`CustomHwCommand` with attribute values.
        
            Overrides:
                 in class 
        
            Returns:
                A string representation of the value
        
        
        """
        ...
    @typing.overload
    def withArgumentParameters(self, hwCommandParameterArray: typing.List[HwCommandParameter]) -> 'DefaultCustomHwCommand':
        """
            Copy the current immutable object with elements that replace the content of
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getArgumentParameters`.
        
            Parameters:
                elements (:class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`...): The elements to set
        
            Returns:
                A modified copy of :code:`this` object
        
        public final :class:`~cern.lsa.domain.exploitation.command.DefaultCustomHwCommand` withArgumentParameters (`Iterable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Iterable.html?is-external=true>`<? extends :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`> elements)
        
            Copy the current immutable object with elements that replace the content of
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getArgumentParameters`. A shallow reference equality check is
            used to prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                elements (`Iterable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Iterable.html?is-external=true>`<? extends :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`> elements): An iterable of argumentParameters elements to set
        
            Returns:
                A modified copy of :code:`this` object
        
        
        """
        ...
    @typing.overload
    def withArgumentParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultCustomHwCommand': ...
    @typing.overload
    def withDeviceTypes(self, iterable: java.lang.Iterable[str]) -> 'DefaultCustomHwCommand': ...
    @typing.overload
    def withDeviceTypes(self, stringArray: typing.List[str]) -> 'DefaultCustomHwCommand': ...
    def withDisplayMode(self, displayMode: cern.lsa.domain.exploitation.DisplayMode) -> 'DefaultCustomHwCommand':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDisplayMode` attribute. A shallow reference equality check is
            used to prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                value (:class:`~cern.lsa.domain.exploitation.DisplayMode`): A new value for displayMode
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withDisplayName(self, string: str) -> 'DefaultCustomHwCommand':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDisplayName` attribute. An equals check used to prevent
            copying of the same value by returning :code:`this`.
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): A new value for displayName
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withId(self, long: int) -> 'DefaultCustomHwCommand':
        """
            Copy the current immutable object by setting a value for the :meth:`~cern.lsa.domain.commons.IdentifiedEntity.getId`
            attribute. A value equality check is used to prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                value (long): A new value for id
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withName(self, string: str) -> 'DefaultCustomHwCommand':
        """
            Copy the current immutable object by setting a value for the :code:`name` attribute. An equals check used to prevent
            copying of the same value by returning :code:`this`.
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): A new value for name
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withRank(self, int: int) -> 'DefaultCustomHwCommand':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getRank` attribute. A value equality check is used to prevent
            copying of the same value by returning :code:`this`.
        
            Parameters:
                value (int): A new value for rank
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withReadBackCommand(self, hwCommand: HwCommand) -> 'DefaultCustomHwCommand': ...
    @typing.overload
    def withResultParameters(self, hwCommandParameterArray: typing.List[HwCommandParameter]) -> 'DefaultCustomHwCommand':
        """
            Copy the current immutable object with elements that replace the content of
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getResultParameters`.
        
            Parameters:
                elements (:class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`...): The elements to set
        
            Returns:
                A modified copy of :code:`this` object
        
        public final :class:`~cern.lsa.domain.exploitation.command.DefaultCustomHwCommand` withResultParameters (`Iterable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Iterable.html?is-external=true>`<? extends :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`> elements)
        
            Copy the current immutable object with elements that replace the content of
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getResultParameters`. A shallow reference equality check is used
            to prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                elements (`Iterable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Iterable.html?is-external=true>`<? extends :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`> elements): An iterable of resultParameters elements to set
        
            Returns:
                A modified copy of :code:`this` object
        
        
        """
        ...
    @typing.overload
    def withResultParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultCustomHwCommand': ...
    def withType(self, commandType: CommandType) -> 'DefaultCustomHwCommand':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getType` attribute. A value equality check is used to prevent
            copying of the same value by returning :code:`this`.
        
            Parameters:
                value (:class:`~cern.lsa.domain.exploitation.command.CommandType`): A new value for type
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    class Builder:
        def addAllArgumentParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultCustomHwCommand.Builder': ...
        def addAllDeviceTypes(self, iterable: java.lang.Iterable[str]) -> 'DefaultCustomHwCommand.Builder': ...
        def addAllResultParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultCustomHwCommand.Builder': ...
        def addArgumentParameter(self, hwCommandParameter: HwCommandParameter) -> 'DefaultCustomHwCommand.Builder': ...
        def addArgumentParameters(self, hwCommandParameterArray: typing.List[HwCommandParameter]) -> 'DefaultCustomHwCommand.Builder': ...
        def addDeviceType(self, string: str) -> 'DefaultCustomHwCommand.Builder': ...
        def addDeviceTypes(self, stringArray: typing.List[str]) -> 'DefaultCustomHwCommand.Builder': ...
        def addResultParameter(self, hwCommandParameter: HwCommandParameter) -> 'DefaultCustomHwCommand.Builder': ...
        def addResultParameters(self, hwCommandParameterArray: typing.List[HwCommandParameter]) -> 'DefaultCustomHwCommand.Builder': ...
        def argumentParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultCustomHwCommand.Builder': ...
        def build(self) -> 'DefaultCustomHwCommand': ...
        def deviceTypes(self, iterable: java.lang.Iterable[str]) -> 'DefaultCustomHwCommand.Builder': ...
        def displayMode(self, displayMode: cern.lsa.domain.exploitation.DisplayMode) -> 'DefaultCustomHwCommand.Builder': ...
        def displayName(self, string: str) -> 'DefaultCustomHwCommand.Builder': ...
        def id(self, long: int) -> 'DefaultCustomHwCommand.Builder': ...
        def name(self, string: str) -> 'DefaultCustomHwCommand.Builder': ...
        def rank(self, int: int) -> 'DefaultCustomHwCommand.Builder': ...
        def readBackCommand(self, hwCommand: HwCommand) -> 'DefaultCustomHwCommand.Builder': ...
        def resultParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultCustomHwCommand.Builder': ...
        def type(self, commandType: CommandType) -> 'DefaultCustomHwCommand.Builder': ...

class DefaultPropertyHwCommand(PropertyHwCommand, java.io.Serializable):
    """
    `@ParametersAreNonnullByDefault <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/ParametersAreNonnullByDefault.html?is-external=true>` `@Generated <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/Generated.html?is-external=true>`("org.immutables.processor.ProxyProcessor") @Immutable `@CheckReturnValue <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/CheckReturnValue.html?is-external=true>` public final class DefaultPropertyHwCommand extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements :class:`~cern.lsa.domain.exploitation.command.PropertyHwCommand`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
        Immutable implementation of :class:`~cern.lsa.domain.exploitation.command.PropertyHwCommand`.
    
        Use the builder to create immutable instances: :code:`DefaultPropertyHwCommand.builder()`.
    
        Also see:
            :meth:`~serialized`
    """
    @staticmethod
    def builder() -> 'DefaultPropertyHwCommand.Builder':
        """
            Creates a builder for :class:`~cern.lsa.domain.exploitation.command.DefaultPropertyHwCommand`.
        
            .. code-block: java
            
             DefaultPropertyHwCommand.builder()
                .name(String) // required name
                .displayName(String) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDisplayName`
                .addDeviceType|addAllDeviceTypes(String) // :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDeviceTypes` elements
                .contextDependent(boolean) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommand.isContextDependent`
                .type(cern.lsa.domain.exploitation.command.CommandType) // required :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getType`
                .addResultParameter|addAllResultParameters(cern.lsa.domain.exploitation.command.HwCommandParameter) // :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getResultParameters` elements
                .addArgumentParameter|addAllArgumentParameters(cern.lsa.domain.exploitation.command.HwCommandParameter) // :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getArgumentParameters` elements
                .readBackCommand(cern.lsa.domain.exploitation.command.HwCommand | null) // nullable :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getReadBackCommand`
                .propertyVersion(cern.lsa.domain.devices.type.PropertyVersion) // required :meth:`~cern.lsa.domain.exploitation.command.PropertyHwCommand.getPropertyVersion`
                .build();
             
        
            Returns:
                A new DefaultPropertyHwCommand builder
        
        
        """
        ...
    @staticmethod
    def copyOf(propertyHwCommand: PropertyHwCommand) -> 'DefaultPropertyHwCommand':
        """
            Creates an immutable copy of a :class:`~cern.lsa.domain.exploitation.command.PropertyHwCommand` value. Uses accessors to
            get values to initialize the new immutable instance. If an instance is already immutable, it is returned as is.
        
            Parameters:
                instance (:class:`~cern.lsa.domain.exploitation.command.PropertyHwCommand`): The instance to copy
        
            Returns:
                A copied immutable PropertyHwCommand instance
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArgumentParameters(self) -> java.util.Set[HwCommandParameter]: ...
    def getDeviceTypes(self) -> java.util.Set[str]: ...
    def getDisplayName(self) -> str:
        """
            Returns the name used to display this command
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDisplayName`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
            Returns:
                the name used to display this command
        
        
        """
        ...
    def getName(self) -> str:
        """
        
            Specified by:
                :code:`getName` in interface :code:`cern.accsoft.commons.util.Named`
        
            Returns:
                The value of the :code:`name` attribute
        
        
        """
        ...
    def getPropertyVersion(self) -> cern.lsa.domain.devices.type.PropertyVersion:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.PropertyHwCommand.getPropertyVersion`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.PropertyHwCommand`
        
            Returns:
                The value of the :code:`propertyVersion` attribute
        
        
        """
        ...
    def getReadBackCommand(self) -> HwCommand: ...
    def getResultParameters(self) -> java.util.Set[HwCommandParameter]: ...
    def getType(self) -> CommandType:
        """
            Returns the type of this command.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getType`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
            Returns:
                the type of this command (read, write, state, etc.)
        
        
        """
        ...
    def hashCode(self) -> int:
        """
            Computes a hash code from attributes: :code:`name`, :code:`displayName`, :code:`deviceTypes`, :code:`contextDependent`,
            :code:`type`, :code:`resultParameters`, :code:`argumentParameters`, :code:`readBackCommand`, :code:`propertyVersion`.
        
            Overrides:
                 in class 
        
            Returns:
                hashCode value
        
        
        """
        ...
    def isContextDependent(self) -> bool:
        """
            Returns :code:`true`, if it is a property (not-custom) command associated to a cycle-dependent property
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.command.HwCommand.isContextDependent`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.command.HwCommand`
        
            Returns:
                :code:`true`, if it is a property (not-custom) command associated to a cycle-dependent property
        
        
        """
        ...
    def toString(self) -> str:
        """
            Prints the immutable value :code:`PropertyHwCommand` with attribute values.
        
            Overrides:
                 in class 
        
            Returns:
                A string representation of the value
        
        
        """
        ...
    @typing.overload
    def withArgumentParameters(self, hwCommandParameterArray: typing.List[HwCommandParameter]) -> 'DefaultPropertyHwCommand':
        """
            Copy the current immutable object with elements that replace the content of
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getArgumentParameters`.
        
            Parameters:
                elements (:class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`...): The elements to set
        
            Returns:
                A modified copy of :code:`this` object
        
        public final :class:`~cern.lsa.domain.exploitation.command.DefaultPropertyHwCommand` withArgumentParameters (`Iterable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Iterable.html?is-external=true>`<? extends :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`> elements)
        
            Copy the current immutable object with elements that replace the content of
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getArgumentParameters`. A shallow reference equality check is
            used to prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                elements (`Iterable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Iterable.html?is-external=true>`<? extends :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`> elements): An iterable of argumentParameters elements to set
        
            Returns:
                A modified copy of :code:`this` object
        
        
        """
        ...
    @typing.overload
    def withArgumentParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultPropertyHwCommand': ...
    def withContextDependent(self, boolean: bool) -> 'DefaultPropertyHwCommand':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.isContextDependent` attribute. A value equality check is used to
            prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                value (boolean): A new value for contextDependent
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    @typing.overload
    def withDeviceTypes(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyHwCommand': ...
    @typing.overload
    def withDeviceTypes(self, stringArray: typing.List[str]) -> 'DefaultPropertyHwCommand': ...
    def withDisplayName(self, string: str) -> 'DefaultPropertyHwCommand':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getDisplayName` attribute. An equals check used to prevent
            copying of the same value by returning :code:`this`.
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): A new value for displayName
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withName(self, string: str) -> 'DefaultPropertyHwCommand':
        """
            Copy the current immutable object by setting a value for the :code:`name` attribute. An equals check used to prevent
            copying of the same value by returning :code:`this`.
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): A new value for name
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withPropertyVersion(self, propertyVersion: cern.lsa.domain.devices.type.PropertyVersion) -> 'DefaultPropertyHwCommand':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.PropertyHwCommand.getPropertyVersion` attribute. A shallow reference
            equality check is used to prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                value (:class:`~cern.lsa.domain.devices.type.PropertyVersion`): A new value for propertyVersion
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    def withReadBackCommand(self, hwCommand: HwCommand) -> 'DefaultPropertyHwCommand': ...
    @typing.overload
    def withResultParameters(self, hwCommandParameterArray: typing.List[HwCommandParameter]) -> 'DefaultPropertyHwCommand':
        """
            Copy the current immutable object with elements that replace the content of
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getResultParameters`.
        
            Parameters:
                elements (:class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`...): The elements to set
        
            Returns:
                A modified copy of :code:`this` object
        
        public final :class:`~cern.lsa.domain.exploitation.command.DefaultPropertyHwCommand` withResultParameters (`Iterable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Iterable.html?is-external=true>`<? extends :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`> elements)
        
            Copy the current immutable object with elements that replace the content of
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getResultParameters`. A shallow reference equality check is used
            to prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                elements (`Iterable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Iterable.html?is-external=true>`<? extends :class:`~cern.lsa.domain.exploitation.command.HwCommandParameter`> elements): An iterable of resultParameters elements to set
        
            Returns:
                A modified copy of :code:`this` object
        
        
        """
        ...
    @typing.overload
    def withResultParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultPropertyHwCommand': ...
    def withType(self, commandType: CommandType) -> 'DefaultPropertyHwCommand':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.exploitation.command.HwCommand.getType` attribute. A value equality check is used to prevent
            copying of the same value by returning :code:`this`.
        
            Parameters:
                value (:class:`~cern.lsa.domain.exploitation.command.CommandType`): A new value for type
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    class Builder:
        def addAllArgumentParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultPropertyHwCommand.Builder': ...
        def addAllDeviceTypes(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyHwCommand.Builder': ...
        def addAllResultParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultPropertyHwCommand.Builder': ...
        def addArgumentParameter(self, hwCommandParameter: HwCommandParameter) -> 'DefaultPropertyHwCommand.Builder': ...
        def addArgumentParameters(self, hwCommandParameterArray: typing.List[HwCommandParameter]) -> 'DefaultPropertyHwCommand.Builder': ...
        def addDeviceType(self, string: str) -> 'DefaultPropertyHwCommand.Builder': ...
        def addDeviceTypes(self, stringArray: typing.List[str]) -> 'DefaultPropertyHwCommand.Builder': ...
        def addResultParameter(self, hwCommandParameter: HwCommandParameter) -> 'DefaultPropertyHwCommand.Builder': ...
        def addResultParameters(self, hwCommandParameterArray: typing.List[HwCommandParameter]) -> 'DefaultPropertyHwCommand.Builder': ...
        def argumentParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultPropertyHwCommand.Builder': ...
        def build(self) -> 'DefaultPropertyHwCommand': ...
        def contextDependent(self, boolean: bool) -> 'DefaultPropertyHwCommand.Builder': ...
        def deviceTypes(self, iterable: java.lang.Iterable[str]) -> 'DefaultPropertyHwCommand.Builder': ...
        def displayName(self, string: str) -> 'DefaultPropertyHwCommand.Builder': ...
        def name(self, string: str) -> 'DefaultPropertyHwCommand.Builder': ...
        def propertyVersion(self, propertyVersion: cern.lsa.domain.devices.type.PropertyVersion) -> 'DefaultPropertyHwCommand.Builder': ...
        def readBackCommand(self, hwCommand: HwCommand) -> 'DefaultPropertyHwCommand.Builder': ...
        def resultParameters(self, iterable: java.lang.Iterable[HwCommandParameter]) -> 'DefaultPropertyHwCommand.Builder': ...
        def type(self, commandType: CommandType) -> 'DefaultPropertyHwCommand.Builder': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.exploitation.command")``.

    CommandType: typing.Type[CommandType]
    CustomHwCommand: typing.Type[CustomHwCommand]
    DefaultCustomHwCommand: typing.Type[DefaultCustomHwCommand]
    DefaultHwCommandParameter: typing.Type[DefaultHwCommandParameter]
    DefaultHwCommandsRequest: typing.Type[DefaultHwCommandsRequest]
    DefaultPropertyHwCommand: typing.Type[DefaultPropertyHwCommand]
    HwCommand: typing.Type[HwCommand]
    HwCommandExecutionRequest: typing.Type[HwCommandExecutionRequest]
    HwCommandExecutionResponse: typing.Type[HwCommandExecutionResponse]
    HwCommandParameter: typing.Type[HwCommandParameter]
    HwCommands: typing.Type[HwCommands]
    HwCommandsRequest: typing.Type[HwCommandsRequest]
    PropertyHwCommand: typing.Type[PropertyHwCommand]
