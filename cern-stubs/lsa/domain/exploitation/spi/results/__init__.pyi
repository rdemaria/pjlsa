import cern.accsoft.commons.util
import cern.accsoft.commons.util.collections
import cern.accsoft.commons.value
import cern.japc.core
import cern.japc.value
import cern.lsa.domain.settings
import java.io
import java.lang
import java.util
import org.slf4j
import typing



class ContextDriveResult(cern.accsoft.commons.util.AbstractNamedSerializable['ContextDriveResult']):
    """
    public final class ContextDriveResult extends cern.accsoft.commons.util.AbstractNamedSerializable<:class:`~cern.lsa.domain.exploitation.spi.results.ContextDriveResult`>
    
        Drive result on the level of Context.
    
        Also see:
            :meth:`~serialized`
    """
    @staticmethod
    def builder(drivableContext: cern.lsa.domain.settings.DrivableContext) -> 'ContextDriveResult.Builder': ...
    def containsErrors(self) -> bool:
        """
        
            Returns:
                True, if any errors occurred while driving the :class:`~cern.lsa.domain.settings.Parameter`s for the context at hand.
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :code:`equals` in class :class:`~cern.lsa.domain.exploitation.spi.results.ContextDriveResult`
        
        
        """
        ...
    def getAllExceptions(self) -> java.util.Set[java.lang.Exception]: ...
    def getDrivableContext(self) -> cern.lsa.domain.settings.DrivableContext:
        """
        
            Returns:
                The :class:`~cern.lsa.domain.settings.DrivableContext` that this
                :class:`~cern.lsa.domain.exploitation.spi.results.ContextDriveResult` holds the results of the drive for.
        
        
        """
        ...
    def getJapcParameterDriveResults(self) -> java.util.Set['JapcParameterDriveResult']: ...
    def getLsaParameterDriveResults(self) -> java.util.Set['LsaParameterDriveResult']: ...
    def getLsaParametersByStatus(self, status: 'LsaParameterDriveResult.Status') -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getName(self) -> str:
        """
        
            Specified by:
                :code:`getName` in interface :code:`cern.accsoft.commons.util.Named`
        
            Overrides:
                :code:`getName` in class :class:`~cern.lsa.domain.exploitation.spi.results.ContextDriveResult`
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :code:`hashCode` in class :class:`~cern.lsa.domain.exploitation.spi.results.ContextDriveResult`
        
        
        """
        ...
    @staticmethod
    def merge(contextDriveResult: 'ContextDriveResult', contextDriveResult2: 'ContextDriveResult') -> 'ContextDriveResult':
        """
            Merges two :class:`~cern.lsa.domain.exploitation.spi.results.ContextDriveResult`s into one.
        
            Parameters:
                result (:class:`~cern.lsa.domain.exploitation.spi.results.ContextDriveResult`): One of the results to be merged.
                anotherResult (:class:`~cern.lsa.domain.exploitation.spi.results.ContextDriveResult`): The other result to be merged.
        
            Returns:
                The merged result.
        
        
        """
        ...
    def toString(self) -> str:
        """
        
            Overrides:
                :code:`toString` in class :class:`~cern.lsa.domain.exploitation.spi.results.ContextDriveResult`
        
        
        """
        ...
    class Builder:
        def addDeviceAdapterDriveResult(self, deviceAdapterDriveResult: 'DeviceAdapterDriveResult') -> 'ContextDriveResult.Builder': ...
        def addDeviceAdapterDriveResults(self, set: java.util.Set['DeviceAdapterDriveResult']) -> 'ContextDriveResult.Builder': ...
        def build(self) -> 'ContextDriveResult': ...

class DeviceAdapterDriveResult(java.io.Serializable):
    """
    public final class DeviceAdapterDriveResult extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
        Represents the results of a drive on the level of drive adapter.
    
        Also see:
            :meth:`~serialized`
    """
    @staticmethod
    def builder() -> 'DeviceAdapterDriveResult.Builder': ...
    def containsErrors(self) -> bool:
        """
        
            Returns:
                True, if any errors occurred while driving the :class:`~cern.lsa.domain.settings.Parameter`s that the device adapter at
                hand was responsible for.
        
        
        """
        ...
    def getJapcParameterDriveResults(self) -> java.util.Set['JapcParameterDriveResult']: ...
    def getLsaParameterDriveResults(self) -> java.util.Set['LsaParameterDriveResult']: ...
    @typing.overload
    def merge(self, deviceAdapterDriveResult: 'DeviceAdapterDriveResult') -> 'DeviceAdapterDriveResult':
        """
        public :class:`~cern.lsa.domain.exploitation.spi.results.DeviceAdapterDriveResult` merge (:class:`~cern.lsa.domain.exploitation.spi.results.DeviceAdapterDriveResult` second)
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def merge(deviceAdapterDriveResult: 'DeviceAdapterDriveResult', deviceAdapterDriveResult2: 'DeviceAdapterDriveResult') -> 'DeviceAdapterDriveResult': ...
    class Builder:
        def addJapcParameterDriveResult(self, japcParameterDriveResult: 'JapcParameterDriveResult', lsaParameterDriveResultArray: typing.List['LsaParameterDriveResult']) -> 'DeviceAdapterDriveResult.Builder': ...
        def addLsaParameterDriveResult(self, lsaParameterDriveResult: 'LsaParameterDriveResult', japcParameterDriveResultArray: typing.List['JapcParameterDriveResult']) -> 'DeviceAdapterDriveResult.Builder': ...
        def build(self) -> 'DeviceAdapterDriveResult': ...
        @staticmethod
        def emptyResult() -> 'DeviceAdapterDriveResult': ...
        def getJapcParameterDriveResults(self) -> cern.accsoft.commons.util.collections.OrderedSet['JapcParameterDriveResult']: ...
        def getLsaParameterDriveResults(self) -> cern.accsoft.commons.util.collections.OrderedSet['LsaParameterDriveResult']: ...
        def setDeviceAdapterException(self, exception: java.lang.Exception) -> 'DeviceAdapterDriveResult.Builder': ...

class JapcParameterDriveResult(java.io.Serializable, cern.accsoft.commons.util.Named):
    """
    public class JapcParameterDriveResult extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, cern.accsoft.commons.util.Named
    
        Represents the result of a drive on the level of a :code:`JAPC parameter`.
    
        Also see:
            :meth:`~serialized`
    """
    @staticmethod
    def createFailed(string: str, parameterValue: cern.japc.value.ParameterValue, parameterException: cern.japc.core.ParameterException) -> 'JapcParameterDriveResult':
        """
            Factory method which creates a failed :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult`.
        
            Parameters:
                parameterName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the parameter name
                parameterValue (cern.japc.value.ParameterValue): the driven value
                exception (cern.japc.core.ParameterException): the exception what happened during the write
        
            Returns:
                The :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult` instance.
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def createSuccessful(string: str) -> 'JapcParameterDriveResult': ...
    @typing.overload
    @staticmethod
    def createSuccessful(string: str, parameterValue: cern.japc.value.ParameterValue) -> 'JapcParameterDriveResult':
        """
            Factory method which creates a successful :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult`.
        
            Parameters:
                parameterName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the parameter name
                parameterValue (cern.japc.value.ParameterValue): the driven value
        
            Returns:
                The :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult` instance.
        
        `@Deprecated <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Deprecated.html?is-external=true>` public static :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult` createSuccessful (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` parameterName)
        
            Deprecated.
            Do not use. Will be removed after all SADs and clients have been adapted.
            Factory method which creates a successful :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult`.
        
            Parameters:
                parameterName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the parameter name
        
            Returns:
                The :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult` instance.
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    def getException(self) -> cern.japc.core.ParameterException:
        """
        
            Returns:
                The JAPC :code:`ParameterException` that happened during the write.
        
        
        """
        ...
    def getName(self) -> str:
        """
        
            Specified by:
                :code:`getName` in interface :code:`cern.accsoft.commons.util.Named`
        
        
        """
        ...
    def getParameterValue(self) -> cern.japc.value.ParameterValue:
        """
        
            Returns:
                The JAPC :code:`ParameterValue` that has been actually been driven to the hardware after conversion from the value of
                the corresponding :class:`~cern.lsa.domain.settings.Parameter`'s value.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    def isFailed(self) -> bool:
        """
        
            Returns:
                True, if an error occurred while driving this :code:`JAPC Parameter`, otherwise false.
        
        
        """
        ...
    def toString(self) -> str:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...

class LsaParameterDriveResult(cern.accsoft.commons.util.Named, java.io.Serializable):
    """
    public class LsaParameterDriveResult extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements cern.accsoft.commons.util.Named, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
        Represents the result of a drive on the level of an LSA parameter.
    
    
    
    
        Normally, one or more LSA parameters (representing a property#field) correspond to one JAPC parameter (representing a
        property). But there are special cases, like for FGCs at CERN, where for setting a single LSA parameter, multiple JAPC
        parameters have to be set.
    
        Also see:
            :meth:`~serialized`
    """
    LOGGER: typing.ClassVar[org.slf4j.Logger] = ...
    """
    public static final org.slf4j.Logger LOGGER
    
    
    """
    def containsErrors(self) -> bool:
        """
        
            Returns:
                True, if an error occurred while driving this :class:`~cern.lsa.domain.settings.Parameter` or any of its related
                :code:`JAPC parameters` that it has been converted to, otherwise false. Ignored
                :class:`~cern.lsa.domain.settings.Parameter`s are not considered an error.
        
        
        """
        ...
    @staticmethod
    def create(parameter: cern.lsa.domain.settings.Parameter, immutableValue: cern.accsoft.commons.value.ImmutableValue) -> 'LsaParameterDriveResult':
        """
            Factory method to create a new instance of :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult`
            for which *no errors* are to be recorded. Be aware that if driving a :code:`JAPC parameter` which corresponds to the
            :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult` at hand fails, this must not be recorded
            here, but instead on the :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult` for that specific
            :code:`JAPC parameter`.
        
            Parameters:
                parameter (:class:`~cern.lsa.domain.settings.Parameter`): The :class:`~cern.lsa.domain.settings.Parameter` that was being driven.
                driveValue (cern.accsoft.commons.value.ImmutableValue): The value which was being driven for that :class:`~cern.lsa.domain.settings.Parameter`.
        
            Returns:
                The :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult` instance.
        
        
        """
        ...
    @staticmethod
    def createFailedWithDriveValue(parameter: cern.lsa.domain.settings.Parameter, immutableValue: cern.accsoft.commons.value.ImmutableValue, exception: java.lang.Exception) -> 'LsaParameterDriveResult':
        """
            Factory method to create a new instance of :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult`
            for which *an error* is to be recorded and the value which was being tried to be driven is known.
        
        
        
        
            Be aware that if driving a :code:`JAPC parameter` which corresponds to the
            :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult` at hand fails, this must not be recorded
            here, but instead on the :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult` for that specific
            :code:`JAPC parameter`.
        
            Parameters:
                parameter (:class:`~cern.lsa.domain.settings.Parameter`): The :class:`~cern.lsa.domain.settings.Parameter` that was being driven.
                driveValue (cern.accsoft.commons.value.ImmutableValue): The value which was being driven for that :class:`~cern.lsa.domain.settings.Parameter`.
                exception (`Exception <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Exception.html?is-external=true>`): The exception that occurred during the drive of the :class:`~cern.lsa.domain.settings.Parameter` at hand. Be aware that
                    if driving a :code:`JAPC parameter` which corresponds to the
                    :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult` at hand fails, this must not be recorded
                    here, but instead on the :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult` for that specific
                    :code:`JAPC parameter`.
        
            Returns:
                The :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult` instance.
        
        
        """
        ...
    @staticmethod
    def createFailedWithoutDriveValue(parameter: cern.lsa.domain.settings.Parameter, exception: java.lang.Exception) -> 'LsaParameterDriveResult':
        """
            Factory method to create a new instance of :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult`
            for which *an error* is to be recorded and there is no value which has been tried to be driven available (e.g. because
            there was no setting for the :class:`~cern.lsa.domain.settings.Parameter` at hand.
        
        
        
        
            Be aware that if driving a :code:`JAPC parameter` which corresponds to the
            :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult` at hand fails, this must not be recorded
            here, but instead on the :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult` for that specific
            :code:`JAPC parameter`.
        
            Parameters:
                parameter (:class:`~cern.lsa.domain.settings.Parameter`): The :class:`~cern.lsa.domain.settings.Parameter` that was being driven.
                exception (`Exception <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Exception.html?is-external=true>`): The exception that occurred during the drive of the :class:`~cern.lsa.domain.settings.Parameter` at hand. Be aware that
                    if driving a :code:`JAPC parameter` which corresponds to the
                    :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult` at hand fails, this must not be recorded
                    here, but instead on the :class:`~cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult` for that specific
                    :code:`JAPC parameter`.
        
            Returns:
                The :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult` instance.
        
        
        """
        ...
    @staticmethod
    def createWithoutDriveValue(parameter: cern.lsa.domain.settings.Parameter) -> 'LsaParameterDriveResult':
        """
            Factory method to create a new instance of :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult`
            for which *no errors* and no drive values are to be recorded. This factory method is used e.g. when driving is not
            allowed, or there is no setting in the DB for the parameter.
        
            Parameters:
                parameter (:class:`~cern.lsa.domain.settings.Parameter`): The :class:`~cern.lsa.domain.settings.Parameter` that was being driven.
        
            Returns:
                The :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult` instance.
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    def getAllExceptions(self) -> java.util.Set[java.lang.Exception]: ...
    def getDriveValue(self) -> cern.accsoft.commons.value.ImmutableValue:
        """
        
            Returns:
                value The value that was being driven for the :class:`~cern.lsa.domain.settings.Parameter` at hand, or null, if there
                was no setting for this :class:`~cern.lsa.domain.settings.Parameter`.
        
        
        """
        ...
    def getJapcExceptions(self) -> java.util.Set[cern.japc.core.ParameterException]: ...
    def getJapcParameterDriveResults(self) -> java.util.Set[JapcParameterDriveResult]: ...
    def getLsaException(self) -> java.lang.Exception:
        """
            If an internal LSA error (= not a JAPC error) occurred while driving the :class:`~cern.lsa.domain.settings.Parameter` at
            hand, the corresponding exception can be obtained through this method. A typical error scenario would be that the
            conversion of :class:`~cern.lsa.domain.settings.Parameter` to :code:`JAPC parameter` has failed or while driving the
            :class:`~cern.lsa.domain.settings.Parameter`, some other type of exception occurred due to a bug in the code handling
            the drive.
        
            Returns:
                The exception that occurred while driving the :class:`~cern.lsa.domain.settings.Parameter` at hand, or null, if the
                drive was successful.
        
        
        """
        ...
    def getName(self) -> str:
        """
        
            Specified by:
                :code:`getName` in interface :code:`cern.accsoft.commons.util.Named`
        
        
        """
        ...
    def getParameter(self) -> cern.lsa.domain.settings.Parameter:
        """
        
            Returns:
                The :class:`~cern.lsa.domain.settings.Parameter` which was being driven.
        
        
        """
        ...
    def getStatus(self) -> 'LsaParameterDriveResult.Status':
        """
        
            Returns:
                The :class:`~cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult.Status` value that describes the outcome
                of the drive for the :class:`~cern.lsa.domain.settings.Parameter` at hand.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    def toString(self) -> str:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    class Status(java.lang.Enum['LsaParameterDriveResult.Status']):
        FAILED: typing.ClassVar['LsaParameterDriveResult.Status'] = ...
        IGNORED: typing.ClassVar['LsaParameterDriveResult.Status'] = ...
        SUCCESSFUL: typing.ClassVar['LsaParameterDriveResult.Status'] = ...
        NO_DRIVE_VALUE: typing.ClassVar['LsaParameterDriveResult.Status'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'LsaParameterDriveResult.Status': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['LsaParameterDriveResult.Status']: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.exploitation.spi.results")``.

    ContextDriveResult: typing.Type[ContextDriveResult]
    DeviceAdapterDriveResult: typing.Type[DeviceAdapterDriveResult]
    JapcParameterDriveResult: typing.Type[JapcParameterDriveResult]
    LsaParameterDriveResult: typing.Type[LsaParameterDriveResult]
