import cern.accsoft.commons.util
import cern.accsoft.commons.util.collections
import cern.accsoft.commons.value
import cern.japc.core
import cern.japc.value
import cern.lsa.domain.settings
import java.io
import java.lang
import java.util
import org.slf4j
import typing



class ContextDriveResult(cern.accsoft.commons.util.AbstractNamedSerializable['ContextDriveResult']):
    """
    Java class 'cern.lsa.domain.exploitation.spi.results.ContextDriveResult'
    
        Extends:
            cern.accsoft.commons.util.AbstractNamedSerializable
    
    """
    @staticmethod
    def builder(drivableContext: cern.lsa.domain.settings.DrivableContext) -> 'ContextDriveResult.Builder': ...
    def containsErrors(self) -> bool: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAllExceptions(self) -> java.util.Set[java.lang.Exception]: ...
    def getDrivableContext(self) -> cern.lsa.domain.settings.DrivableContext: ...
    def getJapcParameterDriveResults(self) -> java.util.Set['JapcParameterDriveResult']: ...
    def getLsaParameterDriveResults(self) -> java.util.Set['LsaParameterDriveResult']: ...
    def getLsaParametersByStatus(self, status: 'LsaParameterDriveResult.Status') -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getName(self) -> str: ...
    def hashCode(self) -> int: ...
    @staticmethod
    def merge(contextDriveResult: 'ContextDriveResult', contextDriveResult2: 'ContextDriveResult') -> 'ContextDriveResult': ...
    def toString(self) -> str: ...
    class Builder:
        """
        Java class 'cern.lsa.domain.exploitation.spi.results.ContextDriveResult$Builder'
        
            Extends:
                java.lang.Object
        
        """
        def addDeviceAdapterDriveResult(self, deviceAdapterDriveResult: 'DeviceAdapterDriveResult') -> 'ContextDriveResult.Builder': ...
        def addDeviceAdapterDriveResults(self, set: java.util.Set['DeviceAdapterDriveResult']) -> 'ContextDriveResult.Builder': ...
        def build(self) -> 'ContextDriveResult': ...

class DeviceAdapterDriveResult(java.io.Serializable):
    """
    Java class 'cern.lsa.domain.exploitation.spi.results.DeviceAdapterDriveResult'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
    """
    @staticmethod
    def builder() -> 'DeviceAdapterDriveResult.Builder': ...
    def containsErrors(self) -> bool: ...
    def getJapcParameterDriveResults(self) -> java.util.Set['JapcParameterDriveResult']: ...
    def getLsaParameterDriveResults(self) -> java.util.Set['LsaParameterDriveResult']: ...
    @typing.overload
    def merge(self, deviceAdapterDriveResult: 'DeviceAdapterDriveResult') -> 'DeviceAdapterDriveResult': ...
    @typing.overload
    @staticmethod
    def merge(deviceAdapterDriveResult: 'DeviceAdapterDriveResult', deviceAdapterDriveResult2: 'DeviceAdapterDriveResult') -> 'DeviceAdapterDriveResult': ...
    class Builder:
        """
        Java class 'cern.lsa.domain.exploitation.spi.results.DeviceAdapterDriveResult$Builder'
        
            Extends:
                java.lang.Object
        
        """
        def addJapcParameterDriveResult(self, japcParameterDriveResult: 'JapcParameterDriveResult', lsaParameterDriveResultArray: typing.List['LsaParameterDriveResult']) -> 'DeviceAdapterDriveResult.Builder': ...
        def addLsaParameterDriveResult(self, lsaParameterDriveResult: 'LsaParameterDriveResult', japcParameterDriveResultArray: typing.List['JapcParameterDriveResult']) -> 'DeviceAdapterDriveResult.Builder': ...
        def build(self) -> 'DeviceAdapterDriveResult': ...
        @staticmethod
        def emptyResult() -> 'DeviceAdapterDriveResult': ...
        def getJapcParameterDriveResults(self) -> cern.accsoft.commons.util.collections.OrderedSet['JapcParameterDriveResult']: ...
        def getLsaParameterDriveResults(self) -> cern.accsoft.commons.util.collections.OrderedSet['LsaParameterDriveResult']: ...
        def setDeviceAdapterException(self, exception: java.lang.Exception) -> 'DeviceAdapterDriveResult.Builder': ...

class JapcParameterDriveResult(java.io.Serializable, cern.accsoft.commons.util.Named):
    """
    Java class 'cern.lsa.domain.exploitation.spi.results.JapcParameterDriveResult'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable, cern.accsoft.commons.util.Named
    
    """
    @staticmethod
    def createFailed(string: str, parameterValue: cern.japc.value.ParameterValue, parameterException: cern.japc.core.ParameterException) -> 'JapcParameterDriveResult': ...
    @typing.overload
    @staticmethod
    def createSuccessful(string: str) -> 'JapcParameterDriveResult': ...
    @typing.overload
    @staticmethod
    def createSuccessful(string: str, parameterValue: cern.japc.value.ParameterValue) -> 'JapcParameterDriveResult': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getException(self) -> cern.japc.core.ParameterException: ...
    def getName(self) -> str: ...
    def getParameterValue(self) -> cern.japc.value.ParameterValue: ...
    def hashCode(self) -> int: ...
    def isFailed(self) -> bool: ...
    def toString(self) -> str: ...

class LsaParameterDriveResult(cern.accsoft.commons.util.Named, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.accsoft.commons.util.Named, java.io.Serializable
    
      Attributes:
        LOGGER (org.slf4j.Logger): final static field
    
    """
    LOGGER: typing.ClassVar[org.slf4j.Logger] = ...
    def containsErrors(self) -> bool: ...
    @staticmethod
    def create(parameter: cern.lsa.domain.settings.Parameter, immutableValue: cern.accsoft.commons.value.ImmutableValue) -> 'LsaParameterDriveResult': ...
    @staticmethod
    def createFailedWithDriveValue(parameter: cern.lsa.domain.settings.Parameter, immutableValue: cern.accsoft.commons.value.ImmutableValue, exception: java.lang.Exception) -> 'LsaParameterDriveResult': ...
    @staticmethod
    def createFailedWithoutDriveValue(parameter: cern.lsa.domain.settings.Parameter, exception: java.lang.Exception) -> 'LsaParameterDriveResult': ...
    @staticmethod
    def createWithoutDriveValue(parameter: cern.lsa.domain.settings.Parameter) -> 'LsaParameterDriveResult': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAllExceptions(self) -> java.util.Set[java.lang.Exception]: ...
    def getDriveValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getJapcExceptions(self) -> java.util.Set[cern.japc.core.ParameterException]: ...
    def getJapcParameterDriveResults(self) -> java.util.Set[JapcParameterDriveResult]: ...
    def getLsaException(self) -> java.lang.Exception: ...
    def getName(self) -> str: ...
    def getParameter(self) -> cern.lsa.domain.settings.Parameter: ...
    def getStatus(self) -> 'LsaParameterDriveResult.Status': ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    class Status(java.lang.Enum['LsaParameterDriveResult.Status']):
        """
        Java class 'cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult$Status'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            FAILED (cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult$Status): final static enum constant
            IGNORED (cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult$Status): final static enum constant
            SUCCESSFUL (cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult$Status): final static enum constant
            NO_DRIVE_VALUE (cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult$Status): final static enum constant
        
        """
        FAILED: typing.ClassVar['LsaParameterDriveResult.Status'] = ...
        IGNORED: typing.ClassVar['LsaParameterDriveResult.Status'] = ...
        SUCCESSFUL: typing.ClassVar['LsaParameterDriveResult.Status'] = ...
        NO_DRIVE_VALUE: typing.ClassVar['LsaParameterDriveResult.Status'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'LsaParameterDriveResult.Status': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['LsaParameterDriveResult.Status']: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.exploitation.spi.results")``.

    ContextDriveResult: typing.Type[ContextDriveResult]
    DeviceAdapterDriveResult: typing.Type[DeviceAdapterDriveResult]
    JapcParameterDriveResult: typing.Type[JapcParameterDriveResult]
    LsaParameterDriveResult: typing.Type[LsaParameterDriveResult]
