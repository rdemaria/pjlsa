import cern.accsoft.commons.value
import cern.japc.core
import cern.lsa.domain.commons.spi
import cern.lsa.domain.exploitation
import cern.lsa.domain.exploitation.spi.command
import cern.lsa.domain.exploitation.spi.results
import cern.lsa.domain.settings
import java.io
import java.lang
import java.util
import typing



class DriveRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.exploitation.DriveRequest):
    """
    Java class 'cern.lsa.domain.exploitation.spi.DriveRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.exploitation.DriveRequest
    
      Constructors:
        * DriveRequestImpl(java.util.Map, java.util.Map)
    
      Attributes:
        DRIVE_FOR_NON_RESIDENT_CONTEXTS_ENABLED (java.lang.String): final static field
        STANDALONE_CONTEXT (java.lang.String): final static field
        DRIVABLE_CONTEXTS (java.lang.String): final static field
        CONTEXT_SETTINGS (java.lang.String): final static field
        PARAMETERS (java.lang.String): final static field
        COMMIT (java.lang.String): final static field
        TRANSACTION_ID (java.lang.String): final static field
        LENIENT_DRIVE (java.lang.String): final static field
    
    """
    DRIVE_FOR_NON_RESIDENT_CONTEXTS_ENABLED: typing.ClassVar[str] = ...
    STANDALONE_CONTEXT: typing.ClassVar[str] = ...
    DRIVABLE_CONTEXTS: typing.ClassVar[str] = ...
    CONTEXT_SETTINGS: typing.ClassVar[str] = ...
    PARAMETERS: typing.ClassVar[str] = ...
    COMMIT: typing.ClassVar[str] = ...
    TRANSACTION_ID: typing.ClassVar[str] = ...
    LENIENT_DRIVE: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]], map2: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def containsSettings(self) -> bool: ...
    def driveAllParameters(self) -> bool: ...
    def getAttribute(self, string: str) -> typing.Any: ...
    def getAttributes(self) -> java.util.Map[str, typing.Any]: ...
    def getContextSettings(self) -> cern.lsa.domain.settings.ContextSettings: ...
    def getDrivableContexts(self) -> java.util.Set[cern.lsa.domain.settings.DrivableContext]: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getStandAloneContext(self) -> cern.lsa.domain.settings.StandAloneContext: ...
    def getTransactionId(self) -> int: ...
    def getValue(self, parameter: cern.lsa.domain.settings.Parameter, drivableContext: cern.lsa.domain.settings.DrivableContext) -> cern.accsoft.commons.value.ImmutableValue: ...
    def isCommit(self) -> bool: ...
    def isDriveForNonResidentContextsEnabled(self) -> bool: ...
    def isLenientDrive(self) -> bool: ...
    def setAttribute(self, string: str, object: typing.Any) -> None: ...

class DriveResultImpl(cern.lsa.domain.exploitation.DriveResult, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.exploitation.spi.DriveResultImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.exploitation.DriveResult, java.io.Serializable
    
    """
    def containsErrors(self) -> bool: ...
    def getAttribute(self, string: str) -> typing.Any: ...
    def getAttributes(self) -> java.util.Map[str, typing.Any]: ...
    def getContextDriveResults(self) -> java.util.Set[cern.lsa.domain.exploitation.spi.results.ContextDriveResult]: ...
    def getDrivableContexts(self) -> java.util.Set[cern.lsa.domain.settings.DrivableContext]: ...
    def getDrivenParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getExceptions(self) -> java.util.Set[java.lang.Exception]: ...
    def merge(self, driveResult: cern.lsa.domain.exploitation.DriveResult) -> cern.lsa.domain.exploitation.DriveResult: ...
    def toString(self) -> str: ...
    class Builder:
        """
        Java class 'cern.lsa.domain.exploitation.spi.DriveResultImpl$Builder'
        
            Extends:
                java.lang.Object
        
          Constructors:
            * Builder()
        
        """
        def __init__(self): ...
        def addAttribute(self, string: str, object: typing.Any) -> 'DriveResultImpl.Builder': ...
        def addContextDriveResult(self, contextDriveResult: cern.lsa.domain.exploitation.spi.results.ContextDriveResult) -> 'DriveResultImpl.Builder': ...
        def build(self) -> cern.lsa.domain.exploitation.DriveResult: ...
        @staticmethod
        def emptyResult() -> 'DriveResultImpl': ...

class FailSafeImmutableValueImpl(cern.lsa.domain.exploitation.FailSafeImmutableValue, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.exploitation.spi.FailSafeImmutableValueImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.exploitation.FailSafeImmutableValue,
            java.io.Serializable
    
      Constructors:
        * FailSafeImmutableValueImpl(java.lang.String, cern.accsoft.commons.value.ImmutableValue)
        * FailSafeImmutableValueImpl(java.lang.String, cern.japc.core.ParameterException)
    
    """
    @typing.overload
    def __init__(self, string: str, immutableValue: cern.accsoft.commons.value.ImmutableValue): ...
    @typing.overload
    def __init__(self, string: str, parameterException: cern.japc.core.ParameterException): ...
    def getException(self) -> cern.japc.core.ParameterException: ...
    def getParameterName(self) -> str: ...
    def getValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...

class ReadHardwareRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.exploitation.ReadHardwareRequest):
    """
    Java class 'cern.lsa.domain.exploitation.spi.ReadHardwareRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.exploitation.ReadHardwareRequest
    
      Constructors:
        * ReadHardwareRequestImpl(java.util.Map)
    
      Attributes:
        DRIVABLE_CONTEXT (java.lang.String): final static field
        PARAMETERS (java.lang.String): final static field
        NON_RESIDENT_CONTEXTS_ENABLED (java.lang.String): final static field
    
    """
    DRIVABLE_CONTEXT: typing.ClassVar[str] = ...
    PARAMETERS: typing.ClassVar[str] = ...
    NON_RESIDENT_CONTEXTS_ENABLED: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def areNonResidentContextsEnabled(self) -> bool: ...
    def getDrivableContext(self) -> cern.lsa.domain.settings.DrivableContext: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getParametersInternal(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...

class SettingsOnlineCheckRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.exploitation.SettingsOnlineCheckRequest):
    """
    Java class 'cern.lsa.domain.exploitation.spi.SettingsOnlineCheckRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.exploitation.SettingsOnlineCheckRequest
    
      Constructors:
        * SettingsOnlineCheckRequestImpl(java.util.Map)
    
      Attributes:
        USER (java.lang.String): final static field
        DEVICE_GROUP_NAME (java.lang.String): final static field
        PROPERTY_NAMES (java.lang.String): final static field
        DEVICE_NAMES (java.lang.String): final static field
        PARAMETER_NAMES (java.lang.String): final static field
        CHECK_TYPE (java.lang.String): final static field
        NON_RESIDENT_CONTEXTS_ENABLED (java.lang.String): final static field
    
    """
    USER: typing.ClassVar[str] = ...
    DEVICE_GROUP_NAME: typing.ClassVar[str] = ...
    PROPERTY_NAMES: typing.ClassVar[str] = ...
    DEVICE_NAMES: typing.ClassVar[str] = ...
    PARAMETER_NAMES: typing.ClassVar[str] = ...
    CHECK_TYPE: typing.ClassVar[str] = ...
    NON_RESIDENT_CONTEXTS_ENABLED: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def areNonResidentContextsEnabled(self) -> bool: ...
    def getCheckType(self) -> cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.SettingsCheckType: ...
    def getDeviceGroupName(self) -> str: ...
    def getDeviceNames(self) -> java.util.Set[str]: ...
    def getParameterNames(self) -> java.util.Set[str]: ...
    def getPropertyNames(self) -> java.util.Set[str]: ...
    def getUser(self) -> str: ...
    def toString(self) -> str: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.exploitation.spi")``.

    DriveRequestImpl: typing.Type[DriveRequestImpl]
    DriveResultImpl: typing.Type[DriveResultImpl]
    FailSafeImmutableValueImpl: typing.Type[FailSafeImmutableValueImpl]
    ReadHardwareRequestImpl: typing.Type[ReadHardwareRequestImpl]
    SettingsOnlineCheckRequestImpl: typing.Type[SettingsOnlineCheckRequestImpl]
    command: cern.lsa.domain.exploitation.spi.command.__module_protocol__
    results: cern.lsa.domain.exploitation.spi.results.__module_protocol__
