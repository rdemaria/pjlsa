import cern.accsoft.commons.value
import cern.japc.core
import cern.lsa.domain.commons.spi
import cern.lsa.domain.exploitation
import cern.lsa.domain.exploitation.spi.command
import cern.lsa.domain.exploitation.spi.results
import cern.lsa.domain.settings
import java.io
import java.lang
import java.util
import typing



class DriveRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.exploitation.DriveRequest):
    """
    public class DriveRequestImpl extends :class:`~cern.lsa.domain.commons.spi.AbstractPropertiesHolder` implements :class:`~cern.lsa.domain.exploitation.DriveRequest`
    
        Default implementation of the :class:`~cern.lsa.domain.exploitation.DriveRequest` interface. Keeps all properties and
        attributes in a map which is passed from the :class:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder`.
    
        **Synchronization**
    
    
        This class is not synchronized. It is recommended to create separate instance for each thread. If multiple threads
        access one instance of this class concurrently, it must be synchronized externally.
    
        Also see:
            :meth:`~serialized`
    """
    DRIVE_FOR_NON_RESIDENT_CONTEXTS_ENABLED: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` DRIVE_FOR_NON_RESIDENT_CONTEXTS_ENABLED
    
    
        Also see:
            :meth:`~cern.lsa.domain.exploitation.spi.DriveRequestImpl.isDriveForNonResidentContextsEnabled`, :meth:`~constant`
    
    
    """
    STANDALONE_CONTEXT: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` STANDALONE_CONTEXT
    
    
        Also see:
            :meth:`~cern.lsa.domain.exploitation.spi.DriveRequestImpl.getStandAloneContext`, :meth:`~constant`
    
    
    """
    DRIVABLE_CONTEXTS: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` DRIVABLE_CONTEXTS
    
    
        Also see:
            :meth:`~cern.lsa.domain.exploitation.spi.DriveRequestImpl.getDrivableContexts`, :meth:`~constant`
    
    
    """
    CONTEXT_SETTINGS: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` CONTEXT_SETTINGS
    
    
        Also see:
            :meth:`~cern.lsa.domain.exploitation.spi.DriveRequestImpl.getContextSettings`, :meth:`~constant`
    
    
    """
    PARAMETERS: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` PARAMETERS
    
    
        Also see:
            :meth:`~cern.lsa.domain.exploitation.spi.DriveRequestImpl.getParameters`, :meth:`~constant`
    
    
    """
    COMMIT: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` COMMIT
    
    
        Also see:
            :meth:`~cern.lsa.domain.exploitation.spi.DriveRequestImpl.isCommit`, :meth:`~constant`
    
    
    """
    TRANSACTION_ID: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` TRANSACTION_ID
    
    
        Also see:
            :meth:`~cern.lsa.domain.exploitation.spi.DriveRequestImpl.getTransactionId`, :meth:`~constant`
    
    
    """
    LENIENT_DRIVE: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` LENIENT_DRIVE
    
    
        Also see:
            :meth:`~cern.lsa.domain.exploitation.spi.DriveRequestImpl.isLenientDrive`, :meth:`~constant`
    
    
    """
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]], map2: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def containsSettings(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.DriveRequest.containsSettings`
            Returns :code:`true` if the request contains settings. When request is initially created and submitted for execution it
            may not contain settings but only information about contexts and parameters to be driven. However
            :code:`SettingAwareDevice` implementations always receive :code:`DriveHardwareRequest` containing settings.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.containsSettings`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Returns:
                :code:`true` if the request contains settings (either :class:`~cern.lsa.domain.settings.ContextSettings` object or
                custom values), :code:`false` otherwise
        
        
        """
        ...
    def driveAllParameters(self) -> bool:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.driveAllParameters`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Returns:
                Info if all parameters should be driven or only those returned by
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getParameters`. Currently if
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getParameters` returns empty array it is considered that all
                parameters should be driven.
        
        
        """
        ...
    def getAttribute(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.DriveRequest.getAttribute`
            Returns value of a custom attribute.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getAttribute`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Parameters:
                attributeName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): name of the attribute
        
            Returns:
                value of the attribute or :code:`null` if no such attribute is defined in the request
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.setAttribute`,
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getAttributes`
        
        
        """
        ...
    def getAttributes(self) -> java.util.Map[str, typing.Any]: ...
    def getContextSettings(self) -> cern.lsa.domain.settings.ContextSettings:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getContextSettings`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Returns:
                The context settings object associated with this request. When the request is created first using
                :class:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder`, and
                :class:`~cern.lsa.domain.settings.ContextSettings` object was not set during creation - this method returns
                :code:`null`.
        
        
        """
        ...
    def getDrivableContexts(self) -> java.util.Set[cern.lsa.domain.settings.DrivableContext]: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getStandAloneContext(self) -> cern.lsa.domain.settings.StandAloneContext:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getStandAloneContext`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Returns:
                :code:`StandAloneContext` for which the request was made.
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getDrivableContexts`
        
        
        """
        ...
    def getTransactionId(self) -> int:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.DriveRequest.getTransactionId`
            Returns the custom transaction ID to be used for driving transactional parameters, if set. Otherwise, returns null. If
            no transaction ID is set, one will be generated automatically if it is required.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getTransactionId`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Returns:
                the transaction ID, or null if not set
        
        
        """
        ...
    def getValue(self, parameter: cern.lsa.domain.settings.Parameter, drivableContext: cern.lsa.domain.settings.DrivableContext) -> cern.accsoft.commons.value.ImmutableValue:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.DriveRequest.getValue`
            Computes and returns value for given parameter and context. This method computes the value using
            :meth:`~cern.lsa.domain.settings.Settings.computeContextValue` method.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getValue`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Parameters:
                parameter (:class:`~cern.lsa.domain.settings.Parameter`): parameter for which value should be returned
                context (:class:`~cern.lsa.domain.settings.DrivableContext`): context for which value should be returned
        
            Returns:
                value for given parameter and context or :code:`null` (if there are no settings for given parameter and context)
        
        
        """
        ...
    def isCommit(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.DriveRequest.isCommit`
            Determines if settings sent to the hardware should be committed.
        
            The commit concerns only devices that support transactional drive of settings, where we first send all settings and if
            all devices accepted the settings (didn't throw any exceptions), then we commit these settings so that the hardware
            starts to play them. The way commit is performed depends on the hardware type. In some cases it might be sending a
            timing event. In other cases, the commit is performed by setting another property that "enables" the setting.
        
            The flag has no effect on hardware that doesn't support transactions.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.isCommit`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Returns:
                :code:`true` if settings should be committed, :code:`false` if should not be committed
        
        
        """
        ...
    def isDriveForNonResidentContextsEnabled(self) -> bool:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.isDriveForNonResidentContextsEnabled`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Returns:
                true if the drive request should be performed even if the given contexts are not resident
        
        
        """
        ...
    def isLenientDrive(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.DriveRequest.isLenientDrive`
            The flag determines the drive behavior for transactional parameters in case when drive exceptions are encountered (ex.
            an equipment refused settings).
        
            This flag is taken into account only for transactional parameters and when drive problems have been encountered. If the
            flag is :code:`false` (default) - a rollback will be attempted on transactional parameters. If the flag is :code:`true`,
            drive problems will be ignored and commit will be still issued.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.isLenientDrive`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Returns:
                :code:`true` if the drive should be lenient (drive exceptions are ignored and drive transaction is committed)
        
        
        """
        ...
    def setAttribute(self, string: str, object: typing.Any) -> None:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.DriveRequest.setAttribute`
            Sets a custom attribute for this request. Custom attributes can be used by some implementations of
            :code:`SettingAwareDevice`.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.setAttribute`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Parameters:
                attributeName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): name of the attribute
                attributeValue (`Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`): value of the attribute
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getAttribute`,
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getAttributes`
        
        
        """
        ...

class DriveResultImpl(cern.lsa.domain.exploitation.DriveResult, java.io.Serializable):
    """
    public final class DriveResultImpl extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements :class:`~cern.lsa.domain.exploitation.DriveResult`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
        Default implementation of the :class:`~cern.lsa.domain.exploitation.DriveResult` interface.
        :class:`~cern.lsa.domain.exploitation.spi.DriveResultImpl` is immutable and can be constructed conveniently using the
        :class:`~cern.lsa.domain.exploitation.spi.DriveResultImpl.Builder` class.
    
        Also see:
            :meth:`~serialized`
    """
    def containsErrors(self) -> bool:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveResult.containsErrors`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveResult`
        
            Returns:
                :code:`true` if for any of the parameters driven (in any context), at least one error occurred.
        
        
        """
        ...
    def getAttribute(self, string: str) -> typing.Any:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveResult.getAttribute`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.DriveResult`
        
            Parameters:
                attributeName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): Used to identify the specific attribute.
        
            Returns:
                A custom attribute value which might have been set as a result of drive.
        
                The custom attributes can be used in some cases to return information from :code:`DeviceAdapter`s back to clients like
                time required by the device to reach new setting value (e.g. for power converters).
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.DriveResult.getAttributes`
        
        
        """
        ...
    def getAttributes(self) -> java.util.Map[str, typing.Any]: ...
    def getContextDriveResults(self) -> java.util.Set[cern.lsa.domain.exploitation.spi.results.ContextDriveResult]: ...
    def getDrivableContexts(self) -> java.util.Set[cern.lsa.domain.settings.DrivableContext]: ...
    def getDrivenParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getExceptions(self) -> java.util.Set[java.lang.Exception]: ...
    def merge(self, driveResult: cern.lsa.domain.exploitation.DriveResult) -> cern.lsa.domain.exploitation.DriveResult:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.DriveResult.merge`
            Merges the DriveResults from "write" A complete drive usually consists of two steps: A "write" step in which all
            parameter's values are written to the hardware and then, if no errors occur, a "commit" step or otherwise, a "rollback"
            step. Both steps are always taken by the DriveController, but the second one may or may not have any consequences,
            depending on if the actual hardware supports commits / rollbacks or not. In any case, from each step, one will have a
            :class:`~cern.lsa.domain.exploitation.DriveResult` which will have to be merged into one after both operations
            completed.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.DriveResult.merge` in interface :class:`~cern.lsa.domain.exploitation.DriveResult`
        
            Parameters:
                anotherDriveResult (:class:`~cern.lsa.domain.exploitation.DriveResult`): The :class:`~cern.lsa.domain.exploitation.DriveResult` to merge into this one
        
            Returns:
                The merged :class:`~cern.lsa.domain.exploitation.DriveResult` which contains all results of both this and another
        
        
        """
        ...
    def toString(self) -> str:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    class Builder:
        def __init__(self): ...
        def addAttribute(self, string: str, object: typing.Any) -> 'DriveResultImpl.Builder': ...
        def addContextDriveResult(self, contextDriveResult: cern.lsa.domain.exploitation.spi.results.ContextDriveResult) -> 'DriveResultImpl.Builder': ...
        def build(self) -> cern.lsa.domain.exploitation.DriveResult: ...
        @staticmethod
        def emptyResult() -> 'DriveResultImpl': ...

class FailSafeImmutableValueImpl(cern.lsa.domain.exploitation.FailSafeImmutableValue, java.io.Serializable):
    """
    public class FailSafeImmutableValueImpl extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements :class:`~cern.lsa.domain.exploitation.FailSafeImmutableValue`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self, string: str, immutableValue: cern.accsoft.commons.value.ImmutableValue): ...
    @typing.overload
    def __init__(self, string: str, parameterException: cern.japc.core.ParameterException): ...
    def getException(self) -> cern.japc.core.ParameterException:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.FailSafeImmutableValue.getException`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.FailSafeImmutableValue`
        
            Returns:
                :code:`ParameterException` or :code:`null`
        
        
        """
        ...
    def getParameterName(self) -> str:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.FailSafeImmutableValue.getParameterName`
            Returns name of parameter.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.FailSafeImmutableValue.getParameterName`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.FailSafeImmutableValue`
        
            Returns:
                parameter name
        
        
        """
        ...
    def getValue(self) -> cern.accsoft.commons.value.ImmutableValue:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.FailSafeImmutableValue.getValue`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.FailSafeImmutableValue`
        
            Returns:
                :code:`ImmutableValue` or :code:`null`.
        
        
        """
        ...

class ReadHardwareRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.exploitation.ReadHardwareRequest):
    """
    public class ReadHardwareRequestImpl extends :class:`~cern.lsa.domain.commons.spi.AbstractPropertiesHolder` implements :class:`~cern.lsa.domain.exploitation.ReadHardwareRequest`
    
        Implementation of :class:`~cern.lsa.domain.exploitation.ReadHardwareRequest` interface based on a map of serializable
        attributes.
    
        Note that users should not use directly this class. Instances should be created using
        :code:`ReadHardwareRequestBuilder`.
    
        Also see:
            :meth:`~serialized`
    """
    DRIVABLE_CONTEXT: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` DRIVABLE_CONTEXT
    
        Name of attribute that contains :class:`~cern.lsa.domain.settings.DrivableContext`
    
        Also see:
            :meth:`~cern.lsa.domain.exploitation.spi.ReadHardwareRequestImpl.getDrivableContext`, :meth:`~constant`
    
    
    """
    PARAMETERS: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` PARAMETERS
    
        Name of attribute that contains parameters to be read.
    
        Also see:
            :meth:`~cern.lsa.domain.exploitation.spi.ReadHardwareRequestImpl.getParameters`, :meth:`~constant`
    
    
    """
    NON_RESIDENT_CONTEXTS_ENABLED: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` NON_RESIDENT_CONTEXTS_ENABLED
    
        Name of attribute that controls is non-resident context are enabled.
    
        Also see:
            :meth:`~cern.lsa.domain.exploitation.spi.ReadHardwareRequestImpl.getParameters`, :meth:`~constant`
    
    
    """
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def areNonResidentContextsEnabled(self) -> bool:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.ReadHardwareRequest.areNonResidentContextsEnabled`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.ReadHardwareRequest`
        
            Returns:
                true if the hardware should be read even if the given context is not resident
        
        
        """
        ...
    def getDrivableContext(self) -> cern.lsa.domain.settings.DrivableContext:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.ReadHardwareRequest.getDrivableContext`
            Returns drivable context for which settings should be read from the hardware.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.ReadHardwareRequest.getDrivableContext`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.ReadHardwareRequest`
        
            Returns:
                a non-null context to be read
        
        
        """
        ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getParametersInternal(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...

class SettingsOnlineCheckRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.exploitation.SettingsOnlineCheckRequest):
    """
    public class SettingsOnlineCheckRequestImpl extends :class:`~cern.lsa.domain.commons.spi.AbstractPropertiesHolder` implements :class:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest`
    
    
        Also see:
            :meth:`~serialized`
    """
    USER: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` USER
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    DEVICE_GROUP_NAME: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` DEVICE_GROUP_NAME
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    PROPERTY_NAMES: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` PROPERTY_NAMES
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    DEVICE_NAMES: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` DEVICE_NAMES
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    PARAMETER_NAMES: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` PARAMETER_NAMES
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    CHECK_TYPE: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` CHECK_TYPE
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    NON_RESIDENT_CONTEXTS_ENABLED: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` NON_RESIDENT_CONTEXTS_ENABLED
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def areNonResidentContextsEnabled(self) -> bool:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.areNonResidentContextsEnabled`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest`
        
            Returns:
                true if the settings check should be executed even if the given context is not resident
        
        
        """
        ...
    def getCheckType(self) -> cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.SettingsCheckType:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.getCheckType`
            The type of check to be performed.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.getCheckType`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest`
        
        
        """
        ...
    def getDeviceGroupName(self) -> str:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.getDeviceGroupName`
            Name of device group. The test will be performed on all devices from this group.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.getDeviceGroupName`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest`
        
        
        """
        ...
    def getDeviceNames(self) -> java.util.Set[str]: ...
    def getParameterNames(self) -> java.util.Set[str]: ...
    def getPropertyNames(self) -> java.util.Set[str]: ...
    def getUser(self) -> str:
        """
            Description copied from interface: :meth:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.getUser`
            Accelerator user which is mapped to a context which should be tested. If no value is specified - non-multiplexed context
            will be used.
        
            Specified by:
                :meth:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.getUser`Â in
                interfaceÂ :class:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest`
        
        
        """
        ...
    def toString(self) -> str:
        """
        
            Overrides:
                :meth:`~cern.lsa.domain.commons.spi.AbstractPropertiesHolder.toString`Â in
                classÂ :class:`~cern.lsa.domain.commons.spi.AbstractPropertiesHolder`
        
        
        """
        ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.exploitation.spi")``.

    DriveRequestImpl: typing.Type[DriveRequestImpl]
    DriveResultImpl: typing.Type[DriveResultImpl]
    FailSafeImmutableValueImpl: typing.Type[FailSafeImmutableValueImpl]
    ReadHardwareRequestImpl: typing.Type[ReadHardwareRequestImpl]
    SettingsOnlineCheckRequestImpl: typing.Type[SettingsOnlineCheckRequestImpl]
    command: cern.lsa.domain.exploitation.spi.command.__module_protocol__
    results: cern.lsa.domain.exploitation.spi.results.__module_protocol__
