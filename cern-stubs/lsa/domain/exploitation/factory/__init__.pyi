import cern.accsoft.commons.value
import cern.lsa.domain.exploitation
import cern.lsa.domain.settings
import java.util
import typing



class DriveRequestBuilder:
    """
    public class DriveRequestBuilder extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    
        Builder for instances of the :class:`~cern.lsa.domain.exploitation.DriveRequest` interface.
    
    
    
        There are several scenarios for driving settings to the hardware. Depending on the scenario appropriate information must
        be provided to the builder in order to create a valid :class:`~cern.lsa.domain.exploitation.DriveRequest`.
    
    
        Typical scenarios:
    
    
    
          - **Drive all settings and non-LSA implementation parameters belonging to a
            :class:`~cern.lsa.domain.settings.StandAloneContext`:**
    
    
    In this case it is sufficient to set the :code:`StandAloneContext` to be driven using
            :meth:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder.setStandAloneContext` method. Drivable contexts and
            parameters to be sent will be deduced from the given :code:`StandAloneContext`.
    
    
    
            *Example 1* (driving whole :code:`StandAloneCycle`):
    
    
    
    
            :code:`StandAloneCycle cycle = ..; //Cycle to be sent to the hardware DriveHardwareRequestBuilder builder =
            DriveHardwareRequestBuilder.newInstance(); builder.setStandAloneContext(cycle); DriveHardwareRequest request =
            builder.newDriveHardwareRequest();`
          - **Drive a predefined set of parameters with settings from database:**
    
    
    To define what parameters should be sent to the hardware
            :meth:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder.setParameters` method should be used. In addition
            drivable contexts must be defined either via
            :meth:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder.setStandAloneContext` or using
            :meth:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder.setDrivableContexts` method.
    
            *Example 1*:
    
    
            :code:`StandAloneCycle cycle = ..; //Cycle to be sent to the hardware Collection<Parameter> lsaParameters = ..; //LSA
            parameters to be sent to the hardware DriveHardwareRequestBuilder builder = DriveHardwareRequestBuilder.newInstance();
            builder.setStandAloneContext(cycle); builder.setParameters(lsaParameters); DriveHardwareRequest request =
            builder.newDriveHardwareRequest();`
          - **Drive settings already loaded from database:**
    
    
    To drive settings which are already loaded from the database (and eventually modified/updated)
            :meth:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder.setContextSettings` should be used. If not all settings
            from the specified :code:`ContextSettings` object should be sent to the hardware, one can precise what parameters and/or
            what contexts should be sent (using :meth:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder.setParameters` and
            :meth:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder.setDrivableContexts` methods.
    
    
    
            *Example 1*:
    
    
            :code:`ContextSettings ctxSettings = ..; Collection<Parameter> lsaParameters = ..; //LSA parameters to be sent to the
            hardware DriveHardwareRequestBuilder builder = DriveHardwareRequestBuilder.newInstance();
            builder.setContextSettings(ctxSettings); //Only settings belonging to these LSA parameters should be driven
            builder.setParameters(lsaParameters); DriveHardwareRequest request = builder.build();`
          - **Drive custom settings:**
    
    
    In some cases it is required to sent to the hardware some custom values which are not stored in the database e.g. test
            functions or zero settings. In order to drive such settings, all custom values can be passed to the request using
            :meth:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder.addValue` method.
    
            *Example*:
    
    
            :code:`StandAloneBeamProcess beamProcess = ..; //BeamProcess to be sent to the hardware Parameter[] lsaParameters = ..;
            //LSA parameters to be sent to the hardware DriveHardwareRequestBuilder builder =
            DriveHardwareRequestBuilder.newInstance(); for (Parameter lsaParameter : lsaParameters) {
            Â  Â  ImmutableDiscreteFunction testFunction = createTestFunction(lsaParameter);
            Â  Â  builder.addValue(lsaParameter, beamProcess, testFunction); } DriveHardwareRequest request =
            builder.build();`
    
    
        **Remarks**
    
    
        When :code:`DrivableContext`s are specified explicitly (using
        :meth:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder.setDrivableContexts` method) it is not necessary to set
        :code:`StandAloneContext` as it will be deduced from given drivable contexts.
    
    
    
    
        Only settings belonging to non-LSA implementation parameters are sent to the hardware. non-lsa parameters are those
        which are assigned to a real, addressable devices. The lsa flag is specified on the parameter level - see
        :meth:`~cern.lsa.domain.settings.Parameter.isLsaImplementation`.
    
        **Synchronization**
    
    
        This class is not synchronized. It is recommended to create separate instance for each thread. If multiple threads
        access one instance of this class concurrently, it must be synchronized externally.
    """
    def __init__(self): ...
    def addValue(self, parameter: cern.lsa.domain.settings.Parameter, drivableContext: cern.lsa.domain.settings.DrivableContext, immutableValue: cern.accsoft.commons.value.ImmutableValue) -> 'DriveRequestBuilder':
        """
            Adds a value to be sent to the hardware for given parameter and context. The specified value must be valid with respect
            to the value type of the given parameter (see :meth:`~cern.lsa.domain.settings.Parameter.getValueType`) and with respect
            to the context.
        
        
            This method can be used to drive custom settings (typically not loaded from the database) e.g. test functions or zero
            settings.
        
            Parameters:
                parameter (:class:`~cern.lsa.domain.settings.Parameter`): considered parameter
                ctx (:class:`~cern.lsa.domain.settings.DrivableContext`): considered context
                value (cern.accsoft.commons.value.ImmutableValue): value to be sent for given parameter and context
        
            Returns:
                this instance for chaining
        
        
        """
        ...
    def build(self) -> cern.lsa.domain.exploitation.DriveRequest:
        """
            Builds a new drive request.
        
            Returns:
                new instance of :class:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder` interface
        
        
        """
        ...
    def setAttribute(self, string: str, object: typing.Any) -> 'DriveRequestBuilder':
        """
            Sets a custom attribute for the request. Such attribute can be used by specific implementations of
            :code:`SettingAwareDevice` to customize the way settings are sent to the hardware.
        
            Parameters:
                attributeName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): name of the attribute
                attributeValue (`Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`): attribute value
        
            Returns:
                this instance for chaining
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.setAttribute`,
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getAttribute`
        
        
        """
        ...
    def setCommit(self, boolean: bool) -> 'DriveRequestBuilder':
        """
            Sets :code:`commit` flag. This flag is used to determine whether settings should be committed. It is used only by these
            device families which support hardware commit (e.g. via dedicated property or via timing event).
        
        
            Default value of this property is :code:`true` (settings are committed by default). If this flag is set to
            :code:`false`, then settings are not committed and the commit should be performed externally.
        
            Parameters:
                commit (boolean): :code:`true` to commit settings (default), :code:`false` to just drive settings without committing
        
            Returns:
                this instance for chaining
        
        
        """
        ...
    def setContextSettings(self, contextSettings: cern.lsa.domain.settings.ContextSettings) -> 'DriveRequestBuilder':
        """
            Sets context settings object containing settings to be downloaded to the hardware.
        
            Parameters:
                contextSettings (:class:`~cern.lsa.domain.settings.ContextSettings`): settings to be downloaded to the hardware.
        
            Returns:
                this instance for chaining
        
        
        """
        ...
    def setDrivableContexts(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.DrivableContext], typing.Sequence[cern.lsa.domain.settings.DrivableContext]]) -> 'DriveRequestBuilder': ...
    def setDriveForNonResidentContextsEnabled(self, boolean: bool) -> 'DriveRequestBuilder':
        """
            Sets :code:`commit` flag. This flag is used to determine whether settings are allowed to be driven for non-resident
            contexts
        
            Parameters:
                driveForNonResidentContextsEnabled (boolean): true to drive settings regardless of the residency of their context
        
            Returns:
                this instance for chaining
        
        
        """
        ...
    def setLenientDrive(self, boolean: bool) -> 'DriveRequestBuilder':
        """
            Sets :code:`lenientDrive` flag. his flag is taken into account only if the drive is performed as part of a global
            transaction. If the flag is :code:`false` (default) - rollback will be attempted on transactional properties. If the
            flag is :code:`true`, no rollback tentative will be done.
        
            Parameters:
                isLenientDrive (boolean): :code:`false` to rollback transaction in case of error (default), :code:`false` to not rollback.
        
            Returns:
                this instance for chaining
        
        
        """
        ...
    def setParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'DriveRequestBuilder': ...
    def setStandAloneContext(self, standAloneContext: cern.lsa.domain.settings.StandAloneContext) -> 'DriveRequestBuilder':
        """
            Sets :code:`StandAloneContext` to be driven.
        
            Parameters:
                standAloneCtx (:class:`~cern.lsa.domain.settings.StandAloneContext`): context to be driven
        
            Returns:
                this instance for chaining
        
        
        """
        ...
    def setTransactionId(self, int: int) -> 'DriveRequestBuilder':
        """
            Sets the transaction ID to be used to drive transactional devices (both for global transactions and device adapter
            specific legacy transactions). If not set, a new transaction ID will be generated internally if it is needed.
        
            Parameters:
                transactionId (int): transaction ID
        
            Returns:
                this instance for chaining
        
        
        """
        ...

class ReadHardwareRequestBuilder:
    """
    public class ReadHardwareRequestBuilder extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    
        Builder used to construct instances of :class:`~cern.lsa.domain.exploitation.ReadHardwareRequest`.
    """
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.exploitation.ReadHardwareRequest:
        """
            Creates new instance of the read hardware request.
        
        """
        ...
    def setDrivableContext(self, drivableContext: cern.lsa.domain.settings.DrivableContext) -> 'ReadHardwareRequestBuilder':
        """
            Sets the context for which settings should be read from the hardware.
        
            Parameters:
                drivableContext (:class:`~cern.lsa.domain.settings.DrivableContext`): a non-null drivable context
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.ReadHardwareRequest.getDrivableContext`
        
        
        """
        ...
    def setNonResidentContextsEnabled(self, boolean: bool) -> 'ReadHardwareRequestBuilder':
        """
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.ReadHardwareRequest.areNonResidentContextsEnabled`
        
        
        """
        ...
    def setParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'ReadHardwareRequestBuilder': ...

class SettingsOnlineCheckRequestBuilder:
    """
    public class SettingsOnlineCheckRequestBuilder extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    
        Builder for instances of the :class:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest` interface. The typical
        usage of the builder is following:
    
        .. code-block: java
        
         SettingsOnlineCheckRequest req = 
         SettingsOnlineCheckRequestBuilder.newInstance()
              .setUser(userSelection)
              .setDevicesAndPropertyNames(devNames, propNames)
              .setCheckType(SettingsCheckType.HARDWARE_CHECK).build();
              
         call service:
         FailSafeParameterValue[] result = exploitationService.performSettingsCheck(req);
    """
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.exploitation.SettingsOnlineCheckRequest:
        """
            Creates and returns an instance of the :code:`SettingsOnlineCheckRequest`.
        
        """
        ...
    @staticmethod
    def newInstance() -> 'SettingsOnlineCheckRequestBuilder': ...
    def setCheckType(self, settingsCheckType: cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.SettingsCheckType) -> 'SettingsOnlineCheckRequestBuilder':
        """
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.getCheckType`
        
        
        """
        ...
    def setDeviceGroupName(self, string: str) -> 'SettingsOnlineCheckRequestBuilder':
        """
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.getDeviceGroupName`
        
        
        """
        ...
    def setDeviceNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'SettingsOnlineCheckRequestBuilder': ...
    def setNonResidentContextsEnabled(self, boolean: bool) -> 'SettingsOnlineCheckRequestBuilder':
        """
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.areNonResidentContextsEnabled`
        
        
        """
        ...
    def setParameterNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'SettingsOnlineCheckRequestBuilder': ...
    def setPropertyNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'SettingsOnlineCheckRequestBuilder': ...
    def setUser(self, string: str) -> 'SettingsOnlineCheckRequestBuilder':
        """
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.SettingsOnlineCheckRequest.getUser`
        
        
        """
        ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.exploitation.factory")``.

    DriveRequestBuilder: typing.Type[DriveRequestBuilder]
    ReadHardwareRequestBuilder: typing.Type[ReadHardwareRequestBuilder]
    SettingsOnlineCheckRequestBuilder: typing.Type[SettingsOnlineCheckRequestBuilder]
