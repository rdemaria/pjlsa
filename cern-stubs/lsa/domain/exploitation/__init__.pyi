import cern.accsoft.commons.value
import cern.japc.core
import cern.japc.value
import cern.lsa.domain
import cern.lsa.domain.exploitation.command
import cern.lsa.domain.exploitation.factory
import cern.lsa.domain.exploitation.spi
import cern.lsa.domain.exploitation.spi.results
import cern.lsa.domain.settings
import java.io
import java.lang
import java.util
import typing



class DisplayMode(java.io.Serializable):
    """
    Java class 'cern.lsa.domain.exploitation.DisplayMode'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Attributes:
        RESULT (cern.lsa.domain.exploitation.DisplayMode): final static field
        STATE (cern.lsa.domain.exploitation.DisplayMode): final static field
        CONSOLE (cern.lsa.domain.exploitation.DisplayMode): final static field
        GRAPH (cern.lsa.domain.exploitation.DisplayMode): final static field
        TABLE (cern.lsa.domain.exploitation.DisplayMode): final static field
        PCCURRENTS_TABLE (cern.lsa.domain.exploitation.DisplayMode): final static field
        UNDEFINED (cern.lsa.domain.exploitation.DisplayMode): final static field
        DRIVE_STATUS (cern.lsa.domain.exploitation.DisplayMode): final static field
    
    """
    RESULT: typing.ClassVar['DisplayMode'] = ...
    STATE: typing.ClassVar['DisplayMode'] = ...
    CONSOLE: typing.ClassVar['DisplayMode'] = ...
    GRAPH: typing.ClassVar['DisplayMode'] = ...
    TABLE: typing.ClassVar['DisplayMode'] = ...
    PCCURRENTS_TABLE: typing.ClassVar['DisplayMode'] = ...
    UNDEFINED: typing.ClassVar['DisplayMode'] = ...
    DRIVE_STATUS: typing.ClassVar['DisplayMode'] = ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def isConsole(self) -> bool: ...
    def isGraph(self) -> bool: ...
    def isResult(self) -> bool: ...
    def isTable(self) -> bool: ...
    def toString(self) -> str: ...
    @staticmethod
    def valueOf(string: str) -> 'DisplayMode': ...

class DriveException(cern.lsa.domain.LsaException):
    """
    Java class 'cern.lsa.domain.exploitation.DriveException'
    
        Extends:
            cern.lsa.domain.LsaException
    
      Constructors:
        * DriveException(java.lang.String, cern.lsa.domain.exploitation.DriveResult)
    
      Attributes:
        ERROR_DURING_DRIVE (java.lang.String): final static field
    
    """
    ERROR_DURING_DRIVE: typing.ClassVar[str] = ...
    def __init__(self, string: str, driveResult: 'DriveResult'): ...
    def getDriveResult(self) -> 'DriveResult': ...
    def getExceptions(self) -> java.util.Set[java.lang.Exception]: ...
    def getMessage(self) -> str: ...

class DriveRequest:
    """
    Java class 'cern.lsa.domain.exploitation.DriveRequest'
    
    """
    @staticmethod
    def builder() -> cern.lsa.domain.exploitation.factory.DriveRequestBuilder: ...
    def containsSettings(self) -> bool: ...
    def driveAllParameters(self) -> bool: ...
    def getAttribute(self, string: str) -> typing.Any: ...
    def getAttributes(self) -> java.util.Map[str, typing.Any]: ...
    def getContextSettings(self) -> cern.lsa.domain.settings.ContextSettings: ...
    def getDrivableContexts(self) -> java.util.Set[cern.lsa.domain.settings.DrivableContext]: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getStandAloneContext(self) -> cern.lsa.domain.settings.StandAloneContext: ...
    def getTransactionId(self) -> int: ...
    def getValue(self, parameter: cern.lsa.domain.settings.Parameter, drivableContext: cern.lsa.domain.settings.DrivableContext) -> cern.accsoft.commons.value.ImmutableValue: ...
    def isCommit(self) -> bool: ...
    def isDriveForNonResidentContextsEnabled(self) -> bool: ...
    def isLenientDrive(self) -> bool: ...
    def setAttribute(self, string: str, object: typing.Any) -> None: ...

class DriveResult:
    """
    Java class 'cern.lsa.domain.exploitation.DriveResult'
    
    """
    @staticmethod
    def builder() -> cern.lsa.domain.exploitation.spi.DriveResultImpl.Builder: ...
    def containsErrors(self) -> bool: ...
    def getAttribute(self, string: str) -> typing.Any: ...
    def getAttributes(self) -> java.util.Map[str, typing.Any]: ...
    def getContextDriveResults(self) -> java.util.Set[cern.lsa.domain.exploitation.spi.results.ContextDriveResult]: ...
    def getDrivableContexts(self) -> java.util.Set[cern.lsa.domain.settings.DrivableContext]: ...
    def getDrivenParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getExceptions(self) -> java.util.Set[java.lang.Exception]: ...
    def merge(self, driveResult: 'DriveResult') -> 'DriveResult': ...

class DriveResults:
    """
    Java class 'cern.lsa.domain.exploitation.DriveResults'
    
        Extends:
            java.lang.Object
    
    """
    @staticmethod
    def containsResultsForJapcParametersInEveryContext(driveResult: DriveResult, parameterArray: typing.List[cern.japc.core.Parameter]) -> bool: ...
    @staticmethod
    def describeDriveFailure(driveResult: DriveResult) -> str: ...
    @staticmethod
    def getAllExceptions(driveResult: DriveResult) -> java.util.Set[java.lang.Exception]: ...
    @staticmethod
    def getDriveResultsByLsaParameter(driveResult: DriveResult, parameter: cern.lsa.domain.settings.Parameter) -> java.util.Set[cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult]: ...
    @staticmethod
    def getDrivenParametersByContext(driveResult: DriveResult) -> java.util.Map[cern.lsa.domain.settings.DrivableContext, java.util.Set[cern.lsa.domain.settings.Parameter]]: ...
    @staticmethod
    def getExceptionsByContext(driveResult: DriveResult) -> java.util.Map[cern.lsa.domain.settings.DrivableContext, java.util.Set[java.lang.Exception]]: ...
    @staticmethod
    def getFailedLsaDriveResults(driveResult: DriveResult) -> java.util.Map[java.lang.Exception, java.util.Set[cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult]]: ...
    @staticmethod
    def getFailedParametersByContext(driveResult: DriveResult) -> java.util.Map[cern.lsa.domain.settings.DrivableContext, java.util.Set[cern.lsa.domain.settings.Parameter]]: ...
    @staticmethod
    def getIgnoredParametersByContext(driveResult: DriveResult) -> java.util.Map[cern.lsa.domain.settings.DrivableContext, java.util.Set[cern.lsa.domain.settings.Parameter]]: ...
    @staticmethod
    def getLsaParametersByStatus(driveResult: DriveResult, status: cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult.Status) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...

class FailSafeImmutableValue:
    """
    Java class 'cern.lsa.domain.exploitation.FailSafeImmutableValue'
    
    """
    def getException(self) -> cern.japc.core.ParameterException: ...
    def getParameterName(self) -> str: ...
    def getValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...

class OnlineCheckException(cern.japc.core.ParameterException):
    """
    Java class 'cern.lsa.domain.exploitation.OnlineCheckException'
    
        Extends:
            cern.japc.core.ParameterException
    
      Constructors:
        * OnlineCheckException(java.lang.String, java.lang.String, cern.accsoft.commons.value.ImmutableValue, cern.accsoft.commons.value.ImmutableValue)
        * OnlineCheckException(cern.lsa.domain.exploitation.OnlineCheckException.OnlineCheckExceptionType, java.lang.String, java.lang.String, java.lang.Throwable)
        * OnlineCheckException(cern.lsa.domain.exploitation.OnlineCheckException.OnlineCheckExceptionType, java.lang.String, java.lang.String)
        * OnlineCheckException(cern.lsa.domain.exploitation.OnlineCheckException.OnlineCheckExceptionType, java.lang.String, java.lang.String, java.lang.String)
    
    """
    @typing.overload
    def __init__(self, onlineCheckExceptionType: 'OnlineCheckException.OnlineCheckExceptionType', string: str, string2: str): ...
    @typing.overload
    def __init__(self, onlineCheckExceptionType: 'OnlineCheckException.OnlineCheckExceptionType', string: str, string2: str, string3: str): ...
    @typing.overload
    def __init__(self, onlineCheckExceptionType: 'OnlineCheckException.OnlineCheckExceptionType', string: str, string2: str, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, string: str, string2: str, immutableValue: cern.accsoft.commons.value.ImmutableValue, immutableValue2: cern.accsoft.commons.value.ImmutableValue): ...
    def getContextName(self) -> str: ...
    def getDatabaseValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getErrorType(self) -> 'OnlineCheckException.OnlineCheckExceptionType': ...
    def getHardwareValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getLocalizedMessage(self) -> str: ...
    def getMessage(self) -> str: ...
    def getParameterName(self) -> str: ...
    class OnlineCheckExceptionType(java.lang.Enum['OnlineCheckException.OnlineCheckExceptionType']):
        """
        Java class 'cern.lsa.domain.exploitation.OnlineCheckException$OnlineCheckExceptionType'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            SIGNATURE_MISMATCH (cern.lsa.domain.exploitation.OnlineCheckException$OnlineCheckExceptionType): final static enum constant
            DATABASE_CONFIGURATION (cern.lsa.domain.exploitation.OnlineCheckException$OnlineCheckExceptionType): final static enum constant
            SIGNATURE_CALCULATION_FAILURE (cern.lsa.domain.exploitation.OnlineCheckException$OnlineCheckExceptionType): final static enum constant
            NO_SIGNATURE_PARAMETER (cern.lsa.domain.exploitation.OnlineCheckException$OnlineCheckExceptionType): final static enum constant
            HARDWARE_DATABASE_MISMATCH (cern.lsa.domain.exploitation.OnlineCheckException$OnlineCheckExceptionType): final static enum constant
            SETTINGS_MISSING (cern.lsa.domain.exploitation.OnlineCheckException$OnlineCheckExceptionType): final static enum constant
            HARDWARE_ACCESS (cern.lsa.domain.exploitation.OnlineCheckException$OnlineCheckExceptionType): final static enum constant
            BAD_STATE (cern.lsa.domain.exploitation.OnlineCheckException$OnlineCheckExceptionType): final static enum constant
        
        """
        SIGNATURE_MISMATCH: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        DATABASE_CONFIGURATION: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        SIGNATURE_CALCULATION_FAILURE: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        NO_SIGNATURE_PARAMETER: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        HARDWARE_DATABASE_MISMATCH: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        SETTINGS_MISSING: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        HARDWARE_ACCESS: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        BAD_STATE: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        def toString(self) -> str: ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'OnlineCheckException.OnlineCheckExceptionType': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['OnlineCheckException.OnlineCheckExceptionType']: ...

class ParameterValueConverter:
    """
    Java class 'cern.lsa.domain.exploitation.ParameterValueConverter'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ParameterValueConverter()
    
    """
    def __init__(self): ...
    @staticmethod
    def convertScalars2ParameterValue(map: typing.Union[java.util.Map[str, cern.accsoft.commons.value.ImmutableValue], typing.Mapping[str, cern.accsoft.commons.value.ImmutableValue]]) -> cern.japc.value.MapParameterValue: ...
    @staticmethod
    def convertSetting2ParameterValue(setting: cern.lsa.domain.settings.Setting) -> cern.japc.value.ParameterValue: ...
    @staticmethod
    def convertToFailSafeImmutableValue(parameter: cern.lsa.domain.settings.Parameter, simpleParameterValue: cern.japc.value.SimpleParameterValue) -> cern.lsa.domain.exploitation.spi.FailSafeImmutableValueImpl: ...
    @staticmethod
    def convertToFailSafeImmutableValues(collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]], mapParameterValue: cern.japc.value.MapParameterValue) -> java.util.Map[cern.lsa.domain.settings.Parameter, FailSafeImmutableValue]: ...
    @staticmethod
    def convertToImmutableScalars(mapParameterValue: cern.japc.value.MapParameterValue, list: java.util.List[str]) -> java.util.List[cern.accsoft.commons.value.ImmutableScalar]: ...
    @staticmethod
    def convertToImmutableValue(parameter: cern.lsa.domain.settings.Parameter, simpleParameterValue: cern.japc.value.SimpleParameterValue) -> cern.accsoft.commons.value.ImmutableValue: ...
    @staticmethod
    def convertToParameterValue(immutableValue: cern.accsoft.commons.value.ImmutableValue) -> cern.japc.value.SimpleParameterValue: ...
    @staticmethod
    def getSPVForParameter(parameter: cern.lsa.domain.settings.Parameter, mapParameterValue: cern.japc.value.MapParameterValue) -> cern.japc.value.SimpleParameterValue: ...

class ReadHardwareRequest:
    """
    Java class 'cern.lsa.domain.exploitation.ReadHardwareRequest'
    
    """
    def areNonResidentContextsEnabled(self) -> bool: ...
    @staticmethod
    def builder() -> cern.lsa.domain.exploitation.factory.ReadHardwareRequestBuilder: ...
    def getDrivableContext(self) -> cern.lsa.domain.settings.DrivableContext: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...

class SettingsOnlineCheckRequest:
    """
    Java class 'cern.lsa.domain.exploitation.SettingsOnlineCheckRequest'
    
    """
    def areNonResidentContextsEnabled(self) -> bool: ...
    def getCheckType(self) -> 'SettingsOnlineCheckRequest.SettingsCheckType': ...
    def getDeviceGroupName(self) -> str: ...
    def getDeviceNames(self) -> java.util.Set[str]: ...
    def getParameterNames(self) -> java.util.Set[str]: ...
    def getPropertyNames(self) -> java.util.Set[str]: ...
    def getUser(self) -> str: ...
    class SettingsCheckType(java.lang.Enum['SettingsOnlineCheckRequest.SettingsCheckType']):
        """
        Java class 'cern.lsa.domain.exploitation.SettingsOnlineCheckRequest$SettingsCheckType'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            HARDWARE_CHECK (cern.lsa.domain.exploitation.SettingsOnlineCheckRequest$SettingsCheckType): final static enum constant
            SIGNATURE_CHECK (cern.lsa.domain.exploitation.SettingsOnlineCheckRequest$SettingsCheckType): final static enum constant
            FULL_CHECK (cern.lsa.domain.exploitation.SettingsOnlineCheckRequest$SettingsCheckType): final static enum constant
        
        """
        HARDWARE_CHECK: typing.ClassVar['SettingsOnlineCheckRequest.SettingsCheckType'] = ...
        SIGNATURE_CHECK: typing.ClassVar['SettingsOnlineCheckRequest.SettingsCheckType'] = ...
        FULL_CHECK: typing.ClassVar['SettingsOnlineCheckRequest.SettingsCheckType'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SettingsOnlineCheckRequest.SettingsCheckType': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['SettingsOnlineCheckRequest.SettingsCheckType']: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.exploitation")``.

    DisplayMode: typing.Type[DisplayMode]
    DriveException: typing.Type[DriveException]
    DriveRequest: typing.Type[DriveRequest]
    DriveResult: typing.Type[DriveResult]
    DriveResults: typing.Type[DriveResults]
    FailSafeImmutableValue: typing.Type[FailSafeImmutableValue]
    OnlineCheckException: typing.Type[OnlineCheckException]
    ParameterValueConverter: typing.Type[ParameterValueConverter]
    ReadHardwareRequest: typing.Type[ReadHardwareRequest]
    SettingsOnlineCheckRequest: typing.Type[SettingsOnlineCheckRequest]
    command: cern.lsa.domain.exploitation.command.__module_protocol__
    factory: cern.lsa.domain.exploitation.factory.__module_protocol__
    spi: cern.lsa.domain.exploitation.spi.__module_protocol__
