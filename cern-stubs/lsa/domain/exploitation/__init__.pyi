import cern.accsoft.commons.util
import cern.accsoft.commons.value
import cern.japc.core
import cern.japc.value
import cern.lsa.domain
import cern.lsa.domain.exploitation.command
import cern.lsa.domain.exploitation.factory
import cern.lsa.domain.exploitation.spi
import cern.lsa.domain.exploitation.spi.results
import cern.lsa.domain.settings
import java.io
import java.lang
import java.util
import typing



class DisplayMode(java.io.Serializable, cern.accsoft.commons.util.Named):
    """
    public final class DisplayMode extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, cern.accsoft.commons.util.Named
    
    
        Also see:
            :meth:`~serialized`
    """
    RESULT: typing.ClassVar['DisplayMode'] = ...
    """
    public static final :class:`~cern.lsa.domain.exploitation.DisplayMode` RESULT
    
    
    """
    STATE: typing.ClassVar['DisplayMode'] = ...
    """
    public static final :class:`~cern.lsa.domain.exploitation.DisplayMode` STATE
    
    
    """
    CONSOLE: typing.ClassVar['DisplayMode'] = ...
    """
    public static final :class:`~cern.lsa.domain.exploitation.DisplayMode` CONSOLE
    
    
    """
    GRAPH: typing.ClassVar['DisplayMode'] = ...
    """
    public static final :class:`~cern.lsa.domain.exploitation.DisplayMode` GRAPH
    
    
    """
    TABLE: typing.ClassVar['DisplayMode'] = ...
    """
    public static final :class:`~cern.lsa.domain.exploitation.DisplayMode` TABLE
    
    
    """
    PCCURRENTS_TABLE: typing.ClassVar['DisplayMode'] = ...
    """
    public static final :class:`~cern.lsa.domain.exploitation.DisplayMode` PCCURRENTS_TABLE
    
    
    """
    UNDEFINED: typing.ClassVar['DisplayMode'] = ...
    """
    public static final :class:`~cern.lsa.domain.exploitation.DisplayMode` UNDEFINED
    
    
    """
    DRIVE_STATUS: typing.ClassVar['DisplayMode'] = ...
    """
    public static final :class:`~cern.lsa.domain.exploitation.DisplayMode` DRIVE_STATUS
    
    
    """
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    def getName(self) -> str:
        """
        
            Specified by:
                :code:`getName` in interface :code:`cern.accsoft.commons.util.Named`
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    def isConsole(self) -> bool: ...
    def isGraph(self) -> bool: ...
    def isResult(self) -> bool: ...
    def isTable(self) -> bool: ...
    def toString(self) -> str:
        """
            Constructs a :code:`String` with all attributes in name = value format.
        
            Overrides:
                 in class 
        
            Returns:
                a :code:`String` representation of this object.
        
        
        """
        ...
    @staticmethod
    def valueOf(string: str) -> 'DisplayMode':
        """
            Returns DisplayMode object for the given string representation
        
            Returns:
        
        
        """
        ...

class DriveException(cern.lsa.domain.LsaException):
    """
    public class DriveException extends :class:`~cern.lsa.domain.LsaException`
    
        An exception thrown when driving settings to the hardware failed.
    
        The exception groups all other exceptions gathered during drive operation. The exceptions can represent a general
        problem with driving settings (e.g. when settings requested to be sent are invalid) or problems specific to devices or
        device properties. All these exceptions can be retrieved from the
        :meth:`~cern.lsa.domain.exploitation.DriveException.getDriveResult` or directly using
        :meth:`~cern.lsa.domain.exploitation.DriveException.getExceptions` method.
    
        The :meth:`~cern.lsa.domain.exploitation.DriveException.getMessage` method has been implemented to display messages of
        all exceptions contained in this exception.
    
        Also see:
            :meth:`~serialized`
    """
    ERROR_DURING_DRIVE: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` ERROR_DURING_DRIVE
    
        Generic error message
    
        Also see:
            :meth:`~constant`
    
    
    """
    def __init__(self, string: str, driveResult: 'DriveResult'): ...
    def getDriveResult(self) -> 'DriveResult':
        """
            Returns result of the drive.
        
            The result can be used e.g. to determine what parameters were successfully sent to hardware.
        
            Returns:
                result of the drive operation
        
        
        """
        ...
    def getExceptions(self) -> java.util.Set[java.lang.Exception]: ...
    def getMessage(self) -> str:
        """
            Returns message of this exception concatenated with messages of all
            :meth:`~cern.lsa.domain.exploitation.DriveException.getExceptions` separated by new line character.
        
            Overrides:
                 in class 
        
        
        """
        ...

class DriveRequest:
    """
    public interface DriveRequest
    
        Interface representing a request for driving (sending) settings to the hardware for a single :code:`StandAloneContext`.
    
        Instances of this interface should be constructed using
        :class:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder` class.
    
        Also see:
            :class:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder`
    """
    @staticmethod
    def builder() -> cern.lsa.domain.exploitation.factory.DriveRequestBuilder:
        """
            Creates builder to build :class:`~cern.lsa.domain.exploitation.DriveRequest`
        
            Returns:
                the builder
        
        
        """
        ...
    def containsSettings(self) -> bool:
        """
            Returns :code:`true` if the request contains settings. When request is initially created and submitted for execution it
            may not contain settings but only information about contexts and parameters to be driven. However
            :code:`SettingAwareDevice` implementations always receive :code:`DriveHardwareRequest` containing settings.
        
            Returns:
                :code:`true` if the request contains settings (either :class:`~cern.lsa.domain.settings.ContextSettings` object or
                custom values), :code:`false` otherwise
        
        
        """
        ...
    def driveAllParameters(self) -> bool:
        """
        
            Returns:
                Info if all parameters should be driven or only those returned by
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getParameters`. Currently if
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getParameters` returns empty array it is considered that all
                parameters should be driven.
        
        
        """
        ...
    def getAttribute(self, string: str) -> typing.Any: ...
    def getAttributes(self) -> java.util.Map[str, typing.Any]: ...
    def getContextSettings(self) -> cern.lsa.domain.settings.ContextSettings: ...
    def getDrivableContexts(self) -> java.util.Set[cern.lsa.domain.settings.DrivableContext]: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getStandAloneContext(self) -> cern.lsa.domain.settings.StandAloneContext:
        """
        
            Returns:
                :code:`StandAloneContext` for which the request was made.
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getDrivableContexts`
        
        
        """
        ...
    def getTransactionId(self) -> int: ...
    def getValue(self, parameter: cern.lsa.domain.settings.Parameter, drivableContext: cern.lsa.domain.settings.DrivableContext) -> cern.accsoft.commons.value.ImmutableValue: ...
    def isCommit(self) -> bool:
        """
            Determines if settings sent to the hardware should be committed.
        
            The commit concerns only devices that support transactional drive of settings, where we first send all settings and if
            all devices accepted the settings (didn't throw any exceptions), then we commit these settings so that the hardware
            starts to play them. The way commit is performed depends on the hardware type. In some cases it might be sending a
            timing event. In other cases, the commit is performed by setting another property that "enables" the setting.
        
            The flag has no effect on hardware that doesn't support transactions.
        
            Returns:
                :code:`true` if settings should be committed, :code:`false` if should not be committed
        
        
        """
        ...
    def isDriveForNonResidentContextsEnabled(self) -> bool:
        """
        
            Returns:
                true if the drive request should be performed even if the given contexts are not resident
        
        
        """
        ...
    def isLenientDrive(self) -> bool:
        """
            The flag determines the drive behavior for transactional parameters in case when drive exceptions are encountered (ex.
            an equipment refused settings).
        
            This flag is taken into account only for transactional parameters and when drive problems have been encountered. If the
            flag is :code:`false` (default) - a rollback will be attempted on transactional parameters. If the flag is :code:`true`,
            drive problems will be ignored and commit will be still issued.
        
            Returns:
                :code:`true` if the drive should be lenient (drive exceptions are ignored and drive transaction is committed)
        
        
        """
        ...
    def setAttribute(self, string: str, object: typing.Any) -> None:
        """
            Sets a custom attribute for this request. Custom attributes can be used by some implementations of
            :code:`SettingAwareDevice`.
        
            Parameters:
                attributeName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): name of the attribute
                attributeValue (`Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`): value of the attribute
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getAttribute`,
                :meth:`~cern.lsa.domain.exploitation.DriveRequest.getAttributes`
        
        
        """
        ...

class DriveResult:
    """
    public interface DriveResult
    
        Result of a drive operation i.e. parameters and contexts that were driven, parameters that failed and custom attributes
        coming from :code:`SettingAwareDevice` implementations.
    
        Also see:
            :class:`~cern.lsa.domain.exploitation.DriveRequest`, :class:`~cern.lsa.domain.exploitation.factory.DriveRequestBuilder`
    """
    @staticmethod
    def builder() -> cern.lsa.domain.exploitation.spi.DriveResultImpl.Builder:
        """
            Creates builder to build :class:`~cern.lsa.domain.exploitation.DriveResult`
        
            Returns:
                the builder
        
        
        """
        ...
    def containsErrors(self) -> bool:
        """
        
            Returns:
                :code:`true` if for any of the parameters driven (in any context), at least one error occurred.
        
        
        """
        ...
    def getAttribute(self, string: str) -> typing.Any:
        """
        
            Parameters:
                attributeName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): Used to identify the specific attribute.
        
            Returns:
                A custom attribute value which might have been set as a result of drive.
        
                The custom attributes can be used in some cases to return information from :code:`DeviceAdapter`s back to clients like
                time required by the device to reach new setting value (e.g. for power converters).
        
            Also see:
                :meth:`~cern.lsa.domain.exploitation.DriveResult.getAttributes`
        
        
        """
        ...
    def getAttributes(self) -> java.util.Map[str, typing.Any]: ...
    def getContextDriveResults(self) -> java.util.Set[cern.lsa.domain.exploitation.spi.results.ContextDriveResult]: ...
    def getDrivableContexts(self) -> java.util.Set[cern.lsa.domain.settings.DrivableContext]: ...
    def getDrivenParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getExceptions(self) -> java.util.Set[java.lang.Exception]: ...
    def merge(self, driveResult: 'DriveResult') -> 'DriveResult':
        """
            Merges the DriveResults from "write" A complete drive usually consists of two steps: A "write" step in which all
            parameter's values are written to the hardware and then, if no errors occur, a "commit" step or otherwise, a "rollback"
            step. Both steps are always taken by the DriveController, but the second one may or may not have any consequences,
            depending on if the actual hardware supports commits / rollbacks or not. In any case, from each step, one will have a
            :class:`~cern.lsa.domain.exploitation.DriveResult` which will have to be merged into one after both operations
            completed.
        
            Parameters:
                anotherDriveResult (:class:`~cern.lsa.domain.exploitation.DriveResult`): The :class:`~cern.lsa.domain.exploitation.DriveResult` to merge into this one
        
            Returns:
                The merged :class:`~cern.lsa.domain.exploitation.DriveResult` which contains all results of both this and another
        
        
        """
        ...

class DriveResults:
    """
    public class DriveResults extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    """
    @staticmethod
    def containsResultsForJapcParametersInEveryContext(driveResult: DriveResult, parameterArray: typing.List[cern.japc.core.Parameter]) -> bool:
        """
            Checks if the given :class:`~cern.lsa.domain.exploitation.DriveResult` has results for all of the given JAPC parameters
            in every driven context.
        
        """
        ...
    @staticmethod
    def describeDriveFailure(driveResult: DriveResult) -> str: ...
    @staticmethod
    def getAllExceptions(driveResult: DriveResult) -> java.util.Set[java.lang.Exception]: ...
    @staticmethod
    def getDriveResultsByLsaParameter(driveResult: DriveResult, parameter: cern.lsa.domain.settings.Parameter) -> java.util.Set[cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult]: ...
    @staticmethod
    def getDrivenParametersByContext(driveResult: DriveResult) -> java.util.Map[cern.lsa.domain.settings.DrivableContext, java.util.Set[cern.lsa.domain.settings.Parameter]]: ...
    @staticmethod
    def getExceptionsByContext(driveResult: DriveResult) -> java.util.Map[cern.lsa.domain.settings.DrivableContext, java.util.Set[java.lang.Exception]]: ...
    @staticmethod
    def getFailedLsaDriveResults(driveResult: DriveResult) -> java.util.Map[java.lang.Exception, java.util.Set[cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult]]: ...
    @staticmethod
    def getFailedParametersByContext(driveResult: DriveResult) -> java.util.Map[cern.lsa.domain.settings.DrivableContext, java.util.Set[cern.lsa.domain.settings.Parameter]]: ...
    @staticmethod
    def getIgnoredParametersByContext(driveResult: DriveResult) -> java.util.Map[cern.lsa.domain.settings.DrivableContext, java.util.Set[cern.lsa.domain.settings.Parameter]]: ...
    @staticmethod
    def getLsaParametersByStatus(driveResult: DriveResult, status: cern.lsa.domain.exploitation.spi.results.LsaParameterDriveResult.Status) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...

class FailSafeImmutableValue:
    """
    public interface FailSafeImmutableValue
    
        Represents a result of an acquisition of a value from hardware. If the acquisition was successful for a given parameter
        - objects of this class will contain acquired value. If an exception occur during acquisition - object of this class
        will contain an exception (and no value).
    """
    def getException(self) -> cern.japc.core.ParameterException:
        """
        
            Returns:
                :code:`ParameterException` or :code:`null`
        
        
        """
        ...
    def getParameterName(self) -> str:
        """
            Returns name of parameter.
        
            Returns:
                parameter name
        
        
        """
        ...
    def getValue(self) -> cern.accsoft.commons.value.ImmutableValue:
        """
        
            Returns:
                :code:`ImmutableValue` or :code:`null`.
        
        
        """
        ...

class OnlineCheckException(cern.japc.core.ParameterException):
    """
    public class OnlineCheckException extends cern.japc.core.ParameterException
    
        Represents a negative result of a comparison between database and hardware settings.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self, onlineCheckExceptionType: 'OnlineCheckException.OnlineCheckExceptionType', string: str, string2: str): ...
    @typing.overload
    def __init__(self, onlineCheckExceptionType: 'OnlineCheckException.OnlineCheckExceptionType', string: str, string2: str, string3: str): ...
    @typing.overload
    def __init__(self, onlineCheckExceptionType: 'OnlineCheckException.OnlineCheckExceptionType', string: str, string2: str, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, string: str, string2: str, immutableValue: cern.accsoft.commons.value.ImmutableValue, immutableValue2: cern.accsoft.commons.value.ImmutableValue): ...
    def getContextName(self) -> str:
        """
            Returns name of the LSA context for which the check failed.
        
        """
        ...
    def getDatabaseValue(self) -> cern.accsoft.commons.value.ImmutableValue:
        """
            In case the exception type was
            :meth:`~cern.lsa.domain.exploitation.OnlineCheckException.OnlineCheckExceptionType.HARDWARE_DATABASE_MISMATCH` it
            returns the database value. Otherwise it returns :code:`null`.
        
        """
        ...
    def getErrorType(self) -> 'OnlineCheckException.OnlineCheckExceptionType':
        """
            Returns type of this exception.
        
        """
        ...
    def getHardwareValue(self) -> cern.accsoft.commons.value.ImmutableValue:
        """
            In case the exception type was
            :meth:`~cern.lsa.domain.exploitation.OnlineCheckException.OnlineCheckExceptionType.HARDWARE_DATABASE_MISMATCH` it
            returns the hardware value. Otherwise it returns :code:`null`.
        
        """
        ...
    def getLocalizedMessage(self) -> str:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    def getMessage(self) -> str:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    def getParameterName(self) -> str:
        """
            Returns name of the LSA parameter for which check has failed.
        
        """
        ...
    class OnlineCheckExceptionType(java.lang.Enum['OnlineCheckException.OnlineCheckExceptionType']):
        SIGNATURE_MISMATCH: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        DATABASE_CONFIGURATION: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        SIGNATURE_CALCULATION_FAILURE: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        NO_SIGNATURE_PARAMETER: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        HARDWARE_DATABASE_MISMATCH: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        SETTINGS_MISSING: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        HARDWARE_ACCESS: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        BAD_STATE: typing.ClassVar['OnlineCheckException.OnlineCheckExceptionType'] = ...
        def toString(self) -> str: ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'OnlineCheckException.OnlineCheckExceptionType': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['OnlineCheckException.OnlineCheckExceptionType']: ...

class ParameterValueConverter:
    """
    public class ParameterValueConverter extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    
        Converts :code:`ImmutableValue`s into JAPC :code:`SimpleParameterValue` or :code:`MapParameterValue` and vice versa.
    """
    def __init__(self): ...
    @staticmethod
    def convertScalars2ParameterValue(map: typing.Union[java.util.Map[str, cern.accsoft.commons.value.ImmutableValue], typing.Mapping[str, cern.accsoft.commons.value.ImmutableValue]]) -> cern.japc.value.MapParameterValue: ...
    @staticmethod
    def convertSetting2ParameterValue(setting: cern.lsa.domain.settings.Setting) -> cern.japc.value.ParameterValue: ...
    @staticmethod
    def convertToFailSafeImmutableValue(parameter: cern.lsa.domain.settings.Parameter, simpleParameterValue: cern.japc.value.SimpleParameterValue) -> cern.lsa.domain.exploitation.spi.FailSafeImmutableValueImpl:
        """
            Converts JAPC value to :class:`~cern.lsa.domain.exploitation.FailSafeImmutableValue`. If conversion fails then returned
            value will contain exception.
        
        """
        ...
    @staticmethod
    def convertToFailSafeImmutableValues(collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]], mapParameterValue: cern.japc.value.MapParameterValue) -> java.util.Map[cern.lsa.domain.settings.Parameter, FailSafeImmutableValue]: ...
    @staticmethod
    def convertToImmutableScalars(mapParameterValue: cern.japc.value.MapParameterValue, list: java.util.List[str]) -> java.util.List[cern.accsoft.commons.value.ImmutableScalar]: ...
    @staticmethod
    def convertToImmutableValue(parameter: cern.lsa.domain.settings.Parameter, simpleParameterValue: cern.japc.value.SimpleParameterValue) -> cern.accsoft.commons.value.ImmutableValue: ...
    @staticmethod
    def convertToParameterValue(immutableValue: cern.accsoft.commons.value.ImmutableValue) -> cern.japc.value.SimpleParameterValue:
        """
            Converts the specified ImmutableValue into a JAPC :code:`SimpleParameterValue`.
        
            Parameters:
                value (cern.accsoft.commons.value.ImmutableValue): the value to be converted
        
            Returns:
                :code:`SimpleParameterValue` corresponding to given value
        
            Also see:
                :code:`ImmutableScalar.toSimpleParameterValue()`
        
        
        """
        ...
    @staticmethod
    def getSPVForParameter(parameter: cern.lsa.domain.settings.Parameter, mapParameterValue: cern.japc.value.MapParameterValue) -> cern.japc.value.SimpleParameterValue:
        """
            From :code:`MapParameterValue` gets value corresponding to given lsa parameter.
        
        """
        ...

class ReadHardwareRequest:
    """
    public interface ReadHardwareRequest
    
        Interface representing a request for reading (acquiring) settings from the hardware for a single
        :code:`DrivableContext`.
    
        Instances of this interface should be constructed using
        :class:`~cern.lsa.domain.exploitation.factory.ReadHardwareRequestBuilder` class.
    
        If a criteria is not specified (should not be taken into account), the corresponding method returns :code:`null`. Be
        aware that specifying an empty collection (to a criteria accepting collection) means that this criteria **will** be
        taken into account (usually resulting in empty result of the invocation).
    """
    def areNonResidentContextsEnabled(self) -> bool:
        """
        
            Returns:
                true if the hardware should be read even if the given context is not resident
        
        
        """
        ...
    @staticmethod
    def builder() -> cern.lsa.domain.exploitation.factory.ReadHardwareRequestBuilder:
        """
            Creates builder to build :class:`~cern.lsa.domain.exploitation.ReadHardwareRequest`
        
            Returns:
                the builder
        
        
        """
        ...
    def getDrivableContext(self) -> cern.lsa.domain.settings.DrivableContext:
        """
            Returns drivable context for which settings should be read from the hardware.
        
            Returns:
                a non-null context to be read
        
        
        """
        ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...

class SettingsOnlineCheckRequest:
    """
    public interface SettingsOnlineCheckRequest
    
        Represents a request to perform settings check (compare HW settings with DB settings).
    
        If a criteria is not specified (should not be taken into account), the corresponding method returns :code:`null`. Be
        aware that specifying an empty collection (to a criteria accepting collection) means that this criteria **will** be
        taken into account (usually resulting in empty result of the invocation).
    """
    def areNonResidentContextsEnabled(self) -> bool:
        """
        
            Returns:
                true if the settings check should be executed even if the given context is not resident
        
        
        """
        ...
    def getCheckType(self) -> 'SettingsOnlineCheckRequest.SettingsCheckType':
        """
            The type of check to be performed.
        
        """
        ...
    def getDeviceGroupName(self) -> str:
        """
            Name of device group. The test will be performed on all devices from this group.
        
        """
        ...
    def getDeviceNames(self) -> java.util.Set[str]: ...
    def getParameterNames(self) -> java.util.Set[str]: ...
    def getPropertyNames(self) -> java.util.Set[str]: ...
    def getUser(self) -> str:
        """
            Accelerator user which is mapped to a context which should be tested. If no value is specified - non-multiplexed context
            will be used.
        
        """
        ...
    class SettingsCheckType(java.lang.Enum['SettingsOnlineCheckRequest.SettingsCheckType']):
        HARDWARE_CHECK: typing.ClassVar['SettingsOnlineCheckRequest.SettingsCheckType'] = ...
        SIGNATURE_CHECK: typing.ClassVar['SettingsOnlineCheckRequest.SettingsCheckType'] = ...
        FULL_CHECK: typing.ClassVar['SettingsOnlineCheckRequest.SettingsCheckType'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SettingsOnlineCheckRequest.SettingsCheckType': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['SettingsOnlineCheckRequest.SettingsCheckType']: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.exploitation")``.

    DisplayMode: typing.Type[DisplayMode]
    DriveException: typing.Type[DriveException]
    DriveRequest: typing.Type[DriveRequest]
    DriveResult: typing.Type[DriveResult]
    DriveResults: typing.Type[DriveResults]
    FailSafeImmutableValue: typing.Type[FailSafeImmutableValue]
    OnlineCheckException: typing.Type[OnlineCheckException]
    ParameterValueConverter: typing.Type[ParameterValueConverter]
    ReadHardwareRequest: typing.Type[ReadHardwareRequest]
    SettingsOnlineCheckRequest: typing.Type[SettingsOnlineCheckRequest]
    command: cern.lsa.domain.exploitation.command.__module_protocol__
    factory: cern.lsa.domain.exploitation.factory.__module_protocol__
    spi: cern.lsa.domain.exploitation.spi.__module_protocol__
