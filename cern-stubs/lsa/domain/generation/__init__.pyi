import cern.accsoft.commons.domain.particletransfers
import cern.lsa.domain.settings
import com.google.common.collect
import java.io
import java.lang
import java.util
import typing



class ValueGeneratorConfigInfo:
    """
    Java class 'cern.lsa.domain.generation.ValueGeneratorConfigInfo'
    
    """
    @staticmethod
    def builder() -> 'DefaultValueGeneratorConfigInfo.Builder': ...
    def getValueGeneratorConfigStatus(self) -> 'ValueGeneratorConfigInfo.ValueGeneratorConfigStatus': ...
    def getValueGeneratorInfo(self) -> java.util.Optional['ValueGeneratorInfo']: ...
    @typing.overload
    @staticmethod
    def of(valueGeneratorConfigStatus: 'ValueGeneratorConfigInfo.ValueGeneratorConfigStatus') -> 'ValueGeneratorConfigInfo': ...
    @typing.overload
    @staticmethod
    def of(valueGeneratorConfigStatus: 'ValueGeneratorConfigInfo.ValueGeneratorConfigStatus', valueGeneratorInfo: 'ValueGeneratorInfo') -> 'ValueGeneratorConfigInfo': ...
    class ValueGeneratorConfigStatus(java.lang.Enum['ValueGeneratorConfigInfo.ValueGeneratorConfigStatus']):
        """
        Java class 'cern.lsa.domain.generation.ValueGeneratorConfigInfo$ValueGeneratorConfigStatus'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            FULLY_CONFIGURED (cern.lsa.domain.generation.ValueGeneratorConfigInfo$ValueGeneratorConfigStatus): final static enum constant
            NOT_CONFIGURED (cern.lsa.domain.generation.ValueGeneratorConfigInfo$ValueGeneratorConfigStatus): final static enum constant
            BEAN_MISSING (cern.lsa.domain.generation.ValueGeneratorConfigInfo$ValueGeneratorConfigStatus): final static enum constant
        
        """
        FULLY_CONFIGURED: typing.ClassVar['ValueGeneratorConfigInfo.ValueGeneratorConfigStatus'] = ...
        NOT_CONFIGURED: typing.ClassVar['ValueGeneratorConfigInfo.ValueGeneratorConfigStatus'] = ...
        BEAN_MISSING: typing.ClassVar['ValueGeneratorConfigInfo.ValueGeneratorConfigStatus'] = ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'ValueGeneratorConfigInfo.ValueGeneratorConfigStatus': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.List['ValueGeneratorConfigInfo.ValueGeneratorConfigStatus']: ...

class ValueGeneratorDefinition:
    """
    Java class 'cern.lsa.domain.generation.ValueGeneratorDefinition'
    
    """
    @staticmethod
    def builder() -> 'DefaultValueGeneratorDefinition.Builder': ...
    def getArguments(self) -> java.util.List[str]: ...
    def getParameter(self) -> cern.lsa.domain.settings.Parameter: ...
    def getParameterType(self) -> cern.lsa.domain.settings.ParameterType: ...
    def getParticleTransfer(self) -> cern.accsoft.commons.domain.particletransfers.ParticleTransfer: ...
    def getValueGeneratorName(self) -> str: ...

class ValueGeneratorDefinitionsRequest:
    """
    Java class 'cern.lsa.domain.generation.ValueGeneratorDefinitionsRequest'
    
    """
    @staticmethod
    def builder() -> 'DefaultValueGeneratorDefinitionsRequest.Builder': ...
    def getParameterTypes(self) -> java.util.Collection[cern.lsa.domain.settings.ParameterType]: ...
    def getParameters(self) -> java.util.Collection[cern.lsa.domain.settings.Parameter]: ...
    def getParticleTransfers(self) -> java.util.Collection[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    def getValueGeneratorNames(self) -> java.util.Collection[str]: ...

class ValueGeneratorInfo:
    """
    Java class 'cern.lsa.domain.generation.ValueGeneratorInfo'
    
    """
    @staticmethod
    def builder() -> 'DefaultValueGeneratorInfo.Builder': ...
    def getArguments(self) -> java.util.List[str]: ...
    def getValueGeneratorName(self) -> str: ...
    @staticmethod
    def of(string: str, list: java.util.List[str]) -> 'ValueGeneratorInfo': ...

class AbstractValueGeneratorDefinition(ValueGeneratorDefinition):
    """
    Java class 'cern.lsa.domain.generation.AbstractValueGeneratorDefinition'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.generation.ValueGeneratorDefinition
    
      Constructors:
        * AbstractValueGeneratorDefinition()
    
    """
    def __init__(self): ...

class DefaultValueGeneratorConfigInfo(ValueGeneratorConfigInfo, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.generation.DefaultValueGeneratorConfigInfo'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.generation.ValueGeneratorConfigInfo,
            java.io.Serializable
    
    """
    @staticmethod
    def builder() -> 'DefaultValueGeneratorConfigInfo.Builder': ...
    @staticmethod
    def copyOf(valueGeneratorConfigInfo: ValueGeneratorConfigInfo) -> 'DefaultValueGeneratorConfigInfo': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getValueGeneratorConfigStatus(self) -> ValueGeneratorConfigInfo.ValueGeneratorConfigStatus: ...
    def getValueGeneratorInfo(self) -> java.util.Optional[ValueGeneratorInfo]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def withValueGeneratorConfigStatus(self, valueGeneratorConfigStatus: ValueGeneratorConfigInfo.ValueGeneratorConfigStatus) -> 'DefaultValueGeneratorConfigInfo': ...
    @typing.overload
    def withValueGeneratorInfo(self, valueGeneratorInfo: ValueGeneratorInfo) -> 'DefaultValueGeneratorConfigInfo': ...
    @typing.overload
    def withValueGeneratorInfo(self, optional: java.util.Optional[ValueGeneratorInfo]) -> 'DefaultValueGeneratorConfigInfo': ...
    class Builder:
        """
        Java class 'cern.lsa.domain.generation.DefaultValueGeneratorConfigInfo$Builder'
        
            Extends:
                java.lang.Object
        
        """
        def build(self) -> 'DefaultValueGeneratorConfigInfo': ...
        def valueGeneratorConfigStatus(self, valueGeneratorConfigStatus: ValueGeneratorConfigInfo.ValueGeneratorConfigStatus) -> 'DefaultValueGeneratorConfigInfo.Builder': ...
        @typing.overload
        def valueGeneratorInfo(self, valueGeneratorInfo: ValueGeneratorInfo) -> 'DefaultValueGeneratorConfigInfo.Builder': ...
        @typing.overload
        def valueGeneratorInfo(self, optional: java.util.Optional[ValueGeneratorInfo]) -> 'DefaultValueGeneratorConfigInfo.Builder': ...

class DefaultValueGeneratorDefinitionsRequest(ValueGeneratorDefinitionsRequest, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.generation.DefaultValueGeneratorDefinitionsRequest'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.generation.ValueGeneratorDefinitionsRequest,
            java.io.Serializable
    
    """
    @staticmethod
    def builder() -> 'DefaultValueGeneratorDefinitionsRequest.Builder': ...
    @staticmethod
    def copyOf(valueGeneratorDefinitionsRequest: ValueGeneratorDefinitionsRequest) -> 'DefaultValueGeneratorDefinitionsRequest': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getParameterTypes(self) -> java.util.Collection[cern.lsa.domain.settings.ParameterType]: ...
    def getParameters(self) -> java.util.Collection[cern.lsa.domain.settings.Parameter]: ...
    def getParticleTransfers(self) -> java.util.Collection[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    def getValueGeneratorNames(self) -> java.util.Collection[str]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def withParameterTypes(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.ParameterType], typing.Sequence[cern.lsa.domain.settings.ParameterType]]) -> 'DefaultValueGeneratorDefinitionsRequest': ...
    def withParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'DefaultValueGeneratorDefinitionsRequest': ...
    def withParticleTransfers(self, collection: typing.Union[java.util.Collection[cern.accsoft.commons.domain.particletransfers.ParticleTransfer], typing.Sequence[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]]) -> 'DefaultValueGeneratorDefinitionsRequest': ...
    def withValueGeneratorNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DefaultValueGeneratorDefinitionsRequest': ...
    class Builder:
        """
        Java class 'cern.lsa.domain.generation.DefaultValueGeneratorDefinitionsRequest$Builder'
        
            Extends:
                java.lang.Object
        
        """
        def build(self) -> 'DefaultValueGeneratorDefinitionsRequest': ...
        def parameterTypes(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.ParameterType], typing.Sequence[cern.lsa.domain.settings.ParameterType]]) -> 'DefaultValueGeneratorDefinitionsRequest.Builder': ...
        def parameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'DefaultValueGeneratorDefinitionsRequest.Builder': ...
        def particleTransfers(self, collection: typing.Union[java.util.Collection[cern.accsoft.commons.domain.particletransfers.ParticleTransfer], typing.Sequence[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]]) -> 'DefaultValueGeneratorDefinitionsRequest.Builder': ...
        def valueGeneratorNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'DefaultValueGeneratorDefinitionsRequest.Builder': ...

class DefaultValueGeneratorInfo(ValueGeneratorInfo, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.generation.DefaultValueGeneratorInfo'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.generation.ValueGeneratorInfo,
            java.io.Serializable
    
    """
    @staticmethod
    def builder() -> 'DefaultValueGeneratorInfo.Builder': ...
    @staticmethod
    def copyOf(valueGeneratorInfo: ValueGeneratorInfo) -> 'DefaultValueGeneratorInfo': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArguments(self) -> com.google.common.collect.ImmutableList[str]: ...
    def getValueGeneratorName(self) -> str: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    @typing.overload
    def withArguments(self, iterable: java.lang.Iterable[str]) -> 'DefaultValueGeneratorInfo': ...
    @typing.overload
    def withArguments(self, stringArray: typing.List[str]) -> 'DefaultValueGeneratorInfo': ...
    def withValueGeneratorName(self, string: str) -> 'DefaultValueGeneratorInfo': ...
    class Builder:
        """
        Java class 'cern.lsa.domain.generation.DefaultValueGeneratorInfo$Builder'
        
            Extends:
                java.lang.Object
        
        """
        def addAllArguments(self, iterable: java.lang.Iterable[str]) -> 'DefaultValueGeneratorInfo.Builder': ...
        def addArgument(self, string: str) -> 'DefaultValueGeneratorInfo.Builder': ...
        def addArguments(self, stringArray: typing.List[str]) -> 'DefaultValueGeneratorInfo.Builder': ...
        def arguments(self, iterable: java.lang.Iterable[str]) -> 'DefaultValueGeneratorInfo.Builder': ...
        def build(self) -> 'DefaultValueGeneratorInfo': ...
        def valueGeneratorName(self, string: str) -> 'DefaultValueGeneratorInfo.Builder': ...

class DefaultValueGeneratorDefinition(AbstractValueGeneratorDefinition):
    """
    Java class 'cern.lsa.domain.generation.DefaultValueGeneratorDefinition'
    
        Extends:
            cern.lsa.domain.generation.AbstractValueGeneratorDefinition
    
    """
    @staticmethod
    def builder() -> 'DefaultValueGeneratorDefinition.Builder': ...
    @staticmethod
    def copyOf(abstractValueGeneratorDefinition: AbstractValueGeneratorDefinition) -> 'DefaultValueGeneratorDefinition': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArguments(self) -> com.google.common.collect.ImmutableList[str]: ...
    def getParameter(self) -> cern.lsa.domain.settings.Parameter: ...
    def getParameterType(self) -> cern.lsa.domain.settings.ParameterType: ...
    def getParticleTransfer(self) -> cern.accsoft.commons.domain.particletransfers.ParticleTransfer: ...
    def getValueGeneratorName(self) -> str: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    @typing.overload
    def withArguments(self, iterable: java.lang.Iterable[str]) -> 'DefaultValueGeneratorDefinition': ...
    @typing.overload
    def withArguments(self, stringArray: typing.List[str]) -> 'DefaultValueGeneratorDefinition': ...
    def withParameter(self, parameter: cern.lsa.domain.settings.Parameter) -> 'DefaultValueGeneratorDefinition': ...
    def withParameterType(self, parameterType: cern.lsa.domain.settings.ParameterType) -> 'DefaultValueGeneratorDefinition': ...
    def withParticleTransfer(self, particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer) -> 'DefaultValueGeneratorDefinition': ...
    def withValueGeneratorName(self, string: str) -> 'DefaultValueGeneratorDefinition': ...
    class Builder:
        """
        Java class 'cern.lsa.domain.generation.DefaultValueGeneratorDefinition$Builder'
        
            Extends:
                java.lang.Object
        
        """
        def addAllArguments(self, iterable: java.lang.Iterable[str]) -> 'DefaultValueGeneratorDefinition.Builder': ...
        def addArgument(self, string: str) -> 'DefaultValueGeneratorDefinition.Builder': ...
        def addArguments(self, stringArray: typing.List[str]) -> 'DefaultValueGeneratorDefinition.Builder': ...
        def arguments(self, iterable: java.lang.Iterable[str]) -> 'DefaultValueGeneratorDefinition.Builder': ...
        def build(self) -> 'DefaultValueGeneratorDefinition': ...
        def parameter(self, parameter: cern.lsa.domain.settings.Parameter) -> 'DefaultValueGeneratorDefinition.Builder': ...
        def parameterType(self, parameterType: cern.lsa.domain.settings.ParameterType) -> 'DefaultValueGeneratorDefinition.Builder': ...
        def particleTransfer(self, particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer) -> 'DefaultValueGeneratorDefinition.Builder': ...
        def valueGeneratorName(self, string: str) -> 'DefaultValueGeneratorDefinition.Builder': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.generation")``.

    AbstractValueGeneratorDefinition: typing.Type[AbstractValueGeneratorDefinition]
    DefaultValueGeneratorConfigInfo: typing.Type[DefaultValueGeneratorConfigInfo]
    DefaultValueGeneratorDefinition: typing.Type[DefaultValueGeneratorDefinition]
    DefaultValueGeneratorDefinitionsRequest: typing.Type[DefaultValueGeneratorDefinitionsRequest]
    DefaultValueGeneratorInfo: typing.Type[DefaultValueGeneratorInfo]
    ValueGeneratorConfigInfo: typing.Type[ValueGeneratorConfigInfo]
    ValueGeneratorDefinition: typing.Type[ValueGeneratorDefinition]
    ValueGeneratorDefinitionsRequest: typing.Type[ValueGeneratorDefinitionsRequest]
    ValueGeneratorInfo: typing.Type[ValueGeneratorInfo]
