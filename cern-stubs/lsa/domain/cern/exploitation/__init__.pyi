import cern.accsoft.commons.util
import cern.accsoft.commons.value
import cern.lsa.domain.settings
import com.google.common.collect
import java.io
import java.lang
import java.time
import java.util
import typing



class BctMarker(cern.accsoft.commons.util.AbstractNamedSerializable['BctMarker']):
    """
    public class BctMarker extends cern.accsoft.commons.util.AbstractNamedSerializable<:class:`~cern.lsa.domain.cern.exploitation.BctMarker`>
    
        A :code:`BctMarker` essentially represents a point in time, when the BCT (Beam Current Transformer) acquisition should
        be triggered. BCT marker is used to indicate certain moments when the beam is in a remarkable state. SPS operators use
        BCT markers to visualize certain moments in the beam life-cycle on the Fixed Displays.
    
        Also see:
            BCT Markers in LSA documentation, :meth:`~serialized`
    """
    def __init__(self, standAloneContext: cern.lsa.domain.settings.StandAloneContext, string: str, double: float, boolean: bool): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :code:`equals` in class :class:`~cern.lsa.domain.cern.exploitation.BctMarker`
        
        
        """
        ...
    def getContext(self) -> cern.lsa.domain.settings.StandAloneContext: ...
    def getName(self) -> str:
        """
        
            Specified by:
                :code:`getName` in interface :code:`cern.accsoft.commons.util.Named`
        
            Overrides:
                :code:`getName` in class :class:`~cern.lsa.domain.cern.exploitation.BctMarker`
        
        
        """
        ...
    def getTime(self) -> float: ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :code:`hashCode` in class :class:`~cern.lsa.domain.cern.exploitation.BctMarker`
        
        
        """
        ...
    def isEditable(self) -> bool: ...
    def setEditable(self, boolean: bool) -> None: ...
    def setTime(self, double: float) -> None: ...
    def toString(self) -> str:
        """
        
            Overrides:
                :code:`toString` in class :class:`~cern.lsa.domain.cern.exploitation.BctMarker`
        
        
        """
        ...

class BctMarkerExistsException(java.lang.RuntimeException):
    """
    public class BctMarkerExistsException extends `RuntimeException <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/RuntimeException.html?is-external=true>`
    
    
        Also see:
            :meth:`~serialized`
    """
    def __init__(self, string: str): ...

class FunctionsToReachNewValues:
    """
    @Immutable public interface FunctionsToReachNewValues
    
        Represents the function that can potentially be used by FGCs or other devices to reach a trimmed scalar value using the
        specified function. This object must be specified as a trim/drive attribute {@link
        cern.lsa.domain.settings.TrimRequest#setAttribute)} or :code:`DriveRequest.setAttribute(java.lang.String,
        java.lang.Object)` where the attribute name is
        :meth:`~cern.lsa.domain.cern.commons.LsaCernConstants.DriveConstants.ATTR_FUNCTIONS_TO_REACH_NEW_VALUES`
    """
    @staticmethod
    def builder() -> 'DefaultFunctionsToReachNewValues.Builder':
        """
            Creates builder to build :class:`~cern.lsa.domain.cern.exploitation.FunctionsToReachNewValues`
        
            Returns:
                the builder
        
        
        """
        ...
    def getFunction(self, parameter: cern.lsa.domain.settings.Parameter) -> cern.accsoft.commons.value.ImmutableDiscreteFunction:
        """
        
            Parameters:
                parameter (cern.lsa.domain.settings.Parameter): the parameter for which we want the function
        
            Returns:
                the functions for the given parameter
        
        
        """
        ...
    def getFunctions(self) -> java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]: ...

class SpsRunType(java.lang.Enum['SpsRunType']):
    """
    public enum SpsRunType extends `Enum <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Enum.html?is-external=true>`<:class:`~cern.lsa.domain.cern.exploitation.SpsRunType`>
    """
    LHC_PROTONS: typing.ClassVar['SpsRunType'] = ...
    LHC_IONS: typing.ClassVar['SpsRunType'] = ...
    SFT_PROTONS: typing.ClassVar['SpsRunType'] = ...
    SFT_IONS: typing.ClassVar['SpsRunType'] = ...
    MD_PROTONS: typing.ClassVar['SpsRunType'] = ...
    MD_IONS: typing.ClassVar['SpsRunType'] = ...
    UNDEFINED: typing.ClassVar['SpsRunType'] = ...
    ATTRIBUTE_NAME: typing.ClassVar[str] = ...
    """
    public static final `String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>` ATTRIBUTE_NAME
    
    
        Also see:
            :meth:`~constant`
    
    
    """
    def getAttributeValue(self) -> str: ...
    @staticmethod
    def getSpsRunTypeForAttributeValue(string: str) -> 'SpsRunType': ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SpsRunType':
        """
            Returns the enum constant of this type with the specified name. The string must match *exactly* an identifier used to
            declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the enum constant to be returned.
        
            Returns:
                the enum constant with the specified name
        
            Raises:
                : if this enum type has no constant with the specified name
                : if the argument is null
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['SpsRunType']:
        """
            Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to
            iterate over the constants as follows:
        
            .. code-block: java
            
            for (SpsRunType c : SpsRunType.values())
                System.out.println(c);
            
        
            Returns:
                an array containing the constants of this enum type, in the order they are declared
        
        
        """
        ...

class TimeToReachNewValues:
    """
    @Immutable public interface TimeToReachNewValues
    
        Represents the result of the calculation of the time needed to reach new values
    """
    def areAllParametersTakenIntoAccount(self) -> bool:
        """
        
            Returns:
                whether all parameters were taken into account for the calculation
        
        
        """
        ...
    @staticmethod
    def builder() -> 'DefaultTimeToReachNewValues.Builder':
        """
            Creates builder to build :class:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues`
        
            Returns:
                the builder
        
        
        """
        ...
    def getDuration(self) -> java.util.Optional[java.time.Duration]: ...
    def getIgnoredParameters(self) -> java.util.Map[cern.lsa.domain.settings.Parameter, 'TimeToReachNewValues.NotCalculatedReason']: ...
    class NotCalculatedReason:
        def getMessage(self) -> str: ...

class DefaultFunctionsToReachNewValues(FunctionsToReachNewValues, java.io.Serializable):
    """
    `@ParametersAreNonnullByDefault <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/ParametersAreNonnullByDefault.html?is-external=true>` `@Generated <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/Generated.html?is-external=true>`("org.immutables.processor.ProxyProcessor") @Immutable `@CheckReturnValue <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/CheckReturnValue.html?is-external=true>` public final class DefaultFunctionsToReachNewValues extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements :class:`~cern.lsa.domain.cern.exploitation.FunctionsToReachNewValues`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
        Immutable implementation of :class:`~cern.lsa.domain.cern.exploitation.FunctionsToReachNewValues`.
    
        Use the builder to create immutable instances: :code:`DefaultFunctionsToReachNewValues.builder()`.
    
        Also see:
            :meth:`~serialized`
    """
    @staticmethod
    def builder() -> 'DefaultFunctionsToReachNewValues.Builder':
        """
            Creates a builder for :class:`~cern.lsa.domain.cern.exploitation.DefaultFunctionsToReachNewValues`.
        
            .. code-block: java
            
             DefaultFunctionsToReachNewValues.builder()
                .putFunction|putAllFunctions(cern.lsa.domain.settings.Parameter => cern.accsoft.commons.value.ImmutableDiscreteFunction) // :meth:`~cern.lsa.domain.cern.exploitation.FunctionsToReachNewValues.getFunctions` mappings
                .build();
             
        
            Returns:
                A new DefaultFunctionsToReachNewValues builder
        
        
        """
        ...
    @staticmethod
    def copyOf(functionsToReachNewValues: FunctionsToReachNewValues) -> 'DefaultFunctionsToReachNewValues':
        """
            Creates an immutable copy of a :class:`~cern.lsa.domain.cern.exploitation.FunctionsToReachNewValues` value. Uses
            accessors to get values to initialize the new immutable instance. If an instance is already immutable, it is returned as
            is.
        
            Parameters:
                instance (:class:`~cern.lsa.domain.cern.exploitation.FunctionsToReachNewValues`): The instance to copy
        
            Returns:
                A copied immutable FunctionsToReachNewValues instance
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool: ...
    def getFunctions(self) -> com.google.common.collect.ImmutableMap[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.cern.exploitation.FunctionsToReachNewValues.getFunctions`Â in
                interfaceÂ :class:`~cern.lsa.domain.cern.exploitation.FunctionsToReachNewValues`
        
            Returns:
                the functions per parameter
        
        
        """
        ...
    def hashCode(self) -> int:
        """
            Computes a hash code from attributes: :code:`functions`.
        
            Overrides:
                 in class 
        
            Returns:
                hashCode value
        
        
        """
        ...
    def toString(self) -> str:
        """
            Prints the immutable value :code:`FunctionsToReachNewValues` with attribute values.
        
            Overrides:
                 in class 
        
            Returns:
                A string representation of the value
        
        
        """
        ...
    def withFunctions(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]]) -> 'DefaultFunctionsToReachNewValues': ...
    class Builder:
        def build(self) -> 'DefaultFunctionsToReachNewValues': ...
        def functions(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]]) -> 'DefaultFunctionsToReachNewValues.Builder': ...
        def putAllFunctions(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]]) -> 'DefaultFunctionsToReachNewValues.Builder': ...
        @typing.overload
        def putFunction(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunction: cern.accsoft.commons.value.ImmutableDiscreteFunction) -> 'DefaultFunctionsToReachNewValues.Builder': ...
        @typing.overload
        def putFunction(self, entry: java.util.Map.Entry[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]) -> 'DefaultFunctionsToReachNewValues.Builder': ...

class DefaultNotCalculatedReason(TimeToReachNewValues.NotCalculatedReason, java.io.Serializable):
    """
    `@ParametersAreNonnullByDefault <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/ParametersAreNonnullByDefault.html?is-external=true>` `@Generated <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/Generated.html?is-external=true>`("org.immutables.processor.ProxyProcessor") @Immutable `@CheckReturnValue <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/CheckReturnValue.html?is-external=true>` public final class DefaultNotCalculatedReason extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements :class:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.NotCalculatedReason`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
        Immutable implementation of :class:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.NotCalculatedReason`.
    
        Use the builder to create immutable instances: :code:`DefaultNotCalculatedReason.builder()`. Use the static factory
        method to create immutable instances: :code:`DefaultNotCalculatedReason.of()`.
    
        Also see:
            :meth:`~serialized`
    """
    @staticmethod
    def builder() -> 'DefaultNotCalculatedReason.Builder':
        """
            Creates a builder for :class:`~cern.lsa.domain.cern.exploitation.DefaultNotCalculatedReason`.
        
            .. code-block: java
            
             DefaultNotCalculatedReason.builder()
                .message(String) // required :meth:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.NotCalculatedReason.getMessage`
                .build();
             
        
            Returns:
                A new DefaultNotCalculatedReason builder
        
        
        """
        ...
    @staticmethod
    def copyOf(notCalculatedReason: TimeToReachNewValues.NotCalculatedReason) -> 'DefaultNotCalculatedReason':
        """
            Creates an immutable copy of a :class:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.NotCalculatedReason`
            value. Uses accessors to get values to initialize the new immutable instance. If an instance is already immutable, it is
            returned as is.
        
            Parameters:
                instance (:class:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.NotCalculatedReason`): The instance to copy
        
            Returns:
                A copied immutable NotCalculatedReason instance
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool: ...
    def getMessage(self) -> str:
        """
        
            Specified by:
                :meth:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.NotCalculatedReason.getMessage`Â in
                interfaceÂ :class:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.NotCalculatedReason`
        
            Returns:
                the message that describes this particular reason
        
        
        """
        ...
    def hashCode(self) -> int:
        """
            Computes a hash code from attributes: :code:`message`.
        
            Overrides:
                 in class 
        
            Returns:
                hashCode value
        
        
        """
        ...
    @staticmethod
    def of(string: str) -> 'DefaultNotCalculatedReason':
        """
            Construct a new immutable :code:`NotCalculatedReason` instance.
        
            Parameters:
                message (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): The value for the :code:`message` attribute
        
            Returns:
                An immutable NotCalculatedReason instance
        
        
        """
        ...
    def toString(self) -> str:
        """
            Prints the immutable value :code:`NotCalculatedReason` with attribute values.
        
            Overrides:
                 in class 
        
            Returns:
                A string representation of the value
        
        
        """
        ...
    def withMessage(self, string: str) -> 'DefaultNotCalculatedReason':
        """
            Copy the current immutable object by setting a value for the
            :meth:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.NotCalculatedReason.getMessage` attribute. An equals
            check used to prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): A new value for message
        
            Returns:
                A modified copy of the :code:`this` object
        
        
        """
        ...
    class Builder:
        def build(self) -> 'DefaultNotCalculatedReason': ...
        def message(self, string: str) -> 'DefaultNotCalculatedReason.Builder': ...

class DefaultTimeToReachNewValues(TimeToReachNewValues, java.io.Serializable):
    """
    `@ParametersAreNonnullByDefault <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/ParametersAreNonnullByDefault.html?is-external=true>` `@Generated <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/Generated.html?is-external=true>`("org.immutables.processor.ProxyProcessor") @Immutable `@CheckReturnValue <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/javax/annotation/CheckReturnValue.html?is-external=true>` public final class DefaultTimeToReachNewValues extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements :class:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
        Immutable implementation of :class:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues`.
    
        Use the builder to create immutable instances: :code:`DefaultTimeToReachNewValues.builder()`.
    
        Also see:
            :meth:`~serialized`
    """
    @staticmethod
    def builder() -> 'DefaultTimeToReachNewValues.Builder':
        """
            Creates a builder for :class:`~cern.lsa.domain.cern.exploitation.DefaultTimeToReachNewValues`.
        
            .. code-block: java
            
             DefaultTimeToReachNewValues.builder()
                .duration(java.time.Duration) // optional :meth:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.getDuration`
                .putIgnoredParameter|putAllIgnoredParameters(cern.lsa.domain.settings.Parameter => cern.lsa.domain.cern.exploitation.TimeToReachNewValues.NotCalculatedReason) // :meth:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.getIgnoredParameters` mappings
                .build();
             
        
            Returns:
                A new DefaultTimeToReachNewValues builder
        
        
        """
        ...
    @staticmethod
    def copyOf(timeToReachNewValues: TimeToReachNewValues) -> 'DefaultTimeToReachNewValues':
        """
            Creates an immutable copy of a :class:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues` value. Uses accessors to
            get values to initialize the new immutable instance. If an instance is already immutable, it is returned as is.
        
            Parameters:
                instance (:class:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues`): The instance to copy
        
            Returns:
                A copied immutable TimeToReachNewValues instance
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDuration(self) -> java.util.Optional[java.time.Duration]: ...
    def getIgnoredParameters(self) -> com.google.common.collect.ImmutableMap[cern.lsa.domain.settings.Parameter, TimeToReachNewValues.NotCalculatedReason]: ...
    def hashCode(self) -> int:
        """
            Computes a hash code from attributes: :code:`duration`, :code:`ignoredParameters`.
        
            Overrides:
                 in class 
        
            Returns:
                hashCode value
        
        
        """
        ...
    def toString(self) -> str:
        """
            Prints the immutable value :code:`TimeToReachNewValues` with attribute values.
        
            Overrides:
                 in class 
        
            Returns:
                A string representation of the value
        
        
        """
        ...
    @typing.overload
    def withDuration(self, duration: java.time.Duration) -> 'DefaultTimeToReachNewValues':
        """
            Copy the current immutable object by setting a *present* value for the optional
            :meth:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.getDuration` attribute.
        
            Parameters:
                value (`Duration <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/time/Duration.html?is-external=true>`): The value for duration
        
            Returns:
                A modified copy of :code:`this` object
        
        public final :class:`~cern.lsa.domain.cern.exploitation.DefaultTimeToReachNewValues` withDuration (`Optional <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/util/Optional.html?is-external=true>`<? extends `Duration <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/time/Duration.html?is-external=true>`> optional)
        
            Copy the current immutable object by setting an optional value for the
            :meth:`~cern.lsa.domain.cern.exploitation.TimeToReachNewValues.getDuration` attribute. A shallow reference equality
            check is used on unboxed optional value to prevent copying of the same value by returning :code:`this`.
        
            Parameters:
                optional (`Optional <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/util/Optional.html?is-external=true>`<? extends `Duration <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/time/Duration.html?is-external=true>`> optional): A value for duration
        
            Returns:
                A modified copy of :code:`this` object
        
        
        """
        ...
    @typing.overload
    def withDuration(self, optional: java.util.Optional[java.time.Duration]) -> 'DefaultTimeToReachNewValues': ...
    def withIgnoredParameters(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, TimeToReachNewValues.NotCalculatedReason], typing.Mapping[cern.lsa.domain.settings.Parameter, TimeToReachNewValues.NotCalculatedReason]]) -> 'DefaultTimeToReachNewValues': ...
    class Builder:
        def build(self) -> 'DefaultTimeToReachNewValues': ...
        @typing.overload
        def duration(self, duration: java.time.Duration) -> 'DefaultTimeToReachNewValues.Builder': ...
        @typing.overload
        def duration(self, optional: java.util.Optional[java.time.Duration]) -> 'DefaultTimeToReachNewValues.Builder': ...
        def ignoredParameters(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, TimeToReachNewValues.NotCalculatedReason], typing.Mapping[cern.lsa.domain.settings.Parameter, TimeToReachNewValues.NotCalculatedReason]]) -> 'DefaultTimeToReachNewValues.Builder': ...
        def putAllIgnoredParameters(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, TimeToReachNewValues.NotCalculatedReason], typing.Mapping[cern.lsa.domain.settings.Parameter, TimeToReachNewValues.NotCalculatedReason]]) -> 'DefaultTimeToReachNewValues.Builder': ...
        @typing.overload
        def putIgnoredParameter(self, parameter: cern.lsa.domain.settings.Parameter, notCalculatedReason: TimeToReachNewValues.NotCalculatedReason) -> 'DefaultTimeToReachNewValues.Builder': ...
        @typing.overload
        def putIgnoredParameter(self, entry: java.util.Map.Entry[cern.lsa.domain.settings.Parameter, TimeToReachNewValues.NotCalculatedReason]) -> 'DefaultTimeToReachNewValues.Builder': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.cern.exploitation")``.

    BctMarker: typing.Type[BctMarker]
    BctMarkerExistsException: typing.Type[BctMarkerExistsException]
    DefaultFunctionsToReachNewValues: typing.Type[DefaultFunctionsToReachNewValues]
    DefaultNotCalculatedReason: typing.Type[DefaultNotCalculatedReason]
    DefaultTimeToReachNewValues: typing.Type[DefaultTimeToReachNewValues]
    FunctionsToReachNewValues: typing.Type[FunctionsToReachNewValues]
    SpsRunType: typing.Type[SpsRunType]
    TimeToReachNewValues: typing.Type[TimeToReachNewValues]
