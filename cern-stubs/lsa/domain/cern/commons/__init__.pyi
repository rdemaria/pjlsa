import cern.accsoft.commons.domain
import java.util.function
import typing



class CernAccelerators:
    """
    public class CernAccelerators extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    
        A helper class for methods related to :code:`CernAccelerator`s and their `null
        <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/util/function/Supplier.html?is-external=true>` of
        :code:`Accelerator`
    """
    class AD(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
    class AWAKE(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
    class CTF(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
    class ELENA(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
    class ISOLDE(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
    class LEIR(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
    class LHC(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
    class LINAC4(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
    class NORTH(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
    class PS(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
    class PSB(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
    class SPS(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...

class LsaCernConstants:
    """
    public class LsaCernConstants extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    
        Central place for Cern-specific LSA constants, specific inner classes for various topics like drive, trim, etc.
    """
    class DriveConstants:
        ATTR_FUNCTIONS_TO_REACH_NEW_VALUES: typing.ClassVar[str] = ...
        ATTR_TIME_TO_REACH_NEW_VALUES: typing.ClassVar[str] = ...
        ATTR_TRANSACTION_ID: typing.ClassVar[str] = ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.cern.commons")``.

    CernAccelerators: typing.Type[CernAccelerators]
    LsaCernConstants: typing.Type[LsaCernConstants]
