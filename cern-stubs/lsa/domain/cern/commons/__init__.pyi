from typing import Any as _py_Any
from typing import ClassVar as _py_ClassVar
from typing import overload
import cern.accsoft.commons.domain
import java.util.function


class CernAccelerators:
    class AD(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...
    class AWAKE(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...
    class CTF(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...
    class ELENA(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...
    class ISOLDE(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...
    class LEIR(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...
    class LHC(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...
    class LINAC4(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...
    class NORTH(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...
    class PS(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...
    class PSB(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...
    class SPS(java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]):
        def __init__(self): ...
        @overload
        def get(self) -> cern.accsoft.commons.domain.Accelerator: ...
        @overload
        def get(self) -> _py_Any: ...

class LsaCernConstants:
    class DriveConstants:
        ATTR_FUNCTIONS_TO_REACH_NEW_VALUES: _py_ClassVar[str] = ...
        ATTR_TIME_TO_REACH_NEW_VALUES: _py_ClassVar[str] = ...
        ATTR_TRANSACTION_ID: _py_ClassVar[str] = ...
