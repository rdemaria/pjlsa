import cern.accsoft.commons.util
import cern.lsa.domain.cern.timing
import cern.lsa.domain.commons
import java.lang
import java.util
import typing



class AdCycleSegment(cern.accsoft.commons.util.Named):
    """
    Java class 'cern.lsa.domain.cern.settings.ad.AdCycleSegment'
    
        Interfaces:
            cern.accsoft.commons.util.Named
    
    """
    def addTimingProcess(self, timingProcess: cern.lsa.domain.cern.timing.TimingProcess, int: int, timingProcessAnchor: cern.lsa.domain.cern.timing.TimingProcessAnchor) -> None: ...
    def getAttribute(self, string: str) -> str: ...
    def getAttributeNames(self) -> java.util.Set[str]: ...
    def getEndMomentum(self) -> int: ...
    def getInitialMomentum(self) -> int: ...
    def getLength(self) -> int: ...
    def getScheduledTimingProcesses(self) -> java.util.Set[cern.lsa.domain.cern.timing.TimingProcessScheduling]: ...
    def getStartTime(self) -> int: ...
    def getType(self) -> 'SegmentType': ...
    def isFirstSegmentInCycle(self) -> bool: ...
    def nextSegment(self) -> 'AdCycleSegment': ...
    def previousSegment(self) -> 'AdCycleSegment': ...
    def removeAttribute(self, string: str) -> None: ...
    def removeTimingProcess(self, timingProcess: cern.lsa.domain.cern.timing.TimingProcess) -> None: ...
    def setAttribute(self, string: str, string2: str) -> None: ...
    def setLength(self, int: int) -> None: ...
    def setName(self, string: str) -> None: ...

class AdCycleStructure(cern.lsa.domain.commons.IdentifiedEntity):
    """
    Java class 'cern.lsa.domain.cern.settings.ad.AdCycleStructure'
    
        Interfaces:
            cern.lsa.domain.commons.IdentifiedEntity
    
    """
    def getId(self) -> int: ...
    def getLength(self) -> int: ...
    def getSegment(self, int: int) -> AdCycleSegment: ...
    def getSegments(self) -> java.util.List[AdCycleSegment]: ...
    def getSegmentsCount(self) -> int: ...
    def getVersion(self) -> int: ...
    def insertFlatSegment(self, rampSegment: 'RampSegment', int: int) -> 'FlatSegment': ...
    def isTestCycle(self) -> bool: ...
    def removeFlatSegment(self, flatSegment: 'FlatSegment') -> None: ...

class PauseLocation(java.lang.Enum['PauseLocation']):
    """
    Java class 'cern.lsa.domain.cern.settings.ad.PauseLocation'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        NONE (cern.lsa.domain.cern.settings.ad.PauseLocation): final static enum constant
        BEFORE_START (cern.lsa.domain.cern.settings.ad.PauseLocation): final static enum constant
        BEFORE_END (cern.lsa.domain.cern.settings.ad.PauseLocation): final static enum constant
        AFTER_END (cern.lsa.domain.cern.settings.ad.PauseLocation): final static enum constant
    
    """
    NONE: typing.ClassVar['PauseLocation'] = ...
    BEFORE_START: typing.ClassVar['PauseLocation'] = ...
    BEFORE_END: typing.ClassVar['PauseLocation'] = ...
    AFTER_END: typing.ClassVar['PauseLocation'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'PauseLocation': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['PauseLocation']: ...

class SegmentAttribute(java.lang.Enum['SegmentAttribute']):
    """
    Java class 'cern.lsa.domain.cern.settings.ad.SegmentAttribute'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        ELTAG (cern.lsa.domain.cern.settings.ad.SegmentAttribute): final static enum constant
    
    """
    ELTAG: typing.ClassVar['SegmentAttribute'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SegmentAttribute': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['SegmentAttribute']: ...

class SegmentType(java.lang.Enum['SegmentType']):
    """
    Java class 'cern.lsa.domain.cern.settings.ad.SegmentType'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        RAMP (cern.lsa.domain.cern.settings.ad.SegmentType): final static enum constant
        FLAT (cern.lsa.domain.cern.settings.ad.SegmentType): final static enum constant
    
    """
    RAMP: typing.ClassVar['SegmentType'] = ...
    FLAT: typing.ClassVar['SegmentType'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SegmentType': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['SegmentType']: ...

class FlatSegment(AdCycleSegment):
    """
    Java class 'cern.lsa.domain.cern.settings.ad.FlatSegment'
    
        Interfaces:
            cern.lsa.domain.cern.settings.ad.AdCycleSegment
    
    """
    def getNumberOfExtractions(self) -> int: ...
    def getNumberOfInjections(self) -> int: ...
    def getPauseLocation(self) -> PauseLocation: ...
    def setNumberOfExtractions(self, int: int) -> None: ...
    def setNumberOfInjections(self, int: int) -> None: ...
    def setPauseLocation(self, pauseLocation: PauseLocation) -> None: ...

class RampSegment(AdCycleSegment):
    """
    Java class 'cern.lsa.domain.cern.settings.ad.RampSegment'
    
        Interfaces:
            cern.lsa.domain.cern.settings.ad.AdCycleSegment
    
    """
    def getFlatPartLength(self) -> int: ...
    def getRoundPartLength(self) -> int: ...
    def setEndMomentum(self, int: int) -> None: ...
    def setFlatPartLength(self, int: int) -> None: ...
    def setRoundPartLength(self, int: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.cern.settings.ad")``.

    AdCycleSegment: typing.Type[AdCycleSegment]
    AdCycleStructure: typing.Type[AdCycleStructure]
    FlatSegment: typing.Type[FlatSegment]
    PauseLocation: typing.Type[PauseLocation]
    RampSegment: typing.Type[RampSegment]
    SegmentAttribute: typing.Type[SegmentAttribute]
    SegmentType: typing.Type[SegmentType]
