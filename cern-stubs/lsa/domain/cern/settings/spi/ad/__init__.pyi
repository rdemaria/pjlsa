import cern.lsa.domain.cern.settings.ad
import cern.lsa.domain.cern.timing
import cern.lsa.domain.commons.spi
import java.io
import java.lang
import java.util
import typing



class ADCycleSerializer:
    """
    Java class 'cern.lsa.domain.cern.settings.spi.ad.ADCycleSerializer'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ADCycleSerializer()
    
      Raises:
        javax.xml.bind.JAXBException: from java
    
    """
    def __init__(self): ...
    def marshal(self, adCycleStructure: cern.lsa.domain.cern.settings.ad.AdCycleStructure) -> str: ...
    def unmarshal(self, string: str) -> 'AdCycleStructureImpl': ...

class AbstractAdCycleSegment(cern.lsa.domain.cern.settings.ad.AdCycleSegment, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.cern.settings.spi.ad.AbstractAdCycleSegment'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.cern.settings.ad.AdCycleSegment,
            java.io.Serializable
    
    """
    def addTimingProcess(self, timingProcess: cern.lsa.domain.cern.timing.TimingProcess, int: int, timingProcessAnchor: cern.lsa.domain.cern.timing.TimingProcessAnchor) -> None: ...
    def getAttribute(self, string: str) -> str: ...
    def getAttributeNames(self) -> java.util.Set[str]: ...
    def getAttributes(self) -> java.util.Set['AbstractAdCycleSegment.Attribute']: ...
    def getInitialMomentum(self) -> int: ...
    def getLength(self) -> int: ...
    def getName(self) -> str: ...
    def getScheduledTimingProcesses(self) -> java.util.Set[cern.lsa.domain.cern.timing.TimingProcessScheduling]: ...
    def getStartTime(self) -> int: ...
    def getType(self) -> cern.lsa.domain.cern.settings.ad.SegmentType: ...
    def isFirstSegmentInCycle(self) -> bool: ...
    def nextSegment(self) -> cern.lsa.domain.cern.settings.ad.AdCycleSegment: ...
    def previousSegment(self) -> cern.lsa.domain.cern.settings.ad.AdCycleSegment: ...
    def removeAttribute(self, string: str) -> None: ...
    def removeTimingProcess(self, timingProcess: cern.lsa.domain.cern.timing.TimingProcess) -> None: ...
    def setAttribute(self, string: str, string2: str) -> None: ...
    def setAttributes(self, set: java.util.Set['AbstractAdCycleSegment.Attribute']) -> None: ...
    def setLength(self, int: int) -> None: ...
    def setName(self, string: str) -> None: ...
    class Attribute: ...

class AdCycleStructureImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedEntity['AdCycleStructureImpl'], cern.lsa.domain.cern.settings.ad.AdCycleStructure, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.cern.settings.spi.ad.AdCycleStructureImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedEntity
    
        Interfaces:
            cern.lsa.domain.cern.settings.ad.AdCycleStructure,
            java.io.Serializable
    
      Constructors:
        * AdCycleStructureImpl()
        * AdCycleStructureImpl(java.util.List)
    
      Attributes:
        PARAMETER_CYCLE (java.lang.String): final static field
        PARAMETER_CYCLE_TEST (java.lang.String): final static field
    
    """
    PARAMETER_CYCLE: typing.ClassVar[str] = ...
    PARAMETER_CYCLE_TEST: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List[cern.lsa.domain.cern.settings.ad.AdCycleSegment]): ...
    @staticmethod
    def getCycleParameterName(boolean: bool) -> str: ...
    def getId(self) -> int: ...
    def getLength(self) -> int: ...
    def getSegment(self, int: int) -> cern.lsa.domain.cern.settings.ad.AdCycleSegment: ...
    def getSegments(self) -> java.util.List[cern.lsa.domain.cern.settings.ad.AdCycleSegment]: ...
    def getSegmentsCount(self) -> int: ...
    def getVersion(self) -> int: ...
    def insertFlatSegment(self, rampSegment: cern.lsa.domain.cern.settings.ad.RampSegment, int: int) -> cern.lsa.domain.cern.settings.ad.FlatSegment: ...
    def isTestCycle(self) -> bool: ...
    def removeFlatSegment(self, flatSegment: cern.lsa.domain.cern.settings.ad.FlatSegment) -> None: ...
    def setSegments(self, list: java.util.List[cern.lsa.domain.cern.settings.ad.AdCycleSegment]) -> None: ...
    def setTestCycle(self, boolean: bool) -> None: ...
    def setVersion(self, int: int) -> None: ...

class SettingsUpdateState(java.lang.Enum['SettingsUpdateState']):
    """
    Java class 'cern.lsa.domain.cern.settings.spi.ad.SettingsUpdateState'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        CURRENT_SETTINGS (cern.lsa.domain.cern.settings.spi.ad.SettingsUpdateState): final static enum constant
        UPDATED_SETTINGS (cern.lsa.domain.cern.settings.spi.ad.SettingsUpdateState): final static enum constant
    
    """
    CURRENT_SETTINGS: typing.ClassVar['SettingsUpdateState'] = ...
    UPDATED_SETTINGS: typing.ClassVar['SettingsUpdateState'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SettingsUpdateState': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['SettingsUpdateState']: ...

class FlatSegmentImpl(AbstractAdCycleSegment, cern.lsa.domain.cern.settings.ad.FlatSegment):
    """
    Java class 'cern.lsa.domain.cern.settings.spi.ad.FlatSegmentImpl'
    
        Extends:
            cern.lsa.domain.cern.settings.spi.ad.AbstractAdCycleSegment
    
        Interfaces:
            cern.lsa.domain.cern.settings.ad.FlatSegment
    
      Constructors:
        * FlatSegmentImpl()
        * FlatSegmentImpl(java.lang.String, int)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str, int: int): ...
    def getEndMomentum(self) -> int: ...
    def getNumberOfExtractions(self) -> int: ...
    def getNumberOfInjections(self) -> int: ...
    def getPauseLocation(self) -> cern.lsa.domain.cern.settings.ad.PauseLocation: ...
    def getStartTime(self) -> int: ...
    def setNumberOfExtractions(self, int: int) -> None: ...
    def setNumberOfInjections(self, int: int) -> None: ...
    def setPauseLocation(self, pauseLocation: cern.lsa.domain.cern.settings.ad.PauseLocation) -> None: ...
    def toString(self) -> str: ...

class RampSegmentImpl(AbstractAdCycleSegment, cern.lsa.domain.cern.settings.ad.RampSegment):
    """
    Java class 'cern.lsa.domain.cern.settings.spi.ad.RampSegmentImpl'
    
        Extends:
            cern.lsa.domain.cern.settings.spi.ad.AbstractAdCycleSegment
    
        Interfaces:
            cern.lsa.domain.cern.settings.ad.RampSegment
    
      Constructors:
        * RampSegmentImpl(int)
    
    """
    def __init__(self, int: int): ...
    def getEndMomentum(self) -> int: ...
    def getFlatPartLength(self) -> int: ...
    def getRoundPartLength(self) -> int: ...
    def setEndMomentum(self, int: int) -> None: ...
    def setFlatPartLength(self, int: int) -> None: ...
    def setRoundPartLength(self, int: int) -> None: ...
    def toString(self) -> str: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.cern.settings.spi.ad")``.

    ADCycleSerializer: typing.Type[ADCycleSerializer]
    AbstractAdCycleSegment: typing.Type[AbstractAdCycleSegment]
    AdCycleStructureImpl: typing.Type[AdCycleStructureImpl]
    FlatSegmentImpl: typing.Type[FlatSegmentImpl]
    RampSegmentImpl: typing.Type[RampSegmentImpl]
    SettingsUpdateState: typing.Type[SettingsUpdateState]
