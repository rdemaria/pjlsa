import cern.lsa.domain.settings
import com.google.common.collect
import java.io
import java.lang
import java.util
import typing


class BeamProcessTypeOpticTransitionInfo(java.io.Serializable):
    def __init__(self, double: float, string: str, string2: str, double2: float, double3: float): ...
    def getDuration(self) -> float: ...
    def getEndOptic(self) -> str: ...
    def getParabolicFraction(self) -> float: ...
    def getStartOptic(self) -> str: ...
    def getStartTime(self) -> float: ...

class CernContextCategory(java.lang.Enum['CernContextCategory'], cern.lsa.domain.settings.ContextCategory):
    MD: typing.ClassVar['CernContextCategory'] = ...
    OBSOLETE: typing.ClassVar['CernContextCategory'] = ...
    OPERATIONAL: typing.ClassVar['CernContextCategory'] = ...
    TEST: typing.ClassVar['CernContextCategory'] = ...
    REFERENCE: typing.ClassVar['CernContextCategory'] = ...
    ARCHIVED: typing.ClassVar['CernContextCategory'] = ...
    def getName(self) -> str: ...
    def isArchived(self) -> bool: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CernContextCategory': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['CernContextCategory']: ...

class DeviceReDriveResponse:
    def getDeviceName(self) -> str: ...
    def getParameterReDriveResponses(self) -> java.util.Set['ParameterReDriveResponse']: ...

class ParameterReDriveResponse:
    def containsError(self) -> bool: ...
    def getContextName(self) -> str: ...
    def getJapcParameterNameToExceptionMessage(self) -> java.util.Map[str, str]: ...
    def getLsaExceptionMessage(self) -> str: ...
    def getParameterName(self) -> str: ...

class ReDriveRequest:
    def getDeviceNamesToReDrive(self) -> java.util.Set[str]: ...

class ReDriveResponse:
    def getDeviceReDriveResponses(self) -> java.util.Collection[DeviceReDriveResponse]: ...

class DefaultDeviceReDriveResponse(DeviceReDriveResponse):
    @staticmethod
    def builder() -> 'DefaultDeviceReDriveResponse.Builder': ...
    @staticmethod
    def copyOf(deviceReDriveResponse: DeviceReDriveResponse) -> 'DefaultDeviceReDriveResponse': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDeviceName(self) -> str: ...
    def getParameterReDriveResponses(self) -> com.google.common.collect.ImmutableSet[ParameterReDriveResponse]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def withDeviceName(self, string: str) -> 'DefaultDeviceReDriveResponse': ...
    @typing.overload
    def withParameterReDriveResponses(self, parameterReDriveResponseArray: typing.List[ParameterReDriveResponse]) -> 'DefaultDeviceReDriveResponse': ...
    @typing.overload
    def withParameterReDriveResponses(self, iterable: java.lang.Iterable[ParameterReDriveResponse]) -> 'DefaultDeviceReDriveResponse': ...
    class Builder:
        def addAllParameterReDriveResponses(self, iterable: java.lang.Iterable[ParameterReDriveResponse]) -> 'DefaultDeviceReDriveResponse.Builder': ...
        def addParameterReDriveResponse(self, parameterReDriveResponse: ParameterReDriveResponse) -> 'DefaultDeviceReDriveResponse.Builder': ...
        def addParameterReDriveResponses(self, parameterReDriveResponseArray: typing.List[ParameterReDriveResponse]) -> 'DefaultDeviceReDriveResponse.Builder': ...
        def build(self) -> 'DefaultDeviceReDriveResponse': ...
        def deviceName(self, string: str) -> 'DefaultDeviceReDriveResponse.Builder': ...
        def parameterReDriveResponses(self, iterable: java.lang.Iterable[ParameterReDriveResponse]) -> 'DefaultDeviceReDriveResponse.Builder': ...

class DefaultParameterReDriveResponse(ParameterReDriveResponse):
    @staticmethod
    def builder() -> 'DefaultParameterReDriveResponse.Builder': ...
    def containsError(self) -> bool: ...
    @staticmethod
    def copyOf(parameterReDriveResponse: ParameterReDriveResponse) -> 'DefaultParameterReDriveResponse': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getContextName(self) -> str: ...
    def getJapcParameterNameToExceptionMessage(self) -> com.google.common.collect.ImmutableMap[str, str]: ...
    def getLsaExceptionMessage(self) -> str: ...
    def getParameterName(self) -> str: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def withContainsError(self, boolean: bool) -> 'DefaultParameterReDriveResponse': ...
    def withContextName(self, string: str) -> 'DefaultParameterReDriveResponse': ...
    def withJapcParameterNameToExceptionMessage(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'DefaultParameterReDriveResponse': ...
    def withLsaExceptionMessage(self, string: str) -> 'DefaultParameterReDriveResponse': ...
    def withParameterName(self, string: str) -> 'DefaultParameterReDriveResponse': ...
    class Builder:
        def build(self) -> 'DefaultParameterReDriveResponse': ...
        def containsError(self, boolean: bool) -> 'DefaultParameterReDriveResponse.Builder': ...
        def contextName(self, string: str) -> 'DefaultParameterReDriveResponse.Builder': ...
        def japcParameterNameToExceptionMessage(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'DefaultParameterReDriveResponse.Builder': ...
        def lsaExceptionMessage(self, string: str) -> 'DefaultParameterReDriveResponse.Builder': ...
        def parameterName(self, string: str) -> 'DefaultParameterReDriveResponse.Builder': ...
        def putAllJapcParameterNameToExceptionMessage(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'DefaultParameterReDriveResponse.Builder': ...
        @typing.overload
        def putJapcParameterNameToExceptionMessage(self, string: str, string2: str) -> 'DefaultParameterReDriveResponse.Builder': ...
        @typing.overload
        def putJapcParameterNameToExceptionMessage(self, entry: java.util.Map.Entry[str, str]) -> 'DefaultParameterReDriveResponse.Builder': ...

class DefaultReDriveRequest(ReDriveRequest):
    @staticmethod
    def builder() -> 'DefaultReDriveRequest.Builder': ...
    @staticmethod
    def copyOf(reDriveRequest: ReDriveRequest) -> 'DefaultReDriveRequest': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDeviceNamesToReDrive(self) -> com.google.common.collect.ImmutableSet[str]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    @typing.overload
    def withDeviceNamesToReDrive(self, iterable: java.lang.Iterable[str]) -> 'DefaultReDriveRequest': ...
    @typing.overload
    def withDeviceNamesToReDrive(self, stringArray: typing.List[str]) -> 'DefaultReDriveRequest': ...
    class Builder:
        def addAllDeviceNamesToReDrive(self, iterable: java.lang.Iterable[str]) -> 'DefaultReDriveRequest.Builder': ...
        @typing.overload
        def addDeviceNamesToReDrive(self, string: str) -> 'DefaultReDriveRequest.Builder': ...
        @typing.overload
        def addDeviceNamesToReDrive(self, stringArray: typing.List[str]) -> 'DefaultReDriveRequest.Builder': ...
        def build(self) -> 'DefaultReDriveRequest': ...
        def deviceNamesToReDrive(self, iterable: java.lang.Iterable[str]) -> 'DefaultReDriveRequest.Builder': ...

class DefaultReDriveResponse(ReDriveResponse):
    @staticmethod
    def builder() -> 'DefaultReDriveResponse.Builder': ...
    @staticmethod
    def copyOf(reDriveResponse: ReDriveResponse) -> 'DefaultReDriveResponse': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDeviceReDriveResponses(self) -> java.util.Collection[DeviceReDriveResponse]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def withDeviceReDriveResponses(self, collection: typing.Union[java.util.Collection[DeviceReDriveResponse], typing.Sequence[DeviceReDriveResponse]]) -> 'DefaultReDriveResponse': ...
    class Builder:
        def build(self) -> 'DefaultReDriveResponse': ...
        def deviceReDriveResponses(self, collection: typing.Union[java.util.Collection[DeviceReDriveResponse], typing.Sequence[DeviceReDriveResponse]]) -> 'DefaultReDriveResponse.Builder': ...
