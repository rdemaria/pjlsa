import cern.accsoft.commons.domain
import cern.accsoft.commons.util
import cern.accsoft.commons.value
import cern.lsa.domain.cern.timing
import cern.lsa.domain.commons
import cern.lsa.domain.settings
import com.google.common.collect
import java.io
import java.lang
import java.time
import java.util
import typing


class ELTAG(java.lang.Enum['ELTAG']):
    FT1: typing.ClassVar['ELTAG'] = ...
    FT2: typing.ClassVar['ELTAG'] = ...
    FT3: typing.ClassVar['ELTAG'] = ...
    FT4: typing.ClassVar['ELTAG'] = ...
    FTSP1: typing.ClassVar['ELTAG'] = ...
    FTSP2: typing.ClassVar['ELTAG'] = ...
    FTSP3: typing.ClassVar['ELTAG'] = ...
    FT2A: typing.ClassVar['ELTAG'] = ...
    FT2B: typing.ClassVar['ELTAG'] = ...
    FT3A: typing.ClassVar['ELTAG'] = ...
    FT3B: typing.ClassVar['ELTAG'] = ...
    FT3C: typing.ClassVar['ELTAG'] = ...
    FT3D: typing.ClassVar['ELTAG'] = ...
    FT4A: typing.ClassVar['ELTAG'] = ...
    FT4B: typing.ClassVar['ELTAG'] = ...
    FT4C: typing.ClassVar['ELTAG'] = ...
    RMP: typing.ClassVar['ELTAG'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ELTAG': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['ELTAG']: ...

class ElenaCycleSegment(cern.accsoft.commons.util.Named):
    def addTimingProcess(self, timingProcess: cern.lsa.domain.cern.timing.TimingProcess, duration: java.time.Duration, timingProcessAnchor: cern.lsa.domain.cern.timing.TimingProcessAnchor) -> None: ...
    def getAttribute(self, string: str) -> str: ...
    def getAttributeNames(self) -> java.util.Set[str]: ...
    def getEndMomentum(self) -> int: ...
    def getHarmonicNumber(self) -> int: ...
    def getLength(self) -> java.time.Duration: ...
    def getScheduledTimingProcesses(self) -> java.util.Set[cern.lsa.domain.cern.timing.TimingProcessScheduling]: ...
    def getStartMomentum(self) -> int: ...
    def getStartTime(self) -> java.time.Duration: ...
    def getType(self) -> 'SegmentType': ...
    def isFirstSegmentInCycle(self) -> bool: ...
    def nextSegment(self) -> 'ElenaCycleSegment': ...
    def previousSegment(self) -> 'ElenaCycleSegment': ...
    def removeAttribute(self, string: str) -> None: ...
    def removeTimingProcess(self, timingProcess: cern.lsa.domain.cern.timing.TimingProcess) -> None: ...
    def setAttribute(self, string: str, string2: str) -> None: ...
    def setHarmonicNumber(self, int: int) -> None: ...
    def setLength(self, duration: java.time.Duration) -> None: ...
    def setName(self, string: str) -> None: ...

class ElenaCycleSettings:
    @staticmethod
    def builder() -> 'DefaultElenaCycleSettings.Builder': ...
    def getElenaCycleStructure(self) -> 'ElenaCycleStructure': ...
    def getParameterToCorrectionFunction(self) -> java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]: ...
    def getParameterToTargetFunction(self) -> java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]: ...

class ElenaCycleStructure(cern.lsa.domain.commons.IdentifiedEntity):
    def getId(self) -> int: ...
    def getInjectionMode(self) -> 'InjectionMode': ...
    def getInjectionSegment(self) -> 'FlatSegment': ...
    def getLength(self) -> java.time.Duration: ...
    def getParticleType(self) -> cern.accsoft.commons.domain.ParticleType: ...
    def getSegments(self) -> java.util.List[ElenaCycleSegment]: ...
    def getSegmentsCount(self) -> int: ...
    def getVersion(self) -> int: ...
    def insertFlatSegment(self, rampSegment: 'RampSegment', int: int) -> 'FlatSegment': ...
    def removeFlatSegment(self, flatSegment: 'FlatSegment') -> None: ...
    def setInjectionMode(self, injectionMode: 'InjectionMode') -> None: ...
    def setParticleType(self, particleType: cern.accsoft.commons.domain.ParticleType) -> None: ...

class InjectionMode(java.lang.Enum['InjectionMode']):
    AD: typing.ClassVar['InjectionMode'] = ...
    LOCAL_SOURCE: typing.ClassVar['InjectionMode'] = ...
    STANDALONE: typing.ClassVar['InjectionMode'] = ...
    def getTimingValue(self) -> str: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'InjectionMode': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['InjectionMode']: ...

class PauseLocation(java.lang.Enum['PauseLocation']):
    NONE: typing.ClassVar['PauseLocation'] = ...
    BEFORE_START: typing.ClassVar['PauseLocation'] = ...
    BEFORE_END: typing.ClassVar['PauseLocation'] = ...
    AFTER_END: typing.ClassVar['PauseLocation'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'PauseLocation': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['PauseLocation']: ...

class SegmentAttribute(java.lang.Enum['SegmentAttribute']):
    ELTAG: typing.ClassVar['SegmentAttribute'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SegmentAttribute': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['SegmentAttribute']: ...

class SegmentType(java.lang.Enum['SegmentType']):
    RAMP: typing.ClassVar['SegmentType'] = ...
    FLAT: typing.ClassVar['SegmentType'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SegmentType': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['SegmentType']: ...

class DefaultElenaCycleSettings(ElenaCycleSettings, java.io.Serializable):
    @staticmethod
    def builder() -> 'DefaultElenaCycleSettings.Builder': ...
    @staticmethod
    def copyOf(elenaCycleSettings: ElenaCycleSettings) -> 'DefaultElenaCycleSettings': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getElenaCycleStructure(self) -> ElenaCycleStructure: ...
    def getParameterToCorrectionFunction(self) -> com.google.common.collect.ImmutableMap[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]: ...
    def getParameterToTargetFunction(self) -> com.google.common.collect.ImmutableMap[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def withElenaCycleStructure(self, elenaCycleStructure: ElenaCycleStructure) -> 'DefaultElenaCycleSettings': ...
    def withParameterToCorrectionFunction(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]]) -> 'DefaultElenaCycleSettings': ...
    def withParameterToTargetFunction(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]]) -> 'DefaultElenaCycleSettings': ...
    class Builder:
        def build(self) -> 'DefaultElenaCycleSettings': ...
        def elenaCycleStructure(self, elenaCycleStructure: ElenaCycleStructure) -> 'DefaultElenaCycleSettings.Builder': ...
        def parameterToCorrectionFunction(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]]) -> 'DefaultElenaCycleSettings.Builder': ...
        def parameterToTargetFunction(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]]) -> 'DefaultElenaCycleSettings.Builder': ...
        def putAllParameterToCorrectionFunction(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]]) -> 'DefaultElenaCycleSettings.Builder': ...
        def putAllParameterToTargetFunction(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]]) -> 'DefaultElenaCycleSettings.Builder': ...
        @typing.overload
        def putParameterToCorrectionFunction(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunction: cern.accsoft.commons.value.ImmutableDiscreteFunction) -> 'DefaultElenaCycleSettings.Builder': ...
        @typing.overload
        def putParameterToCorrectionFunction(self, entry: java.util.Map.Entry[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]) -> 'DefaultElenaCycleSettings.Builder': ...
        @typing.overload
        def putParameterToTargetFunction(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunction: cern.accsoft.commons.value.ImmutableDiscreteFunction) -> 'DefaultElenaCycleSettings.Builder': ...
        @typing.overload
        def putParameterToTargetFunction(self, entry: java.util.Map.Entry[cern.lsa.domain.settings.Parameter, cern.accsoft.commons.value.ImmutableDiscreteFunction]) -> 'DefaultElenaCycleSettings.Builder': ...

class FlatSegment(ElenaCycleSegment):
    def getNumberOfExtractions(self) -> int: ...
    def getNumberOfInjections(self) -> int: ...
    def getPauseLocation(self) -> PauseLocation: ...
    def setNumberOfExtractions(self, int: int) -> None: ...
    def setNumberOfInjections(self, int: int) -> None: ...
    def setPauseLocation(self, pauseLocation: PauseLocation) -> None: ...

class RampSegment(ElenaCycleSegment):
    def getFlatPartLength(self) -> java.time.Duration: ...
    def getRoundPartLength(self) -> java.time.Duration: ...
    def setEndMomentum(self, int: int) -> None: ...
    def setFlatPartLength(self, duration: java.time.Duration) -> None: ...
    def setRoundPartLength(self, duration: java.time.Duration) -> None: ...
