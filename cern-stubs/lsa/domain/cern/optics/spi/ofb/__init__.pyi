from typing import Any as _py_Any
from typing import overload
import cern.lsa.domain.cern.optics.ofb
import cern.lsa.domain.commons.spi
import cern.lsa.domain.optics.spi
import java.io
import java.util


class OfbKnobOverlayImpl(cern.lsa.domain.cern.optics.ofb.OfbKnobOverlay, java.io.Serializable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, long: int, string: str): ...
    def equals(self, object: _py_Any) -> bool: ...
    def getKnobId(self) -> int: ...
    def getKnobName(self) -> str: ...
    def hashCode(self) -> int: ...
    def setKnobId(self, long: int) -> None: ...
    def setKnobName(self, string: str) -> None: ...
    def toString(self) -> str: ...

class OfbMonitorReadingImpl(cern.lsa.domain.cern.optics.ofb.OfbMonitorReading, java.io.Serializable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str, double: float, double2: float, boolean: bool, double3: float, boolean2: bool): ...
    @overload
    def __init__(self, string: str, double: float, double2: float, double3: float): ...
    def equals(self, object: _py_Any) -> bool: ...
    def getHorizontal(self) -> float: ...
    def getMonitorName(self) -> str: ...
    def getPosition(self) -> float: ...
    def getVertical(self) -> float: ...
    def hashCode(self) -> int: ...
    def isHorizontalValid(self) -> bool: ...
    def isVerticalValid(self) -> bool: ...
    def setHorizontal(self, double: float) -> None: ...
    def setHorizontalValid(self, boolean: bool) -> None: ...
    def setMonitorName(self, string: str) -> None: ...
    def setPosition(self, double: float) -> None: ...
    def setVertical(self, double: float) -> None: ...
    def setVerticalValid(self, boolean: bool) -> None: ...
    def toString(self) -> str: ...

class OfbOpticsTableItemImpl(cern.lsa.domain.optics.spi.OpticsTableItemImpl, cern.lsa.domain.cern.optics.ofb.OfbOpticsTableItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str, int: int, double: float, long: int, string2: str, boolean: bool, ofbOrbit: cern.lsa.domain.cern.optics.ofb.OfbOrbit): ...
    def equals(self, object: _py_Any) -> bool: ...
    def getOfbOrbit(self) -> cern.lsa.domain.cern.optics.ofb.OfbOrbit: ...
    def hashCode(self) -> int: ...
    def isUsedByOfb(self) -> bool: ...
    def setOfbOrbit(self, ofbOrbit: cern.lsa.domain.cern.optics.ofb.OfbOrbit) -> None: ...
    def setUsedByOfb(self, boolean: bool) -> None: ...
    def toString(self) -> str: ...

class OfbOrbitImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity[cern.lsa.domain.cern.optics.ofb.OfbOrbit], cern.lsa.domain.cern.optics.ofb.OfbOrbit):
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, long: int, string: str): ...
    def addKnobOverlay(self, ofbKnobOverlay: cern.lsa.domain.cern.optics.ofb.OfbKnobOverlay) -> None: ...
    def addStaticOverlay(self, ofbStaticOverlay: cern.lsa.domain.cern.optics.ofb.OfbStaticOverlay) -> None: ...
    def equals(self, object: _py_Any) -> bool: ...
    def getBaseReadingSet(self) -> cern.lsa.domain.cern.optics.ofb.OfbReadingSet: ...
    def getCreateTime(self) -> java.util.Date: ...
    def getKnobOverlays(self) -> java.util.Set[cern.lsa.domain.cern.optics.ofb.OfbKnobOverlay]: ...
    def getStaticOverlay(self, ofbReadingSet: cern.lsa.domain.cern.optics.ofb.OfbReadingSet) -> cern.lsa.domain.cern.optics.ofb.OfbStaticOverlay: ...
    def getStaticOverlays(self) -> java.util.Set[cern.lsa.domain.cern.optics.ofb.OfbStaticOverlay]: ...
    def hashCode(self) -> int: ...
    def removeKnobOverlay(self, ofbKnobOverlay: cern.lsa.domain.cern.optics.ofb.OfbKnobOverlay) -> None: ...
    def removeStaticOverlay(self, ofbStaticOverlay: cern.lsa.domain.cern.optics.ofb.OfbStaticOverlay) -> None: ...
    def setBaseReadingSet(self, ofbReadingSet: cern.lsa.domain.cern.optics.ofb.OfbReadingSet) -> None: ...
    def setCreateTime(self, date: java.util.Date) -> None: ...
    def setOverlays(self, set: java.util.Set[cern.lsa.domain.cern.optics.ofb.OfbOverlay]) -> None: ...
    def toString(self) -> str: ...

class OfbReadingSetImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity[cern.lsa.domain.cern.optics.ofb.OfbReadingSet], cern.lsa.domain.cern.optics.ofb.OfbReadingSet):
    @overload
    def __init__(self, string: str): ...
    @overload
    def __init__(self, long: int, string: str): ...
    def addReading(self, ofbMonitorReading: cern.lsa.domain.cern.optics.ofb.OfbMonitorReading) -> None: ...
    def getAllReadings(self) -> java.util.SortedSet[cern.lsa.domain.cern.optics.ofb.OfbMonitorReading]: ...
    def getReading(self, string: str) -> cern.lsa.domain.cern.optics.ofb.OfbMonitorReading: ...
    def getType(self) -> cern.lsa.domain.cern.optics.ofb.OfbReadingSetType: ...
    def setType(self, ofbReadingSetType: cern.lsa.domain.cern.optics.ofb.OfbReadingSetType) -> None: ...
    def toString(self) -> str: ...

class OfbStaticOverlayImpl(cern.lsa.domain.cern.optics.ofb.OfbStaticOverlay, java.io.Serializable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, ofbReadingSet: cern.lsa.domain.cern.optics.ofb.OfbReadingSet, double: float): ...
    def getReadingSet(self) -> cern.lsa.domain.cern.optics.ofb.OfbReadingSet: ...
    def getScaling(self) -> float: ...
    def setReadingSet(self, ofbReadingSet: cern.lsa.domain.cern.optics.ofb.OfbReadingSet) -> None: ...
    def setScaling(self, double: float) -> None: ...
    def toString(self) -> str: ...
