import cern.accsoft.commons.util
import cern.lsa.domain.commons
import cern.lsa.domain.optics
import java.lang
import java.util
import typing



class OfbMonitorReading:
    """
    Java class 'cern.lsa.domain.cern.optics.ofb.OfbMonitorReading'
    
    """
    def getHorizontal(self) -> float: ...
    def getMonitorName(self) -> str: ...
    def getPosition(self) -> float: ...
    def getVertical(self) -> float: ...
    def isHorizontalValid(self) -> bool: ...
    def isVerticalValid(self) -> bool: ...
    def setHorizontal(self, double: float) -> None: ...
    def setHorizontalValid(self, boolean: bool) -> None: ...
    def setVertical(self, double: float) -> None: ...
    def setVerticalValid(self, boolean: bool) -> None: ...

class OfbOpticsTableItem(cern.lsa.domain.optics.OpticsTableItem):
    """
    Java class 'cern.lsa.domain.cern.optics.ofb.OfbOpticsTableItem'
    
        Interfaces:
            cern.lsa.domain.optics.OpticsTableItem
    
    """
    def getOfbOrbit(self) -> 'OfbOrbit': ...
    def isUsedByOfb(self) -> bool: ...

class OfbOrbit(cern.accsoft.commons.util.Named, cern.lsa.domain.commons.IdentifiedEntity):
    """
    Java class 'cern.lsa.domain.cern.optics.ofb.OfbOrbit'
    
        Interfaces:
            cern.accsoft.commons.util.Named,
            cern.lsa.domain.commons.IdentifiedEntity
    
    """
    def addKnobOverlay(self, ofbKnobOverlay: 'OfbKnobOverlay') -> None: ...
    def addStaticOverlay(self, ofbStaticOverlay: 'OfbStaticOverlay') -> None: ...
    def getBaseReadingSet(self) -> 'OfbReadingSet': ...
    def getCreateTime(self) -> java.util.Date: ...
    def getKnobOverlays(self) -> java.util.Set['OfbKnobOverlay']: ...
    def getStaticOverlay(self, ofbReadingSet: 'OfbReadingSet') -> 'OfbStaticOverlay': ...
    def getStaticOverlays(self) -> java.util.Set['OfbStaticOverlay']: ...
    def removeKnobOverlay(self, ofbKnobOverlay: 'OfbKnobOverlay') -> None: ...
    def removeStaticOverlay(self, ofbStaticOverlay: 'OfbStaticOverlay') -> None: ...
    def setBaseReadingSet(self, ofbReadingSet: 'OfbReadingSet') -> None: ...
    def setName(self, string: str) -> None: ...

class OfbOverlay: ...

class OfbReadingSet(cern.accsoft.commons.util.Named, cern.lsa.domain.commons.IdentifiedEntity):
    """
    Java class 'cern.lsa.domain.cern.optics.ofb.OfbReadingSet'
    
        Interfaces:
            cern.accsoft.commons.util.Named,
            cern.lsa.domain.commons.IdentifiedEntity
    
    """
    def addReading(self, ofbMonitorReading: OfbMonitorReading) -> None: ...
    def getAllReadings(self) -> java.util.SortedSet[OfbMonitorReading]: ...
    def getReading(self, string: str) -> OfbMonitorReading: ...
    def getType(self) -> 'OfbReadingSetType': ...
    def setName(self, string: str) -> None: ...
    def setType(self, ofbReadingSetType: 'OfbReadingSetType') -> None: ...

class OfbReadingSetType(java.lang.Enum['OfbReadingSetType']):
    """
    Java class 'cern.lsa.domain.cern.optics.ofb.OfbReadingSetType'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        BASE_ORBIT (cern.lsa.domain.cern.optics.ofb.OfbReadingSetType): final static enum constant
        SEPARATION_BUMP_IR1 (cern.lsa.domain.cern.optics.ofb.OfbReadingSetType): final static enum constant
        SEPARATION_BUMP_IR2 (cern.lsa.domain.cern.optics.ofb.OfbReadingSetType): final static enum constant
        SEPARATION_BUMP_IR5 (cern.lsa.domain.cern.optics.ofb.OfbReadingSetType): final static enum constant
        SEPARATION_BUMP_IR8 (cern.lsa.domain.cern.optics.ofb.OfbReadingSetType): final static enum constant
        CROSSING_ANGLE_IR1 (cern.lsa.domain.cern.optics.ofb.OfbReadingSetType): final static enum constant
        CROSSING_ANGLE_IR2 (cern.lsa.domain.cern.optics.ofb.OfbReadingSetType): final static enum constant
        CROSSING_ANGLE_IR5 (cern.lsa.domain.cern.optics.ofb.OfbReadingSetType): final static enum constant
        CROSSING_ANGLE_IR8 (cern.lsa.domain.cern.optics.ofb.OfbReadingSetType): final static enum constant
    
    """
    BASE_ORBIT: typing.ClassVar['OfbReadingSetType'] = ...
    SEPARATION_BUMP_IR1: typing.ClassVar['OfbReadingSetType'] = ...
    SEPARATION_BUMP_IR2: typing.ClassVar['OfbReadingSetType'] = ...
    SEPARATION_BUMP_IR5: typing.ClassVar['OfbReadingSetType'] = ...
    SEPARATION_BUMP_IR8: typing.ClassVar['OfbReadingSetType'] = ...
    CROSSING_ANGLE_IR1: typing.ClassVar['OfbReadingSetType'] = ...
    CROSSING_ANGLE_IR2: typing.ClassVar['OfbReadingSetType'] = ...
    CROSSING_ANGLE_IR5: typing.ClassVar['OfbReadingSetType'] = ...
    CROSSING_ANGLE_IR8: typing.ClassVar['OfbReadingSetType'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'OfbReadingSetType': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['OfbReadingSetType']: ...

class OfbKnobOverlay(OfbOverlay):
    """
    Java class 'cern.lsa.domain.cern.optics.ofb.OfbKnobOverlay'
    
        Interfaces:
            cern.lsa.domain.cern.optics.ofb.OfbOverlay
    
    """
    def getKnobId(self) -> int: ...
    def getKnobName(self) -> str: ...

class OfbStaticOverlay(OfbOverlay):
    """
    Java class 'cern.lsa.domain.cern.optics.ofb.OfbStaticOverlay'
    
        Interfaces:
            cern.lsa.domain.cern.optics.ofb.OfbOverlay
    
    """
    def getReadingSet(self) -> OfbReadingSet: ...
    def getScaling(self) -> float: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.cern.optics.ofb")``.

    OfbKnobOverlay: typing.Type[OfbKnobOverlay]
    OfbMonitorReading: typing.Type[OfbMonitorReading]
    OfbOpticsTableItem: typing.Type[OfbOpticsTableItem]
    OfbOrbit: typing.Type[OfbOrbit]
    OfbOverlay: typing.Type[OfbOverlay]
    OfbReadingSet: typing.Type[OfbReadingSet]
    OfbReadingSetType: typing.Type[OfbReadingSetType]
    OfbStaticOverlay: typing.Type[OfbStaticOverlay]
