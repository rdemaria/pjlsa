from typing import List as _py_List
from typing import TypeVar as _py_TypeVar
from typing import Type as _py_Type
from typing import ClassVar as _py_ClassVar
from typing import overload
import java.lang


class BEAM_TYPE(java.lang.Enum['BEAM_TYPE']):
    INTERMEDIATE: _py_ClassVar['BEAM_TYPE'] = ...
    NOMINAL: _py_ClassVar['BEAM_TYPE'] = ...
    @classmethod
    def getEnumValue(cls, int: int) -> 'BEAM_TYPE': ...
    def getFesaValue(self) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> 'BEAM_TYPE': ...
    _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @overload
    def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @classmethod
    def values(cls) -> _py_List['BEAM_TYPE']: ...

class INJECTION_STATUS(java.lang.Enum['INJECTION_STATUS']):
    NO_REQUEST: _py_ClassVar['INJECTION_STATUS'] = ...
    PENDING: _py_ClassVar['INJECTION_STATUS'] = ...
    FAILED: _py_ClassVar['INJECTION_STATUS'] = ...
    SUCCEDED: _py_ClassVar['INJECTION_STATUS'] = ...
    @classmethod
    def getEnumValue(cls, int: int) -> 'INJECTION_STATUS': ...
    def getFesaValue(self) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> 'INJECTION_STATUS': ...
    _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @overload
    def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @classmethod
    def values(cls) -> _py_List['INJECTION_STATUS']: ...

class MASTER_STATUS(java.lang.Enum['MASTER_STATUS']):
    NO: _py_ClassVar['MASTER_STATUS'] = ...
    PENDING: _py_ClassVar['MASTER_STATUS'] = ...
    YES: _py_ClassVar['MASTER_STATUS'] = ...
    @classmethod
    def getEnumValue(cls, int: int) -> 'MASTER_STATUS': ...
    def getFesaValue(self) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> 'MASTER_STATUS': ...
    _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @overload
    def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @classmethod
    def values(cls) -> _py_List['MASTER_STATUS']: ...

class PARTICLE_TYPE(java.lang.Enum['PARTICLE_TYPE']):
    PROTON: _py_ClassVar['PARTICLE_TYPE'] = ...
    PB82: _py_ClassVar['PARTICLE_TYPE'] = ...
    AR18: _py_ClassVar['PARTICLE_TYPE'] = ...
    D: _py_ClassVar['PARTICLE_TYPE'] = ...
    XE54: _py_ClassVar['PARTICLE_TYPE'] = ...
    @classmethod
    def getEnumValue(cls, int: int) -> 'PARTICLE_TYPE': ...
    def getValue(self) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> 'PARTICLE_TYPE': ...
    _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @overload
    def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @classmethod
    def values(cls) -> _py_List['PARTICLE_TYPE']: ...

class RNGI(java.lang.Enum['RNGI']):
    NORING: _py_ClassVar['RNGI'] = ...
    RING_1: _py_ClassVar['RNGI'] = ...
    RING_2: _py_ClassVar['RNGI'] = ...
    @classmethod
    def getEnumValue(cls, int: int) -> 'RNGI': ...
    def getValue(self) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> 'RNGI': ...
    _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @overload
    def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @classmethod
    def values(cls) -> _py_List['RNGI']: ...

class TABLE_STATUS_HW(java.lang.Enum['TABLE_STATUS_HW']):
    INVALID: _py_ClassVar['TABLE_STATUS_HW'] = ...
    ILLEGAL_OP_CODE: _py_ClassVar['TABLE_STATUS_HW'] = ...
    ILLEGAL_VALUE: _py_ClassVar['TABLE_STATUS_HW'] = ...
    ILLEGAL_REGISTER: _py_ClassVar['TABLE_STATUS_HW'] = ...
    WAITING: _py_ClassVar['TABLE_STATUS_HW'] = ...
    STOPPED: _py_ClassVar['TABLE_STATUS_HW'] = ...
    RUNNING: _py_ClassVar['TABLE_STATUS_HW'] = ...
    @classmethod
    def getEnumValue(cls, int: int) -> 'TABLE_STATUS_HW': ...
    def getFesaValue(self) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> 'TABLE_STATUS_HW': ...
    _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @overload
    def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @classmethod
    def values(cls) -> _py_List['TABLE_STATUS_HW']: ...

class TABLE_STATUS_SW(java.lang.Enum['TABLE_STATUS_SW']):
    INVALID: _py_ClassVar['TABLE_STATUS_SW'] = ...
    CRASHED: _py_ClassVar['TABLE_STATUS_SW'] = ...
    WAIT_PARA: _py_ClassVar['TABLE_STATUS_SW'] = ...
    WAIT_TRIG: _py_ClassVar['TABLE_STATUS_SW'] = ...
    RUNNING: _py_ClassVar['TABLE_STATUS_SW'] = ...
    @classmethod
    def getEnumValue(cls, int: int) -> 'TABLE_STATUS_SW': ...
    def getFesaValue(self) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> 'TABLE_STATUS_SW': ...
    _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @overload
    def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @classmethod
    def values(cls) -> _py_List['TABLE_STATUS_SW']: ...
