import java.lang
import typing


class BEAM_TYPE(java.lang.Enum['BEAM_TYPE']):
    INTERMEDIATE: typing.ClassVar['BEAM_TYPE'] = ...
    NOMINAL: typing.ClassVar['BEAM_TYPE'] = ...
    @staticmethod
    def getEnumValue(int: int) -> 'BEAM_TYPE': ...
    def getFesaValue(self) -> int: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'BEAM_TYPE': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['BEAM_TYPE']: ...

class INJECTION_STATUS(java.lang.Enum['INJECTION_STATUS']):
    NO_REQUEST: typing.ClassVar['INJECTION_STATUS'] = ...
    PENDING: typing.ClassVar['INJECTION_STATUS'] = ...
    FAILED: typing.ClassVar['INJECTION_STATUS'] = ...
    SUCCEDED: typing.ClassVar['INJECTION_STATUS'] = ...
    @staticmethod
    def getEnumValue(int: int) -> 'INJECTION_STATUS': ...
    def getFesaValue(self) -> int: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'INJECTION_STATUS': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['INJECTION_STATUS']: ...

class MASTER_STATUS(java.lang.Enum['MASTER_STATUS']):
    NO: typing.ClassVar['MASTER_STATUS'] = ...
    PENDING: typing.ClassVar['MASTER_STATUS'] = ...
    YES: typing.ClassVar['MASTER_STATUS'] = ...
    @staticmethod
    def getEnumValue(int: int) -> 'MASTER_STATUS': ...
    def getFesaValue(self) -> int: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'MASTER_STATUS': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['MASTER_STATUS']: ...

class PARTICLE_TYPE(java.lang.Enum['PARTICLE_TYPE']):
    PROTON: typing.ClassVar['PARTICLE_TYPE'] = ...
    PB82: typing.ClassVar['PARTICLE_TYPE'] = ...
    AR18: typing.ClassVar['PARTICLE_TYPE'] = ...
    D: typing.ClassVar['PARTICLE_TYPE'] = ...
    XE54: typing.ClassVar['PARTICLE_TYPE'] = ...
    @staticmethod
    def getEnumValue(int: int) -> 'PARTICLE_TYPE': ...
    def getValue(self) -> int: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'PARTICLE_TYPE': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['PARTICLE_TYPE']: ...

class RNGI(java.lang.Enum['RNGI']):
    NORING: typing.ClassVar['RNGI'] = ...
    RING_1: typing.ClassVar['RNGI'] = ...
    RING_2: typing.ClassVar['RNGI'] = ...
    @staticmethod
    def getEnumValue(int: int) -> 'RNGI': ...
    def getValue(self) -> int: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RNGI': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['RNGI']: ...

class TABLE_STATUS_HW(java.lang.Enum['TABLE_STATUS_HW']):
    INVALID: typing.ClassVar['TABLE_STATUS_HW'] = ...
    ILLEGAL_OP_CODE: typing.ClassVar['TABLE_STATUS_HW'] = ...
    ILLEGAL_VALUE: typing.ClassVar['TABLE_STATUS_HW'] = ...
    ILLEGAL_REGISTER: typing.ClassVar['TABLE_STATUS_HW'] = ...
    WAITING: typing.ClassVar['TABLE_STATUS_HW'] = ...
    STOPPED: typing.ClassVar['TABLE_STATUS_HW'] = ...
    RUNNING: typing.ClassVar['TABLE_STATUS_HW'] = ...
    @staticmethod
    def getEnumValue(int: int) -> 'TABLE_STATUS_HW': ...
    def getFesaValue(self) -> int: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'TABLE_STATUS_HW': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['TABLE_STATUS_HW']: ...

class TABLE_STATUS_SW(java.lang.Enum['TABLE_STATUS_SW']):
    INVALID: typing.ClassVar['TABLE_STATUS_SW'] = ...
    CRASHED: typing.ClassVar['TABLE_STATUS_SW'] = ...
    WAIT_PARA: typing.ClassVar['TABLE_STATUS_SW'] = ...
    WAIT_TRIG: typing.ClassVar['TABLE_STATUS_SW'] = ...
    RUNNING: typing.ClassVar['TABLE_STATUS_SW'] = ...
    @staticmethod
    def getEnumValue(int: int) -> 'TABLE_STATUS_SW': ...
    def getFesaValue(self) -> int: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'TABLE_STATUS_SW': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['TABLE_STATUS_SW']: ...
