from typing import List as _py_List
from typing import TypeVar as _py_TypeVar
from typing import Type as _py_Type
from typing import ClassVar as _py_ClassVar
from typing import overload
import java.lang


class ParameterExceptionCode(java.lang.Enum['ParameterExceptionCode']):
    USER_IS_NOT_MAPPED: _py_ClassVar['ParameterExceptionCode'] = ...
    USER_WAS_UNMAPPED_FROM_ALL_CONTEXTS: _py_ClassVar['ParameterExceptionCode'] = ...
    NO_SETTINGS_IN_NEW_CONTEXT: _py_ClassVar['ParameterExceptionCode'] = ...
    NO_SETTINGS: _py_ClassVar['ParameterExceptionCode'] = ...
    def getCode(self) -> int: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> 'ParameterExceptionCode': ...
    _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @overload
    def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @classmethod
    def values(cls) -> _py_List['ParameterExceptionCode']: ...
