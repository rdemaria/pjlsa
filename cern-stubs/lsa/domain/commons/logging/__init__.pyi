from typing import List as _py_List
from typing import ClassVar as _py_ClassVar
from typing import overload
import java.io
import java.lang
import org.slf4j


class InvocationIdHolder:
    @classmethod
    def getId(cls) -> str: ...
    @classmethod
    def setId(cls, string: str) -> None: ...

class InvocationLogFactory:
    def __init__(self): ...
    @classmethod
    def getLogger(cls) -> org.slf4j.Logger: ...

class LogMessage(java.io.Serializable):
    TRACE: _py_ClassVar[int] = ...
    DEBUG: _py_ClassVar[int] = ...
    INFO: _py_ClassVar[int] = ...
    WARN: _py_ClassVar[int] = ...
    ERROR: _py_ClassVar[int] = ...
    FATAL: _py_ClassVar[int] = ...
    IGNORED_EXCEPTION_PREFIX: _py_ClassVar[str] = ...
    @overload
    def __init__(self, string: str, int: int): ...
    @overload
    def __init__(self, string: str, throwable: java.lang.Throwable, int: int): ...
    def getDetails(self) -> java.lang.Throwable: ...
    def getLevel(self) -> int: ...
    def getMessage(self) -> str: ...
    def toString(self) -> str: ...

class ThreadLocalLogger:
    @classmethod
    def clear(cls) -> None: ...
    @classmethod
    @overload
    def debug(cls, string: str) -> None: ...
    @classmethod
    @overload
    def debug(cls, string: str, throwable: java.lang.Throwable) -> None: ...
    @classmethod
    @overload
    def error(cls, string: str) -> None: ...
    @classmethod
    @overload
    def error(cls, string: str, throwable: java.lang.Throwable) -> None: ...
    @classmethod
    @overload
    def fatal(cls, string: str) -> None: ...
    @classmethod
    @overload
    def fatal(cls, string: str, throwable: java.lang.Throwable) -> None: ...
    @classmethod
    def getLogMessages(cls) -> _py_List[LogMessage]: ...
    @classmethod
    @overload
    def info(cls, string: str) -> None: ...
    @classmethod
    @overload
    def info(cls, string: str, throwable: java.lang.Throwable) -> None: ...
    @classmethod
    def log(cls, logMessageArray: _py_List[LogMessage]) -> None: ...
    @classmethod
    @overload
    def trace(cls, string: str) -> None: ...
    @classmethod
    @overload
    def trace(cls, string: str, throwable: java.lang.Throwable) -> None: ...
    @classmethod
    @overload
    def warn(cls, string: str) -> None: ...
    @classmethod
    @overload
    def warn(cls, string: str, throwable: java.lang.Throwable) -> None: ...
