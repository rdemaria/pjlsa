import cern.accsoft.commons.domain
import cern.accsoft.commons.util
import cern.accsoft.commons.value
import cern.lsa.domain.commons.japc
import cern.lsa.domain.commons.logging
import cern.lsa.domain.commons.spi
import cern.lsa.domain.commons.util
import java.lang.annotation
import java.util
import java.util.function
import typing



class Accelerators(java.lang.annotation.Annotation):
    """
    `@Retention <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/annotation/Retention.html?is-external=true>`(`RUNTIME <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/annotation/RetentionPolicy.html?is-external=true#RUNTIME>`) `@Target <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/annotation/Target.html?is-external=true>`(`TYPE <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/annotation/ElementType.html?is-external=true#TYPE>`) public @interface Accelerators
    
        An annotation that lets you specify for which accelerator the given type is applicable. This is done by providing an
        array of classes that implement the `null
        <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/util/function/Supplier.html?is-external=true>` of
        :code:`Accelerator` interface. These classes must have a default constructor in order to be able to instantiate them
        freely.
    """
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...
    def value(self) -> typing.List[typing.Type[java.util.function.Supplier[cern.accsoft.commons.domain.Accelerator]]]: ...
    class Resolver:
        @staticmethod
        def anyMatch(accelerator: cern.accsoft.commons.domain.Accelerator, accelerators: 'Accelerators') -> bool: ...
        @staticmethod
        def getAccelerators(accelerators: 'Accelerators') -> java.util.Set[cern.accsoft.commons.domain.Accelerator]: ...
        @staticmethod
        def isClassApplicableForAccelerator(class_: typing.Type[typing.Any], accelerator: cern.accsoft.commons.domain.Accelerator) -> bool: ...

class Attribute(cern.accsoft.commons.util.Named):
    """
    public interface Attribute extends cern.accsoft.commons.util.Named
    
        An :code:`Attribute` represents an additional piece of information, which may be bound to an LSA entity without the need
        to extend the Database schema for this entity. For instance, if there is a need to store additional information related
        to a Cycle Type, e.g. beam offset, it may be stored as an attribute instead of extending the CYCLE_TYPES table in the
        DB.
    
        An :code:`Attribute` is an association between an :class:`~cern.lsa.domain.commons.AttributeDefinition` and a value
    
        Also see:
            Attributes documentation
    """
    def getAttributeDefinition(self) -> 'AttributeDefinition':
        """
        
            Returns:
                definition of the associated attribute
        
        
        """
        ...
    def getBoolean(self) -> bool: ...
    def getDouble(self) -> float: ...
    def getInt(self) -> int: ...
    def getLong(self) -> int: ...
    def getValue(self) -> str:
        """
            This method returns the value of this attribute as a String, which is the raw format stored in the DB
        
            Returns:
                value of the attribute
        
        
        """
        ...

class AttributeAware:
    """
    public interface AttributeAware
    
        Classes implementing this interface can be decorated with :class:`~cern.lsa.domain.commons.Attribute`s.
    
        See Attributes documentation
    """
    def getAttribute(self, string: str) -> Attribute:
        """
        
            Parameters:
                attributeName (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): name of the attribute
        
            Returns:
                Retrieves the attribute with the given name, or null if such attribute name is not bound to this object.
        
        
        """
        ...
    def getAttributes(self) -> java.util.Set[Attribute]: ...

class AttributeWritableAware:
    """
    public interface AttributeWritableAware
    
        Classes implementing the :code:`AttributeWritableAware` interface allow to assign attributes to its instances.
    """
    def addAttribute(self, attribute: Attribute) -> None:
        """
            Adds the given attribute to the set of attributes already assigned to this object. If an attribute with the same
            :class:`~cern.lsa.domain.commons.AttributeDefinition` has been already assigned to this entity, it is overridden with
            the given attribute.
        
            Parameters:
                attribute (:class:`~cern.lsa.domain.commons.Attribute`): attribute to be added.
        
        
        """
        ...
    def setAttributes(self, collection: typing.Union[java.util.Collection[Attribute], typing.Sequence[Attribute]]) -> None: ...

class Entities:
    """
    public abstract class Entities extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    """
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def getIds(collection: typing.Union[java.util.Collection['IdentifiedEntity'], typing.Sequence['IdentifiedEntity']]) -> java.util.Collection[int]: ...
    @typing.overload
    @staticmethod
    def getIds(list: java.util.List['IdentifiedEntity']) -> java.util.List[int]: ...
    @typing.overload
    @staticmethod
    def getIds(set: java.util.Set['IdentifiedEntity']) -> java.util.Set[int]: ...
    @staticmethod
    def getIdsList(collection: typing.Union[java.util.Collection['IdentifiedEntity'], typing.Sequence['IdentifiedEntity']]) -> java.util.List[int]: ...
    @staticmethod
    def getIdsSet(collection: typing.Union[java.util.Collection['IdentifiedEntity'], typing.Sequence['IdentifiedEntity']]) -> java.util.Set[int]: ...
    @staticmethod
    def idsIn(collection: typing.Union[java.util.Collection[int], typing.Sequence[int]]) -> cern.accsoft.commons.util.Filters.Filter['IdentifiedEntity']: ...
    _toIdsMap__V = typing.TypeVar('_toIdsMap__V', bound='IdentifiedEntity')  # <V>
    @staticmethod
    def toIdsMap(collection: typing.Union[java.util.Collection[_toIdsMap__V], typing.Sequence[_toIdsMap__V]]) -> java.util.Map[int, _toIdsMap__V]: ...

class IdentifiedEntity:
    """
    public interface IdentifiedEntity
    
        Represents an entity that has a numeric identifier.
    """
    def getId(self) -> int:
        """
        
            Returns:
                identifier of this entity, any long number - positive, negative or 0
        
        
        """
        ...

class LSAConstants:
    """
    public class LSAConstants extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    
        Central place for LSA constants, specific inner classes for various topics like layout, parameters
    """
    class ContextsConstants:
        DEFAULT_CONTEXT_CATEGORY_NAME: typing.ClassVar[str] = ...
        OBSOLETE_CONTEXT_CATEGORY_NAME: typing.ClassVar[str] = ...
        def __init__(self): ...
    class CriticalPropertyConstants:
        CRITICAL_PROPERTIES_ADMIN_ROLE: typing.ClassVar[str] = ...
        SIGNATURE_FIELD_NAME: typing.ClassVar[str] = ...
        def __init__(self): ...
    class DriveConstants:
        TRANSACTION_ID_FILTER_FIELD_NAME: typing.ClassVar[str] = ...
        TRANSACTION_ID_PROPERTY: typing.ClassVar[str] = ...
        TRANSACTION_TEST_PROPERTY: typing.ClassVar[str] = ...
        TRANSACTION_COMMIT_PROPERTY: typing.ClassVar[str] = ...
        TRANSACTION_ROLLBACK_PROPERTY: typing.ClassVar[str] = ...
        def __init__(self): ...
    class JmxConstants:
        LSA_JMX_DOMAIN: typing.ClassVar[str] = ...
        def __init__(self): ...
    class LayoutConstants:
        DEFAULT_PARTICLE_TRANSFER_NAME: typing.ClassVar[str] = ...
        DEFAULT_BEAMPROCESS_TYPE_NAME: typing.ClassVar[str] = ...
    class MetaDeviceConstants:
        LSA_META_DEVICE_SUFFIX: typing.ClassVar[str] = ...
        CYCLES_PROPERTY_NAME: typing.ClassVar[str] = ...
        LSA_CONTEXT_MAPPING_PROPERTY_NAME: typing.ClassVar[str] = ...
        LSA_CONTEXT_PROPERTY_NAME: typing.ClassVar[str] = ...
        REFERENCE_UPDATE_PROPERTY_NAME: typing.ClassVar[str] = ...
        TRIM_PROPERTY_NAME: typing.ClassVar[str] = ...
        DRIVE_PROPERTY_NAME: typing.ClassVar[str] = ...
        DRIVABLE_CONTEXTS_FIELD_NAME: typing.ClassVar[str] = ...
        DRIVABLE_CONTEXT_NAME_FIELD_NAME: typing.ClassVar[str] = ...
        CONTEXT_SELECTORS_FIELD_NAME: typing.ClassVar[str] = ...
        DRIVABLE_CONTEXT_TYPE_FIELD_NAME: typing.ClassVar[str] = ...
        LIST_FIELD_NAME: typing.ClassVar[str] = ...
        PARAMETER_NAMES_FIELD_NAME: typing.ClassVar[str] = ...
        USERS_FIELD_NAME: typing.ClassVar[str] = ...
        USER_FIELD_NAME: typing.ClassVar[str] = ...
        def __init__(self): ...
    class ParameterConstants:
        SIGNATURE_PARAMETER_TYPE: typing.ClassVar[str] = ...
        KNOB_PARAMETER_TYPE: typing.ClassVar[str] = ...
        MOMENTUM_PROPERTY: typing.ClassVar[str] = ...
        MOMENTUM_PARAMETER_TYPE: typing.ClassVar[str] = ...
        K_STEERING_PARAMETER_TYPE: typing.ClassVar[str] = ...
        DEFAULT_PARAMETER_HIERARCHY: typing.ClassVar[str] = ...
        LSA_INTERNAL_PARAMETER_TYPES: typing.ClassVar[java.util.Set] = ...
    class ParameterGroupConstants:
        NOT_USED_PARAMETER_GROUP: typing.ClassVar[str] = ...
        FAKE_NO_PARAMETER_GROUP: typing.ClassVar[str] = ...
        ALL_PARAMETER_GROUPS: typing.ClassVar[str] = ...
        def __init__(self): ...
    class ParameterUrlConstants:
        LSA_SERVER_NAMES_PREFIX: typing.ClassVar[str] = ...
        INCA_SERVER_NAMES_PREFIX: typing.ClassVar[str] = ...
        META_SERVICE_PREFIX: typing.ClassVar[str] = ...
        def __init__(self): ...
    class SettingCopyConstants:
        ATTR_IS_SETTINGS_COPY: typing.ClassVar[str] = ...
        ATTR_SOURCE_CONTEXT: typing.ClassVar[str] = ...
        ATTR_DESTINATION_TO_SOURCE_BEAMPROCESS: typing.ClassVar[str] = ...
        ATTR_TRIM_DATE: typing.ClassVar[str] = ...
        ATTR_ARCHIVE_VERSION: typing.ClassVar[str] = ...
        ATTR_COPY_ALL_PARAMETERS: typing.ClassVar[str] = ...
        ATTR_COPY_BEAM_OUT: typing.ClassVar[str] = ...
        def __init__(self): ...
    class TrimConstants:
        ATTR_CONTEXT_SETTINGS: typing.ClassVar[str] = ...
        ATTR_TRIMMED_CONTEXT_SETTINGS: typing.ClassVar[str] = ...
        ATTR_ALLOW_NON_TRIMMABLE_PARAMETERS: typing.ClassVar[str] = ...
        ATTR_PARAMETER_HIERARCHY: typing.ClassVar[str] = ...
        def __init__(self): ...

class AttributeDefinition(IdentifiedEntity, cern.accsoft.commons.util.Named):
    """
    public interface AttributeDefinition extends :class:`~cern.lsa.domain.commons.IdentifiedEntity`, cern.accsoft.commons.util.Named
    
        Specifies meta-data of an :class:`~cern.lsa.domain.commons.Attribute`. The definition describes an attribute in terms of
        its name, value type, default value, description etc.
    
        Also see:
            Attributes documentation, :class:`~cern.lsa.domain.commons.Attribute`
    """
    def getDefaultValue(self) -> str:
        """
            Retrieves the default value of this attribute.
        
            Returns:
                default value of the attribute or :code:`null`, if this attribute value needs to be set explicitly by an operator
        
        
        """
        ...
    def getDescription(self) -> str:
        """
        
            Returns:
                attribute's description, :code:`null` if not specified
        
        
        """
        ...
    def getEnumValues(self) -> java.util.Set[str]: ...
    def getUnits(self) -> str:
        """
        
            Returns:
                units of the value, :code:`null` if not specified
        
        
        """
        ...
    def getValueType(self) -> cern.accsoft.commons.value.Type:
        """
        
            Returns:
                attribute's value type
        
        
        """
        ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.commons")``.

    Accelerators: typing.Type[Accelerators]
    Attribute: typing.Type[Attribute]
    AttributeAware: typing.Type[AttributeAware]
    AttributeDefinition: typing.Type[AttributeDefinition]
    AttributeWritableAware: typing.Type[AttributeWritableAware]
    Entities: typing.Type[Entities]
    IdentifiedEntity: typing.Type[IdentifiedEntity]
    LSAConstants: typing.Type[LSAConstants]
    japc: cern.lsa.domain.commons.japc.__module_protocol__
    logging: cern.lsa.domain.commons.logging.__module_protocol__
    spi: cern.lsa.domain.commons.spi.__module_protocol__
    util: cern.lsa.domain.commons.util.__module_protocol__
