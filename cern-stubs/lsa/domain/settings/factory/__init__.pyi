import cern.accsoft.commons.domain
import cern.accsoft.commons.domain.particletransfers
import cern.accsoft.commons.domain.zones
import cern.accsoft.commons.value
import cern.lsa.domain.commons
import cern.lsa.domain.commons.spi
import cern.lsa.domain.devices
import cern.lsa.domain.devices.type
import cern.lsa.domain.settings
import cern.lsa.domain.settings.spi
import cern.lsa.domain.settings.type
import datetime
import java.time
import java.util
import typing



_AbstractKnobBuilder__T = typing.TypeVar('_AbstractKnobBuilder__T', bound='AbstractKnobBuilder')  # <T>
class AbstractKnobBuilder(typing.Generic[_AbstractKnobBuilder__T]):
    """
    Java class 'cern.lsa.domain.settings.factory.AbstractKnobBuilder'
    
        Extends:
            java.lang.Object
    
    """
    @typing.overload
    def addFactor(self, knobFactor: cern.lsa.domain.settings.KnobFactor) -> _AbstractKnobBuilder__T: ...
    @typing.overload
    def addFactor(self, string: str, string2: str, double: float) -> _AbstractKnobBuilder__T: ...
    @typing.overload
    def addOrUpdateFactor(self, knobFactor: cern.lsa.domain.settings.KnobFactor) -> _AbstractKnobBuilder__T: ...
    @typing.overload
    def addOrUpdateFactor(self, string: str, string2: str, double: float) -> _AbstractKnobBuilder__T: ...
    def build(self) -> cern.lsa.domain.settings.Knob: ...
    def clear(self) -> _AbstractKnobBuilder__T: ...
    def removeFactor(self, string: str, string2: str) -> _AbstractKnobBuilder__T: ...
    @typing.overload
    def updateFactor(self, knobFactor: cern.lsa.domain.settings.KnobFactor) -> _AbstractKnobBuilder__T: ...
    @typing.overload
    def updateFactor(self, string: str, string2: str, double: float) -> _AbstractKnobBuilder__T: ...

class BeamProcessIncorporationRequestBuilder(cern.lsa.domain.commons.spi.AbstractPropertiesHolder):
    """
    Java class 'cern.lsa.domain.settings.factory.BeamProcessIncorporationRequestBuilder'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
      Constructors:
        * BeamProcessIncorporationRequestBuilder()
    
    """
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.settings.BeamProcessIncorporationRequest: ...
    def setDescription(self, string: str) -> 'BeamProcessIncorporationRequestBuilder': ...
    def setDestBeamProcess(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> 'BeamProcessIncorporationRequestBuilder': ...
    def setDestPointInTime(self, double: float) -> 'BeamProcessIncorporationRequestBuilder': ...
    def setDrive(self, boolean: bool) -> 'BeamProcessIncorporationRequestBuilder': ...
    def setIncorporateAllParameters(self) -> 'BeamProcessIncorporationRequestBuilder': ...
    def setParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'BeamProcessIncorporationRequestBuilder': ...
    def setSettingPart(self, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'BeamProcessIncorporationRequestBuilder': ...
    def setSettingsSource(self, settingsSource: cern.lsa.domain.settings.SettingsSource) -> 'BeamProcessIncorporationRequestBuilder': ...
    def setSourceBeamProcess(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> 'BeamProcessIncorporationRequestBuilder': ...
    def setSourcePointInTime(self, double: float) -> 'BeamProcessIncorporationRequestBuilder': ...

class ContextSettingsBuilder:
    """
    Java class 'cern.lsa.domain.settings.factory.ContextSettingsBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ContextSettingsBuilder()
        * ContextSettingsBuilder(cern.lsa.domain.settings.ContextSettings)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, contextSettings: cern.lsa.domain.settings.ContextSettings): ...
    def addFunction(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunction: cern.accsoft.commons.value.ImmutableDiscreteFunction) -> 'ContextSettingsBuilder': ...
    def addFunctionsArray(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunctionsArray: cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray) -> 'ContextSettingsBuilder': ...
    @typing.overload
    def addScalar(self, parameter: cern.lsa.domain.settings.Parameter, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> 'ContextSettingsBuilder': ...
    @typing.overload
    def addScalar(self, parameter: cern.lsa.domain.settings.Parameter, drivableContext: cern.lsa.domain.settings.DrivableContext, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> 'ContextSettingsBuilder': ...
    def addSetting(self, setting: cern.lsa.domain.settings.Setting) -> 'ContextSettingsBuilder': ...
    def addValue(self, parameter: cern.lsa.domain.settings.Parameter, beamProcess: cern.lsa.domain.settings.BeamProcess, immutableValue: cern.accsoft.commons.value.ImmutableValue) -> 'ContextSettingsBuilder': ...
    def build(self) -> cern.lsa.domain.settings.ContextSettings: ...
    def context(self, standAloneContext: cern.lsa.domain.settings.StandAloneContext) -> 'ContextSettingsBuilder': ...
    def parameterSettingMap(self, map: typing.Union[java.util.Map[str, cern.lsa.domain.settings.spi.ParameterSettingsImpl], typing.Mapping[str, cern.lsa.domain.settings.spi.ParameterSettingsImpl]]) -> 'ContextSettingsBuilder': ...
    def parameterSettings(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.spi.ParameterSettingsImpl], typing.Sequence[cern.lsa.domain.settings.spi.ParameterSettingsImpl]]) -> 'ContextSettingsBuilder': ...

class ParameterTreesRequestBuilder:
    """
    Java class 'cern.lsa.domain.settings.factory.ParameterTreesRequestBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ParameterTreesRequestBuilder()
    
    """
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.settings.ParameterTreesRequest: ...
    @staticmethod
    def byParameterAndHierarchyFindDependentTrees(string: str, string2: str) -> cern.lsa.domain.settings.ParameterTreesRequest: ...
    @staticmethod
    def byParameterAndHierarchyFindSourceTrees(string: str, string2: str) -> cern.lsa.domain.settings.ParameterTreesRequest: ...
    @staticmethod
    def byParameterFindDependentTrees(string: str) -> cern.lsa.domain.settings.ParameterTreesRequest: ...
    @staticmethod
    def byParameterFindSourceTrees(string: str) -> cern.lsa.domain.settings.ParameterTreesRequest: ...
    def setHierarchy(self, string: str) -> 'ParameterTreesRequestBuilder': ...
    def setParameter(self, parameter: cern.lsa.domain.settings.Parameter) -> 'ParameterTreesRequestBuilder': ...
    def setParameterName(self, string: str) -> 'ParameterTreesRequestBuilder': ...
    def setParameterNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'ParameterTreesRequestBuilder': ...
    def setParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'ParameterTreesRequestBuilder': ...
    def setTreeDirection(self, treeDirection: cern.lsa.domain.settings.ParameterTreesRequest.TreeDirection) -> 'ParameterTreesRequestBuilder': ...

class ParameterTypesRequestBuilder:
    """
    Java class 'cern.lsa.domain.settings.factory.ParameterTypesRequestBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ParameterTypesRequestBuilder()
    
      Attributes:
        ALL_PARAMETER_TYPES (cern.lsa.domain.settings.ParameterTypesRequest): final static field
    
    """
    ALL_PARAMETER_TYPES: typing.ClassVar[cern.lsa.domain.settings.ParameterTypesRequest] = ...
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.settings.ParameterTypesRequest: ...
    @staticmethod
    def byParameterTypeName(string: str) -> cern.lsa.domain.settings.ParameterTypesRequest: ...
    @typing.overload
    @staticmethod
    def byParameterTypeNames(stringArray: typing.List[str]) -> cern.lsa.domain.settings.ParameterTypesRequest: ...
    @typing.overload
    @staticmethod
    def byParameterTypeNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.settings.ParameterTypesRequest: ...
    def setParameterTypeName(self, string: str) -> 'ParameterTypesRequestBuilder': ...
    def setParameterTypeNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'ParameterTypesRequestBuilder': ...

class ParametersRequestBuilder:
    """
    Java class 'cern.lsa.domain.settings.factory.ParametersRequestBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ParametersRequestBuilder()
    
    """
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byAccelerator(accelerator: cern.accsoft.commons.domain.Accelerator) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byAcceleratorZone(acceleratorZone: cern.accsoft.commons.domain.zones.AcceleratorZone) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byAcceleratorZones(collection: typing.Union[java.util.Collection[cern.accsoft.commons.domain.zones.AcceleratorZone], typing.Sequence[cern.accsoft.commons.domain.zones.AcceleratorZone]]) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byDevice(device: cern.lsa.domain.devices.Device) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byDeviceName(string: str) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byDeviceNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byDevices(collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.Device], typing.Sequence[cern.lsa.domain.devices.Device]]) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byParameterGroup(string: str) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byParameterGroups(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byParameterName(string: str) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byParameterNamePattern(string: str) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byParameterNames(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byParameterType(string: str) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byParameterTypes(collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byParticleTransfer(particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byParticleTransfers(collection: typing.Union[java.util.Collection[cern.accsoft.commons.domain.particletransfers.ParticleTransfer], typing.Sequence[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]]) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byPropertyField(propertyField: cern.lsa.domain.devices.type.PropertyField) -> cern.lsa.domain.settings.ParametersRequest: ...
    @staticmethod
    def byPropertyFields(collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.type.PropertyField], typing.Sequence[cern.lsa.domain.devices.type.PropertyField]]) -> cern.lsa.domain.settings.ParametersRequest: ...
    def setAccelerator(self, accelerator: cern.accsoft.commons.domain.Accelerator) -> 'ParametersRequestBuilder': ...
    def setAcceleratorZone(self, acceleratorZone: cern.accsoft.commons.domain.zones.AcceleratorZone) -> 'ParametersRequestBuilder': ...
    def setAcceleratorZones(self, collection: typing.Union[java.util.Collection[cern.accsoft.commons.domain.zones.AcceleratorZone], typing.Sequence[cern.accsoft.commons.domain.zones.AcceleratorZone]]) -> 'ParametersRequestBuilder': ...
    def setCritical(self, boolean: bool) -> 'ParametersRequestBuilder': ...
    def setDevice(self, device: cern.lsa.domain.devices.Device) -> 'ParametersRequestBuilder': ...
    def setDeviceName(self, string: str) -> 'ParametersRequestBuilder': ...
    def setDeviceNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'ParametersRequestBuilder': ...
    def setDevices(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.Device], typing.Sequence[cern.lsa.domain.devices.Device]]) -> 'ParametersRequestBuilder': ...
    def setIncludeSignatures(self, boolean: bool) -> 'ParametersRequestBuilder': ...
    def setLsaImplementation(self, boolean: bool) -> 'ParametersRequestBuilder': ...
    def setMultiplexed(self, boolean: bool) -> 'ParametersRequestBuilder': ...
    def setParameterGroup(self, string: str) -> 'ParametersRequestBuilder': ...
    def setParameterGroups(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'ParametersRequestBuilder': ...
    def setParameterName(self, string: str) -> 'ParametersRequestBuilder': ...
    def setParameterNamePattern(self, string: str) -> 'ParametersRequestBuilder': ...
    def setParameterNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'ParametersRequestBuilder': ...
    def setParameterTypeName(self, string: str) -> 'ParametersRequestBuilder': ...
    def setParameterTypeNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'ParametersRequestBuilder': ...
    def setParticleTransfer(self, particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer) -> 'ParametersRequestBuilder': ...
    def setParticleTransfers(self, collection: typing.Union[java.util.Collection[cern.accsoft.commons.domain.particletransfers.ParticleTransfer], typing.Sequence[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]]) -> 'ParametersRequestBuilder': ...
    def setPropertyFields(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.type.PropertyField], typing.Sequence[cern.lsa.domain.devices.type.PropertyField]]) -> 'ParametersRequestBuilder': ...
    def setPropertyName(self, string: str) -> 'ParametersRequestBuilder': ...
    def setPropertyNames(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'ParametersRequestBuilder': ...
    def setReadable(self, boolean: bool) -> 'ParametersRequestBuilder': ...
    def setValueType(self, type: cern.accsoft.commons.value.Type) -> 'ParametersRequestBuilder': ...
    def setValueTypes(self, collection: typing.Union[java.util.Collection[cern.accsoft.commons.value.Type], typing.Sequence[cern.accsoft.commons.value.Type]]) -> 'ParametersRequestBuilder': ...
    def setVirtual(self, boolean: bool) -> 'ParametersRequestBuilder': ...
    def setWritable(self, boolean: bool) -> 'ParametersRequestBuilder': ...

class SettingComparisonRequestBuilder:
    """
    Java class 'cern.lsa.domain.settings.factory.SettingComparisonRequestBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * SettingComparisonRequestBuilder()
    
    """
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.settings.SettingComparisonRequest: ...
    def setCompareAllParameters(self, boolean: bool) -> 'SettingComparisonRequestBuilder': ...
    def setDestinationBeamProcesses(self, list: java.util.List[cern.lsa.domain.settings.BeamProcess]) -> 'SettingComparisonRequestBuilder': ...
    def setDestinationSettingsSource(self, settingsSource: cern.lsa.domain.settings.SettingsSource) -> 'SettingComparisonRequestBuilder': ...
    def setIgnoreFlatFunctionsLength(self, boolean: bool) -> 'SettingComparisonRequestBuilder': ...
    def setParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'SettingComparisonRequestBuilder': ...
    def setPointInDestFunction(self, int: int) -> 'SettingComparisonRequestBuilder': ...
    def setPointInSourceFunction(self, int: int) -> 'SettingComparisonRequestBuilder': ...
    def setSourceBeamProcesses(self, list: java.util.List[cern.lsa.domain.settings.BeamProcess]) -> 'SettingComparisonRequestBuilder': ...
    def setSourceSettingsSource(self, settingsSource: cern.lsa.domain.settings.SettingsSource) -> 'SettingComparisonRequestBuilder': ...

class StandAloneContextCloneRequestBuilder(cern.lsa.domain.commons.spi.AbstractPropertiesHolder):
    """
    Java class 'cern.lsa.domain.settings.factory.StandAloneContextCloneRequestBuilder'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
      Constructors:
        * StandAloneContextCloneRequestBuilder()
    
    """
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.settings.StandAloneContextCloneRequest: ...
    def setAttributes(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.commons.Attribute], typing.Sequence[cern.lsa.domain.commons.Attribute]]) -> 'StandAloneContextCloneRequestBuilder': ...
    def setCloneName(self, string: str) -> 'StandAloneContextCloneRequestBuilder': ...
    def setContextCategory(self, contextCategory: cern.lsa.domain.settings.ContextCategory) -> 'StandAloneContextCloneRequestBuilder': ...
    def setDescription(self, string: str) -> 'StandAloneContextCloneRequestBuilder': ...
    def setHistoryCutOffDate(self, instant: typing.Union[java.time.Instant, datetime.datetime]) -> 'StandAloneContextCloneRequestBuilder': ...
    def setSource(self, standAloneContext: cern.lsa.domain.settings.StandAloneContext) -> 'StandAloneContextCloneRequestBuilder': ...
    def setWithHistory(self, boolean: bool) -> 'StandAloneContextCloneRequestBuilder': ...
    def shouldCloneType(self, boolean: bool) -> 'StandAloneContextCloneRequestBuilder': ...

class StandAloneContextCreationRequestBuilder(cern.lsa.domain.commons.spi.AbstractPropertiesHolder):
    """
    Java class 'cern.lsa.domain.settings.factory.StandAloneContextCreationRequestBuilder'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
      Constructors:
        * StandAloneContextCreationRequestBuilder()
    
    """
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.settings.StandAloneContextCreationRequest: ...
    def setAttributes(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.commons.Attribute], typing.Sequence[cern.lsa.domain.commons.Attribute]]) -> 'StandAloneContextCreationRequestBuilder': ...
    def setContextCategory(self, contextCategory: cern.lsa.domain.settings.ContextCategory) -> 'StandAloneContextCreationRequestBuilder': ...
    def setContextType(self, contextType: cern.lsa.domain.settings.type.ContextType) -> 'StandAloneContextCreationRequestBuilder': ...
    def setDescription(self, string: str) -> 'StandAloneContextCreationRequestBuilder': ...
    def setLength(self, integer: int) -> 'StandAloneContextCreationRequestBuilder': ...
    def setMultiplexed(self, boolean: bool) -> 'StandAloneContextCreationRequestBuilder': ...
    def setName(self, string: str) -> 'StandAloneContextCreationRequestBuilder': ...

class TrimRequestBuilder:
    """
    Java class 'cern.lsa.domain.settings.factory.TrimRequestBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * TrimRequestBuilder()
        * TrimRequestBuilder(cern.lsa.domain.settings.TrimRequest)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, trimRequest: cern.lsa.domain.settings.TrimRequest): ...
    def addCustomSettingPart(self, parameter: cern.lsa.domain.settings.Parameter, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'TrimRequestBuilder': ...
    def addFunction(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunction: cern.accsoft.commons.value.ImmutableDiscreteFunction) -> 'TrimRequestBuilder': ...
    def addFunctionsArray(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunctionsArray: cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray) -> 'TrimRequestBuilder': ...
    @typing.overload
    def addScalar(self, parameter: cern.lsa.domain.settings.Parameter, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> 'TrimRequestBuilder': ...
    @typing.overload
    def addScalar(self, parameter: cern.lsa.domain.settings.Parameter, drivableContext: cern.lsa.domain.settings.DrivableContext, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> 'TrimRequestBuilder': ...
    def addSetting(self, setting: cern.lsa.domain.settings.Setting) -> 'TrimRequestBuilder': ...
    def addValue(self, parameter: cern.lsa.domain.settings.Parameter, beamProcess: cern.lsa.domain.settings.BeamProcess, immutableValue: cern.accsoft.commons.value.ImmutableValue) -> 'TrimRequestBuilder': ...
    def build(self) -> cern.lsa.domain.settings.TrimRequest: ...
    def newTrimRequest(self) -> cern.lsa.domain.settings.TrimRequest: ...
    def setAttribute(self, string: str, object: typing.Any) -> 'TrimRequestBuilder': ...
    def setChildSettingPart(self, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'TrimRequestBuilder': ...
    def setCommit(self, boolean: bool) -> 'TrimRequestBuilder': ...
    def setContext(self, standAloneContext: cern.lsa.domain.settings.StandAloneContext) -> 'TrimRequestBuilder': ...
    def setContextSettings(self, contextSettings: cern.lsa.domain.settings.ContextSettings) -> 'TrimRequestBuilder': ...
    def setCustomSettingPartMap(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingPartEnum], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingPartEnum]]) -> 'TrimRequestBuilder': ...
    def setDescription(self, string: str) -> 'TrimRequestBuilder': ...
    def setDrive(self, boolean: bool) -> 'TrimRequestBuilder': ...
    def setForceDrive(self, boolean: bool) -> 'TrimRequestBuilder': ...
    def setForceProcessing(self, boolean: bool) -> 'TrimRequestBuilder': ...
    def setIgnoreErrors(self, boolean: bool) -> 'TrimRequestBuilder': ...
    def setLenientDrive(self, boolean: bool) -> 'TrimRequestBuilder': ...
    def setParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'TrimRequestBuilder': ...
    def setPersistSettings(self, boolean: bool) -> 'TrimRequestBuilder': ...
    def setPropagateToChildren(self, boolean: bool) -> 'TrimRequestBuilder': ...
    def setRelative(self, boolean: bool) -> 'TrimRequestBuilder': ...
    def setReturnSettings(self, boolean: bool) -> 'TrimRequestBuilder': ...
    def setSettingPart(self, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'TrimRequestBuilder': ...
    def setSkipProcessing(self, boolean: bool) -> 'TrimRequestBuilder': ...

class CopySettingsRequestBuilder(TrimRequestBuilder):
    """
    Java class 'cern.lsa.domain.settings.factory.CopySettingsRequestBuilder'
    
        Extends:
            cern.lsa.domain.settings.factory.TrimRequestBuilder
    
      Constructors:
        * CopySettingsRequestBuilder(cern.lsa.domain.settings.TrimRequest)
        * CopySettingsRequestBuilder(cern.lsa.domain.settings.CopySettingsRequest)
        * CopySettingsRequestBuilder()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, copySettingsRequest: cern.lsa.domain.settings.CopySettingsRequest): ...
    @typing.overload
    def __init__(self, trimRequest: cern.lsa.domain.settings.TrimRequest): ...
    def addCustomSettingPart(self, parameter: cern.lsa.domain.settings.Parameter, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'CopySettingsRequestBuilder': ...
    def addFunction(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunction: cern.accsoft.commons.value.ImmutableDiscreteFunction) -> 'CopySettingsRequestBuilder': ...
    def addFunctionsArray(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunctionsArray: cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray) -> 'CopySettingsRequestBuilder': ...
    @typing.overload
    def addScalar(self, parameter: cern.lsa.domain.settings.Parameter, drivableContext: cern.lsa.domain.settings.DrivableContext, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> 'CopySettingsRequestBuilder': ...
    @typing.overload
    def addScalar(self, parameter: cern.lsa.domain.settings.Parameter, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> TrimRequestBuilder: ...
    def addSetting(self, setting: cern.lsa.domain.settings.Setting) -> 'CopySettingsRequestBuilder': ...
    def addValue(self, parameter: cern.lsa.domain.settings.Parameter, beamProcess: cern.lsa.domain.settings.BeamProcess, immutableValue: cern.accsoft.commons.value.ImmutableValue) -> 'CopySettingsRequestBuilder': ...
    def build(self) -> cern.lsa.domain.settings.CopySettingsRequest: ...
    def setAttribute(self, string: str, object: typing.Any) -> 'CopySettingsRequestBuilder': ...
    def setChildSettingPart(self, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'CopySettingsRequestBuilder': ...
    def setContext(self, standAloneContext: cern.lsa.domain.settings.StandAloneContext) -> 'CopySettingsRequestBuilder': ...
    def setContextSettings(self, contextSettings: cern.lsa.domain.settings.ContextSettings) -> 'CopySettingsRequestBuilder': ...
    def setCustomSettingPartMap(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingPartEnum], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingPartEnum]]) -> 'CopySettingsRequestBuilder': ...
    def setDescription(self, string: str) -> 'CopySettingsRequestBuilder': ...
    def setDestinationContexts(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Context], typing.Sequence[cern.lsa.domain.settings.Context]]) -> 'CopySettingsRequestBuilder': ...
    def setDestinationParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'CopySettingsRequestBuilder': ...
    def setDrive(self, boolean: bool) -> 'CopySettingsRequestBuilder': ...
    def setForceDrive(self, boolean: bool) -> 'CopySettingsRequestBuilder': ...
    def setForceProcessing(self, boolean: bool) -> 'CopySettingsRequestBuilder': ...
    def setIgnoreErrors(self, boolean: bool) -> 'CopySettingsRequestBuilder': ...
    def setLenientDrive(self, boolean: bool) -> 'CopySettingsRequestBuilder': ...
    def setParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'CopySettingsRequestBuilder': ...
    def setPersistSettings(self, boolean: bool) -> 'CopySettingsRequestBuilder': ...
    def setPropagateToChildren(self, boolean: bool) -> 'CopySettingsRequestBuilder': ...
    def setRelative(self, boolean: bool) -> 'CopySettingsRequestBuilder': ...
    def setReturnSettings(self, boolean: bool) -> 'CopySettingsRequestBuilder': ...
    def setSettingPart(self, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'CopySettingsRequestBuilder': ...
    def setSettingsSource(self, settingsSource: cern.lsa.domain.settings.SettingsSource) -> 'CopySettingsRequestBuilder': ...
    def setSkipProcessing(self, boolean: bool) -> 'CopySettingsRequestBuilder': ...
    def setSourceContexts(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Context], typing.Sequence[cern.lsa.domain.settings.Context]]) -> 'CopySettingsRequestBuilder': ...

class IncorporationRequestBuilder(TrimRequestBuilder):
    """
    Java class 'cern.lsa.domain.settings.factory.IncorporationRequestBuilder'
    
        Extends:
            cern.lsa.domain.settings.factory.TrimRequestBuilder
    
      Constructors:
        * IncorporationRequestBuilder()
        * IncorporationRequestBuilder(cern.lsa.domain.settings.IncorporationRequest)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, incorporationRequest: cern.lsa.domain.settings.IncorporationRequest): ...
    def addCustomSettingPart(self, parameter: cern.lsa.domain.settings.Parameter, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'IncorporationRequestBuilder': ...
    def addFunction(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunction: cern.accsoft.commons.value.ImmutableDiscreteFunction) -> 'IncorporationRequestBuilder': ...
    def addFunctionsArray(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunctionsArray: cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray) -> 'IncorporationRequestBuilder': ...
    def addIncorporationSetting(self, incorporationSetting: cern.lsa.domain.settings.IncorporationSetting) -> 'IncorporationRequestBuilder': ...
    @typing.overload
    def addScalar(self, parameter: cern.lsa.domain.settings.Parameter, drivableContext: cern.lsa.domain.settings.DrivableContext, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> 'IncorporationRequestBuilder': ...
    @typing.overload
    def addScalar(self, parameter: cern.lsa.domain.settings.Parameter, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> TrimRequestBuilder: ...
    def addSetting(self, setting: cern.lsa.domain.settings.Setting) -> 'IncorporationRequestBuilder': ...
    def addValue(self, parameter: cern.lsa.domain.settings.Parameter, beamProcess: cern.lsa.domain.settings.BeamProcess, immutableValue: cern.accsoft.commons.value.ImmutableValue) -> 'IncorporationRequestBuilder': ...
    def build(self) -> cern.lsa.domain.settings.IncorporationRequest: ...
    def setAttribute(self, string: str, object: typing.Any) -> 'IncorporationRequestBuilder': ...
    def setChildSettingPart(self, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'IncorporationRequestBuilder': ...
    def setContext(self, standAloneContext: cern.lsa.domain.settings.StandAloneContext) -> 'IncorporationRequestBuilder': ...
    def setContextSettings(self, contextSettings: cern.lsa.domain.settings.ContextSettings) -> 'IncorporationRequestBuilder': ...
    def setCustomSettingPartMap(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingPartEnum], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingPartEnum]]) -> 'IncorporationRequestBuilder': ...
    def setDescription(self, string: str) -> 'IncorporationRequestBuilder': ...
    def setDrive(self, boolean: bool) -> 'IncorporationRequestBuilder': ...
    def setForceDrive(self, boolean: bool) -> 'IncorporationRequestBuilder': ...
    def setForceProcessing(self, boolean: bool) -> 'IncorporationRequestBuilder': ...
    def setIgnoreErrors(self, boolean: bool) -> 'IncorporationRequestBuilder': ...
    def setIncorporationSettings(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.IncorporationSetting], typing.Sequence[cern.lsa.domain.settings.IncorporationSetting]]) -> 'IncorporationRequestBuilder': ...
    def setLenientDrive(self, boolean: bool) -> 'IncorporationRequestBuilder': ...
    def setParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'IncorporationRequestBuilder': ...
    def setPersistSettings(self, boolean: bool) -> 'IncorporationRequestBuilder': ...
    def setPropagateToChildren(self, boolean: bool) -> 'IncorporationRequestBuilder': ...
    def setRelative(self, boolean: bool) -> 'IncorporationRequestBuilder': ...
    def setReturnSettings(self, boolean: bool) -> 'IncorporationRequestBuilder': ...
    def setSettingPart(self, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'IncorporationRequestBuilder': ...
    def setSkipProcessing(self, boolean: bool) -> 'IncorporationRequestBuilder': ...

class KnobCreationBuilder(AbstractKnobBuilder['KnobCreationBuilder']):
    """
    Java class 'cern.lsa.domain.settings.factory.KnobCreationBuilder'
    
        Extends:
            cern.lsa.domain.settings.factory.AbstractKnobBuilder
    
      Constructors:
        * KnobCreationBuilder()
        * KnobCreationBuilder(cern.lsa.domain.settings.Knob)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, knob: cern.lsa.domain.settings.Knob): ...
    def setKnobParameterName(self, string: str) -> 'KnobCreationBuilder': ...
    def setKnobParameterType(self, parameterType: cern.lsa.domain.settings.ParameterType) -> 'KnobCreationBuilder': ...
    def setMultiplexed(self, boolean: bool) -> 'KnobCreationBuilder': ...
    def setValueType(self, type: cern.accsoft.commons.value.Type) -> 'KnobCreationBuilder': ...

class KnobModificationBuilder(AbstractKnobBuilder['KnobModificationBuilder']):
    """
    Java class 'cern.lsa.domain.settings.factory.KnobModificationBuilder'
    
        Extends:
            cern.lsa.domain.settings.factory.AbstractKnobBuilder
    
      Constructors:
        * KnobModificationBuilder(cern.lsa.domain.settings.Knob)
    
    """
    def __init__(self, knob: cern.lsa.domain.settings.Knob): ...

class RevertTrimRequestBuilder(TrimRequestBuilder):
    """
    Java class 'cern.lsa.domain.settings.factory.RevertTrimRequestBuilder'
    
        Extends:
            cern.lsa.domain.settings.factory.TrimRequestBuilder
    
      Constructors:
        * RevertTrimRequestBuilder(cern.lsa.domain.settings.TrimRequest)
        * RevertTrimRequestBuilder(cern.lsa.domain.settings.RevertTrimRequest)
        * RevertTrimRequestBuilder()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, revertTrimRequest: cern.lsa.domain.settings.RevertTrimRequest): ...
    @typing.overload
    def __init__(self, trimRequest: cern.lsa.domain.settings.TrimRequest): ...
    def addCustomSettingPart(self, parameter: cern.lsa.domain.settings.Parameter, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'RevertTrimRequestBuilder': ...
    def addFunction(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunction: cern.accsoft.commons.value.ImmutableDiscreteFunction) -> 'RevertTrimRequestBuilder': ...
    def addFunctionsArray(self, parameter: cern.lsa.domain.settings.Parameter, immutableDiscreteFunctionsArray: cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray) -> 'RevertTrimRequestBuilder': ...
    @typing.overload
    def addScalar(self, parameter: cern.lsa.domain.settings.Parameter, drivableContext: cern.lsa.domain.settings.DrivableContext, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> 'RevertTrimRequestBuilder': ...
    @typing.overload
    def addScalar(self, parameter: cern.lsa.domain.settings.Parameter, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> TrimRequestBuilder: ...
    def addSetting(self, setting: cern.lsa.domain.settings.Setting) -> 'RevertTrimRequestBuilder': ...
    def addValue(self, parameter: cern.lsa.domain.settings.Parameter, beamProcess: cern.lsa.domain.settings.BeamProcess, immutableValue: cern.accsoft.commons.value.ImmutableValue) -> 'RevertTrimRequestBuilder': ...
    def build(self) -> cern.lsa.domain.settings.RevertTrimRequest: ...
    def setAttribute(self, string: str, object: typing.Any) -> 'RevertTrimRequestBuilder': ...
    def setBeamProcesses(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.BeamProcess], typing.Sequence[cern.lsa.domain.settings.BeamProcess]]) -> 'RevertTrimRequestBuilder': ...
    def setChildSettingPart(self, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'RevertTrimRequestBuilder': ...
    def setContext(self, standAloneContext: cern.lsa.domain.settings.StandAloneContext) -> 'RevertTrimRequestBuilder': ...
    def setContextSettings(self, contextSettings: cern.lsa.domain.settings.ContextSettings) -> 'RevertTrimRequestBuilder': ...
    def setCustomSettingPartMap(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingPartEnum], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingPartEnum]]) -> 'RevertTrimRequestBuilder': ...
    def setDescription(self, string: str) -> 'RevertTrimRequestBuilder': ...
    def setDrive(self, boolean: bool) -> 'RevertTrimRequestBuilder': ...
    def setForceDrive(self, boolean: bool) -> 'RevertTrimRequestBuilder': ...
    def setForceProcessing(self, boolean: bool) -> 'RevertTrimRequestBuilder': ...
    def setIgnoreErrors(self, boolean: bool) -> 'RevertTrimRequestBuilder': ...
    def setLenientDrive(self, boolean: bool) -> 'RevertTrimRequestBuilder': ...
    def setParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'RevertTrimRequestBuilder': ...
    def setPersistSettings(self, boolean: bool) -> 'RevertTrimRequestBuilder': ...
    def setPropagateToChildren(self, boolean: bool) -> 'RevertTrimRequestBuilder': ...
    def setRelative(self, boolean: bool) -> 'RevertTrimRequestBuilder': ...
    def setReturnSettings(self, boolean: bool) -> 'RevertTrimRequestBuilder': ...
    def setSettingPart(self, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> 'RevertTrimRequestBuilder': ...
    def setSkipProcessing(self, boolean: bool) -> 'RevertTrimRequestBuilder': ...
    def setTrimHeader(self, trimHeader: cern.lsa.domain.settings.TrimHeader) -> 'RevertTrimRequestBuilder': ...

class SettingsGenerationRequestBuilder(TrimRequestBuilder):
    """
    Java class 'cern.lsa.domain.settings.factory.SettingsGenerationRequestBuilder'
    
        Extends:
            cern.lsa.domain.settings.factory.TrimRequestBuilder
    
      Constructors:
        * SettingsGenerationRequestBuilder()
    
    """
    def __init__(self): ...
    def build(self) -> cern.lsa.domain.settings.SettingsGenerationRequest: ...
    def setAttribute(self, string: str, object: typing.Any) -> 'SettingsGenerationRequestBuilder': ...
    def setContext(self, standAloneContext: cern.lsa.domain.settings.StandAloneContext) -> 'SettingsGenerationRequestBuilder': ...
    def setDescription(self, string: str) -> 'SettingsGenerationRequestBuilder': ...
    def setDrive(self, boolean: bool) -> 'SettingsGenerationRequestBuilder': ...
    def setGenerateZeroSettings(self, boolean: bool) -> 'SettingsGenerationRequestBuilder': ...
    def setParameters(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.Parameter], typing.Sequence[cern.lsa.domain.settings.Parameter]]) -> 'SettingsGenerationRequestBuilder': ...
    def setPersistSettings(self, boolean: bool) -> 'SettingsGenerationRequestBuilder': ...
    def setPropagateToChildren(self, boolean: bool) -> 'SettingsGenerationRequestBuilder': ...
    def setReturnSettings(self, boolean: bool) -> 'SettingsGenerationRequestBuilder': ...
    def setSubContexts(self, set: java.util.Set[cern.lsa.domain.settings.SubContext]) -> 'SettingsGenerationRequestBuilder': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.settings.factory")``.

    AbstractKnobBuilder: typing.Type[AbstractKnobBuilder]
    BeamProcessIncorporationRequestBuilder: typing.Type[BeamProcessIncorporationRequestBuilder]
    ContextSettingsBuilder: typing.Type[ContextSettingsBuilder]
    CopySettingsRequestBuilder: typing.Type[CopySettingsRequestBuilder]
    IncorporationRequestBuilder: typing.Type[IncorporationRequestBuilder]
    KnobCreationBuilder: typing.Type[KnobCreationBuilder]
    KnobModificationBuilder: typing.Type[KnobModificationBuilder]
    ParameterTreesRequestBuilder: typing.Type[ParameterTreesRequestBuilder]
    ParameterTypesRequestBuilder: typing.Type[ParameterTypesRequestBuilder]
    ParametersRequestBuilder: typing.Type[ParametersRequestBuilder]
    RevertTrimRequestBuilder: typing.Type[RevertTrimRequestBuilder]
    SettingComparisonRequestBuilder: typing.Type[SettingComparisonRequestBuilder]
    SettingsGenerationRequestBuilder: typing.Type[SettingsGenerationRequestBuilder]
    StandAloneContextCloneRequestBuilder: typing.Type[StandAloneContextCloneRequestBuilder]
    StandAloneContextCreationRequestBuilder: typing.Type[StandAloneContextCreationRequestBuilder]
    TrimRequestBuilder: typing.Type[TrimRequestBuilder]
