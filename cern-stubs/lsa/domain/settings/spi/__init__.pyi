import cern
import cern.accsoft.commons.domain
import cern.accsoft.commons.domain.particletransfers
import cern.accsoft.commons.domain.zones
import cern.accsoft.commons.util
import cern.accsoft.commons.util.value
import cern.accsoft.commons.value
import cern.lsa.domain.commons
import cern.lsa.domain.commons.spi
import cern.lsa.domain.devices
import cern.lsa.domain.devices.type
import cern.lsa.domain.exploitation
import cern.lsa.domain.settings
import cern.lsa.domain.settings.spi.test
import cern.lsa.domain.settings.spi.type
import cern.lsa.domain.settings.spi.util
import cern.lsa.domain.settings.type
import java.io
import java.lang
import java.time
import java.util
import typing



class AbstractSetting(cern.lsa.domain.commons.spi.AbstractIdentifiedEntity[cern.lsa.domain.settings.Setting], cern.lsa.domain.settings.Setting, java.lang.Cloneable):
    """
    Java class 'cern.lsa.domain.settings.spi.AbstractSetting'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedEntity
    
        Interfaces:
            cern.lsa.domain.settings.Setting, java.lang.Cloneable
    
    """
    @staticmethod
    def checkReadSettingPart(settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> None: ...
    def clone(self) -> 'AbstractSetting': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArray2DValue(self) -> cern.accsoft.commons.value.ImmutableScalarArray2D: ...
    def getArrayValue(self) -> cern.accsoft.commons.value.ImmutableScalarArray: ...
    def getBeamProcess(self) -> cern.lsa.domain.settings.BeamProcess: ...
    def getCorrectionFunctionValue(self) -> cern.accsoft.commons.value.ImmutableDiscreteFunction: ...
    def getCorrectionFunctionsArrayValue(self) -> cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray: ...
    def getCorrectionScalarValue(self) -> cern.accsoft.commons.value.ImmutableScalar: ...
    def getCorrectionValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getCreationDate(self) -> java.util.Date: ...
    def getFunctionValue(self) -> cern.accsoft.commons.value.ImmutableDiscreteFunction: ...
    def getFunctionsArrayValue(self) -> cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray: ...
    def getParameter(self) -> cern.lsa.domain.settings.Parameter: ...
    def getScalarValue(self) -> cern.accsoft.commons.value.ImmutableScalar: ...
    def getTargetFunctionValue(self) -> cern.accsoft.commons.value.ImmutableDiscreteFunction: ...
    def getTargetFunctionsArrayValue(self) -> cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray: ...
    def getTargetScalarValue(self) -> cern.accsoft.commons.value.ImmutableScalar: ...
    def getTargetValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getTrimId(self) -> int: ...
    def getValueType(self) -> cern.accsoft.commons.value.Type: ...
    def hashCode(self) -> int: ...
    def setBeamProcess(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> None: ...
    def setCreationDate(self, date: java.util.Date) -> None: ...
    def setParameter(self, parameter: cern.lsa.domain.settings.Parameter) -> None: ...
    def setTrimId(self, long: int) -> None: ...
    def toString(self) -> str: ...
    @typing.overload
    def updateValue(self, immutableValue: cern.accsoft.commons.value.ImmutableValue, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> None: ...
    @typing.overload
    def updateValue(self, setting: cern.lsa.domain.settings.Setting) -> None: ...

class ActualBeamProcessInfoImpl(cern.lsa.domain.settings.ActualBeamProcessInfo, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.ActualBeamProcessInfoImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.ActualBeamProcessInfo,
            java.io.Serializable
    
      Constructors:
        * ActualBeamProcessInfoImpl(cern.lsa.domain.settings.BeamProcess, int)
    
    """
    def __init__(self, beamProcess: cern.lsa.domain.settings.BeamProcess, int: int): ...
    def getSourceBeamProcess(self) -> cern.lsa.domain.settings.BeamProcess: ...
    def getSourcePoint(self) -> int: ...
    def setSourceBeamProcess(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> None: ...

class ArchiveImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity[cern.lsa.domain.settings.Archive], cern.lsa.domain.settings.Archive):
    """
    Java class 'cern.lsa.domain.settings.spi.ArchiveImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity
    
        Interfaces:
            cern.lsa.domain.settings.Archive
    
      Constructors:
        * ArchiveImpl(long, java.lang.String, cern.lsa.domain.settings.StandAloneContext)
    
    """
    def __init__(self, long: int, string: str, standAloneContext: cern.lsa.domain.settings.StandAloneContext): ...
    def addArchiveVersion(self, archiveVersion: cern.lsa.domain.settings.ArchiveVersion) -> None: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getLatestVersion(self) -> cern.lsa.domain.settings.ArchiveVersion: ...
    def getStandAloneContext(self) -> cern.lsa.domain.settings.StandAloneContext: ...
    def getVersion(self, double: float) -> cern.lsa.domain.settings.ArchiveVersion: ...
    def getVersions(self) -> java.util.SortedSet[cern.lsa.domain.settings.ArchiveVersion]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class ArchiveVersionImpl(cern.lsa.domain.settings.ArchiveVersion, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.ArchiveVersionImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.ArchiveVersion, java.io.Serializable
    
      Constructors:
        * ArchiveVersionImpl(cern.lsa.domain.settings.Archive, double, java.util.Date, java.lang.String, int)
    
    """
    def __init__(self, archive: cern.lsa.domain.settings.Archive, double: float, date: java.util.Date, string: str, int: int): ...
    def compareTo(self, archiveVersion: cern.lsa.domain.settings.ArchiveVersion) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArchive(self) -> cern.lsa.domain.settings.Archive: ...
    def getCreationDate(self) -> java.util.Date: ...
    def getDescription(self) -> str: ...
    def getSettingCount(self) -> int: ...
    def getVersion(self) -> float: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class BeamProcessIncorporationRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.settings.BeamProcessIncorporationRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.BeamProcessIncorporationRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.settings.BeamProcessIncorporationRequest
    
      Constructors:
        * BeamProcessIncorporationRequestImpl(java.util.Map)
    
      Attributes:
        SOURCE_BEAM_PROCESS (java.lang.String): final static field
        SETTINGS_SOURCE (java.lang.String): final static field
        DEST_BEAM_PROCESS (java.lang.String): final static field
        SOURCE_POINT_IN_TIME (java.lang.String): final static field
        DEST_POINT_IN_TIME (java.lang.String): final static field
        SHOULD_INCORPORATE_ALL_PARAMETERS (java.lang.String): final static field
        PARAMETERS (java.lang.String): final static field
        SETTING_PART (java.lang.String): final static field
        DRIVE (java.lang.String): final static field
        DESCRIPTION (java.lang.String): final static field
    
    """
    SOURCE_BEAM_PROCESS: typing.ClassVar[str] = ...
    SETTINGS_SOURCE: typing.ClassVar[str] = ...
    DEST_BEAM_PROCESS: typing.ClassVar[str] = ...
    SOURCE_POINT_IN_TIME: typing.ClassVar[str] = ...
    DEST_POINT_IN_TIME: typing.ClassVar[str] = ...
    SHOULD_INCORPORATE_ALL_PARAMETERS: typing.ClassVar[str] = ...
    PARAMETERS: typing.ClassVar[str] = ...
    SETTING_PART: typing.ClassVar[str] = ...
    DRIVE: typing.ClassVar[str] = ...
    DESCRIPTION: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getDescription(self) -> str: ...
    def getDestBeamProcess(self) -> cern.lsa.domain.settings.BeamProcess: ...
    def getDestPointInTime(self) -> float: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getSettingPart(self) -> cern.lsa.domain.settings.SettingPartEnum: ...
    def getSettingsSource(self) -> cern.lsa.domain.settings.SettingsSource: ...
    def getSourceBeamProcess(self) -> cern.lsa.domain.settings.BeamProcess: ...
    def getSourcePointInTime(self) -> float: ...
    def shouldDrive(self) -> bool: ...
    def shouldIncorporateAllParameters(self) -> bool: ...

class CompositeContextSettingsImpl(cern.lsa.domain.settings.CompositeContextSettings, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.CompositeContextSettingsImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.CompositeContextSettings,
            java.io.Serializable
    
      Constructors:
        * CompositeContextSettingsImpl(cern.lsa.domain.settings.ContextSettings, cern.lsa.domain.settings.ContextSettings)
    
    """
    def __init__(self, contextSettings: cern.lsa.domain.settings.ContextSettings, contextSettings2: cern.lsa.domain.settings.ContextSettings): ...
    def getContextSettings(self) -> cern.lsa.domain.settings.ContextSettings: ...
    def getNonMultiplexedSettings(self) -> cern.lsa.domain.settings.ContextSettings: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getValue(self, drivableContext: cern.lsa.domain.settings.DrivableContext, string: str) -> cern.accsoft.commons.value.ImmutableValue: ...
    def toString(self) -> str: ...

_ContextBase__C = typing.TypeVar('_ContextBase__C', bound=cern.accsoft.commons.util.Named)  # <C>
class ContextBase(cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity[_ContextBase__C], typing.Generic[_ContextBase__C]):
    """
    Java class 'cern.lsa.domain.settings.spi.ContextBase'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity
    
    """
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getContextCategory(self) -> cern.lsa.domain.settings.ContextCategory: ...
    def getCreationDate(self) -> java.util.Date: ...
    def getCreatorName(self) -> str: ...
    def getDescription(self) -> str: ...
    def getLength(self) -> int: ...
    def getModificationDate(self) -> java.util.Date: ...
    def getModifierName(self) -> str: ...
    def setAccelerator(self, accelerator: cern.accsoft.commons.domain.Accelerator) -> None: ...
    def setContextCategory(self, contextCategory: cern.lsa.domain.settings.ContextCategory) -> None: ...
    def setCreationDate(self, date: java.util.Date) -> None: ...
    def setCreatorName(self, string: str) -> None: ...
    def setDescription(self, string: str) -> None: ...
    @typing.overload
    def setLength(self, int: int) -> None: ...
    @typing.overload
    def setLength(self, string: str) -> None: ...
    def setModificationDate(self, date: java.util.Date) -> None: ...
    def setModifierName(self, string: str) -> None: ...
    def toString(self) -> str: ...

class ContextSettingsImpl(cern.lsa.domain.settings.ContextSettings, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.ContextSettingsImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.ContextSettings, java.io.Serializable
    
      Constructors:
        * ContextSettingsImpl(cern.lsa.domain.settings.ContextSettings)
        * ContextSettingsImpl(cern.lsa.domain.settings.StandAloneContext, java.util.Map)
        * ContextSettingsImpl(cern.lsa.domain.settings.StandAloneContext)
    
    """
    @typing.overload
    def __init__(self, contextSettings: cern.lsa.domain.settings.ContextSettings): ...
    @typing.overload
    def __init__(self, standAloneContext: cern.lsa.domain.settings.StandAloneContext): ...
    @typing.overload
    def __init__(self, standAloneContext: cern.lsa.domain.settings.StandAloneContext, map: typing.Union[java.util.Map[str, 'ParameterSettingsImpl'], typing.Mapping[str, 'ParameterSettingsImpl']]): ...
    def addAll(self, contextSettings: cern.lsa.domain.settings.ContextSettings) -> None: ...
    def addCurrentSetting(self, setting: cern.lsa.domain.settings.Setting) -> None: ...
    def addParameterSettings(self, parameterSettings: cern.lsa.domain.settings.ParameterSettings) -> None: ...
    def addUpdatedSetting(self, setting: cern.lsa.domain.settings.Setting) -> None: ...
    def getContext(self) -> cern.lsa.domain.settings.StandAloneContext: ...
    def getCurrentBeamProcesses(self) -> java.util.Set[cern.lsa.domain.settings.BeamProcess]: ...
    @typing.overload
    def getCurrentSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess, parameter: cern.lsa.domain.settings.Parameter) -> cern.lsa.domain.settings.Setting: ...
    @typing.overload
    def getCurrentSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess, string: str) -> cern.lsa.domain.settings.Setting: ...
    def getCurrentSettings(self) -> java.util.Set[cern.lsa.domain.settings.Setting]: ...
    def getParameterSettingMap(self) -> java.util.Map[str, 'ParameterSettingsImpl']: ...
    @typing.overload
    def getParameterSettings(self, parameter: cern.lsa.domain.settings.Parameter) -> cern.lsa.domain.settings.ParameterSettings: ...
    @typing.overload
    def getParameterSettings(self, string: str) -> cern.lsa.domain.settings.ParameterSettings: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    @typing.overload
    def getSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess, parameter: cern.lsa.domain.settings.Parameter) -> cern.lsa.domain.settings.Setting: ...
    @typing.overload
    def getSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess, string: str) -> cern.lsa.domain.settings.Setting: ...
    def getSettings(self) -> java.util.Set[cern.lsa.domain.settings.Setting]: ...
    def getUpdatedBeamProcesses(self) -> java.util.Set[cern.lsa.domain.settings.BeamProcess]: ...
    def getUpdatedParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    @typing.overload
    def getUpdatedSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess, parameter: cern.lsa.domain.settings.Parameter) -> cern.lsa.domain.settings.Setting: ...
    @typing.overload
    def getUpdatedSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess, string: str) -> cern.lsa.domain.settings.Setting: ...
    def getUpdatedSettings(self) -> java.util.Set[cern.lsa.domain.settings.Setting]: ...
    def isEmpty(self) -> bool: ...
    @typing.overload
    def isUpdated(self, beamProcess: cern.lsa.domain.settings.BeamProcess, parameter: cern.lsa.domain.settings.Parameter) -> bool: ...
    @typing.overload
    def isUpdated(self, beamProcess: cern.lsa.domain.settings.BeamProcess, string: str) -> bool: ...
    @typing.overload
    def isUpdated(self, parameter: cern.lsa.domain.settings.Parameter) -> bool: ...
    @typing.overload
    def isUpdated(self, string: str) -> bool: ...
    def round(self) -> None: ...
    def size(self) -> int: ...
    def toString(self) -> str: ...
    @typing.overload
    def updateSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess, parameter: cern.lsa.domain.settings.Parameter, immutableValue: cern.accsoft.commons.value.ImmutableValue, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> None: ...
    @typing.overload
    def updateSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess, string: str, immutableValue: cern.accsoft.commons.value.ImmutableValue, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> None: ...

class CycleBeamProcessIntersectionImpl(cern.lsa.domain.settings.CycleBeamProcessIntersection, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.CycleBeamProcessIntersectionImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.CycleBeamProcessIntersection,
            java.io.Serializable
    
      Constructors:
        * CycleBeamProcessIntersectionImpl()
    
    """
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBeamProcess(self) -> cern.lsa.domain.settings.BeamProcess: ...
    def getCycle(self) -> cern.lsa.domain.settings.Cycle: ...
    def getEndInBeamProcess(self) -> int: ...
    def getEndInCycle(self) -> int: ...
    def getParticleTransfer(self) -> cern.accsoft.commons.domain.particletransfers.ParticleTransfer: ...
    def getStartInBeamProcess(self) -> int: ...
    def getStartInCycle(self) -> int: ...
    def hashCode(self) -> int: ...
    def setBeamProcess(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> None: ...
    def setCycle(self, cycle: cern.lsa.domain.settings.Cycle) -> None: ...
    def setIntersectionEndInBeamProcess(self, int: int) -> None: ...
    def setIntersectionEndInCycle(self, int: int) -> None: ...
    def setIntersectionStartInBeamProcess(self, int: int) -> None: ...
    def setIntersectionStartInCycle(self, int: int) -> None: ...
    def setParticleTransfer(self, particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer) -> None: ...
    def toString(self) -> str: ...

class DevicePropertyParametersImpl(cern.lsa.domain.settings.DevicePropertyParameters, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.DevicePropertyParametersImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.DevicePropertyParameters,
            java.io.Serializable
    
      Constructors:
        * DevicePropertyParametersImpl(java.util.Set)
    
    """
    def __init__(self, set: java.util.Set[cern.lsa.domain.settings.Parameter]): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDeviceClassName(self) -> str: ...
    def getDeviceName(self) -> str: ...
    def getDevicePropertyName(self) -> str: ...
    @typing.overload
    def getFieldNames(self) -> java.util.SortedSet[str]: ...
    @typing.overload
    def getFieldNames(self, boolean: bool) -> java.util.SortedSet[str]: ...
    @typing.overload
    def getParameters(self) -> java.util.SortedSet[cern.lsa.domain.settings.Parameter]: ...
    @typing.overload
    def getParameters(self, boolean: bool) -> java.util.SortedSet[cern.lsa.domain.settings.Parameter]: ...
    def getPropertyName(self) -> str: ...
    def getSignature(self) -> cern.lsa.domain.settings.Parameter: ...
    def hashCode(self) -> int: ...
    def isCritical(self) -> bool: ...
    def toString(self) -> str: ...

class FailedParametersStatusImpl(cern.lsa.domain.settings.FailedParametersStatus, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.FailedParametersStatusImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.FailedParametersStatus,
            java.io.Serializable
    
      Constructors:
        * FailedParametersStatusImpl()
    
    """
    def __init__(self): ...
    def addFailedParameters(self, context: cern.lsa.domain.settings.Context, map: typing.Union[java.util.Map[str, java.lang.Exception], typing.Mapping[str, java.lang.Exception]]) -> None: ...
    def containsFailedParameters(self) -> bool: ...
    def getFailedContexts(self) -> java.util.Set[cern.lsa.domain.settings.Context]: ...
    def getFailedParameters(self, context: cern.lsa.domain.settings.Context) -> java.util.Map[str, java.lang.Exception]: ...
    def toString(self) -> str: ...

class HyperCycleImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity[cern.lsa.domain.settings.HyperCycle], cern.lsa.domain.settings.HyperCycle, java.lang.Cloneable):
    """
    Java class 'cern.lsa.domain.settings.spi.HyperCycleImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity
    
        Interfaces:
            cern.lsa.domain.settings.HyperCycle, java.lang.Cloneable
    
      Constructors:
        * HyperCycleImpl(java.lang.String)
        * HyperCycleImpl(long, java.lang.String)
    
    """
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, long: int, string: str): ...
    @typing.overload
    def add(self, acceleratorUser: cern.lsa.domain.settings.AcceleratorUser, standAloneBeamProcess: cern.lsa.domain.settings.StandAloneBeamProcess) -> None: ...
    @typing.overload
    def add(self, acceleratorUser: cern.lsa.domain.settings.AcceleratorUser, standAloneBeamProcess: cern.lsa.domain.settings.StandAloneBeamProcess, int: int) -> None: ...
    def clone(self) -> typing.Any: ...
    def contains(self, standAloneBeamProcess: cern.lsa.domain.settings.StandAloneBeamProcess) -> bool: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBeamProcessByUser(self, string: str) -> cern.lsa.domain.settings.StandAloneBeamProcess: ...
    def getBeamProcessPosition(self, string: str, standAloneBeamProcess: cern.lsa.domain.settings.StandAloneBeamProcess) -> int: ...
    def getDescription(self) -> str: ...
    def getFirstBeamProcess(self, string: str) -> cern.lsa.domain.settings.StandAloneBeamProcess: ...
    def getLastBeamProcess(self, string: str) -> cern.lsa.domain.settings.StandAloneBeamProcess: ...
    def getNextBeamProcess(self, string: str) -> cern.lsa.domain.settings.StandAloneBeamProcess: ...
    def getPreviousBeamProcess(self, string: str) -> cern.lsa.domain.settings.StandAloneBeamProcess: ...
    def getResidentBeamProcess(self, string: str) -> cern.lsa.domain.settings.StandAloneBeamProcess: ...
    def getResidentBeamProcesses(self) -> java.util.Set[cern.lsa.domain.settings.StandAloneBeamProcess]: ...
    @typing.overload
    def getScheduledBeamProcesses(self) -> java.util.List[cern.lsa.domain.settings.StandAloneBeamProcess]: ...
    @typing.overload
    def getScheduledBeamProcesses(self, string: str) -> java.util.List[cern.lsa.domain.settings.StandAloneBeamProcess]: ...
    def getUserCategories(self) -> java.util.SortedSet[str]: ...
    def getUserCategory(self, standAloneBeamProcess: cern.lsa.domain.settings.StandAloneBeamProcess) -> str: ...
    def getUserForBeamProcess(self, standAloneBeamProcess: cern.lsa.domain.settings.StandAloneBeamProcess) -> str: ...
    @typing.overload
    def getUsers(self, string: str) -> java.util.List[str]: ...
    @typing.overload
    def getUsers(self) -> java.util.Set[str]: ...
    def hashCode(self) -> int: ...
    def isActive(self) -> bool: ...
    def remove(self, standAloneBeamProcess: cern.lsa.domain.settings.StandAloneBeamProcess) -> None: ...
    def setActive(self, boolean: bool) -> None: ...
    def setDescription(self, string: str) -> None: ...
    def swap(self, string: str, int: int, int2: int) -> None: ...

class KnobFactorsBuilder:
    """
    Java class 'cern.lsa.domain.settings.spi.KnobFactorsBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * KnobFactorsBuilder()
        * KnobFactorsBuilder(cern.lsa.domain.settings.KnobFactors)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, knobFactors: cern.lsa.domain.settings.KnobFactors): ...
    @typing.overload
    def addFactor(self, knobFactor: cern.lsa.domain.settings.KnobFactor) -> 'KnobFactorsBuilder': ...
    @typing.overload
    def addFactor(self, string: str, string2: str, double: float) -> 'KnobFactorsBuilder': ...
    @typing.overload
    def addOrUpdateFactor(self, knobFactor: cern.lsa.domain.settings.KnobFactor) -> 'KnobFactorsBuilder': ...
    @typing.overload
    def addOrUpdateFactor(self, string: str, string2: str, double: float) -> 'KnobFactorsBuilder': ...
    def build(self) -> cern.lsa.domain.settings.KnobFactors: ...
    def clear(self) -> 'KnobFactorsBuilder': ...
    def removeFactor(self, string: str, string2: str) -> 'KnobFactorsBuilder': ...
    @typing.overload
    def updateFactor(self, knobFactor: cern.lsa.domain.settings.KnobFactor) -> 'KnobFactorsBuilder': ...
    @typing.overload
    def updateFactor(self, string: str, string2: str, double: float) -> 'KnobFactorsBuilder': ...

class KnobFactorsImpl(cern.lsa.domain.settings.KnobFactors, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.KnobFactorsImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.KnobFactors, java.io.Serializable
    
      Constructors:
        * KnobFactorsImpl(java.util.Set)
    
    """
    def __init__(self, set: java.util.Set[cern.lsa.domain.settings.KnobFactor]): ...
    @staticmethod
    def buildFactorsMap(set: java.util.Set[cern.lsa.domain.settings.KnobFactor]) -> java.util.Map[cern.accsoft.commons.util.value.Pair[str, str], cern.lsa.domain.settings.KnobFactor]: ...
    def containsFactor(self, string: str, string2: str) -> bool: ...
    @staticmethod
    def extractComponents(collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.KnobFactor], typing.Sequence[cern.lsa.domain.settings.KnobFactor]]) -> java.util.Set[str]: ...
    @staticmethod
    def extractOptics(collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.KnobFactor], typing.Sequence[cern.lsa.domain.settings.KnobFactor]]) -> java.util.Set[str]: ...
    def getComponentNames(self) -> java.util.Set[str]: ...
    def getFactor(self, string: str, string2: str) -> float: ...
    def getFactors(self) -> java.util.Set[cern.lsa.domain.settings.KnobFactor]: ...
    def getFactorsForComponent(self, string: str) -> java.util.Set[cern.lsa.domain.settings.KnobFactor]: ...
    def getFactorsForOptic(self, string: str) -> java.util.Set[cern.lsa.domain.settings.KnobFactor]: ...
    def getOpticNames(self) -> java.util.Set[str]: ...

class NotIncorporatedParametersImpl(cern.lsa.domain.settings.NotIncorporatedParameters, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.NotIncorporatedParametersImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.NotIncorporatedParameters,
            java.io.Serializable
    
      Constructors:
        * NotIncorporatedParametersImpl(java.util.Set, java.util.Set)
    
    """
    def __init__(self, set: java.util.Set[str], set2: java.util.Set[str]): ...
    def getNonCountinueParameters(self) -> java.util.Set[str]: ...
    def getParametersWithSettingsOnlyInFirstContext(self) -> java.util.Set[str]: ...

class ParameterAttributesImpl(cern.lsa.domain.settings.ParameterAttributes):
    """
    Java class 'cern.lsa.domain.settings.spi.ParameterAttributesImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.ParameterAttributes
    
      Constructors:
        * ParameterAttributesImpl(java.lang.String, cern.lsa.domain.devices.Device, cern.lsa.domain.settings.ParameterType, cern.lsa.domain.devices.type.PropertyField)
        * ParameterAttributesImpl(java.lang.Long, java.lang.String, cern.lsa.domain.devices.Device, cern.lsa.domain.settings.ParameterType, cern.lsa.domain.devices.type.PropertyField, java.lang.Double, java.lang.Double, java.lang.Integer, java.lang.Integer, java.lang.Double, java.lang.Double, boolean, java.lang.String, boolean, boolean)
        * ParameterAttributesImpl(cern.lsa.domain.settings.ParameterAttributes)
    
    """
    @typing.overload
    def __init__(self, parameterAttributes: cern.lsa.domain.settings.ParameterAttributes): ...
    @typing.overload
    def __init__(self, long: int, string: str, device: cern.lsa.domain.devices.Device, parameterType: cern.lsa.domain.settings.ParameterType, propertyField: cern.lsa.domain.devices.type.PropertyField, double: float, double2: float, integer: int, integer2: int, double3: float, double4: float, boolean: bool, string2: str, boolean2: bool, boolean3: bool): ...
    @typing.overload
    def __init__(self, string: str, device: cern.lsa.domain.devices.Device, parameterType: cern.lsa.domain.settings.ParameterType, propertyField: cern.lsa.domain.devices.type.PropertyField): ...
    @staticmethod
    def asNew(parameterAttributes: cern.lsa.domain.settings.ParameterAttributes) -> cern.lsa.domain.settings.ParameterAttributes: ...
    @staticmethod
    def baseFromParameter(parameter: cern.lsa.domain.settings.Parameter) -> cern.lsa.domain.settings.ParameterAttributes: ...
    def getAbsoluteTolerance(self) -> float: ...
    def getDefaultHierarchy(self) -> str: ...
    def getDevice(self) -> cern.lsa.domain.devices.Device: ...
    def getMaxValue(self) -> float: ...
    def getMinValue(self) -> float: ...
    def getName(self) -> str: ...
    def getParameterId(self) -> int: ...
    def getParameterName(self) -> str: ...
    def getParameterType(self) -> cern.lsa.domain.settings.ParameterType: ...
    def getPropertyField(self) -> cern.lsa.domain.devices.type.PropertyField: ...
    def getRelativeTolerance(self) -> float: ...
    def getXPrecision(self) -> int: ...
    def getYPrecision(self) -> int: ...
    def isBelongsToFunctionBProc(self) -> bool: ...
    def isReservedForOpExperts(self) -> bool: ...
    def isTrimable(self) -> bool: ...
    def setAbsoluteTolerance(self, double: float) -> None: ...
    def setBelongsToFunctionBProc(self, boolean: bool) -> None: ...
    def setDefaultHierarchy(self, string: str) -> None: ...
    def setMaxValue(self, double: float) -> None: ...
    def setMinValue(self, double: float) -> None: ...
    def setParameterId(self, long: int) -> None: ...
    def setParameterName(self, string: str) -> None: ...
    def setRelativeTolerance(self, double: float) -> None: ...
    def setReservedForOpExperts(self, boolean: bool) -> None: ...
    def setTrimable(self, boolean: bool) -> None: ...
    def setXPrecision(self, integer: int) -> None: ...
    def setYPrecision(self, integer: int) -> None: ...
    def toString(self) -> str: ...

class ParameterImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity[cern.lsa.domain.settings.Parameter], cern.lsa.domain.settings.Parameter, java.lang.Cloneable):
    """
    Java class 'cern.lsa.domain.settings.spi.ParameterImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity
    
        Interfaces:
            cern.lsa.domain.settings.Parameter, java.lang.Cloneable
    
    """
    def belongsToFunctionBeamProcess(self) -> bool: ...
    def clone(self) -> 'ParameterImpl': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getDefaultHierarchy(self) -> str: ...
    def getDevice(self) -> cern.lsa.domain.devices.Device: ...
    def getParameterGroups(self) -> java.util.Set[str]: ...
    def getParameterType(self) -> cern.lsa.domain.settings.ParameterType: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    def getPropertyField(self) -> cern.lsa.domain.devices.type.PropertyField: ...
    def getValueDescriptor(self) -> cern.accsoft.commons.value.ValueDescriptor: ...
    def getValueType(self) -> cern.accsoft.commons.value.Type: ...
    def hashCode(self) -> int: ...
    def isCritical(self) -> bool: ...
    def isCycleBound(self) -> bool: ...
    def isLsaImplementation(self) -> bool: ...
    def isMonitorable(self) -> bool: ...
    def isMultiplexed(self) -> bool: ...
    def isPropertySupportingPartialSet(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isReservedForOpExperts(self) -> bool: ...
    def isTrimable(self) -> bool: ...
    def isVirtual(self) -> bool: ...
    def isWritable(self) -> bool: ...

class ParameterSettingsImpl(cern.lsa.domain.settings.ParameterSettings, java.io.Serializable, java.lang.Cloneable):
    """
    Java class 'cern.lsa.domain.settings.spi.ParameterSettingsImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.ParameterSettings,
            java.io.Serializable, java.lang.Cloneable
    
      Constructors:
        * ParameterSettingsImpl(cern.lsa.domain.settings.ParameterSettings)
        * ParameterSettingsImpl(cern.lsa.domain.settings.Parameter, java.util.Collection)
        * ParameterSettingsImpl(cern.lsa.domain.settings.Parameter, cern.accsoft.commons.domain.particletransfers.ParticleTransfer)
        * ParameterSettingsImpl(cern.lsa.domain.settings.Parameter)
    
    """
    @typing.overload
    def __init__(self, parameter: cern.lsa.domain.settings.Parameter): ...
    @typing.overload
    def __init__(self, parameter: cern.lsa.domain.settings.Parameter, particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer): ...
    @typing.overload
    def __init__(self, parameter: cern.lsa.domain.settings.Parameter, collection: typing.Union[java.util.Collection[cern.accsoft.commons.domain.particletransfers.ParticleTransfer], typing.Sequence[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]]): ...
    @typing.overload
    def __init__(self, parameterSettings: cern.lsa.domain.settings.ParameterSettings): ...
    def addCurrentSetting(self, setting: cern.lsa.domain.settings.Setting) -> None: ...
    def addUpdatedSetting(self, setting: cern.lsa.domain.settings.Setting) -> None: ...
    def getCurrentBeamProcesses(self) -> java.util.Set[cern.lsa.domain.settings.BeamProcess]: ...
    def getCurrentSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> cern.lsa.domain.settings.Setting: ...
    def getCurrentSettings(self) -> java.util.Set[cern.lsa.domain.settings.Setting]: ...
    def getParameter(self) -> cern.lsa.domain.settings.Parameter: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    def getSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> cern.lsa.domain.settings.Setting: ...
    def getSettings(self) -> java.util.Set[cern.lsa.domain.settings.Setting]: ...
    def getUpdatedBeamProcesses(self) -> java.util.Set[cern.lsa.domain.settings.BeamProcess]: ...
    def getUpdatedSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> cern.lsa.domain.settings.Setting: ...
    def getUpdatedSettings(self) -> java.util.Set[cern.lsa.domain.settings.Setting]: ...
    def getValueType(self) -> cern.accsoft.commons.value.Type: ...
    def isEmpty(self) -> bool: ...
    @typing.overload
    def isUpdated(self) -> bool: ...
    @typing.overload
    def isUpdated(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> bool: ...
    def round(self) -> None: ...
    def size(self) -> int: ...
    @typing.overload
    def updateSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess, immutableValue: cern.accsoft.commons.value.ImmutableValue, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> None: ...
    @typing.overload
    def updateSetting(self, beamProcess: cern.lsa.domain.settings.BeamProcess, setting: cern.lsa.domain.settings.Setting) -> None: ...

class ParameterTreeNodeImpl(cern.lsa.domain.settings.ParameterTreeNode, java.lang.Comparable[cern.lsa.domain.settings.ParameterTreeNode], java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.ParameterTreeNodeImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.ParameterTreeNode,
            java.lang.Comparable, java.io.Serializable
    
      Constructors:
        * ParameterTreeNodeImpl(cern.lsa.domain.settings.Parameter, boolean)
    
    """
    def __init__(self, parameter: cern.lsa.domain.settings.Parameter, boolean: bool): ...
    def addChild(self, parameterTreeNodeImpl: 'ParameterTreeNodeImpl') -> None: ...
    def compareTo(self, parameterTreeNode: cern.lsa.domain.settings.ParameterTreeNode) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def findNode(self, string: str) -> cern.lsa.domain.settings.ParameterTreeNode: ...
    def getAllChildren(self) -> java.util.List[cern.lsa.domain.settings.ParameterTreeNode]: ...
    def getAllParents(self) -> java.util.List[cern.lsa.domain.settings.ParameterTreeNode]: ...
    def getChildren(self) -> java.util.List[cern.lsa.domain.settings.ParameterTreeNode]: ...
    def getName(self) -> str: ...
    @typing.overload
    def getNodes(self) -> java.util.List[cern.lsa.domain.settings.ParameterTreeNode]: ...
    @typing.overload
    def getNodes(self, boolean: bool) -> java.util.List[cern.lsa.domain.settings.ParameterTreeNode]: ...
    def getParameter(self) -> cern.lsa.domain.settings.Parameter: ...
    def getParameters(self) -> java.util.List[cern.lsa.domain.settings.Parameter]: ...
    def getParametersFromThisNodeAndAllChildren(self) -> java.util.List[cern.lsa.domain.settings.Parameter]: ...
    def getParametersFromThisNodeAndAllParents(self) -> java.util.List[cern.lsa.domain.settings.Parameter]: ...
    def getParents(self) -> java.util.List[cern.lsa.domain.settings.ParameterTreeNode]: ...
    def getThisNodeAndAllChildren(self) -> java.util.List[cern.lsa.domain.settings.ParameterTreeNode]: ...
    def getThisNodeAndAllParents(self) -> java.util.List[cern.lsa.domain.settings.ParameterTreeNode]: ...
    def hashCode(self) -> int: ...
    def isLeaf(self) -> bool: ...
    def isRoot(self) -> bool: ...
    def isSource(self) -> bool: ...
    def setIsSource(self, boolean: bool) -> None: ...
    def toString(self) -> str: ...

class ParameterTreesRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.settings.ParameterTreesRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.ParameterTreesRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.settings.ParameterTreesRequest
    
      Constructors:
        * ParameterTreesRequestImpl(java.util.Map)
    
      Attributes:
        PARAMETER_NAMES (java.lang.String): final static field
        PARAMETERS (java.lang.String): final static field
        HIERARCHY (java.lang.String): final static field
        TREE_DIRECTION (java.lang.String): final static field
    
    """
    PARAMETER_NAMES: typing.ClassVar[str] = ...
    PARAMETERS: typing.ClassVar[str] = ...
    HIERARCHY: typing.ClassVar[str] = ...
    TREE_DIRECTION: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getHierarchy(self) -> str: ...
    def getParameterNames(self) -> java.util.Set[str]: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getTreeDirection(self) -> cern.lsa.domain.settings.ParameterTreesRequest.TreeDirection: ...

class ParameterTypeGroupImpl(cern.accsoft.commons.util.AbstractNamed[cern.lsa.domain.settings.ParameterTypeGroup], cern.lsa.domain.settings.ParameterTypeGroup, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.ParameterTypeGroupImpl'
    
        Extends:
            cern.accsoft.commons.util.AbstractNamed
    
        Interfaces:
            cern.lsa.domain.settings.ParameterTypeGroup,
            java.io.Serializable
    
      Constructors:
        * ParameterTypeGroupImpl(java.lang.String, cern.lsa.domain.settings.ParameterTypeCategory)
    
    """
    def __init__(self, string: str, parameterTypeCategory: cern.lsa.domain.settings.ParameterTypeCategory): ...
    def addParameterType(self, parameterType: cern.lsa.domain.settings.ParameterType) -> None: ...
    def compareTo(self, parameterTypeGroup: cern.lsa.domain.settings.ParameterTypeGroup) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getParameterTypes(self) -> java.util.Set[cern.lsa.domain.settings.ParameterType]: ...
    def hashCode(self) -> int: ...

class ParameterTypeImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity[cern.lsa.domain.settings.ParameterType], cern.lsa.domain.settings.ParameterType, java.lang.Cloneable):
    """
    Java class 'cern.lsa.domain.settings.spi.ParameterTypeImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedNamedEntity
    
        Interfaces:
            cern.lsa.domain.settings.ParameterType, java.lang.Cloneable
    
    """
    def clone(self) -> 'ParameterTypeImpl': ...
    def compareTo(self, parameterType: cern.lsa.domain.settings.ParameterType) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getCategory(self) -> cern.lsa.domain.settings.ParameterTypeCategory: ...
    def hashCode(self) -> int: ...
    def isLinkRuleApplicable(self) -> bool: ...

class ParameterTypesRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.settings.ParameterTypesRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.ParameterTypesRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.settings.ParameterTypesRequest
    
      Constructors:
        * ParameterTypesRequestImpl(java.util.Map)
    
      Attributes:
        PARAMETER_TYPE_NAMES (java.lang.String): final static field
        ALL_PARAMETER_TYPES_REQUESTED (java.lang.String): final static field
    
    """
    PARAMETER_TYPE_NAMES: typing.ClassVar[str] = ...
    ALL_PARAMETER_TYPES_REQUESTED: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getParameterTypeNames(self) -> java.util.Set[str]: ...
    def isAllParameterTypesRequested(self) -> bool: ...

class ParametersRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.settings.ParametersRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.ParametersRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.settings.ParametersRequest
    
      Constructors:
        * ParametersRequestImpl(java.util.Map)
    
      Attributes:
        ACCELERATOR (java.lang.String): final static field
        ACCELERATOR_ZONES (java.lang.String): final static field
        PARTICLE_TRANSFERS (java.lang.String): final static field
        PARAMETER_GROUPS (java.lang.String): final static field
        PARAMETER_TYPE_NAMES (java.lang.String): final static field
        PROPERTY_FIELDS (java.lang.String): final static field
        PROPERTY_NAMES (java.lang.String): final static field
        PARAMETER_NAMES (java.lang.String): final static field
        DEVICE_NAMES (java.lang.String): final static field
        DEVICES (java.lang.String): final static field
        MULTIPLEXED (java.lang.String): final static field
        LSA_IMPLEMENTATION (java.lang.String): final static field
        VIRTUAL (java.lang.String): final static field
        WRITABLE (java.lang.String): final static field
        READABLE (java.lang.String): final static field
        PARAMETER_NAME_PATTERN (java.lang.String): final static field
        CRITICAL (java.lang.String): final static field
        INCLUDE_SIGNATURES (java.lang.String): final static field
        VALUE_TYPES (java.lang.String): final static field
    
    """
    ACCELERATOR: typing.ClassVar[str] = ...
    ACCELERATOR_ZONES: typing.ClassVar[str] = ...
    PARTICLE_TRANSFERS: typing.ClassVar[str] = ...
    PARAMETER_GROUPS: typing.ClassVar[str] = ...
    PARAMETER_TYPE_NAMES: typing.ClassVar[str] = ...
    PROPERTY_FIELDS: typing.ClassVar[str] = ...
    PROPERTY_NAMES: typing.ClassVar[str] = ...
    PARAMETER_NAMES: typing.ClassVar[str] = ...
    DEVICE_NAMES: typing.ClassVar[str] = ...
    DEVICES: typing.ClassVar[str] = ...
    MULTIPLEXED: typing.ClassVar[str] = ...
    LSA_IMPLEMENTATION: typing.ClassVar[str] = ...
    VIRTUAL: typing.ClassVar[str] = ...
    WRITABLE: typing.ClassVar[str] = ...
    READABLE: typing.ClassVar[str] = ...
    PARAMETER_NAME_PATTERN: typing.ClassVar[str] = ...
    CRITICAL: typing.ClassVar[str] = ...
    INCLUDE_SIGNATURES: typing.ClassVar[str] = ...
    VALUE_TYPES: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getAcceleratorZones(self) -> java.util.Set[cern.accsoft.commons.domain.zones.AcceleratorZone]: ...
    def getDeviceNames(self) -> java.util.Set[str]: ...
    def getDevices(self) -> java.util.Set[cern.lsa.domain.devices.Device]: ...
    def getParameterGroups(self) -> java.util.Set[str]: ...
    def getParameterNamePattern(self) -> str: ...
    def getParameterNames(self) -> java.util.Set[str]: ...
    def getParameterTypeNames(self) -> java.util.Set[str]: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    def getPropertyFields(self) -> java.util.Set[cern.lsa.domain.devices.type.PropertyField]: ...
    def getPropertyNames(self) -> java.util.Set[str]: ...
    def getValueTypes(self) -> java.util.Set[cern.accsoft.commons.value.Type]: ...
    def isCritical(self) -> bool: ...
    def isIncludeSignatures(self) -> bool: ...
    def isLsaImplementation(self) -> bool: ...
    def isMultiplexed(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isWritable(self) -> bool: ...

class SettingComparisonParameterResultImpl(cern.lsa.domain.settings.SettingComparisonParameterResult, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.SettingComparisonParameterResultImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.SettingComparisonParameterResult,
            java.io.Serializable
    
      Constructors:
        * SettingComparisonParameterResultImpl(cern.lsa.domain.settings.Parameter, java.util.List, java.util.List)
    
    """
    def __init__(self, parameter: cern.lsa.domain.settings.Parameter, list: java.util.List[cern.lsa.domain.settings.BeamProcess], list2: java.util.List[cern.lsa.domain.settings.BeamProcess]): ...
    def addDetailedResultType(self, beamProcess: cern.lsa.domain.settings.BeamProcess, beamProcess2: cern.lsa.domain.settings.BeamProcess, settingComparisonResultType: cern.lsa.domain.settings.SettingComparisonResultType) -> None: ...
    def getDestinationBeamProcesses(self) -> java.util.List[cern.lsa.domain.settings.BeamProcess]: ...
    def getDestinationDetailedException(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> java.lang.Exception: ...
    def getDestinationException(self) -> java.lang.Exception: ...
    def getDestinationSettings(self) -> cern.lsa.domain.settings.ParameterSettings: ...
    def getDetailedResultType(self, beamProcess: cern.lsa.domain.settings.BeamProcess, beamProcess2: cern.lsa.domain.settings.BeamProcess) -> cern.lsa.domain.settings.SettingComparisonResultType: ...
    def getDetailedResultTypes(self) -> java.util.Map[cern.accsoft.commons.util.value.Pair[cern.lsa.domain.settings.BeamProcess, cern.lsa.domain.settings.BeamProcess], cern.lsa.domain.settings.SettingComparisonResultType]: ...
    def getParameter(self) -> cern.lsa.domain.settings.Parameter: ...
    def getResultType(self) -> cern.lsa.domain.settings.SettingComparisonResultType: ...
    def getSourceBeamProcesses(self) -> java.util.List[cern.lsa.domain.settings.BeamProcess]: ...
    def getSourceDetailedException(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> java.lang.Exception: ...
    def getSourceException(self) -> java.lang.Exception: ...
    def getSourceSettings(self) -> cern.lsa.domain.settings.ParameterSettings: ...
    def setDestinationDetailedException(self, beamProcess: cern.lsa.domain.settings.BeamProcess, exception: java.lang.Exception) -> None: ...
    def setDestinationException(self, exception: java.lang.Exception) -> None: ...
    def setDestinationSettings(self, parameterSettings: cern.lsa.domain.settings.ParameterSettings) -> None: ...
    def setDetailedResultTypes(self, map: typing.Union[java.util.Map[cern.accsoft.commons.util.value.Pair[cern.lsa.domain.settings.BeamProcess, cern.lsa.domain.settings.BeamProcess], cern.lsa.domain.settings.SettingComparisonResultType], typing.Mapping[cern.accsoft.commons.util.value.Pair[cern.lsa.domain.settings.BeamProcess, cern.lsa.domain.settings.BeamProcess], cern.lsa.domain.settings.SettingComparisonResultType]]) -> None: ...
    def setResultType(self, settingComparisonResultType: cern.lsa.domain.settings.SettingComparisonResultType) -> None: ...
    def setSourceDetailedException(self, beamProcess: cern.lsa.domain.settings.BeamProcess, exception: java.lang.Exception) -> None: ...
    def setSourceException(self, exception: java.lang.Exception) -> None: ...
    def setSourceSettings(self, parameterSettings: cern.lsa.domain.settings.ParameterSettings) -> None: ...
    def toString(self) -> str: ...

class SettingComparisonRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.settings.SettingComparisonRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.SettingComparisonRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.settings.SettingComparisonRequest
    
      Constructors:
        * SettingComparisonRequestImpl(java.util.Map)
    
      Attributes:
        POINT_IN_SRC_FUNCTION (java.lang.String): final static field
        POINT_IN_DEST_FUNCTION (java.lang.String): final static field
        SRC_SETTINGS_SOURCE (java.lang.String): final static field
        DEST_SETTINGS_SOURCE (java.lang.String): final static field
        PARAMETERS (java.lang.String): final static field
        COMPARE_ALL_PARAMETERS (java.lang.String): final static field
        SRC_BEAMPROCESSES (java.lang.String): final static field
        DEST_BEAMPROCESSES (java.lang.String): final static field
        IGNORE_FLAT_FUNCTION_LENGTH (java.lang.String): final static field
    
    """
    POINT_IN_SRC_FUNCTION: typing.ClassVar[str] = ...
    POINT_IN_DEST_FUNCTION: typing.ClassVar[str] = ...
    SRC_SETTINGS_SOURCE: typing.ClassVar[str] = ...
    DEST_SETTINGS_SOURCE: typing.ClassVar[str] = ...
    PARAMETERS: typing.ClassVar[str] = ...
    COMPARE_ALL_PARAMETERS: typing.ClassVar[str] = ...
    SRC_BEAMPROCESSES: typing.ClassVar[str] = ...
    DEST_BEAMPROCESSES: typing.ClassVar[str] = ...
    IGNORE_FLAT_FUNCTION_LENGTH: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def compareAllParameters(self) -> bool: ...
    def getDestinationBeamProcesses(self) -> java.util.List[cern.lsa.domain.settings.BeamProcess]: ...
    def getDestinationSettingsSource(self) -> cern.lsa.domain.settings.SettingsSource: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getPointInDestFunction(self) -> int: ...
    def getPointInSourceFunction(self) -> int: ...
    def getSourceBeamProcesses(self) -> java.util.List[cern.lsa.domain.settings.BeamProcess]: ...
    def getSourceSettingsSource(self) -> cern.lsa.domain.settings.SettingsSource: ...
    def ignoreFlatFunctionsLength(self) -> bool: ...

class SettingComparisonResponseImpl(cern.lsa.domain.settings.SettingComparisonResponse, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.SettingComparisonResponseImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.SettingComparisonResponse,
            java.io.Serializable
    
      Constructors:
        * SettingComparisonResponseImpl(cern.lsa.domain.settings.SettingComparisonRequest, cern.lsa.domain.settings.SettingComparisonResult)
    
    """
    def __init__(self, settingComparisonRequest: cern.lsa.domain.settings.SettingComparisonRequest, settingComparisonResult: cern.lsa.domain.settings.SettingComparisonResult): ...
    def getSettingComparisonRequest(self) -> cern.lsa.domain.settings.SettingComparisonRequest: ...
    def getSettingComparisonResult(self) -> cern.lsa.domain.settings.SettingComparisonResult: ...

class SettingComparisonResultImpl(cern.lsa.domain.settings.SettingComparisonResult, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.SettingComparisonResultImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.SettingComparisonResult,
            java.io.Serializable
    
      Constructors:
        * SettingComparisonResultImpl(java.util.Map)
    
    """
    def __init__(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingComparisonParameterResult], typing.Mapping[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingComparisonParameterResult]]): ...
    def getComparedParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getSettingComparisonParameterResult(self, parameter: cern.lsa.domain.settings.Parameter) -> cern.lsa.domain.settings.SettingComparisonParameterResult: ...
    def getSettingComparisonParameterResults(self) -> java.util.Map[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingComparisonParameterResult]: ...

class StandAloneContextCloneRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.settings.StandAloneContextCloneRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.StandAloneContextCloneRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.settings.StandAloneContextCloneRequest
    
      Constructors:
        * StandAloneContextCloneRequestImpl(java.util.Map)
    
      Attributes:
        CLONE_NAME (java.lang.String): final static field
        DESCRIPTION (java.lang.String): final static field
        ATTRIBUTES (java.lang.String): final static field
        SOURCE (java.lang.String): final static field
        WITH_HISTORY (java.lang.String): final static field
        HISTORY_CUT_OFF_DATE (java.lang.String): final static field
        CONTEXT_CATEGORY (java.lang.String): final static field
        CLONE_TYPE (java.lang.String): final static field
    
    """
    CLONE_NAME: typing.ClassVar[str] = ...
    DESCRIPTION: typing.ClassVar[str] = ...
    ATTRIBUTES: typing.ClassVar[str] = ...
    SOURCE: typing.ClassVar[str] = ...
    WITH_HISTORY: typing.ClassVar[str] = ...
    HISTORY_CUT_OFF_DATE: typing.ClassVar[str] = ...
    CONTEXT_CATEGORY: typing.ClassVar[str] = ...
    CLONE_TYPE: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getAttributes(self) -> java.util.Set[cern.lsa.domain.commons.Attribute]: ...
    def getCloneName(self) -> str: ...
    def getContextCategory(self) -> cern.lsa.domain.settings.ContextCategory: ...
    def getDescription(self) -> str: ...
    def getHistoryCutOff(self) -> java.time.Instant: ...
    def getSource(self) -> cern.lsa.domain.settings.StandAloneContext: ...
    def shouldCloneType(self) -> bool: ...
    def withHistory(self) -> bool: ...

class StandAloneContextCreationRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.settings.StandAloneContextCreationRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.StandAloneContextCreationRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.settings.StandAloneContextCreationRequest
    
      Constructors:
        * StandAloneContextCreationRequestImpl(java.util.Map)
    
      Attributes:
        NAME (java.lang.String): final static field
        DESCRIPTION (java.lang.String): final static field
        CONTEXT_TYPE (java.lang.String): final static field
        CONTEXT_CATEGORY (java.lang.String): final static field
        ATTRIBUTES (java.lang.String): final static field
        LENGTH (java.lang.String): final static field
        MULTIPLEXITY (java.lang.String): final static field
    
    """
    NAME: typing.ClassVar[str] = ...
    DESCRIPTION: typing.ClassVar[str] = ...
    CONTEXT_TYPE: typing.ClassVar[str] = ...
    CONTEXT_CATEGORY: typing.ClassVar[str] = ...
    ATTRIBUTES: typing.ClassVar[str] = ...
    LENGTH: typing.ClassVar[str] = ...
    MULTIPLEXITY: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getAttributes(self) -> java.util.Set[cern.lsa.domain.commons.Attribute]: ...
    def getContextCategory(self) -> cern.lsa.domain.settings.ContextCategory: ...
    def getContextType(self) -> cern.lsa.domain.settings.type.ContextType: ...
    def getDescription(self) -> str: ...
    def getLength(self) -> int: ...
    def getName(self) -> str: ...
    def isMultiplexed(self) -> bool: ...

class TrimHeaderImpl(cern.lsa.domain.commons.spi.AbstractIdentifiedEntity[cern.lsa.domain.settings.TrimHeader], cern.lsa.domain.settings.TrimHeader, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.TrimHeaderImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractIdentifiedEntity
    
        Interfaces:
            cern.lsa.domain.settings.TrimHeader, java.io.Serializable
    
      Constructors:
        * TrimHeaderImpl()
    
    """
    def __init__(self): ...
    def getBeamProcesses(self) -> java.util.List[cern.lsa.domain.settings.BeamProcess]: ...
    def getClientInfo(self) -> str: ...
    def getCreatedDate(self) -> java.util.Date: ...
    def getDescription(self) -> str: ...
    def setBeamProcesses(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.BeamProcess], typing.Sequence[cern.lsa.domain.settings.BeamProcess]]) -> None: ...
    def setClientInfo(self, string: str) -> None: ...
    def setCreatedDate(self, date: java.util.Date) -> None: ...
    def setDescription(self, string: str) -> None: ...
    def toString(self) -> str: ...

class TrimRequestImpl(cern.lsa.domain.commons.spi.AbstractPropertiesHolder, cern.lsa.domain.settings.TrimRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.TrimRequestImpl'
    
        Extends:
            cern.lsa.domain.commons.spi.AbstractPropertiesHolder
    
        Interfaces:
            cern.lsa.domain.settings.TrimRequest
    
      Constructors:
        * TrimRequestImpl(java.util.Map, java.util.Map)
    
      Attributes:
        IS_GENERATION (java.lang.String): final static field
        SETTING_PART (java.lang.String): final static field
        CHILD_SETTING_PART (java.lang.String): final static field
        CUSTOM_SETTING_PART_MAP (java.lang.String): final static field
        CONTEXT_SETTINGS (java.lang.String): final static field
        PARAMETERS (java.lang.String): final static field
        IGNORE_ERRORS (java.lang.String): final static field
        LENIENT_DRIVE (java.lang.String): final static field
        PROPAGATE_TO_CHILDREN (java.lang.String): final static field
        RELATIVE (java.lang.String): final static field
        PERSIST_SETTINGS (java.lang.String): final static field
        RETURN_SETTINGS (java.lang.String): final static field
        DRIVE (java.lang.String): final static field
        DESCRIPTION (java.lang.String): final static field
        FORCE_DRIVE (java.lang.String): final static field
        SKIP_PROCESSING (java.lang.String): final static field
        FORCE_PROCESSING (java.lang.String): final static field
        SKIP_DRIVING_SOURCE_PARAMETERS (java.lang.String): final static field
        COMMIT (java.lang.String): final static field
    
    """
    IS_GENERATION: typing.ClassVar[str] = ...
    SETTING_PART: typing.ClassVar[str] = ...
    CHILD_SETTING_PART: typing.ClassVar[str] = ...
    CUSTOM_SETTING_PART_MAP: typing.ClassVar[str] = ...
    CONTEXT_SETTINGS: typing.ClassVar[str] = ...
    PARAMETERS: typing.ClassVar[str] = ...
    IGNORE_ERRORS: typing.ClassVar[str] = ...
    LENIENT_DRIVE: typing.ClassVar[str] = ...
    PROPAGATE_TO_CHILDREN: typing.ClassVar[str] = ...
    RELATIVE: typing.ClassVar[str] = ...
    PERSIST_SETTINGS: typing.ClassVar[str] = ...
    RETURN_SETTINGS: typing.ClassVar[str] = ...
    DRIVE: typing.ClassVar[str] = ...
    DESCRIPTION: typing.ClassVar[str] = ...
    FORCE_DRIVE: typing.ClassVar[str] = ...
    SKIP_PROCESSING: typing.ClassVar[str] = ...
    FORCE_PROCESSING: typing.ClassVar[str] = ...
    SKIP_DRIVING_SOURCE_PARAMETERS: typing.ClassVar[str] = ...
    COMMIT: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]], map2: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getAttribute(self, string: str) -> typing.Any: ...
    def getAttributes(self) -> java.util.Map[str, typing.Any]: ...
    def getChildSettingPart(self) -> cern.lsa.domain.settings.SettingPartEnum: ...
    def getContext(self) -> cern.lsa.domain.settings.StandAloneContext: ...
    def getContextSettings(self) -> cern.lsa.domain.settings.ContextSettings: ...
    def getCustomSettingPart(self, parameter: cern.lsa.domain.settings.Parameter) -> cern.lsa.domain.settings.SettingPartEnum: ...
    def getCustomSettingPartMap(self) -> java.util.Map[cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.SettingPartEnum]: ...
    def getDescription(self) -> str: ...
    def getParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getSettingPart(self) -> cern.lsa.domain.settings.SettingPartEnum: ...
    def isCommit(self) -> bool: ...
    def isDrive(self) -> bool: ...
    def isForceDrive(self) -> bool: ...
    def isForceProcessing(self) -> bool: ...
    def isIgnoreErrors(self) -> bool: ...
    def isLenientDrive(self) -> bool: ...
    def isPersistSettings(self) -> bool: ...
    def isPropagateToChildren(self) -> bool: ...
    def isRelative(self) -> bool: ...
    def isReturnSettings(self) -> bool: ...
    def isSkipProcessing(self) -> bool: ...
    def setAttribute(self, string: str, object: typing.Any) -> None: ...
    def setSettingPart(self, settingPartEnum: cern.lsa.domain.settings.SettingPartEnum) -> None: ...
    def toString(self) -> str: ...

class TrimResponseImpl(cern.lsa.domain.settings.TrimResponse, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.TrimResponseImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.TrimResponse, java.io.Serializable
    
      Constructors:
        * TrimResponseImpl(cern.lsa.domain.settings.TrimResult, cern.lsa.domain.exploitation.DriveResult)
    
    """
    def __init__(self, trimResult: cern.lsa.domain.settings.TrimResult, driveResult: cern.lsa.domain.exploitation.DriveResult): ...
    def getDriveResult(self) -> cern.lsa.domain.exploitation.DriveResult: ...
    def getTrimResult(self) -> cern.lsa.domain.settings.TrimResult: ...
    def isDrivePerformed(self) -> bool: ...

class TrimResultImpl(cern.lsa.domain.settings.TrimResult, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.TrimResultImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.TrimResult, java.io.Serializable
    
      Constructors:
        * TrimResultImpl(cern.lsa.domain.settings.TrimRequest, cern.lsa.domain.settings.ContextSettings)
        * TrimResultImpl(cern.lsa.domain.settings.TrimRequest, cern.lsa.domain.settings.TrimHeader, cern.lsa.domain.settings.ContextSettings, java.util.List)
    
    """
    @typing.overload
    def __init__(self, trimRequest: cern.lsa.domain.settings.TrimRequest, contextSettings: cern.lsa.domain.settings.ContextSettings): ...
    @typing.overload
    def __init__(self, trimRequest: cern.lsa.domain.settings.TrimRequest, trimHeader: cern.lsa.domain.settings.TrimHeader, contextSettings: cern.lsa.domain.settings.ContextSettings, list: java.util.List[cern.accsoft.commons.util.value.Pair[str, java.lang.Throwable]]): ...
    def getAttribute(self, string: str) -> java.io.Serializable: ...
    def getContext(self) -> cern.lsa.domain.settings.StandAloneContext: ...
    def getContextSettings(self) -> cern.lsa.domain.settings.ContextSettings: ...
    def getTrimHeader(self) -> cern.lsa.domain.settings.TrimHeader: ...
    def getTrimRequest(self) -> cern.lsa.domain.settings.TrimRequest: ...
    def getWarnings(self) -> java.util.List[cern.accsoft.commons.util.value.Pair[str, java.lang.Throwable]]: ...
    def putAttributes(self, map: typing.Union[java.util.Map[str, java.io.Serializable], typing.Mapping[str, java.io.Serializable]]) -> None: ...
    def setAttribute(self, string: str, serializable: java.io.Serializable) -> None: ...

class UserContextMappingImpl(cern.lsa.domain.settings.UserContextMapping, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.UserContextMappingImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.lsa.domain.settings.UserContextMapping,
            java.io.Serializable
    
      Constructors:
        * UserContextMappingImpl(java.lang.String, java.lang.String, long, cern.lsa.domain.settings.UserContextMapping.OperationType, java.lang.String, java.lang.Boolean)
    
    """
    def __init__(self, string: str, string2: str, long: int, operationType: cern.lsa.domain.settings.UserContextMapping.OperationType, string3: str, boolean: bool): ...
    def equalByName(self, userContextMapping: cern.lsa.domain.settings.UserContextMapping) -> bool: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getContextName(self) -> str: ...
    def getContextParent(self) -> str: ...
    def getMappingTimestamp(self) -> int: ...
    def getOperationType(self) -> cern.lsa.domain.settings.UserContextMapping.OperationType: ...
    def getUser(self) -> str: ...
    def hashCode(self) -> int: ...
    def isResident(self) -> bool: ...
    def toString(self) -> str: ...

class BoundedPolynomialSequenceSetting(AbstractSetting):
    """
    Java class 'cern.lsa.domain.settings.spi.BoundedPolynomialSequenceSetting'
    
        Extends:
            cern.lsa.domain.settings.spi.AbstractSetting
    
      Constructors:
        * BoundedPolynomialSequenceSetting()
    
    """
    def __init__(self): ...
    def getCorrectionValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getTargetValue(self) -> cern.accsoft.commons.value.BoundedPolynomialSequence: ...
    def getValue(self) -> cern.accsoft.commons.value.BoundedPolynomialSequence: ...
    @typing.overload
    def setValue(self, boundedPolynomialSequence: cern.accsoft.commons.value.BoundedPolynomialSequence) -> None: ...
    @typing.overload
    def setValue(self, scalarArray2D: cern.accsoft.commons.value.ScalarArray2D) -> None: ...

class ContextImpl(ContextBase[cern.lsa.domain.settings.Context], cern.lsa.domain.settings.Context):
    """
    Java class 'cern.lsa.domain.settings.spi.ContextImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.ContextBase
    
        Interfaces:
            cern.lsa.domain.settings.Context
    
    """
    def getDescription(self) -> str: ...
    def getParent(self) -> cern.lsa.domain.settings.Context: ...
    def getTypeName(self) -> str: ...
    def isMultiplexed(self) -> bool: ...
    def isStandAlone(self) -> bool: ...
    def setMultiplexed(self, boolean: bool) -> None: ...
    def setParent(self, context: cern.lsa.domain.settings.Context) -> None: ...
    def setTypeName(self, string: str) -> None: ...

class CopySettingsRequestImpl(TrimRequestImpl, cern.lsa.domain.settings.CopySettingsRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.CopySettingsRequestImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.TrimRequestImpl
    
        Interfaces:
            cern.lsa.domain.settings.CopySettingsRequest
    
      Constructors:
        * CopySettingsRequestImpl(java.util.Map, java.util.Map)
    
      Attributes:
        SETTINGS_SOURCE (java.lang.String): final static field
        SOURCE_CONTEXTS (java.lang.String): final static field
        DESTINATION_CONTEXTS (java.lang.String): final static field
        DESTINATION_PARAMETERS (java.lang.String): final static field
    
    """
    SETTINGS_SOURCE: typing.ClassVar[str] = ...
    SOURCE_CONTEXTS: typing.ClassVar[str] = ...
    DESTINATION_CONTEXTS: typing.ClassVar[str] = ...
    DESTINATION_PARAMETERS: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]], map2: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getDestinationContexts(self) -> java.util.List[cern.lsa.domain.settings.Context]: ...
    def getDestinationParameters(self) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    def getSettingsSource(self) -> cern.lsa.domain.settings.SettingsSource: ...
    def getSourceContexts(self) -> java.util.List[cern.lsa.domain.settings.Context]: ...
    def toString(self) -> str: ...

class FunctionSetting(AbstractSetting, java.io.Serializable, java.lang.Cloneable):
    """
    Java class 'cern.lsa.domain.settings.spi.FunctionSetting'
    
        Extends:
            cern.lsa.domain.settings.spi.AbstractSetting
    
        Interfaces:
            java.io.Serializable, java.lang.Cloneable
    
      Constructors:
        * FunctionSetting()
        * FunctionSetting(cern.accsoft.commons.value.Type)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, type: cern.accsoft.commons.value.Type): ...
    def clone(self) -> 'FunctionSetting': ...
    def getCorrectionValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getTargetValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def setCorrectionValue(self, immutableDiscreteFunction: cern.accsoft.commons.value.ImmutableDiscreteFunction) -> None: ...
    def setTargetValue(self, immutableDiscreteFunction: cern.accsoft.commons.value.ImmutableDiscreteFunction) -> None: ...

class FunctionsArraySetting(AbstractSetting, java.io.Serializable, java.lang.Cloneable):
    """
    Java class 'cern.lsa.domain.settings.spi.FunctionsArraySetting'
    
        Extends:
            cern.lsa.domain.settings.spi.AbstractSetting
    
        Interfaces:
            java.io.Serializable, java.lang.Cloneable
    
      Constructors:
        * FunctionsArraySetting()
        * FunctionsArraySetting(cern.accsoft.commons.value.Type)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, type: cern.accsoft.commons.value.Type): ...
    def clone(self) -> 'FunctionsArraySetting': ...
    def getCorrectionValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getTargetValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def setCorrectionValue(self, immutableDiscreteFunctionsArray: cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray) -> None: ...
    def setTargetValue(self, immutableDiscreteFunctionsArray: cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray) -> None: ...

class IncorporationRequestImpl(TrimRequestImpl, cern.lsa.domain.settings.IncorporationRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.IncorporationRequestImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.TrimRequestImpl
    
        Interfaces:
            cern.lsa.domain.settings.IncorporationRequest
    
      Constructors:
        * IncorporationRequestImpl(java.util.Map, java.util.Map)
    
      Attributes:
        INCORPORATION_SETTINGS (java.lang.String): final static field
    
    """
    INCORPORATION_SETTINGS: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]], map2: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getIncorporationSettings(self) -> java.util.Set[cern.lsa.domain.settings.IncorporationSetting]: ...
    def shouldIncorporate(self, parameter: cern.lsa.domain.settings.Parameter) -> bool: ...
    def toString(self) -> str: ...

class RevertTrimRequestImpl(TrimRequestImpl, cern.lsa.domain.settings.RevertTrimRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.RevertTrimRequestImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.TrimRequestImpl
    
        Interfaces:
            cern.lsa.domain.settings.RevertTrimRequest
    
      Constructors:
        * RevertTrimRequestImpl(java.util.Map, java.util.Map)
    
      Attributes:
        TRIM_HEADER (java.lang.String): final static field
        BEAM_PROCESSES (java.lang.String): final static field
    
    """
    TRIM_HEADER: typing.ClassVar[str] = ...
    BEAM_PROCESSES: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]], map2: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getBeamProcesses(self) -> java.util.Set[cern.lsa.domain.settings.BeamProcess]: ...
    def getTrimHeader(self) -> cern.lsa.domain.settings.TrimHeader: ...
    def toString(self) -> str: ...

class ScalarSetting(AbstractSetting, java.io.Serializable, java.lang.Cloneable):
    """
    Java class 'cern.lsa.domain.settings.spi.ScalarSetting'
    
        Extends:
            cern.lsa.domain.settings.spi.AbstractSetting
    
        Interfaces:
            java.io.Serializable, java.lang.Cloneable
    
      Constructors:
        * ScalarSetting(cern.accsoft.commons.value.Type)
    
    """
    def __init__(self, type: cern.accsoft.commons.value.Type): ...
    def clone(self) -> 'ScalarSetting': ...
    def getCorrectionValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getTargetValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def setCorrectionValue(self, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> None: ...
    def setTargetValue(self, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> None: ...

class SettingsGenerationRequestImpl(TrimRequestImpl, cern.lsa.domain.settings.SettingsGenerationRequest):
    """
    Java class 'cern.lsa.domain.settings.spi.SettingsGenerationRequestImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.TrimRequestImpl
    
        Interfaces:
            cern.lsa.domain.settings.SettingsGenerationRequest
    
      Constructors:
        * SettingsGenerationRequestImpl(java.util.Map, java.util.Map)
    
      Attributes:
        SUBCONTEXTS (java.lang.String): final static field
        GENERATE_ZERO_SETTINGS (java.lang.String): final static field
    
    """
    SUBCONTEXTS: typing.ClassVar[str] = ...
    GENERATE_ZERO_SETTINGS: typing.ClassVar[str] = ...
    def __init__(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]], map2: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]): ...
    def getSubContexts(self) -> java.util.Set[cern.lsa.domain.settings.SubContext]: ...
    def isGenerateZeroSettings(self) -> bool: ...
    def toString(self) -> str: ...

class SettingsRestoreStatusImpl(FailedParametersStatusImpl, cern.lsa.domain.settings.SettingsRestoreStatus, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.SettingsRestoreStatusImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.FailedParametersStatusImpl
    
        Interfaces:
            cern.lsa.domain.settings.SettingsRestoreStatus,
            java.io.Serializable
    
      Constructors:
        * SettingsRestoreStatusImpl(cern.lsa.domain.settings.CompositeContextSettings)
    
    """
    def __init__(self, compositeContextSettings: cern.lsa.domain.settings.CompositeContextSettings): ...
    def getSettings(self) -> cern.lsa.domain.settings.CompositeContextSettings: ...

class CorrectionMissingSetting(ScalarSetting):
    """
    Java class 'cern.lsa.domain.settings.spi.CorrectionMissingSetting'
    
        Extends:
            cern.lsa.domain.settings.spi.ScalarSetting
    
    """
    def getCorrectionValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def getValue(self) -> cern.accsoft.commons.value.ImmutableValue: ...
    def setCorrectionValue(self, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> None: ...
    def setValue(self, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> None: ...

class IncorporationFunctionsArraySetting(FunctionsArraySetting):
    """
    Java class 'cern.lsa.domain.settings.spi.IncorporationFunctionsArraySetting'
    
        Extends:
            cern.lsa.domain.settings.spi.FunctionsArraySetting
    
      Constructors:
        * IncorporationFunctionsArraySetting(double[], double[])
    
    """
    def __init__(self, doubleArray: typing.List[float], doubleArray2: typing.List[float]): ...
    def getCorrectionValue(self) -> cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray: ...
    def getTargetValue(self) -> cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray: ...
    def getValue(self) -> cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray: ...
    def setCorrectionValue(self, immutableDiscreteFunctionsArray: cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray) -> None: ...
    def setTargetValue(self, immutableDiscreteFunctionsArray: cern.accsoft.commons.value.ImmutableDiscreteFunctionsArray) -> None: ...

class PatternImpl(ContextImpl, cern.lsa.domain.settings.Pattern):
    """
    Java class 'cern.lsa.domain.settings.spi.PatternImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.ContextImpl
    
        Interfaces:
            cern.lsa.domain.settings.Pattern
    
      Constructors:
        * PatternImpl()
    
    """
    def __init__(self): ...
    def getAttribute(self, string: str) -> cern.lsa.domain.commons.Attribute: ...
    def getAttributes(self) -> java.util.Set[cern.lsa.domain.commons.Attribute]: ...
    def getBeamProcesses(self) -> java.util.List[cern.lsa.domain.settings.BeamProcess]: ...
    def getContextFamily(self) -> cern.lsa.domain.settings.ContextFamily: ...
    def getDrivableBeamProcesses(self) -> java.util.List[cern.lsa.domain.settings.DrivableBeamProcess]: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    def isMultiplexed(self) -> bool: ...
    def isResident(self) -> bool: ...
    def setMultiplexed(self, boolean: bool) -> None: ...
    def setResident(self, boolean: bool) -> None: ...
    def setSubContexts(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.SubContext], typing.Sequence[cern.lsa.domain.settings.SubContext]]) -> None: ...

class SubContextImpl(ContextImpl, cern.lsa.domain.settings.SubContext):
    """
    Java class 'cern.lsa.domain.settings.spi.SubContextImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.ContextImpl
    
        Interfaces:
            cern.lsa.domain.settings.SubContext
    
    """
    def getStartTime(self) -> int: ...
    def getUser(self) -> str: ...
    def setStartTime(self, int: int) -> None: ...
    def setUser(self, string: str) -> None: ...

class Array2DSetting(CorrectionMissingSetting):
    """
    Java class 'cern.lsa.domain.settings.spi.Array2DSetting'
    
        Extends:
            cern.lsa.domain.settings.spi.CorrectionMissingSetting
    
      Constructors:
        * Array2DSetting(cern.accsoft.commons.value.Type)
    
    """
    def __init__(self, type: cern.accsoft.commons.value.Type): ...
    def setValue(self, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> None: ...

class ArraySetting(CorrectionMissingSetting):
    """
    Java class 'cern.lsa.domain.settings.spi.ArraySetting'
    
        Extends:
            cern.lsa.domain.settings.spi.CorrectionMissingSetting
    
      Constructors:
        * ArraySetting(cern.accsoft.commons.value.Type)
    
    """
    def __init__(self, type: cern.accsoft.commons.value.Type): ...
    def setValue(self, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> None: ...

class BeamProcessImpl(SubContextImpl, cern.lsa.domain.settings.BeamProcess):
    """
    Java class 'cern.lsa.domain.settings.spi.BeamProcessImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.SubContextImpl
    
        Interfaces:
            cern.lsa.domain.settings.BeamProcess
    
      Constructors:
        * BeamProcessImpl(java.lang.String)
        * BeamProcessImpl(cern.lsa.domain.settings.spi.BeamProcessImpl)
    
    """
    @typing.overload
    def __init__(self, beamProcessImpl: 'BeamProcessImpl'): ...
    @typing.overload
    def __init__(self, string: str): ...
    def getCategory(self) -> cern.lsa.domain.settings.type.BeamProcessTypeCategory: ...
    def getContextFamily(self) -> cern.lsa.domain.settings.ContextFamily: ...
    def getParticleTransfer(self) -> cern.accsoft.commons.domain.particletransfers.ParticleTransfer: ...
    def getPurpose(self) -> cern.lsa.domain.settings.type.BeamProcessPurpose: ...
    def setCategory(self, beamProcessTypeCategory: cern.lsa.domain.settings.type.BeamProcessTypeCategory) -> None: ...
    def setParticleTransfer(self, particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer) -> None: ...
    def setPurpose(self, beamProcessPurpose: cern.lsa.domain.settings.type.BeamProcessPurpose) -> None: ...

class BeamProductionChainImpl(SubContextImpl, cern.lsa.domain.settings.BeamProductionChain):
    """
    Java class 'cern.lsa.domain.settings.spi.BeamProductionChainImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.SubContextImpl
    
        Interfaces:
            cern.lsa.domain.settings.BeamProductionChain
    
      Constructors:
        * BeamProductionChainImpl(java.lang.String)
        * BeamProductionChainImpl(cern.lsa.domain.settings.spi.BeamProductionChainImpl)
    
    """
    @typing.overload
    def __init__(self, beamProductionChainImpl: 'BeamProductionChainImpl'): ...
    @typing.overload
    def __init__(self, string: str): ...
    def getBeamProcesses(self) -> java.util.List[cern.lsa.domain.settings.DrivableBeamProcess]: ...
    def getContextFamily(self) -> cern.lsa.domain.settings.ContextFamily: ...
    def setBeamProcesses(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.settings.DrivableBeamProcess], typing.Sequence[cern.lsa.domain.settings.DrivableBeamProcess]]) -> None: ...

class BooleanSetting(CorrectionMissingSetting):
    """
    Java class 'cern.lsa.domain.settings.spi.BooleanSetting'
    
        Extends:
            cern.lsa.domain.settings.spi.CorrectionMissingSetting
    
      Constructors:
        * BooleanSetting()
    
    """
    def __init__(self): ...
    def setValue(self, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> None: ...

class CycleImpl(SubContextImpl, cern.lsa.domain.settings.Cycle):
    """
    Java class 'cern.lsa.domain.settings.spi.CycleImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.SubContextImpl
    
        Interfaces:
            cern.lsa.domain.settings.Cycle
    
      Constructors:
        * CycleImpl(java.lang.String)
        * CycleImpl(cern.lsa.domain.settings.spi.CycleImpl)
    
    """
    @typing.overload
    def __init__(self, cycleImpl: 'CycleImpl'): ...
    @typing.overload
    def __init__(self, string: str): ...
    def getContextFamily(self) -> cern.lsa.domain.settings.ContextFamily: ...

class StringSetting(CorrectionMissingSetting):
    """
    Java class 'cern.lsa.domain.settings.spi.StringSetting'
    
        Extends:
            cern.lsa.domain.settings.spi.CorrectionMissingSetting
    
      Constructors:
        * StringSetting()
        * StringSetting(cern.accsoft.commons.value.Type)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, type: cern.accsoft.commons.value.Type): ...
    def setValue(self, immutableScalar: cern.accsoft.commons.value.ImmutableScalar) -> None: ...

class StandAloneBeamProcessImpl(BeamProcessImpl, cern.lsa.domain.settings.StandAloneBeamProcess, cern.lsa.domain.commons.AttributeWritableAware):
    """
    Java class 'cern.lsa.domain.settings.spi.StandAloneBeamProcessImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.BeamProcessImpl
    
        Interfaces:
            cern.lsa.domain.settings.StandAloneBeamProcess,
            cern.lsa.domain.commons.AttributeWritableAware
    
      Constructors:
        * StandAloneBeamProcessImpl(java.lang.String)
        * StandAloneBeamProcessImpl(cern.lsa.domain.settings.spi.StandAloneBeamProcessImpl)
    
    """
    @typing.overload
    def __init__(self, standAloneBeamProcessImpl: 'StandAloneBeamProcessImpl'): ...
    @typing.overload
    def __init__(self, string: str): ...
    def addAttribute(self, attribute: cern.lsa.domain.commons.Attribute) -> None: ...
    def getActualBeamProcessInfo(self) -> cern.lsa.domain.settings.ActualBeamProcessInfo: ...
    def getAttribute(self, string: str) -> cern.lsa.domain.commons.Attribute: ...
    def getAttributes(self) -> java.util.Set[cern.lsa.domain.commons.Attribute]: ...
    def getBeamProcesses(self) -> java.util.List[cern.lsa.domain.settings.BeamProcess]: ...
    def getContextFamily(self) -> cern.lsa.domain.settings.ContextFamily: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    def isActual(self) -> bool: ...
    def isResident(self) -> bool: ...
    def setActualBeamProcessInfo(self, actualBeamProcessInfo: cern.lsa.domain.settings.ActualBeamProcessInfo) -> None: ...
    def setAttributes(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.commons.Attribute], typing.Sequence[cern.lsa.domain.commons.Attribute]]) -> None: ...
    def setResident(self, boolean: bool) -> None: ...

class StandAloneCycleImpl(CycleImpl, cern.lsa.domain.settings.StandAloneCycle, cern.lsa.domain.commons.AttributeWritableAware):
    """
    Java class 'cern.lsa.domain.settings.spi.StandAloneCycleImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.CycleImpl
    
        Interfaces:
            cern.lsa.domain.settings.StandAloneCycle,
            cern.lsa.domain.commons.AttributeWritableAware
    
      Constructors:
        * StandAloneCycleImpl(java.lang.String)
        * StandAloneCycleImpl(cern.lsa.domain.settings.spi.StandAloneCycleImpl)
    
    """
    @typing.overload
    def __init__(self, standAloneCycleImpl: 'StandAloneCycleImpl'): ...
    @typing.overload
    def __init__(self, string: str): ...
    def addAttribute(self, attribute: cern.lsa.domain.commons.Attribute) -> None: ...
    def clearIntersections(self) -> None: ...
    def getAttribute(self, string: str) -> cern.lsa.domain.commons.Attribute: ...
    def getAttributes(self) -> java.util.Set[cern.lsa.domain.commons.Attribute]: ...
    def getBeamProcesses(self) -> java.util.List[cern.lsa.domain.settings.BeamProcess]: ...
    def getContextFamily(self) -> cern.lsa.domain.settings.ContextFamily: ...
    def getIntersections(self) -> cern.lsa.domain.settings.CycleIntersections: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    def isResident(self) -> bool: ...
    def setAttributes(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.commons.Attribute], typing.Sequence[cern.lsa.domain.commons.Attribute]]) -> None: ...
    def setBeamProcesses(self, collection: typing.Union[java.util.Collection[BeamProcessImpl], typing.Sequence[BeamProcessImpl]]) -> None: ...
    def setResident(self, boolean: bool) -> None: ...
    def setStartTime(self, int: int) -> None: ...

class CycleIntersectionsImpl(cern.lsa.domain.settings.spi.AbstractContextIntersectionsImpl, cern.lsa.domain.settings.CycleIntersections, java.io.Serializable):
    """
    Java class 'cern.lsa.domain.settings.spi.CycleIntersectionsImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.AbstractContextIntersectionsImpl
    
        Interfaces:
            cern.lsa.domain.settings.CycleIntersections,
            java.io.Serializable
    
      Constructors:
        * CycleIntersectionsImpl(java.lang.String)
    
    """
    def __init__(self, string: str): ...
    def getBeamProcesses(self) -> java.util.Set[cern.lsa.domain.settings.BeamProcess]: ...
    def getCycleName(self) -> str: ...
    def getIntersectedBeamProcesses(self, particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer) -> java.util.Set[cern.lsa.domain.settings.BeamProcess]: ...
    def getIntersectedFunctionBeamProcess(self, particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer, double: float) -> cern.lsa.domain.settings.BeamProcessIntersection: ...
    def getIntersectedFunctionBeamProcesses(self, particleTransfer: cern.accsoft.commons.domain.particletransfers.ParticleTransfer, double: float) -> java.util.List[cern.lsa.domain.settings.BeamProcessIntersection]: ...

class KnobImpl(cern.lsa.domain.settings.spi.ParameterDecorator, cern.lsa.domain.settings.Knob):
    """
    Java class 'cern.lsa.domain.settings.spi.KnobImpl'
    
        Extends:
            cern.lsa.domain.settings.spi.ParameterDecorator
    
        Interfaces:
            cern.lsa.domain.settings.Knob
    
      Constructors:
        * KnobImpl(cern.lsa.domain.settings.Parameter, cern.lsa.domain.settings.KnobFactors)
    
    """
    def __init__(self, parameter: cern.lsa.domain.settings.Parameter, knobFactors: cern.lsa.domain.settings.KnobFactors): ...
    def getComponentNames(self) -> java.util.Set[str]: ...
    def getKnobFactors(self) -> cern.lsa.domain.settings.KnobFactors: ...
    def getOpticNames(self) -> java.util.Set[str]: ...
    def toString(self) -> str: ...

class ParameterBuilder:
    """
    Java class 'cern.lsa.domain.settings.spi.ParameterBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ParameterBuilder()
    
    """
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def newBuilder(parameter: cern.lsa.domain.settings.Parameter) -> 'ParameterBuilder.ParameterBuilderSteps': ...
    @typing.overload
    @staticmethod
    def newBuilder() -> 'ParameterBuilder.SetIdParameterBuilder': ...
    class BuildParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$BuildParameterBuilder'
        
        """
        def build(self) -> cern.lsa.domain.settings.Parameter: ...
    class ParameterBuilderSteps(cern.lsa.domain.settings.spi.ParameterBuilder.SetIdParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetDeviceParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetParameterTypeParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetPropertyFieldParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetValueDescriptorParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetMultiplexedParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetTrimableParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetCriticalParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetDefaultHierarchyParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetBelongsToFunctionBeamProcessParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetReservedForOpExpertsParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetParameterGroupsParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetPropertySupportingPartialSetParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetLsaImplementationParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetMonitorableParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetWritableParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetReadableParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetValueTypeParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.BuildParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetCycleBoundParameterBuilder):
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$ParameterBuilderSteps'
        
            Extends:
                java.lang.Object
        
            Interfaces:
                cern.lsa.domain.settings.spi.ParameterBuilder.SetIdParameterBu
                ilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetDevice
                ParameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilde
                r.SetParameterTypeParameterBuilder, cern.lsa.domain.settings.s
                pi.ParameterBuilder.SetPropertyFieldParameterBuilder, cern.lsa
                .domain.settings.spi.ParameterBuilder.SetValueDescriptorParame
                terBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.SetM
                ultiplexedParameterBuilder, cern.lsa.domain.settings.spi.Param
                eterBuilder.SetTrimableParameterBuilder, cern.lsa.domain.setti
                ngs.spi.ParameterBuilder.SetCriticalParameterBuilder, cern.lsa
                .domain.settings.spi.ParameterBuilder.SetDefaultHierarchyParam
                eterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.Set
                BelongsToFunctionBeamProcessParameterBuilder, cern.lsa.domain.
                settings.spi.ParameterBuilder.SetReservedForOpExpertsParameter
                Builder, cern.lsa.domain.settings.spi.ParameterBuilder.SetPara
                meterGroupsParameterBuilder, cern.lsa.domain.settings.spi.Para
                meterBuilder.SetPropertySupportingPartialSetParameterBuilder, 
                cern.lsa.domain.settings.spi.ParameterBuilder.SetLsaImplementa
                tionParameterBuilder, cern.lsa.domain.settings.spi.ParameterBu
                ilder.SetMonitorableParameterBuilder, cern.lsa.domain.settings
                .spi.ParameterBuilder.SetWritableParameterBuilder, cern.lsa.do
                main.settings.spi.ParameterBuilder.SetReadableParameterBuilder
                , cern.lsa.domain.settings.spi.ParameterBuilder.SetValueTypePa
                rameterBuilder, cern.lsa.domain.settings.spi.ParameterBuilder.
                BuildParameterBuilder, cern.lsa.domain.settings.spi.ParameterB
                uilder.SetCycleBoundParameterBuilder
        
        """
        def addParameterGroup(self, string: str) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def addParameterGroups(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def build(self) -> cern.lsa.domain.settings.Parameter: ...
        def setBelongsToFunctionBeamProcess(self, boolean: bool) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setCritical(self, boolean: bool) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setCycleBound(self, boolean: bool) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        @typing.overload
        def setDefaultHierarchy(self) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        @typing.overload
        def setDefaultHierarchy(self, string: str) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setDevice(self, device: cern.lsa.domain.devices.Device) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setLsaImplementation(self, boolean: bool) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setMonitorable(self, boolean: bool) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setMultiplexed(self, boolean: bool) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setParameterGroups(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setParameterName(self, string: str) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setParameterNameAndId(self, long: int, string: str) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setParameterType(self, parameterType: cern.lsa.domain.settings.ParameterType) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setPropertyField(self, propertyField: cern.lsa.domain.devices.type.PropertyField) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setReadable(self, boolean: bool) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setReservedForOpExperts(self, boolean: bool) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setSupportingPartialSet(self, boolean: bool) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setTrimable(self, boolean: bool) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setValueDescriptor(self, valueDescriptor: cern.accsoft.commons.value.ValueDescriptor) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setValueType(self, type: cern.accsoft.commons.value.Type) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def setWritable(self, boolean: bool) -> 'ParameterBuilder.ParameterBuilderSteps': ...
        def withNoGroups(self) -> 'ParameterBuilder.ParameterBuilderSteps': ...
    class SetBelongsToFunctionBeamProcessParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetBelongsToFunctionBeamProcessParameterBuilder'
        
        """
        def setBelongsToFunctionBeamProcess(self, boolean: bool) -> 'ParameterBuilder.SetReadableParameterBuilder': ...
    class SetCriticalParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetCriticalParameterBuilder'
        
        """
        def setCritical(self, boolean: bool) -> 'ParameterBuilder.SetReservedForOpExpertsParameterBuilder': ...
    class SetCycleBoundParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetCycleBoundParameterBuilder'
        
        """
        def setCycleBound(self, boolean: bool) -> 'ParameterBuilder.SetTrimableParameterBuilder': ...
    class SetDefaultHierarchyParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetDefaultHierarchyParameterBuilder'
        
        """
        @typing.overload
        def setDefaultHierarchy(self) -> 'ParameterBuilder.SetPropertySupportingPartialSetParameterBuilder': ...
        @typing.overload
        def setDefaultHierarchy(self, string: str) -> 'ParameterBuilder.SetPropertySupportingPartialSetParameterBuilder': ...
    class SetDeviceParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetDeviceParameterBuilder'
        
        """
        def setDevice(self, device: cern.lsa.domain.devices.Device) -> 'ParameterBuilder.SetParameterTypeParameterBuilder': ...
    class SetIdParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetIdParameterBuilder'
        
        """
        def setParameterName(self, string: str) -> 'ParameterBuilder.SetDeviceParameterBuilder': ...
        def setParameterNameAndId(self, long: int, string: str) -> 'ParameterBuilder.SetDeviceParameterBuilder': ...
    class SetLsaImplementationParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetLsaImplementationParameterBuilder'
        
        """
        def setLsaImplementation(self, boolean: bool) -> 'ParameterBuilder.SetCriticalParameterBuilder': ...
    class SetMonitorableParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetMonitorableParameterBuilder'
        
        """
        def setMonitorable(self, boolean: bool) -> 'ParameterBuilder.SetLsaImplementationParameterBuilder': ...
    class SetMultiplexedParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetMultiplexedParameterBuilder'
        
        """
        def setMultiplexed(self, boolean: bool) -> 'ParameterBuilder.SetCycleBoundParameterBuilder': ...
    class SetParameterGroupsParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetParameterGroupsParameterBuilder'
        
        """
        def setParameterGroups(self, collection: typing.Union[java.util.Collection[str], typing.Sequence[str]]) -> 'ParameterBuilder.BuildParameterBuilder': ...
        def withNoGroups(self) -> 'ParameterBuilder.BuildParameterBuilder': ...
    class SetParameterTypeParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetParameterTypeParameterBuilder'
        
        """
        def setParameterType(self, parameterType: cern.lsa.domain.settings.ParameterType) -> 'ParameterBuilder.SetPropertyFieldParameterBuilder': ...
    class SetPropertyFieldParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetPropertyFieldParameterBuilder'
        
        """
        def setPropertyField(self, propertyField: cern.lsa.domain.devices.type.PropertyField) -> 'ParameterBuilder.SetValueTypeParameterBuilder': ...
    class SetPropertySupportingPartialSetParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetPropertySupportingPartialSetParameterBuilder'
        
        """
        def setSupportingPartialSet(self, boolean: bool) -> 'ParameterBuilder.SetParameterGroupsParameterBuilder': ...
    class SetReadableParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetReadableParameterBuilder'
        
        """
        def setReadable(self, boolean: bool) -> 'ParameterBuilder.SetWritableParameterBuilder': ...
    class SetReservedForOpExpertsParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetReservedForOpExpertsParameterBuilder'
        
        """
        def setReservedForOpExperts(self, boolean: bool) -> 'ParameterBuilder.SetDefaultHierarchyParameterBuilder': ...
    class SetTrimableParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetTrimableParameterBuilder'
        
        """
        def setTrimable(self, boolean: bool) -> 'ParameterBuilder.SetBelongsToFunctionBeamProcessParameterBuilder': ...
    class SetValueDescriptorParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetValueDescriptorParameterBuilder'
        
        """
        def setValueDescriptor(self, valueDescriptor: cern.accsoft.commons.value.ValueDescriptor) -> 'ParameterBuilder.SetMultiplexedParameterBuilder': ...
    class SetValueTypeParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetValueTypeParameterBuilder'
        
        """
        def setValueType(self, type: cern.accsoft.commons.value.Type) -> 'ParameterBuilder.SetValueDescriptorParameterBuilder': ...
    class SetWritableParameterBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterBuilder$SetWritableParameterBuilder'
        
        """
        def setWritable(self, boolean: bool) -> 'ParameterBuilder.SetMonitorableParameterBuilder': ...

class ParameterTypeBuilder:
    """
    Java class 'cern.lsa.domain.settings.spi.ParameterTypeBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ParameterTypeBuilder()
    
    """
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def newBuilder(parameterType: cern.lsa.domain.settings.ParameterType) -> 'ParameterTypeBuilder.ParameterTypeStepBuilder': ...
    @typing.overload
    @staticmethod
    def newBuilder() -> 'ParameterTypeBuilder.SetNameAndIdParameterTypeBuilder': ...
    class BuildParameterType:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterTypeBuilder$BuildParameterType'
        
        """
        def build(self) -> cern.lsa.domain.settings.ParameterType: ...
    class ParameterTypeStepBuilder(cern.lsa.domain.settings.spi.ParameterTypeBuilder.SetNameAndIdParameterTypeBuilder, cern.lsa.domain.settings.spi.ParameterTypeBuilder.SetLinkRuleApplicableParameterTypeBuilder, cern.lsa.domain.settings.spi.ParameterTypeBuilder.SetParameterTypeCategoryBuilder, cern.lsa.domain.settings.spi.ParameterTypeBuilder.BuildParameterType):
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterTypeBuilder$ParameterTypeStepBuilder'
        
            Extends:
                java.lang.Object
        
            Interfaces:
                cern.lsa.domain.settings.spi.ParameterTypeBuilder.SetNameAndId
                ParameterTypeBuilder, cern.lsa.domain.settings.spi.ParameterTy
                peBuilder.SetLinkRuleApplicableParameterTypeBuilder, cern.lsa.
                domain.settings.spi.ParameterTypeBuilder.SetParameterTypeCateg
                oryBuilder, cern.lsa.domain.settings.spi.ParameterTypeBuilder.
                BuildParameterType
        
        """
        def build(self) -> cern.lsa.domain.settings.ParameterType: ...
        def setCategoryType(self, parameterTypeCategory: cern.lsa.domain.settings.ParameterTypeCategory) -> 'ParameterTypeBuilder.ParameterTypeStepBuilder': ...
        def setDefaultCategoryType(self) -> 'ParameterTypeBuilder.ParameterTypeStepBuilder': ...
        def setIdAndName(self, long: int, string: str) -> 'ParameterTypeBuilder.ParameterTypeStepBuilder': ...
        def setLinkRuleApplicable(self, boolean: bool) -> 'ParameterTypeBuilder.ParameterTypeStepBuilder': ...
        def setName(self, string: str) -> 'ParameterTypeBuilder.ParameterTypeStepBuilder': ...
    class SetLinkRuleApplicableParameterTypeBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterTypeBuilder$SetLinkRuleApplicableParameterTypeBuilder'
        
        """
        def setLinkRuleApplicable(self, boolean: bool) -> 'ParameterTypeBuilder.SetParameterTypeCategoryBuilder': ...
    class SetNameAndIdParameterTypeBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterTypeBuilder$SetNameAndIdParameterTypeBuilder'
        
        """
        def setIdAndName(self, long: int, string: str) -> 'ParameterTypeBuilder.SetLinkRuleApplicableParameterTypeBuilder': ...
        def setName(self, string: str) -> 'ParameterTypeBuilder.SetLinkRuleApplicableParameterTypeBuilder': ...
    class SetParameterTypeCategoryBuilder:
        """
        Java class 'cern.lsa.domain.settings.spi.ParameterTypeBuilder$SetParameterTypeCategoryBuilder'
        
        """
        def setCategoryType(self, parameterTypeCategory: cern.lsa.domain.settings.ParameterTypeCategory) -> 'ParameterTypeBuilder.BuildParameterType': ...
        def setDefaultCategoryType(self) -> 'ParameterTypeBuilder.BuildParameterType': ...

class AbstractContextIntersectionsImpl: ...

class ParameterDecorator: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.domain.settings.spi")``.

    AbstractContextIntersectionsImpl: typing.Type[AbstractContextIntersectionsImpl]
    AbstractSetting: typing.Type[AbstractSetting]
    ActualBeamProcessInfoImpl: typing.Type[ActualBeamProcessInfoImpl]
    ArchiveImpl: typing.Type[ArchiveImpl]
    ArchiveVersionImpl: typing.Type[ArchiveVersionImpl]
    Array2DSetting: typing.Type[Array2DSetting]
    ArraySetting: typing.Type[ArraySetting]
    BeamProcessImpl: typing.Type[BeamProcessImpl]
    BeamProcessIncorporationRequestImpl: typing.Type[BeamProcessIncorporationRequestImpl]
    BeamProductionChainImpl: typing.Type[BeamProductionChainImpl]
    BooleanSetting: typing.Type[BooleanSetting]
    BoundedPolynomialSequenceSetting: typing.Type[BoundedPolynomialSequenceSetting]
    CompositeContextSettingsImpl: typing.Type[CompositeContextSettingsImpl]
    ContextBase: typing.Type[ContextBase]
    ContextImpl: typing.Type[ContextImpl]
    ContextSettingsImpl: typing.Type[ContextSettingsImpl]
    CopySettingsRequestImpl: typing.Type[CopySettingsRequestImpl]
    CorrectionMissingSetting: typing.Type[CorrectionMissingSetting]
    CycleBeamProcessIntersectionImpl: typing.Type[CycleBeamProcessIntersectionImpl]
    CycleImpl: typing.Type[CycleImpl]
    CycleIntersectionsImpl: typing.Type[CycleIntersectionsImpl]
    DevicePropertyParametersImpl: typing.Type[DevicePropertyParametersImpl]
    FailedParametersStatusImpl: typing.Type[FailedParametersStatusImpl]
    FunctionSetting: typing.Type[FunctionSetting]
    FunctionsArraySetting: typing.Type[FunctionsArraySetting]
    HyperCycleImpl: typing.Type[HyperCycleImpl]
    IncorporationFunctionsArraySetting: typing.Type[IncorporationFunctionsArraySetting]
    IncorporationRequestImpl: typing.Type[IncorporationRequestImpl]
    KnobFactorsBuilder: typing.Type[KnobFactorsBuilder]
    KnobFactorsImpl: typing.Type[KnobFactorsImpl]
    KnobImpl: typing.Type[KnobImpl]
    NotIncorporatedParametersImpl: typing.Type[NotIncorporatedParametersImpl]
    ParameterAttributesImpl: typing.Type[ParameterAttributesImpl]
    ParameterBuilder: typing.Type[ParameterBuilder]
    ParameterDecorator: typing.Type[ParameterDecorator]
    ParameterImpl: typing.Type[ParameterImpl]
    ParameterSettingsImpl: typing.Type[ParameterSettingsImpl]
    ParameterTreeNodeImpl: typing.Type[ParameterTreeNodeImpl]
    ParameterTreesRequestImpl: typing.Type[ParameterTreesRequestImpl]
    ParameterTypeBuilder: typing.Type[ParameterTypeBuilder]
    ParameterTypeGroupImpl: typing.Type[ParameterTypeGroupImpl]
    ParameterTypeImpl: typing.Type[ParameterTypeImpl]
    ParameterTypesRequestImpl: typing.Type[ParameterTypesRequestImpl]
    ParametersRequestImpl: typing.Type[ParametersRequestImpl]
    PatternImpl: typing.Type[PatternImpl]
    RevertTrimRequestImpl: typing.Type[RevertTrimRequestImpl]
    ScalarSetting: typing.Type[ScalarSetting]
    SettingComparisonParameterResultImpl: typing.Type[SettingComparisonParameterResultImpl]
    SettingComparisonRequestImpl: typing.Type[SettingComparisonRequestImpl]
    SettingComparisonResponseImpl: typing.Type[SettingComparisonResponseImpl]
    SettingComparisonResultImpl: typing.Type[SettingComparisonResultImpl]
    SettingsGenerationRequestImpl: typing.Type[SettingsGenerationRequestImpl]
    SettingsRestoreStatusImpl: typing.Type[SettingsRestoreStatusImpl]
    StandAloneBeamProcessImpl: typing.Type[StandAloneBeamProcessImpl]
    StandAloneContextCloneRequestImpl: typing.Type[StandAloneContextCloneRequestImpl]
    StandAloneContextCreationRequestImpl: typing.Type[StandAloneContextCreationRequestImpl]
    StandAloneCycleImpl: typing.Type[StandAloneCycleImpl]
    StringSetting: typing.Type[StringSetting]
    SubContextImpl: typing.Type[SubContextImpl]
    TrimHeaderImpl: typing.Type[TrimHeaderImpl]
    TrimRequestImpl: typing.Type[TrimRequestImpl]
    TrimResponseImpl: typing.Type[TrimResponseImpl]
    TrimResultImpl: typing.Type[TrimResultImpl]
    UserContextMappingImpl: typing.Type[UserContextMappingImpl]
    test: cern.lsa.domain.settings.spi.test.__module_protocol__
    type: cern.lsa.domain.settings.spi.type.__module_protocol__
    util: cern.lsa.domain.settings.spi.util.__module_protocol__
