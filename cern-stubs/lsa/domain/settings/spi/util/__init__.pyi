from typing import List as _py_List
import cern.accsoft.commons.value
import cern.lsa.domain.exploitation
import cern.lsa.domain.settings
import java.util


class SettingsCompareHelper:
    @classmethod
    def prettyPrintInconsistentArrayValues(cls, immutableScalarArray: cern.accsoft.commons.value.ImmutableScalarArray, immutableScalarArray2: cern.accsoft.commons.value.ImmutableScalarArray) -> str: ...
    @classmethod
    def prettyPrintInconsistentValues(cls, string: str, string2: str, immutableValue: cern.accsoft.commons.value.ImmutableValue, immutableValue2: cern.accsoft.commons.value.ImmutableValue) -> str: ...

class TrimHelper:
    def __init__(self): ...
    @classmethod
    def assertRequestContainsOnlySettingParameters(cls, trimRequest: cern.lsa.domain.settings.TrimRequest) -> None: ...
    @classmethod
    def canParameterAndItsParentHaveSettingsInBeamOut(cls, parameter: cern.lsa.domain.settings.Parameter, parameter2: cern.lsa.domain.settings.Parameter) -> bool: ...
    @classmethod
    def createAcquisitionTrimRequest(cls, map: java.util.Map[cern.lsa.domain.settings.Parameter, cern.lsa.domain.exploitation.FailSafeImmutableValue], drivableContext: cern.lsa.domain.settings.DrivableContext, string: str, boolean: bool) -> cern.lsa.domain.settings.TrimRequest: ...
    @classmethod
    def extractParameters(cls, collection: java.util.Collection[cern.lsa.domain.settings.IncorporationSetting]) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    @classmethod
    def extractTrimmedParameters(cls, trimRequest: cern.lsa.domain.settings.TrimRequest) -> java.util.Set[cern.lsa.domain.settings.Parameter]: ...
    @classmethod
    def getParameterHierarchy(cls, trimRequest: cern.lsa.domain.settings.TrimRequest) -> str: ...
    @classmethod
    def hasDifferentLength(cls, immutableDiscreteFunction: cern.accsoft.commons.value.ImmutableDiscreteFunction, int: int) -> bool: ...
    @classmethod
    def hasSetting(cls, beamProcess: cern.lsa.domain.settings.BeamProcess, parameter: cern.lsa.domain.settings.Parameter, contextSettings: cern.lsa.domain.settings.ContextSettings) -> bool: ...
    @classmethod
    def hasSettingInTrimRequest(cls, beamProcess: cern.lsa.domain.settings.BeamProcess, parameter: cern.lsa.domain.settings.Parameter, trimRequest: cern.lsa.domain.settings.TrimRequest) -> bool: ...
    @classmethod
    def isSettingUpdated(cls, beamProcess: cern.lsa.domain.settings.BeamProcess, parameter: cern.lsa.domain.settings.Parameter, contextSettings: cern.lsa.domain.settings.ContextSettings) -> bool: ...
    @classmethod
    def noParameterHasSetting(cls, beamProcess: cern.lsa.domain.settings.BeamProcess, parameterArray: _py_List[cern.lsa.domain.settings.Parameter], contextSettings: cern.lsa.domain.settings.ContextSettings) -> bool: ...
    @classmethod
    def noParameterHasUpdatedSetting(cls, beamProcess: cern.lsa.domain.settings.BeamProcess, parameterArray: _py_List[cern.lsa.domain.settings.Parameter], contextSettings: cern.lsa.domain.settings.ContextSettings) -> bool: ...
    @classmethod
    def parameterIsTrimmed(cls, trimRequest: cern.lsa.domain.settings.TrimRequest, parameter: cern.lsa.domain.settings.Parameter) -> bool: ...
    @classmethod
    def targetOrCorrectionHasLengthDifferentThanBeamProcess(cls, setting: cern.lsa.domain.settings.Setting) -> bool: ...
