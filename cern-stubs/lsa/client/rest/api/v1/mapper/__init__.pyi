from typing import TypeVar as _py_TypeVar
from typing import overload
import cern.accsoft.commons.domain.zones
import cern.accsoft.commons.value
import cern.lsa.client.rest.api.v1.dto
import cern.lsa.domain.devices
import cern.lsa.domain.devices.inca
import cern.lsa.domain.devices.type
import cern.lsa.domain.settings
import cern.lsa.domain.trim.rules.makerule
import java.util
import java.util.function


class FromRest:
    def __init__(self): ...
    @classmethod
    def toDevice(cls, deviceRest: cern.lsa.client.rest.api.v1.dto.DeviceRest) -> cern.lsa.domain.devices.Device: ...
    @classmethod
    def toDeviceState(cls, deviceStateRest: cern.lsa.client.rest.api.v1.dto.DeviceStateRest) -> cern.lsa.domain.devices.Device.DeviceState: ...
    @classmethod
    def toDeviceTypeImplementation(cls, deviceTypeImplementationRest: cern.lsa.client.rest.api.v1.dto.DeviceTypeImplementationRest) -> cern.lsa.domain.devices.DeviceTypeImplementation: ...
    @classmethod
    @overload
    def toDeviceTypeVersion(cls, deviceTypeVersionContainerRest: cern.lsa.client.rest.api.v1.dto.DeviceTypeVersionContainerRest) -> cern.lsa.domain.devices.DeviceTypeVersion: ...
    @classmethod
    @overload
    def toDeviceTypeVersion(cls, deviceTypeVersionRest: cern.lsa.client.rest.api.v1.dto.DeviceTypeVersionRest, deviceType2: cern.lsa.domain.devices.DeviceType) -> cern.lsa.domain.devices.DeviceTypeVersion: ...
    @classmethod
    def toDeviceTypeVersionNumber(cls, deviceTypeVersionNumberRest: cern.lsa.client.rest.api.v1.dto.DeviceTypeVersionNumberRest) -> cern.lsa.domain.devices.DeviceTypeVersionNumber: ...
    def toIncaPropertyFieldInfo(self, incaPropertyFieldInfoRest: cern.lsa.client.rest.api.v1.dto.IncaPropertyFieldInfoRest) -> cern.lsa.domain.devices.inca.IncaPropertyFieldInfo: ...
    def toIncaPropertyFieldInfosRequest(self, collection: java.util.Collection[cern.lsa.domain.devices.type.PropertyField]) -> cern.lsa.domain.devices.inca.IncaPropertyFieldInfosRequest: ...
    def toMakeRuleConfigInfo(self, makeRuleConfigInfoRest: cern.lsa.client.rest.api.v1.dto.MakeRuleConfigInfoRest) -> cern.lsa.domain.trim.rules.makerule.MakeRuleConfigInfo: ...
    def toParameter(self, parameterRest: cern.lsa.client.rest.api.v1.dto.ParameterRest) -> cern.lsa.domain.settings.Parameter: ...
    def toParameterAttributes(self, parameterAttributesRest: cern.lsa.client.rest.api.v1.dto.ParameterAttributesRest) -> cern.lsa.domain.settings.ParameterAttributes: ...
    def toParameterGroup(self, parameterGroupRest: cern.lsa.client.rest.api.v1.dto.ParameterGroupRest) -> cern.lsa.domain.settings.ParameterGroup: ...
    def toParameterTreeNodes(self, parameterTreeDataRest: cern.lsa.client.rest.api.v1.dto.ParameterTreeDataRest) -> java.util.Set[cern.lsa.domain.settings.ParameterTreeNode]: ...
    def toParameterTreesRequest(self, parameterTreesRequestRest: cern.lsa.client.rest.api.v1.dto.ParameterTreesRequestRest) -> cern.lsa.domain.settings.ParameterTreesRequest: ...
    def toParameterType(self, parameterTypeRest: cern.lsa.client.rest.api.v1.dto.ParameterTypeRest) -> cern.lsa.domain.settings.ParameterType: ...
    def toParameterTypesRequest(self, parameterTypesRequestRest: cern.lsa.client.rest.api.v1.dto.ParameterTypesRequestRest) -> cern.lsa.domain.settings.ParameterTypesRequest: ...
    def toValueDescriptor(self, valueDescriptorRest: cern.lsa.client.rest.api.v1.dto.ValueDescriptorRest) -> cern.accsoft.commons.value.ValueDescriptor: ...

class MapperUtils:
    _collectionToList__U = _py_TypeVar('_collectionToList__U')  # <U>
    @classmethod
    def collectionToList(cls, collection: java.util.Collection[_collectionToList__U]) -> java.util.List[_collectionToList__U]: ...
    _collectionToSet__U = _py_TypeVar('_collectionToSet__U')  # <U>
    @classmethod
    def collectionToSet(cls, collection: java.util.Collection[_collectionToSet__U]) -> java.util.Set[_collectionToSet__U]: ...
    _createNewInstanceOrReturnNull__T = _py_TypeVar('_createNewInstanceOrReturnNull__T')  # <T>
    _createNewInstanceOrReturnNull__U = _py_TypeVar('_createNewInstanceOrReturnNull__U')  # <U>
    @classmethod
    def createNewInstanceOrReturnNull(cls, t: _createNewInstanceOrReturnNull__T, function: java.util.function.Function[_createNewInstanceOrReturnNull__T, _createNewInstanceOrReturnNull__U]) -> _createNewInstanceOrReturnNull__U: ...
    _createNewList__T = _py_TypeVar('_createNewList__T')  # <T>
    _createNewList__U = _py_TypeVar('_createNewList__U')  # <U>
    @classmethod
    def createNewList(cls, collection: java.util.Collection[_createNewList__T], function: java.util.function.Function[_createNewList__T, _createNewList__U]) -> java.util.List[_createNewList__U]: ...
    _createNewListOrReturnNull__T = _py_TypeVar('_createNewListOrReturnNull__T')  # <T>
    _createNewListOrReturnNull__U = _py_TypeVar('_createNewListOrReturnNull__U')  # <U>
    @classmethod
    def createNewListOrReturnNull(cls, collection: java.util.Collection[_createNewListOrReturnNull__T], function: java.util.function.Function[_createNewListOrReturnNull__T, _createNewListOrReturnNull__U]) -> java.util.List[_createNewListOrReturnNull__U]: ...
    _extractSingleValueFromCollection__T = _py_TypeVar('_extractSingleValueFromCollection__T')  # <T>
    @classmethod
    def extractSingleValueFromCollection(cls, collection: java.util.Collection[_extractSingleValueFromCollection__T]) -> _extractSingleValueFromCollection__T: ...
    _oneByOne__T = _py_TypeVar('_oneByOne__T')  # <T>
    _oneByOne__U = _py_TypeVar('_oneByOne__U')  # <U>
    @classmethod
    def oneByOne(cls, function: java.util.function.Function[_oneByOne__U, _oneByOne__T]) -> java.util.function.Function[java.util.Collection[_oneByOne__U], java.util.Collection[_oneByOne__T]]: ...
    _safeSet_0__T = _py_TypeVar('_safeSet_0__T')  # <T>
    @classmethod
    @overload
    def safeSet(cls, t: _safeSet_0__T, consumer: java.util.function.Consumer[_safeSet_0__T]) -> None: ...
    _safeSet_1__T = _py_TypeVar('_safeSet_1__T')  # <T>
    _safeSet_1__U = _py_TypeVar('_safeSet_1__U')  # <U>
    @classmethod
    @overload
    def safeSet(cls, u: _safeSet_1__U, function: java.util.function.Function[_safeSet_1__U, _safeSet_1__T], consumer: java.util.function.Consumer[_safeSet_1__T]) -> None: ...
    _safeSet_2__T = _py_TypeVar('_safeSet_2__T')  # <T>
    _safeSet_2__U = _py_TypeVar('_safeSet_2__U')  # <U>
    @classmethod
    @overload
    def safeSet(cls, u: _safeSet_2__U, function: java.util.function.Function[_safeSet_2__U, _safeSet_2__T], consumer: java.util.function.Consumer[_safeSet_2__T], boolean: bool) -> None: ...
    _safeSetCollection_0__T = _py_TypeVar('_safeSetCollection_0__T')  # <T>
    _safeSetCollection_0__U = _py_TypeVar('_safeSetCollection_0__U')  # <U>
    @classmethod
    @overload
    def safeSetCollection(cls, collection: java.util.Collection[_safeSetCollection_0__U], function: java.util.function.Function[java.util.Collection[_safeSetCollection_0__U], java.util.Collection[_safeSetCollection_0__T]], consumer: java.util.function.Consumer[java.util.Collection[_safeSetCollection_0__T]]) -> None: ...
    _safeSetCollection_1__T = _py_TypeVar('_safeSetCollection_1__T')  # <T>
    _safeSetCollection_1__U = _py_TypeVar('_safeSetCollection_1__U')  # <U>
    @classmethod
    @overload
    def safeSetCollection(cls, collection: java.util.Collection[_safeSetCollection_1__U], function: java.util.function.Function[java.util.Collection[_safeSetCollection_1__U], java.util.Collection[_safeSetCollection_1__T]], consumer: java.util.function.Consumer[java.util.Collection[_safeSetCollection_1__T]], function2: java.util.function.Function[java.util.Collection[_safeSetCollection_1__U], bool]) -> None: ...

class ToRest:
    def __init__(self): ...
    def fromAcceleratorZone(self, acceleratorZone: cern.accsoft.commons.domain.zones.AcceleratorZone) -> cern.lsa.client.rest.api.v1.dto.AcceleratorZoneRest: ...
    def fromDevice(self, device: cern.lsa.domain.devices.Device) -> cern.lsa.client.rest.api.v1.dto.DeviceRest: ...
    def fromDeviceMetaTypeEnum(self, deviceMetaTypeEnum: cern.lsa.domain.devices.DeviceMetaTypeEnum) -> cern.lsa.client.rest.api.v1.dto.DeviceMetaTypeRest: ...
    def fromDeviceState(self, deviceState: cern.lsa.domain.devices.Device.DeviceState) -> cern.lsa.client.rest.api.v1.dto.DeviceStateRest: ...
    def fromDeviceTypeImplementation(self, deviceTypeImplementation: cern.lsa.domain.devices.DeviceTypeImplementation) -> cern.lsa.client.rest.api.v1.dto.DeviceTypeImplementationRest: ...
    def fromDeviceTypeVersion(self, deviceTypeVersion: cern.lsa.domain.devices.DeviceTypeVersion) -> cern.lsa.client.rest.api.v1.dto.DeviceTypeVersionContainerRest: ...
    def fromDeviceTypeVersionNumber(self, deviceTypeVersionNumber: cern.lsa.domain.devices.DeviceTypeVersionNumber) -> cern.lsa.client.rest.api.v1.dto.DeviceTypeVersionNumberRest: ...
    def fromIncaPropertyFieldInfo(self, incaPropertyFieldInfo: cern.lsa.domain.devices.inca.IncaPropertyFieldInfo) -> cern.lsa.client.rest.api.v1.dto.IncaPropertyFieldInfoRest: ...
    def fromIncaPropertyFieldInfoRequest(self, incaPropertyFieldInfosRequest: cern.lsa.domain.devices.inca.IncaPropertyFieldInfosRequest) -> cern.lsa.client.rest.api.v1.dto.IncaPropertyFieldInfosRequestRest: ...
    def fromMakeRuleForParameterRelation(self, makeRuleConfigInfo: cern.lsa.domain.trim.rules.makerule.MakeRuleConfigInfo) -> cern.lsa.client.rest.api.v1.dto.MakeRuleConfigInfoRest: ...
    def fromParameter(self, parameter: cern.lsa.domain.settings.Parameter) -> cern.lsa.client.rest.api.v1.dto.ParameterRest: ...
    def fromParameterAttributes(self, parameterAttributes: cern.lsa.domain.settings.ParameterAttributes) -> cern.lsa.client.rest.api.v1.dto.ParameterAttributesRest: ...
    def fromParameterGroup(self, parameterGroup: cern.lsa.domain.settings.ParameterGroup) -> cern.lsa.client.rest.api.v1.dto.ParameterGroupRest: ...
    def fromParameterTreeNodes(self, set: java.util.Set[cern.lsa.domain.settings.ParameterTreeNode]) -> cern.lsa.client.rest.api.v1.dto.ParameterTreeDataRest: ...
    def fromParameterTreeRequest(self, parameterTreesRequest: cern.lsa.domain.settings.ParameterTreesRequest) -> cern.lsa.client.rest.api.v1.dto.ParameterTreesRequestRest: ...
    def fromParameterType(self, parameterType: cern.lsa.domain.settings.ParameterType) -> cern.lsa.client.rest.api.v1.dto.ParameterTypeRest: ...
    def fromParameterTypeCategory(self, parameterTypeCategory: cern.lsa.domain.settings.ParameterTypeCategory) -> cern.lsa.client.rest.api.v1.dto.ParameterTypeCategoryRest: ...
    def fromParameterTypesRequest(self, parameterTypesRequest: cern.lsa.domain.settings.ParameterTypesRequest) -> cern.lsa.client.rest.api.v1.dto.ParameterTypesRequestRest: ...
    def fromParametersRequest(self, parametersRequest: cern.lsa.domain.settings.ParametersRequest) -> cern.lsa.client.rest.api.v1.dto.ParametersRequestRest: ...
    def fromParentToChildMap(self, map: java.util.Map[cern.lsa.domain.settings.Parameter, java.util.List[cern.lsa.domain.settings.Parameter]]) -> java.util.List[cern.lsa.client.rest.api.v1.dto.ParentToChildrenRelationRest]: ...
    def fromParentToChildMapAndHierarchy(self, map: java.util.Map[cern.lsa.domain.settings.Parameter, java.util.List[cern.lsa.domain.settings.Parameter]], string: str) -> cern.lsa.client.rest.api.v1.dto.SaveParameterRelationRest: ...
    def fromPropertyAndDevice(self, propertyVersion: cern.lsa.domain.devices.type.PropertyVersion, device: cern.lsa.domain.devices.Device) -> cern.lsa.client.rest.api.v1.dto.PropertyAndDeviceRest: ...
    def fromType(self, type: cern.accsoft.commons.value.Type) -> cern.lsa.client.rest.api.v1.dto.TypeRest: ...
    def fromValueDescriptor(self, valueDescriptor: cern.accsoft.commons.value.ValueDescriptor) -> cern.lsa.client.rest.api.v1.dto.ValueDescriptorRest: ...
