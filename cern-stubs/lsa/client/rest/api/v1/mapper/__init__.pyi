import cern.accsoft.commons.domain.zones
import cern.accsoft.commons.value
import cern.lsa.client.rest.api.v1.dto
import cern.lsa.client.rest.api.v1.dto.commons
import cern.lsa.client.rest.api.v1.dto.settings
import cern.lsa.client.rest.api.v1.dto.trim.tag
import cern.lsa.domain.commons
import cern.lsa.domain.devices
import cern.lsa.domain.devices.inca
import cern.lsa.domain.devices.type
import cern.lsa.domain.settings
import cern.lsa.domain.trim.rules.makerule
import cern.lsa.domain.trim.tag
import java.util
import java.util.function
import typing



class FromDto:
    """
    public class FromDto extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    """
    def __init__(self): ...
    def toAttributeDefinitions(self, set: java.util.Set[cern.lsa.client.rest.api.v1.dto.commons.AttributeDefinitionDto]) -> java.util.Set[cern.lsa.domain.commons.AttributeDefinition]: ...
    @staticmethod
    def toDevice(deviceDto: cern.lsa.client.rest.api.v1.dto.DeviceDto) -> cern.lsa.domain.devices.Device: ...
    @staticmethod
    def toDeviceState(deviceStateDto: cern.lsa.client.rest.api.v1.dto.DeviceStateDto) -> cern.lsa.domain.devices.Device.DeviceState: ...
    @staticmethod
    def toDeviceTypeImplementation(deviceTypeImplementationDto: cern.lsa.client.rest.api.v1.dto.DeviceTypeImplementationDto) -> cern.lsa.domain.devices.DeviceTypeImplementation: ...
    @typing.overload
    @staticmethod
    def toDeviceTypeVersion(deviceTypeVersionContainerDto: cern.lsa.client.rest.api.v1.dto.DeviceTypeVersionContainerDto) -> cern.lsa.domain.devices.DeviceTypeVersion:
        """
        public static cern.lsa.domain.devices.DeviceTypeVersion toDeviceTypeVersion (:class:`~cern.lsa.client.rest.api.v1.dto.DeviceTypeVersionDto` rest, cern.lsa.domain.devices.DeviceType deviceType)
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def toDeviceTypeVersion(deviceTypeVersionDto: cern.lsa.client.rest.api.v1.dto.DeviceTypeVersionDto, deviceType2: cern.lsa.domain.devices.DeviceType) -> cern.lsa.domain.devices.DeviceTypeVersion: ...
    @staticmethod
    def toDeviceTypeVersionNumber(deviceTypeVersionNumberDto: cern.lsa.client.rest.api.v1.dto.DeviceTypeVersionNumberDto) -> cern.lsa.domain.devices.DeviceTypeVersionNumber: ...
    def toIncaPropertyFieldInfo(self, incaPropertyFieldInfoDto: cern.lsa.client.rest.api.v1.dto.IncaPropertyFieldInfoDto) -> cern.lsa.domain.devices.inca.IncaPropertyFieldInfo: ...
    def toIncaPropertyFieldInfosRequest(self, collection: typing.Union[java.util.Collection[cern.lsa.domain.devices.type.PropertyField], typing.Sequence[cern.lsa.domain.devices.type.PropertyField]]) -> cern.lsa.domain.devices.inca.IncaPropertyFieldInfosRequest: ...
    def toMakeRuleConfigInfo(self, makeRuleConfigInfoDto: cern.lsa.client.rest.api.v1.dto.MakeRuleConfigInfoDto) -> cern.lsa.domain.trim.rules.makerule.MakeRuleConfigInfo: ...
    def toParameter(self, parameterDto: cern.lsa.client.rest.api.v1.dto.ParameterDto) -> cern.lsa.domain.settings.Parameter: ...
    def toParameterAttributes(self, parameterAttributesDto: cern.lsa.client.rest.api.v1.dto.ParameterAttributesDto) -> cern.lsa.domain.settings.ParameterAttributes: ...
    def toParameterGroup(self, parameterGroupDto: cern.lsa.client.rest.api.v1.dto.ParameterGroupDto) -> cern.lsa.domain.settings.ParameterGroup: ...
    def toParameterTreeNodes(self, parameterTreeDataDto: cern.lsa.client.rest.api.v1.dto.ParameterTreeDataDto) -> java.util.Set[cern.lsa.domain.settings.ParameterTreeNode]: ...
    def toParameterTreesRequest(self, parameterTreesRequestDto: cern.lsa.client.rest.api.v1.dto.ParameterTreesRequestDto) -> cern.lsa.domain.settings.ParameterTreesRequest: ...
    def toParameterType(self, parameterTypeDto: cern.lsa.client.rest.api.v1.dto.ParameterTypeDto) -> cern.lsa.domain.settings.ParameterType: ...
    def toParameterTypesRequest(self, parameterTypesRequestDto: cern.lsa.client.rest.api.v1.dto.ParameterTypesRequestDto) -> cern.lsa.domain.settings.ParameterTypesRequest: ...
    @staticmethod
    def toTrimHeader(trimHeaderDto: cern.lsa.client.rest.api.v1.dto.settings.TrimHeaderDto, map: typing.Union[java.util.Map[int, cern.lsa.domain.settings.BeamProcess], typing.Mapping[int, cern.lsa.domain.settings.BeamProcess]]) -> cern.lsa.domain.settings.TrimHeader: ...
    def toTrimTag(self, trimTagDto: cern.lsa.client.rest.api.v1.dto.trim.tag.TrimTagDto, standAloneContext: cern.lsa.domain.settings.StandAloneContext) -> cern.lsa.domain.trim.tag.TrimTag: ...
    def toTrimTagCreationRequest(self, trimTagCreationRequestDto: cern.lsa.client.rest.api.v1.dto.trim.tag.TrimTagCreationRequestDto, standAloneContext: cern.lsa.domain.settings.StandAloneContext) -> cern.lsa.domain.trim.tag.TrimTagCreationRequest: ...
    def toTrimTagsRequest(self, trimTagsRequestDto: cern.lsa.client.rest.api.v1.dto.trim.tag.TrimTagsRequestDto, map: typing.Union[java.util.Map[int, cern.lsa.domain.settings.BeamProcess], typing.Mapping[int, cern.lsa.domain.settings.BeamProcess]]) -> cern.lsa.domain.trim.tag.TrimTagsRequest: ...
    def toValueDescriptor(self, valueDescriptorDto: cern.lsa.client.rest.api.v1.dto.ValueDescriptorDto) -> cern.accsoft.commons.value.ValueDescriptor: ...

class MapperUtils:
    """
    public class MapperUtils extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    """
    _collectionToList__U = typing.TypeVar('_collectionToList__U')  # <U>
    @staticmethod
    def collectionToList(collection: typing.Union[java.util.Collection[_collectionToList__U], typing.Sequence[_collectionToList__U]]) -> java.util.List[_collectionToList__U]: ...
    _collectionToSet__U = typing.TypeVar('_collectionToSet__U')  # <U>
    @staticmethod
    def collectionToSet(collection: typing.Union[java.util.Collection[_collectionToSet__U], typing.Sequence[_collectionToSet__U]]) -> java.util.Set[_collectionToSet__U]: ...
    _createNewInstanceOrReturnNull__T = typing.TypeVar('_createNewInstanceOrReturnNull__T')  # <T>
    _createNewInstanceOrReturnNull__U = typing.TypeVar('_createNewInstanceOrReturnNull__U')  # <U>
    @staticmethod
    def createNewInstanceOrReturnNull(t: _createNewInstanceOrReturnNull__T, function: typing.Union[java.util.function.Function[_createNewInstanceOrReturnNull__T, _createNewInstanceOrReturnNull__U], typing.Callable[[_createNewInstanceOrReturnNull__T], _createNewInstanceOrReturnNull__U]]) -> _createNewInstanceOrReturnNull__U: ...
    _createNewList__T = typing.TypeVar('_createNewList__T')  # <T>
    _createNewList__U = typing.TypeVar('_createNewList__U')  # <U>
    @staticmethod
    def createNewList(collection: typing.Union[java.util.Collection[_createNewList__T], typing.Sequence[_createNewList__T]], function: typing.Union[java.util.function.Function[_createNewList__T, _createNewList__U], typing.Callable[[_createNewList__T], _createNewList__U]]) -> java.util.List[_createNewList__U]: ...
    _createNewListOrReturnNull__T = typing.TypeVar('_createNewListOrReturnNull__T')  # <T>
    _createNewListOrReturnNull__U = typing.TypeVar('_createNewListOrReturnNull__U')  # <U>
    @staticmethod
    def createNewListOrReturnNull(collection: typing.Union[java.util.Collection[_createNewListOrReturnNull__T], typing.Sequence[_createNewListOrReturnNull__T]], function: typing.Union[java.util.function.Function[_createNewListOrReturnNull__T, _createNewListOrReturnNull__U], typing.Callable[[_createNewListOrReturnNull__T], _createNewListOrReturnNull__U]]) -> java.util.List[_createNewListOrReturnNull__U]: ...
    _extractSingleValueFromCollection__T = typing.TypeVar('_extractSingleValueFromCollection__T')  # <T>
    @staticmethod
    def extractSingleValueFromCollection(collection: typing.Union[java.util.Collection[_extractSingleValueFromCollection__T], typing.Sequence[_extractSingleValueFromCollection__T]]) -> _extractSingleValueFromCollection__T: ...
    _oneByOne__T = typing.TypeVar('_oneByOne__T')  # <T>
    _oneByOne__U = typing.TypeVar('_oneByOne__U')  # <U>
    @staticmethod
    def oneByOne(function: typing.Union[java.util.function.Function[_oneByOne__U, _oneByOne__T], typing.Callable[[_oneByOne__U], _oneByOne__T]]) -> java.util.function.Function[java.util.Collection[_oneByOne__U], java.util.Collection[_oneByOne__T]]: ...
    _safeMap__SOURCE = typing.TypeVar('_safeMap__SOURCE')  # <SOURCE>
    _safeMap__FROM = typing.TypeVar('_safeMap__FROM')  # <FROM>
    _safeMap__TO = typing.TypeVar('_safeMap__TO')  # <TO>
    @staticmethod
    def safeMap(sOURCE: _safeMap__SOURCE, function: typing.Union[java.util.function.Function[_safeMap__SOURCE, typing.Union[java.util.Collection[_safeMap__FROM], typing.Sequence[_safeMap__FROM]]], typing.Callable[[_safeMap__SOURCE], typing.Union[java.util.Collection[_safeMap__FROM], typing.Sequence[_safeMap__FROM]]]], function2: typing.Union[java.util.function.Function[_safeMap__FROM, _safeMap__TO], typing.Callable[[_safeMap__FROM], _safeMap__TO]]) -> java.util.List[_safeMap__TO]: ...
    _safeSet_0__T = typing.TypeVar('_safeSet_0__T')  # <T>
    _safeSet_1__T = typing.TypeVar('_safeSet_1__T')  # <T>
    _safeSet_1__U = typing.TypeVar('_safeSet_1__U')  # <U>
    _safeSet_2__T = typing.TypeVar('_safeSet_2__T')  # <T>
    _safeSet_2__U = typing.TypeVar('_safeSet_2__U')  # <U>
    @typing.overload
    @staticmethod
    def safeSet(t: _safeSet_0__T, consumer: typing.Union[java.util.function.Consumer[_safeSet_0__T], typing.Callable[[_safeSet_0__T], None]]) -> None: ...
    @typing.overload
    @staticmethod
    def safeSet(u: _safeSet_1__U, function: typing.Union[java.util.function.Function[_safeSet_1__U, _safeSet_1__T], typing.Callable[[_safeSet_1__U], _safeSet_1__T]], consumer: typing.Union[java.util.function.Consumer[_safeSet_1__T], typing.Callable[[_safeSet_1__T], None]]) -> None: ...
    @typing.overload
    @staticmethod
    def safeSet(u: _safeSet_2__U, function: typing.Union[java.util.function.Function[_safeSet_2__U, _safeSet_2__T], typing.Callable[[_safeSet_2__U], _safeSet_2__T]], consumer: typing.Union[java.util.function.Consumer[_safeSet_2__T], typing.Callable[[_safeSet_2__T], None]], boolean: bool) -> None: ...
    _safeSetCollection_0__T = typing.TypeVar('_safeSetCollection_0__T')  # <T>
    _safeSetCollection_0__U = typing.TypeVar('_safeSetCollection_0__U')  # <U>
    _safeSetCollection_1__T = typing.TypeVar('_safeSetCollection_1__T')  # <T>
    _safeSetCollection_1__U = typing.TypeVar('_safeSetCollection_1__U')  # <U>
    @typing.overload
    @staticmethod
    def safeSetCollection(collection: typing.Union[java.util.Collection[_safeSetCollection_0__U], typing.Sequence[_safeSetCollection_0__U]], function: typing.Union[java.util.function.Function[typing.Union[java.util.Collection[_safeSetCollection_0__U], typing.Sequence[_safeSetCollection_0__U]], typing.Union[java.util.Collection[_safeSetCollection_0__T], typing.Sequence[_safeSetCollection_0__T]]], typing.Callable[[typing.Union[java.util.Collection[_safeSetCollection_0__U], typing.Sequence[_safeSetCollection_0__U]]], typing.Union[java.util.Collection[_safeSetCollection_0__T], typing.Sequence[_safeSetCollection_0__T]]]], consumer: typing.Union[java.util.function.Consumer[typing.Union[java.util.Collection[_safeSetCollection_0__T], typing.Sequence[_safeSetCollection_0__T]]], typing.Callable[[typing.Union[java.util.Collection[_safeSetCollection_0__T], typing.Sequence[_safeSetCollection_0__T]]], None]]) -> None: ...
    @typing.overload
    @staticmethod
    def safeSetCollection(collection: typing.Union[java.util.Collection[_safeSetCollection_1__U], typing.Sequence[_safeSetCollection_1__U]], function: typing.Union[java.util.function.Function[typing.Union[java.util.Collection[_safeSetCollection_1__U], typing.Sequence[_safeSetCollection_1__U]], typing.Union[java.util.Collection[_safeSetCollection_1__T], typing.Sequence[_safeSetCollection_1__T]]], typing.Callable[[typing.Union[java.util.Collection[_safeSetCollection_1__U], typing.Sequence[_safeSetCollection_1__U]]], typing.Union[java.util.Collection[_safeSetCollection_1__T], typing.Sequence[_safeSetCollection_1__T]]]], consumer: typing.Union[java.util.function.Consumer[typing.Union[java.util.Collection[_safeSetCollection_1__T], typing.Sequence[_safeSetCollection_1__T]]], typing.Callable[[typing.Union[java.util.Collection[_safeSetCollection_1__T], typing.Sequence[_safeSetCollection_1__T]]], None]], function2: typing.Union[java.util.function.Function[typing.Union[java.util.Collection[_safeSetCollection_1__U], typing.Sequence[_safeSetCollection_1__U]], bool], typing.Callable[[typing.Union[java.util.Collection[_safeSetCollection_1__U], typing.Sequence[_safeSetCollection_1__U]]], bool]]) -> None: ...

class ToDto:
    """
    public class ToDto extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    """
    def __init__(self): ...
    def fromAcceleratorZone(self, acceleratorZone: cern.accsoft.commons.domain.zones.AcceleratorZone) -> cern.lsa.client.rest.api.v1.dto.AcceleratorZoneDto: ...
    def fromAttribute(self, attribute: cern.lsa.domain.commons.Attribute) -> cern.lsa.client.rest.api.v1.dto.commons.AttributeDto: ...
    def fromAttributeDefinition(self, attributeDefinition: cern.lsa.domain.commons.AttributeDefinition) -> cern.lsa.client.rest.api.v1.dto.commons.AttributeDefinitionDto: ...
    def fromAttributeDefinitions(self, set: java.util.Set[cern.lsa.domain.commons.AttributeDefinition]) -> java.util.Set[cern.lsa.client.rest.api.v1.dto.commons.AttributeDefinitionDto]: ...
    def fromBeamProcess(self, beamProcess: cern.lsa.domain.settings.BeamProcess) -> cern.lsa.client.rest.api.v1.dto.settings.BeamProcessDto: ...
    def fromDevice(self, device: cern.lsa.domain.devices.Device) -> cern.lsa.client.rest.api.v1.dto.DeviceDto: ...
    def fromDeviceMetaTypeEnum(self, deviceMetaTypeEnum: cern.lsa.domain.devices.DeviceMetaTypeEnum) -> cern.lsa.client.rest.api.v1.dto.DeviceMetaTypeDto: ...
    def fromDeviceState(self, deviceState: cern.lsa.domain.devices.Device.DeviceState) -> cern.lsa.client.rest.api.v1.dto.DeviceStateDto: ...
    def fromDeviceTypeImplementation(self, deviceTypeImplementation: cern.lsa.domain.devices.DeviceTypeImplementation) -> cern.lsa.client.rest.api.v1.dto.DeviceTypeImplementationDto: ...
    def fromDeviceTypeVersion(self, deviceTypeVersion: cern.lsa.domain.devices.DeviceTypeVersion) -> cern.lsa.client.rest.api.v1.dto.DeviceTypeVersionContainerDto: ...
    def fromDeviceTypeVersionNumber(self, deviceTypeVersionNumber: cern.lsa.domain.devices.DeviceTypeVersionNumber) -> cern.lsa.client.rest.api.v1.dto.DeviceTypeVersionNumberDto: ...
    def fromIncaPropertyFieldInfo(self, incaPropertyFieldInfo: cern.lsa.domain.devices.inca.IncaPropertyFieldInfo) -> cern.lsa.client.rest.api.v1.dto.IncaPropertyFieldInfoDto: ...
    def fromIncaPropertyFieldInfoRequest(self, incaPropertyFieldInfosRequest: cern.lsa.domain.devices.inca.IncaPropertyFieldInfosRequest) -> cern.lsa.client.rest.api.v1.dto.IncaPropertyFieldInfosRequestDto: ...
    def fromMakeRuleForParameterRelation(self, makeRuleConfigInfo: cern.lsa.domain.trim.rules.makerule.MakeRuleConfigInfo) -> cern.lsa.client.rest.api.v1.dto.MakeRuleConfigInfoDto: ...
    def fromParameter(self, parameter: cern.lsa.domain.settings.Parameter) -> cern.lsa.client.rest.api.v1.dto.ParameterDto: ...
    def fromParameterAttributes(self, parameterAttributes: cern.lsa.domain.settings.ParameterAttributes) -> cern.lsa.client.rest.api.v1.dto.ParameterAttributesDto: ...
    def fromParameterGroup(self, parameterGroup: cern.lsa.domain.settings.ParameterGroup) -> cern.lsa.client.rest.api.v1.dto.ParameterGroupDto: ...
    def fromParameterTreeNodes(self, set: java.util.Set[cern.lsa.domain.settings.ParameterTreeNode]) -> cern.lsa.client.rest.api.v1.dto.ParameterTreeDataDto: ...
    def fromParameterTreeRequest(self, parameterTreesRequest: cern.lsa.domain.settings.ParameterTreesRequest) -> cern.lsa.client.rest.api.v1.dto.ParameterTreesRequestDto: ...
    def fromParameterType(self, parameterType: cern.lsa.domain.settings.ParameterType) -> cern.lsa.client.rest.api.v1.dto.ParameterTypeDto: ...
    def fromParameterTypeCategory(self, parameterTypeCategory: cern.lsa.domain.settings.ParameterTypeCategory) -> cern.lsa.client.rest.api.v1.dto.ParameterTypeCategoryDto: ...
    def fromParameterTypesRequest(self, parameterTypesRequest: cern.lsa.domain.settings.ParameterTypesRequest) -> cern.lsa.client.rest.api.v1.dto.ParameterTypesRequestDto: ...
    def fromParametersRequest(self, parametersRequest: cern.lsa.domain.settings.ParametersRequest) -> cern.lsa.client.rest.api.v1.dto.ParametersRequestDto: ...
    def fromParentToChildMap(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, java.util.List[cern.lsa.domain.settings.Parameter]], typing.Mapping[cern.lsa.domain.settings.Parameter, java.util.List[cern.lsa.domain.settings.Parameter]]]) -> java.util.List[cern.lsa.client.rest.api.v1.dto.ParentToChildrenRelationDto]: ...
    def fromParentToChildMapAndHierarchy(self, map: typing.Union[java.util.Map[cern.lsa.domain.settings.Parameter, java.util.List[cern.lsa.domain.settings.Parameter]], typing.Mapping[cern.lsa.domain.settings.Parameter, java.util.List[cern.lsa.domain.settings.Parameter]]], string: str) -> cern.lsa.client.rest.api.v1.dto.SaveParameterRelationDto: ...
    def fromPropertyAndDevice(self, propertyVersion: cern.lsa.domain.devices.type.PropertyVersion, device: cern.lsa.domain.devices.Device) -> cern.lsa.client.rest.api.v1.dto.PropertyAndDeviceDto: ...
    def fromTrimHeader(self, trimHeader: cern.lsa.domain.settings.TrimHeader) -> cern.lsa.client.rest.api.v1.dto.settings.TrimHeaderDto: ...
    def fromTrimTag(self, trimTag: cern.lsa.domain.trim.tag.TrimTag) -> cern.lsa.client.rest.api.v1.dto.trim.tag.TrimTagDto: ...
    def fromTrimTagCreationRequest(self, trimTagCreationRequest: cern.lsa.domain.trim.tag.TrimTagCreationRequest) -> cern.lsa.client.rest.api.v1.dto.trim.tag.TrimTagCreationRequestDto: ...
    def fromTrimTagsRequest(self, trimTagsRequest: cern.lsa.domain.trim.tag.TrimTagsRequest) -> cern.lsa.client.rest.api.v1.dto.trim.tag.TrimTagsRequestDto: ...
    def fromType(self, type: cern.accsoft.commons.value.Type) -> cern.lsa.client.rest.api.v1.dto.TypeDto: ...
    def fromValueDescriptor(self, valueDescriptor: cern.accsoft.commons.value.ValueDescriptor) -> cern.lsa.client.rest.api.v1.dto.ValueDescriptorDto: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.lsa.client.rest.api.v1.mapper")``.

    FromDto: typing.Type[FromDto]
    MapperUtils: typing.Type[MapperUtils]
    ToDto: typing.Type[ToDto]
