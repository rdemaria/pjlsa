from typing import Any as _py_Any
from typing import List as _py_List
from typing import TypeVar as _py_TypeVar
from typing import Type as _py_Type
from typing import overload
import java.lang.reflect
import java.util.concurrent
import org.springframework.beans.factory
import org.springframework.cache
import org.springframework.cache.annotation
import org.springframework.cache.interceptor
import org.springframework.cache.support


class CacheKeyGenerator(org.springframework.cache.interceptor.KeyGenerator):
    def __init__(self): ...
    def generate(self, object: _py_Any, method: java.lang.reflect.Method, objectArray: _py_List[_py_Any]) -> _py_Any: ...

class ClientCache(org.springframework.cache.Cache, org.springframework.beans.factory.BeanNameAware):
    def clear(self) -> None: ...
    def evict(self, object: _py_Any) -> None: ...
    _get_0__T = _py_TypeVar('_get_0__T')  # <T>
    @overload
    def get(self, object: _py_Any, class_: _py_Type[_get_0__T]) -> _get_0__T: ...
    _get_1__T = _py_TypeVar('_get_1__T')  # <T>
    @overload
    def get(self, object: _py_Any, callable: java.util.concurrent.Callable[_get_1__T]) -> _get_1__T: ...
    @overload
    def get(self, object: _py_Any) -> org.springframework.cache.Cache.ValueWrapper: ...
    @classmethod
    def getInstance(cls) -> 'ClientCache': ...
    def getName(self) -> str: ...
    def getNativeCache(self) -> _py_Any: ...
    def put(self, object: _py_Any, object2: _py_Any) -> None: ...
    def putIfAbsent(self, object: _py_Any, object2: _py_Any) -> org.springframework.cache.Cache.ValueWrapper: ...
    def setBeanName(self, string: str) -> None: ...

class ClientCacheConfig(org.springframework.cache.annotation.CachingConfigurerSupport):
    def __init__(self): ...
    def cacheManager(self) -> org.springframework.cache.CacheManager: ...
    def keyGenerator(self) -> org.springframework.cache.interceptor.KeyGenerator: ...

class ClientCacheManagerConfig:
    def __init__(self): ...
    def clientCacheManager(self) -> org.springframework.cache.support.SimpleCacheManager: ...
