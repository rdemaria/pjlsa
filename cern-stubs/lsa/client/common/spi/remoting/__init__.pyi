import cern.accsoft.commons.util.userctx
import cern.lsa.domain.commons.logging
import java.io
import java.lang
import java.lang.reflect
import java.util
import org.springframework.beans.factory
import org.springframework.remoting.rmi
import org.springframework.remoting.support
import typing


class InvocationIdProvider(cern.accsoft.commons.util.userctx.InvocationContextProvider):
    def __init__(self): ...
    def getAttributeMap(self) -> java.util.Map[str, java.io.Serializable]: ...

class LSARemotingConstants:
    CLIENT_IP_ADDRESS: typing.ClassVar[str] = ...
    CLIENT_USER_NAME: typing.ClassVar[str] = ...
    CLIENT_HOST_NAME: typing.ClassVar[str] = ...
    CLIENT_METHOD: typing.ClassVar[str] = ...
    INVOCATION_ID: typing.ClassVar[str] = ...
    CLIENT_INFO: typing.ClassVar[str] = ...

class LSAServiceAwareRmiProxyFactoryBean(org.springframework.remoting.rmi.RmiProxyFactoryBean, org.springframework.beans.factory.BeanNameAware):
    def __init__(self, string: str, int: int): ...
    def afterPropertiesSet(self) -> None: ...
    def getObject(self) -> typing.Any: ...
    def setBeanName(self, string: str) -> None: ...
    def setInterfaceClassName(self, string: str) -> None: ...
    def setLogicalInterfaceName(self, string: str) -> None: ...
    class FilteringStackTraceInvocationHandler(java.lang.reflect.InvocationHandler):
        PROPERTY_STACKTRACE_FILTER_DISABLED: typing.ClassVar[str] = ...
        PROPERTY_STACKTRACE_FILTER_PATTERNS: typing.ClassVar[str] = ...
        def invoke(self, object: typing.Any, method: java.lang.reflect.Method, objectArray: typing.List[typing.Any]) -> typing.Any: ...

class LoggingAwareRemoteInvocationResult(org.springframework.remoting.support.RemoteInvocationResult):
    @typing.overload
    def __init__(self, object: typing.Any): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...
    def getMiddleTierLogs(self) -> typing.List[cern.lsa.domain.commons.logging.LogMessage]: ...
