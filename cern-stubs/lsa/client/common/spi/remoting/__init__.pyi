from typing import Any as _py_Any
from typing import List as _py_List
from typing import ClassVar as _py_ClassVar
from typing import overload
import cern.accsoft.commons.util.userctx
import cern.lsa.domain.commons.logging
import java.io
import java.lang
import java.lang.reflect
import java.util
import org.springframework.beans.factory
import org.springframework.remoting.rmi
import org.springframework.remoting.support


class InvocationIdProvider(cern.accsoft.commons.util.userctx.InvocationContextProvider):
    def __init__(self): ...
    def getAttributeMap(self) -> java.util.Map[str, java.io.Serializable]: ...

class LSARemotingConstants:
    CLIENT_IP_ADDRESS: _py_ClassVar[str] = ...
    CLIENT_USER_NAME: _py_ClassVar[str] = ...
    CLIENT_HOST_NAME: _py_ClassVar[str] = ...
    CLIENT_METHOD: _py_ClassVar[str] = ...
    INVOCATION_ID: _py_ClassVar[str] = ...
    CLIENT_INFO: _py_ClassVar[str] = ...

class LSAServiceAwareRmiProxyFactoryBean(org.springframework.remoting.rmi.RmiProxyFactoryBean, org.springframework.beans.factory.BeanNameAware):
    def __init__(self): ...
    def afterPropertiesSet(self) -> None: ...
    def getObject(self) -> _py_Any: ...
    def setBeanName(self, string: str) -> None: ...
    def setInterfaceClassName(self, string: str) -> None: ...
    def setLogicalInterfaceName(self, string: str) -> None: ...
    def setPort(self, int: int) -> None: ...
    def setServerName(self, string: str) -> None: ...
    class FilteringStackTraceInvocationHandler(java.lang.reflect.InvocationHandler):
        PROPERTY_STACKTRACE_FILTER_DISABLED: _py_ClassVar[str] = ...
        PROPERTY_STACKTRACE_FILTER_PATTERNS: _py_ClassVar[str] = ...
        def invoke(self, object: _py_Any, method: java.lang.reflect.Method, objectArray: _py_List[_py_Any]) -> _py_Any: ...

class LoggingAwareRemoteInvocationResult(org.springframework.remoting.support.RemoteInvocationResult):
    @overload
    def __init__(self, object: _py_Any): ...
    @overload
    def __init__(self, throwable: java.lang.Throwable): ...
    def getMiddleTierLogs(self) -> _py_List[cern.lsa.domain.commons.logging.LogMessage]: ...
