import cern.rbac.common
import java.lang
import java.security
import typing


class AuthorizationException(java.lang.Exception):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class CheckingPolicy(java.lang.Enum['CheckingPolicy']):
    NO_CHECK: typing.ClassVar['CheckingPolicy'] = ...
    LENIENT: typing.ClassVar['CheckingPolicy'] = ...
    STRICT: typing.ClassVar['CheckingPolicy'] = ...
    @staticmethod
    def fromString(string: str) -> 'CheckingPolicy': ...
    def getName(self) -> str: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CheckingPolicy': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['CheckingPolicy']: ...

class McsRole(cern.rbac.common.Role):
    def getPublicKey(self) -> java.security.PublicKey: ...

class Operation(java.lang.Enum['Operation']):
    GET: typing.ClassVar['Operation'] = ...
    SET: typing.ClassVar['Operation'] = ...
    SUBSCRIBE: typing.ClassVar['Operation'] = ...
    @staticmethod
    def fromString(string: str) -> 'Operation': ...
    def getName(self) -> str: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'Operation': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['Operation']: ...
