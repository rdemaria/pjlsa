import java.lang
import java.util
import typing


class AbstractResponse(java.lang.Cloneable):
    def __init__(self): ...
    def clone(self) -> typing.Any: ...
    def getException(self) -> str: ...
    def getExceptionTrace(self) -> str: ...
    def getLog(self) -> str: ...
    def getParameters(self) -> java.util.Map['ResponseParameterType', typing.Any]: ...
    def getProcessTime(self) -> int: ...
    def getResponseStatus(self) -> 'ResponseStatus': ...
    def toString(self) -> str: ...

class FaultResponse:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, exception: java.lang.Exception): ...
    @typing.overload
    def __init__(self, string: str): ...
    def getMessage(self) -> str: ...
    def getStacktrace(self) -> str: ...

_ResponseBuilder__Response = typing.TypeVar('_ResponseBuilder__Response', bound=AbstractResponse)  # <Response>
class ResponseBuilder(typing.Generic[_ResponseBuilder__Response]):
    def __init__(self, response: _ResponseBuilder__Response): ...
    def addParameters(self, map: typing.Union[java.util.Map['ResponseParameterType', typing.Any], typing.Mapping['ResponseParameterType', typing.Any]]) -> None: ...
    def buildResponse(self) -> _ResponseBuilder__Response: ...
    @typing.overload
    def setException(self, exception: java.lang.Exception, responseStatus: 'ResponseStatus') -> None: ...
    @typing.overload
    def setException(self, string: str) -> None: ...
    def setExceptionTrace(self, string: str) -> None: ...
    def setLog(self, string: str) -> None: ...
    def setProcessTime(self, int: int) -> None: ...
    def setResponseStatus(self, responseStatus: 'ResponseStatus') -> None: ...

class ResponseParameterType(java.lang.Enum['ResponseParameterType']):
    STATUS: typing.ClassVar['ResponseParameterType'] = ...
    EXCEPTION: typing.ClassVar['ResponseParameterType'] = ...
    EXCEPTION_TRACE: typing.ClassVar['ResponseParameterType'] = ...
    PROCESS_TIME: typing.ClassVar['ResponseParameterType'] = ...
    LOG: typing.ClassVar['ResponseParameterType'] = ...
    @staticmethod
    def fromString(string: str) -> 'ResponseParameterType': ...
    def getName(self) -> str: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ResponseParameterType': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['ResponseParameterType']: ...

class ResponseStatus(java.lang.Enum['ResponseStatus']):
    OK: typing.ClassVar['ResponseStatus'] = ...
    BAD_REQUEST: typing.ClassVar['ResponseStatus'] = ...
    AUTHENTICATION_FAILED: typing.ClassVar['ResponseStatus'] = ...
    PROCESSING_ERROR: typing.ClassVar['ResponseStatus'] = ...
    @staticmethod
    def fromString(string: str) -> 'ResponseStatus': ...
    def getName(self) -> str: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ResponseStatus': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['ResponseStatus']: ...

class AccessMapResponse(AbstractResponse):
    def __init__(self): ...

class AccessMapResponseBuilder(ResponseBuilder[AccessMapResponse]):
    @staticmethod
    def newInstance() -> 'AccessMapResponseBuilder': ...
