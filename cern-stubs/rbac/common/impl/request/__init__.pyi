import cern.rbac.common
import cern.rbac.common.authorization
import java.lang
import java.util
import typing



class AbstractRequest(java.lang.Cloneable):
    """
    Java class 'cern.rbac.common.impl.request.AbstractRequest'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.lang.Cloneable
    
      Constructors:
        * AbstractRequest()
    
    """
    def __init__(self): ...
    def clone(self) -> typing.Any: ...
    def getParameters(self) -> java.util.Map['RequestParameterType', typing.Any]: ...
    def getRequestType(self) -> 'RequestType': ...
    def getVersion(self) -> str: ...
    def isVerbose(self) -> bool: ...
    def toString(self) -> str: ...

class AccessMapCommand(java.lang.Enum['AccessMapCommand']):
    """
    Java class 'cern.rbac.common.impl.request.AccessMapCommand'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        MAPS_FOR_SERVER (cern.rbac.common.impl.request.AccessMapCommand): final static enum constant
        MAPS_FOR_CLASS (cern.rbac.common.impl.request.AccessMapCommand): final static enum constant
        MAPS_FOR_CLASS_TEST (cern.rbac.common.impl.request.AccessMapCommand): final static enum constant
        MAPS_FOR_FRONT_END (cern.rbac.common.impl.request.AccessMapCommand): final static enum constant
    
    """
    MAPS_FOR_SERVER: typing.ClassVar['AccessMapCommand'] = ...
    MAPS_FOR_CLASS: typing.ClassVar['AccessMapCommand'] = ...
    MAPS_FOR_CLASS_TEST: typing.ClassVar['AccessMapCommand'] = ...
    MAPS_FOR_FRONT_END: typing.ClassVar['AccessMapCommand'] = ...
    @staticmethod
    def fromString(string: str) -> 'AccessMapCommand': ...
    def getBunchSize(self) -> int: ...
    def getName(self) -> str: ...
    def getScriptName(self) -> str: ...
    def toString(self) -> str: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'AccessMapCommand': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['AccessMapCommand']: ...

_RequestBuilder__Request = typing.TypeVar('_RequestBuilder__Request', bound=AbstractRequest)  # <Request>
class RequestBuilder(typing.Generic[_RequestBuilder__Request]):
    """
    Java class 'cern.rbac.common.impl.request.RequestBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * RequestBuilder(cern.rbac.common.impl.request.AbstractRequest)
    
    """
    def __init__(self, request: _RequestBuilder__Request): ...
    def addParameters(self, map: typing.Union[java.util.Map['RequestParameterType', typing.Any], typing.Mapping['RequestParameterType', typing.Any]]) -> None: ...
    def buildRequest(self) -> _RequestBuilder__Request: ...
    def setRequestType(self, requestType: 'RequestType') -> None: ...
    def setVerbose(self, boolean: bool) -> 'RequestBuilder'[_RequestBuilder__Request]: ...
    def setVersion(self, string: str) -> 'RequestBuilder'[_RequestBuilder__Request]: ...

class RequestParameterType(java.lang.Enum['RequestParameterType']):
    """
    Java class 'cern.rbac.common.impl.request.RequestParameterType'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        SERVER_ADDR_SUFFIX (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        APPLICATION (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        APPLICATION_ID (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        TOKEN_FORMAT (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        TOKEN_TYPE (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        LIFETIME (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        ACCOUNT_NAME (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        USER_NAME (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        PASSWORD (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        ORIGIN (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        ROLE (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        TOKEN (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        SIGN_BUFFER (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        VERBOSE (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        BUILD (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        PARAMETER (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        CLASS (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        DEVICE (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        PROPERTY (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        OPERATION (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        MCS_ROLE (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        VERSION (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        SAML_RESPONSE (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        OAUTH_ACCESS_TOKEN (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        KRB5_TICKET (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
        CHECKING_POLICY (cern.rbac.common.impl.request.RequestParameterType): final static enum constant
    
    """
    SERVER_ADDR_SUFFIX: typing.ClassVar['RequestParameterType'] = ...
    APPLICATION: typing.ClassVar['RequestParameterType'] = ...
    APPLICATION_ID: typing.ClassVar['RequestParameterType'] = ...
    TOKEN_FORMAT: typing.ClassVar['RequestParameterType'] = ...
    TOKEN_TYPE: typing.ClassVar['RequestParameterType'] = ...
    LIFETIME: typing.ClassVar['RequestParameterType'] = ...
    ACCOUNT_NAME: typing.ClassVar['RequestParameterType'] = ...
    USER_NAME: typing.ClassVar['RequestParameterType'] = ...
    PASSWORD: typing.ClassVar['RequestParameterType'] = ...
    ORIGIN: typing.ClassVar['RequestParameterType'] = ...
    ROLE: typing.ClassVar['RequestParameterType'] = ...
    TOKEN: typing.ClassVar['RequestParameterType'] = ...
    SIGN_BUFFER: typing.ClassVar['RequestParameterType'] = ...
    VERBOSE: typing.ClassVar['RequestParameterType'] = ...
    BUILD: typing.ClassVar['RequestParameterType'] = ...
    PARAMETER: typing.ClassVar['RequestParameterType'] = ...
    CLASS: typing.ClassVar['RequestParameterType'] = ...
    DEVICE: typing.ClassVar['RequestParameterType'] = ...
    PROPERTY: typing.ClassVar['RequestParameterType'] = ...
    OPERATION: typing.ClassVar['RequestParameterType'] = ...
    MCS_ROLE: typing.ClassVar['RequestParameterType'] = ...
    VERSION: typing.ClassVar['RequestParameterType'] = ...
    SAML_RESPONSE: typing.ClassVar['RequestParameterType'] = ...
    OAUTH_ACCESS_TOKEN: typing.ClassVar['RequestParameterType'] = ...
    KRB5_TICKET: typing.ClassVar['RequestParameterType'] = ...
    CHECKING_POLICY: typing.ClassVar['RequestParameterType'] = ...
    @staticmethod
    def fromString(string: str) -> 'RequestParameterType': ...
    def getName(self) -> str: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RequestParameterType': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['RequestParameterType']: ...
    class ParameterTypeConstants:
        """
        Java class 'cern.rbac.common.impl.request.RequestParameterType$ParameterTypeConstants'
        
            Extends:
                java.lang.Object
        
          Constructors:
            * ParameterTypeConstants(cern.rbac.common.impl.request.RequestParameterType)
        
          Attributes:
            SERVER_ADDR_SUFFIX_CONSTANT (java.lang.String): final static field
            APPLICATION_CONSTANT (java.lang.String): final static field
            APPLICATION_ID_CONSTANT (java.lang.String): final static field
            TOKEN_FORMAT_CONSTANT (java.lang.String): final static field
            TOKEN_TYPE_CONSTANT (java.lang.String): final static field
            LIFETIME_CONSTANT (java.lang.String): final static field
            ACCOUNT_NAME_CONSTANT (java.lang.String): final static field
            USER_NAME_CONSTANT (java.lang.String): final static field
            PASSWORD_CONSTANT (java.lang.String): final static field
            ORIGIN_CONSTANT (java.lang.String): final static field
            ROLE_CONSTANT (java.lang.String): final static field
            TOKEN_CONSTANT (java.lang.String): final static field
            SIGN_BUFFER_CONSTANT (java.lang.String): final static field
            VERBOSE_CONSTANT (java.lang.String): final static field
            BUILD_CONSTANT (java.lang.String): final static field
            PARAMETER_CONSTANT (java.lang.String): final static field
            CLASS_CONSTANT (java.lang.String): final static field
            DEVICE_CONSTANT (java.lang.String): final static field
            PROPERTY_CONSTANT (java.lang.String): final static field
            OPERATION_CONSTANT (java.lang.String): final static field
            MCS_ROLE_CONSTANT (java.lang.String): final static field
            VERSION_CONSTANT (java.lang.String): final static field
            SAML_RESPONSE_CONSTANT (java.lang.String): final static field
            OAUTH_ACCESS_TOKEN_CONSTANT (java.lang.String): final static field
            KRB5_TICKET_CONSTANT (java.lang.String): final static field
            CHECKING_POLICY_CONSTANT (java.lang.String): final static field
        
        """
        SERVER_ADDR_SUFFIX_CONSTANT: typing.ClassVar[str] = ...
        APPLICATION_CONSTANT: typing.ClassVar[str] = ...
        APPLICATION_ID_CONSTANT: typing.ClassVar[str] = ...
        TOKEN_FORMAT_CONSTANT: typing.ClassVar[str] = ...
        TOKEN_TYPE_CONSTANT: typing.ClassVar[str] = ...
        LIFETIME_CONSTANT: typing.ClassVar[str] = ...
        ACCOUNT_NAME_CONSTANT: typing.ClassVar[str] = ...
        USER_NAME_CONSTANT: typing.ClassVar[str] = ...
        PASSWORD_CONSTANT: typing.ClassVar[str] = ...
        ORIGIN_CONSTANT: typing.ClassVar[str] = ...
        ROLE_CONSTANT: typing.ClassVar[str] = ...
        TOKEN_CONSTANT: typing.ClassVar[str] = ...
        SIGN_BUFFER_CONSTANT: typing.ClassVar[str] = ...
        VERBOSE_CONSTANT: typing.ClassVar[str] = ...
        BUILD_CONSTANT: typing.ClassVar[str] = ...
        PARAMETER_CONSTANT: typing.ClassVar[str] = ...
        CLASS_CONSTANT: typing.ClassVar[str] = ...
        DEVICE_CONSTANT: typing.ClassVar[str] = ...
        PROPERTY_CONSTANT: typing.ClassVar[str] = ...
        OPERATION_CONSTANT: typing.ClassVar[str] = ...
        MCS_ROLE_CONSTANT: typing.ClassVar[str] = ...
        VERSION_CONSTANT: typing.ClassVar[str] = ...
        SAML_RESPONSE_CONSTANT: typing.ClassVar[str] = ...
        OAUTH_ACCESS_TOKEN_CONSTANT: typing.ClassVar[str] = ...
        KRB5_TICKET_CONSTANT: typing.ClassVar[str] = ...
        CHECKING_POLICY_CONSTANT: typing.ClassVar[str] = ...
        def __init__(self, requestParameterType: 'RequestParameterType'): ...

class RequestType(java.lang.Enum['RequestType']):
    """
    Java class 'cern.rbac.common.impl.request.RequestType'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        AUTHENTICATE_EXPLICIT (cern.rbac.common.impl.request.RequestType): final static enum constant
        AUTHENTICATE_LOCATION (cern.rbac.common.impl.request.RequestType): final static enum constant
        AUTHENTICATE_KERBEROS (cern.rbac.common.impl.request.RequestType): final static enum constant
        AUTHENTICATE_SAML (cern.rbac.common.impl.request.RequestType): final static enum constant
        AUTHENTICATE_OAUTH (cern.rbac.common.impl.request.RequestType): final static enum constant
        AUTHENTICATE_RENEWAL (cern.rbac.common.impl.request.RequestType): final static enum constant
        CHECK_ACCESS (cern.rbac.common.impl.request.RequestType): final static enum constant
        GENERATE_MAP (cern.rbac.common.impl.request.RequestType): final static enum constant
        MCS_ROLE (cern.rbac.common.impl.request.RequestType): final static enum constant
        MCS_PUBLIC_KEY (cern.rbac.common.impl.request.RequestType): final static enum constant
        MCS_SIGN (cern.rbac.common.impl.request.RequestType): final static enum constant
    
    """
    AUTHENTICATE_EXPLICIT: typing.ClassVar['RequestType'] = ...
    AUTHENTICATE_LOCATION: typing.ClassVar['RequestType'] = ...
    AUTHENTICATE_KERBEROS: typing.ClassVar['RequestType'] = ...
    AUTHENTICATE_SAML: typing.ClassVar['RequestType'] = ...
    AUTHENTICATE_OAUTH: typing.ClassVar['RequestType'] = ...
    AUTHENTICATE_RENEWAL: typing.ClassVar['RequestType'] = ...
    CHECK_ACCESS: typing.ClassVar['RequestType'] = ...
    GENERATE_MAP: typing.ClassVar['RequestType'] = ...
    MCS_ROLE: typing.ClassVar['RequestType'] = ...
    MCS_PUBLIC_KEY: typing.ClassVar['RequestType'] = ...
    MCS_SIGN: typing.ClassVar['RequestType'] = ...
    @staticmethod
    def fromUri(string: str) -> 'RequestType': ...
    def getUri(self) -> str: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RequestType': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['RequestType']: ...
    class UriConstants:
        """
        Java class 'cern.rbac.common.impl.request.RequestType$UriConstants'
        
            Extends:
                java.lang.Object
        
          Attributes:
            AUTHENTICATE_EXPLICIT_URI (java.lang.String): final static field
            AUTHENTICATE_LOCATION_URI (java.lang.String): final static field
            AUTHENTICATE_KERBEROS_URI (java.lang.String): final static field
            AUTHENTICATE_SAML_URI (java.lang.String): final static field
            AUTHENTICATE_OAUTH_URI (java.lang.String): final static field
            AUTHENTICATE_RENEWAL_URI (java.lang.String): final static field
            CHECK_ACCESS_URI (java.lang.String): final static field
            GENERATE_MAP_URI (java.lang.String): final static field
            MCS_ROLE_URI (java.lang.String): final static field
            MCS_PUBLIC_KEY_URI (java.lang.String): final static field
            MCS_SIGN_URI (java.lang.String): final static field
        
        """
        AUTHENTICATE_EXPLICIT_URI: typing.ClassVar[str] = ...
        AUTHENTICATE_LOCATION_URI: typing.ClassVar[str] = ...
        AUTHENTICATE_KERBEROS_URI: typing.ClassVar[str] = ...
        AUTHENTICATE_SAML_URI: typing.ClassVar[str] = ...
        AUTHENTICATE_OAUTH_URI: typing.ClassVar[str] = ...
        AUTHENTICATE_RENEWAL_URI: typing.ClassVar[str] = ...
        CHECK_ACCESS_URI: typing.ClassVar[str] = ...
        GENERATE_MAP_URI: typing.ClassVar[str] = ...
        MCS_ROLE_URI: typing.ClassVar[str] = ...
        MCS_PUBLIC_KEY_URI: typing.ClassVar[str] = ...
        MCS_SIGN_URI: typing.ClassVar[str] = ...

class ServerErrorCode(java.lang.Enum['ServerErrorCode']):
    """
    Java class 'cern.rbac.common.impl.request.ServerErrorCode'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        BAD_REQUEST (cern.rbac.common.impl.request.ServerErrorCode): final static enum constant
        AUTHENTICATION_FAILED (cern.rbac.common.impl.request.ServerErrorCode): final static enum constant
        PROCESSING_ERROR (cern.rbac.common.impl.request.ServerErrorCode): final static enum constant
    
    """
    BAD_REQUEST: typing.ClassVar['ServerErrorCode'] = ...
    AUTHENTICATION_FAILED: typing.ClassVar['ServerErrorCode'] = ...
    PROCESSING_ERROR: typing.ClassVar['ServerErrorCode'] = ...
    @staticmethod
    def fromInt(int: int) -> 'ServerErrorCode': ...
    def getCode(self) -> int: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ServerErrorCode': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['ServerErrorCode']: ...

class AccessCheckerRequest(AbstractRequest):
    """
    Java class 'cern.rbac.common.impl.request.AccessCheckerRequest'
    
        Extends:
            cern.rbac.common.impl.request.AbstractRequest
    
      Constructors:
        * AccessCheckerRequest()
    
    """
    def __init__(self): ...
    def getCheckingPolicy(self) -> cern.rbac.common.authorization.CheckingPolicy: ...
    def getDevice(self) -> str: ...
    def getDeviceClass(self) -> str: ...
    def getOperation(self) -> cern.rbac.common.authorization.Operation: ...
    def getProperty(self) -> str: ...
    def getToken(self) -> cern.rbac.common.RbaToken: ...

class AccessCheckerRequestBuilder(RequestBuilder[AccessCheckerRequest]):
    """
    Java class 'cern.rbac.common.impl.request.AccessCheckerRequestBuilder'
    
        Extends:
            cern.rbac.common.impl.request.RequestBuilder
    
    """
    def buildRequest(self) -> AccessCheckerRequest: ...
    @staticmethod
    def newInstance() -> 'AccessCheckerRequestBuilder': ...
    def setCheckingPolicy(self, checkingPolicy: cern.rbac.common.authorization.CheckingPolicy) -> 'AccessCheckerRequestBuilder': ...
    def setDevice(self, string: str) -> 'AccessCheckerRequestBuilder': ...
    def setDeviceClass(self, string: str) -> 'AccessCheckerRequestBuilder': ...
    def setOperation(self, operation: cern.rbac.common.authorization.Operation) -> 'AccessCheckerRequestBuilder': ...
    def setProperty(self, string: str) -> 'AccessCheckerRequestBuilder': ...
    def setToken(self, rbaToken: cern.rbac.common.RbaToken) -> 'AccessCheckerRequestBuilder': ...

class AccessMapRequest(AbstractRequest):
    """
    Java class 'cern.rbac.common.impl.request.AccessMapRequest'
    
        Extends:
            cern.rbac.common.impl.request.AbstractRequest
    
      Constructors:
        * AccessMapRequest()
    
    """
    def __init__(self): ...
    def getCommand(self) -> AccessMapCommand: ...
    def getParameter(self) -> str: ...
    def getToken(self) -> cern.rbac.common.RbaToken: ...

class AccessMapRequestBuilder(RequestBuilder[AccessMapRequest]):
    """
    Java class 'cern.rbac.common.impl.request.AccessMapRequestBuilder'
    
        Extends:
            cern.rbac.common.impl.request.RequestBuilder
    
    """
    def buildRequest(self) -> AccessMapRequest: ...
    @staticmethod
    def newInstance() -> 'AccessMapRequestBuilder': ...
    def setCommand(self, accessMapCommand: AccessMapCommand) -> 'AccessMapRequestBuilder': ...
    def setParameter(self, string: str) -> 'AccessMapRequestBuilder': ...
    def setToken(self, rbaToken: cern.rbac.common.RbaToken) -> 'AccessMapRequestBuilder': ...

class AuthenticationRequest(AbstractRequest):
    """
    Java class 'cern.rbac.common.impl.request.AuthenticationRequest'
    
        Extends:
            cern.rbac.common.impl.request.AbstractRequest
    
      Constructors:
        * AuthenticationRequest()
    
    """
    def __init__(self): ...
    def getAccountName(self) -> str: ...
    def getApplication(self) -> str: ...
    def getKerberosTicket(self) -> str: ...
    def getLifetime(self) -> int: ...
    def getOauthAccessToken(self) -> str: ...
    def getOrigin(self) -> cern.rbac.common.RbaToken: ...
    def getPassword(self) -> str: ...
    def getRoles(self) -> typing.List[str]: ...
    def getSamlResponse(self) -> str: ...
    def getTokenType(self) -> cern.rbac.common.TokenType: ...
    def getUserName(self) -> str: ...

class AuthenticationRequestBuilder(RequestBuilder[AuthenticationRequest]):
    """
    Java class 'cern.rbac.common.impl.request.AuthenticationRequestBuilder'
    
        Extends:
            cern.rbac.common.impl.request.RequestBuilder
    
    """
    @staticmethod
    def newInstance() -> 'AuthenticationRequestBuilder': ...
    def setAccountName(self, string: str) -> 'AuthenticationRequestBuilder': ...
    def setApplication(self, string: str) -> 'AuthenticationRequestBuilder': ...
    def setKerberosTicket(self, byteArray: typing.List[int]) -> 'AuthenticationRequestBuilder': ...
    def setLifetime(self, int: int) -> 'AuthenticationRequestBuilder': ...
    def setOauthAccessToken(self, string: str) -> 'AuthenticationRequestBuilder': ...
    def setOrigin(self, rbaToken: cern.rbac.common.RbaToken) -> 'AuthenticationRequestBuilder': ...
    def setPassword(self, string: str) -> 'AuthenticationRequestBuilder': ...
    def setRoles(self, stringArray: typing.List[str]) -> 'AuthenticationRequestBuilder': ...
    def setSamlResponse(self, string: str) -> 'AuthenticationRequestBuilder': ...
    def setTokenType(self, tokenType: cern.rbac.common.TokenType) -> 'AuthenticationRequestBuilder': ...
    def setUserName(self, string: str) -> 'AuthenticationRequestBuilder': ...

class McsKeyRequest(AbstractRequest):
    """
    Java class 'cern.rbac.common.impl.request.McsKeyRequest'
    
        Extends:
            cern.rbac.common.impl.request.AbstractRequest
    
      Constructors:
        * McsKeyRequest()
    
    """
    def __init__(self): ...
    def getDevice(self) -> str: ...
    def getDeviceClass(self) -> str: ...
    def getMCSRole(self) -> str: ...
    def getProperty(self) -> str: ...

class McsKeyRequestBuilder(RequestBuilder[McsKeyRequest]):
    """
    Java class 'cern.rbac.common.impl.request.McsKeyRequestBuilder'
    
        Extends:
            cern.rbac.common.impl.request.RequestBuilder
    
    """
    def buildRequest(self) -> McsKeyRequest: ...
    @staticmethod
    def newInstance() -> 'McsKeyRequestBuilder': ...
    def setDevice(self, string: str) -> 'McsKeyRequestBuilder': ...
    def setDeviceClass(self, string: str) -> 'McsKeyRequestBuilder': ...
    def setMCSRole(self, string: str) -> 'McsKeyRequestBuilder': ...
    def setProperty(self, string: str) -> 'McsKeyRequestBuilder': ...

class McsRoleRequest(AbstractRequest):
    """
    Java class 'cern.rbac.common.impl.request.McsRoleRequest'
    
        Extends:
            cern.rbac.common.impl.request.AbstractRequest
    
      Constructors:
        * McsRoleRequest(java.util.Map)
        * McsRoleRequest(java.lang.String, java.lang.String, java.lang.String)
    
    """
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[RequestParameterType, typing.Any], typing.Mapping[RequestParameterType, typing.Any]]): ...
    def getDevice(self) -> str: ...
    def getDeviceClass(self) -> str: ...
    def getProperty(self) -> str: ...

class McsSignRequest(AbstractRequest):
    """
    Java class 'cern.rbac.common.impl.request.McsSignRequest'
    
        Extends:
            cern.rbac.common.impl.request.AbstractRequest
    
      Constructors:
        * McsSignRequest()
    
    """
    def __init__(self): ...
    def getSignBuffer(self) -> typing.List[int]: ...
    def getToken(self) -> cern.rbac.common.RbaToken: ...

class McsSignRequestBuilder(RequestBuilder[McsSignRequest]):
    """
    Java class 'cern.rbac.common.impl.request.McsSignRequestBuilder'
    
        Extends:
            cern.rbac.common.impl.request.RequestBuilder
    
    """
    def buildRequest(self) -> McsSignRequest: ...
    @staticmethod
    def newInstance() -> 'McsSignRequestBuilder': ...
    def setSignBuffer(self, byteArray: typing.List[int]) -> 'McsSignRequestBuilder': ...
    def setToken(self, rbaToken: cern.rbac.common.RbaToken) -> 'McsSignRequestBuilder': ...

class AccessCheckerRequestImpl(AccessCheckerRequest):
    """
    Java class 'cern.rbac.common.impl.request.AccessCheckerRequestImpl'
    
        Extends:
            cern.rbac.common.impl.request.AccessCheckerRequest
    
      Constructors:
        * AccessCheckerRequestImpl()
    
    """
    def __init__(self): ...

class AccessMapRequestImpl(AccessMapRequest):
    """
    Java class 'cern.rbac.common.impl.request.AccessMapRequestImpl'
    
        Extends:
            cern.rbac.common.impl.request.AccessMapRequest
    
      Constructors:
        * AccessMapRequestImpl()
    
    """
    def __init__(self): ...
    def setCommand(self, accessMapCommand: AccessMapCommand) -> None: ...
    def setParameter(self, string: str) -> None: ...
    def setToken(self, rbaToken: cern.rbac.common.RbaToken) -> None: ...

class McsKeyRequestImpl(McsKeyRequest):
    """
    Java class 'cern.rbac.common.impl.request.McsKeyRequestImpl'
    
        Extends:
            cern.rbac.common.impl.request.McsKeyRequest
    
      Constructors:
        * McsKeyRequestImpl()
    
    """
    def __init__(self): ...

class McsSignRequestImpl(McsSignRequest):
    """
    Java class 'cern.rbac.common.impl.request.McsSignRequestImpl'
    
        Extends:
            cern.rbac.common.impl.request.McsSignRequest
    
      Constructors:
        * McsSignRequestImpl()
    
    """
    def __init__(self): ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.rbac.common.impl.request")``.

    AbstractRequest: typing.Type[AbstractRequest]
    AccessCheckerRequest: typing.Type[AccessCheckerRequest]
    AccessCheckerRequestBuilder: typing.Type[AccessCheckerRequestBuilder]
    AccessCheckerRequestImpl: typing.Type[AccessCheckerRequestImpl]
    AccessMapCommand: typing.Type[AccessMapCommand]
    AccessMapRequest: typing.Type[AccessMapRequest]
    AccessMapRequestBuilder: typing.Type[AccessMapRequestBuilder]
    AccessMapRequestImpl: typing.Type[AccessMapRequestImpl]
    AuthenticationRequest: typing.Type[AuthenticationRequest]
    AuthenticationRequestBuilder: typing.Type[AuthenticationRequestBuilder]
    McsKeyRequest: typing.Type[McsKeyRequest]
    McsKeyRequestBuilder: typing.Type[McsKeyRequestBuilder]
    McsKeyRequestImpl: typing.Type[McsKeyRequestImpl]
    McsRoleRequest: typing.Type[McsRoleRequest]
    McsSignRequest: typing.Type[McsSignRequest]
    McsSignRequestBuilder: typing.Type[McsSignRequestBuilder]
    McsSignRequestImpl: typing.Type[McsSignRequestImpl]
    RequestBuilder: typing.Type[RequestBuilder]
    RequestParameterType: typing.Type[RequestParameterType]
    RequestType: typing.Type[RequestType]
    ServerErrorCode: typing.Type[ServerErrorCode]
