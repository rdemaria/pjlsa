import cern.rbac.common
import cern.rbac.common.impl.serialization.decode
import typing



class AbstractTokenDecoder(cern.rbac.common.impl.serialization.decode.TokenDecoder):
    """
    Java class 'cern.rbac.common.impl.decode.AbstractTokenDecoder'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.rbac.common.impl.serialization.decode.TokenDecoder
    
      Constructors:
        * AbstractTokenDecoder(cern.rbac.common.RbacConfiguration)
    
    """
    def __init__(self, rbacConfiguration: cern.rbac.common.RbacConfiguration): ...
    def decode(self, byteArray: typing.List[int]) -> cern.rbac.common.impl.serialization.decode.SerializedTokenFields: ...

class SerializedTokenFieldsImpl(cern.rbac.common.impl.serialization.decode.SerializedTokenFields):
    """
    Java class 'cern.rbac.common.impl.decode.SerializedTokenFieldsImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.rbac.common.impl.serialization.decode.SerializedTokenFiel
            ds
    
      Constructors:
        * SerializedTokenFieldsImpl()
    
    """
    def __init__(self): ...
    def getApplicationName(self) -> str: ...
    def getApplicationTimeout(self) -> int: ...
    def getAuthenticationTime(self) -> int: ...
    def getBody(self) -> typing.List[int]: ...
    def getExpirationTime(self) -> int: ...
    def getExtraFields(self) -> cern.rbac.common.ExtraFields: ...
    def getLocationAddress(self) -> typing.List[int]: ...
    def getLocationName(self) -> str: ...
    def getRoles(self) -> typing.List[cern.rbac.common.Role]: ...
    def getSerialId(self) -> int: ...
    def getSignature(self) -> typing.List[int]: ...
    def getUserAccountType(self) -> cern.rbac.common.UserPrincipal.AccountType: ...
    def getUserEmail(self) -> str: ...
    def getUserFullName(self) -> str: ...
    def getUserName(self) -> str: ...
    def isApplicationCritical(self) -> bool: ...
    def isLocationAuthReq(self) -> bool: ...
    def setApplicationCritical(self, boolean: bool) -> None: ...
    def setApplicationName(self, string: str) -> None: ...
    def setApplicationTimeout(self, int: int) -> None: ...
    def setAuthenticationTime(self, int: int) -> None: ...
    def setBody(self, byteArray: typing.List[int]) -> None: ...
    def setExpirationTime(self, int: int) -> None: ...
    def setExtraFields(self, extraFields: cern.rbac.common.ExtraFields) -> None: ...
    def setLocationAddress(self, byteArray: typing.List[int]) -> None: ...
    def setLocationAuthReq(self, boolean: bool) -> None: ...
    def setLocationName(self, string: str) -> None: ...
    def setRoles(self, roleArray: typing.List[cern.rbac.common.Role]) -> None: ...
    def setSerialId(self, int: int) -> None: ...
    def setSignature(self, byteArray: typing.List[int]) -> None: ...
    def setUserAccountType(self, accountType: cern.rbac.common.UserPrincipal.AccountType) -> None: ...
    def setUserEmail(self, string: str) -> None: ...
    def setUserFullName(self, string: str) -> None: ...
    def setUserName(self, string: str) -> None: ...

class TestTokenDecoderDecorator(AbstractTokenDecoder):
    """
    Java class 'cern.rbac.common.impl.decode.TestTokenDecoderDecorator'
    
        Extends:
            cern.rbac.common.impl.decode.AbstractTokenDecoder
    
      Constructors:
        * TestTokenDecoderDecorator(cern.rbac.common.impl.decode.AbstractTokenDecoder)
    
    """
    def __init__(self, abstractTokenDecoder: AbstractTokenDecoder): ...

class TextTokenDecoder(AbstractTokenDecoder):
    """
    Java class 'cern.rbac.common.impl.decode.TextTokenDecoder'
    
        Extends:
            cern.rbac.common.impl.decode.AbstractTokenDecoder
    
      Constructors:
        * TextTokenDecoder(cern.rbac.common.RbacConfiguration)
    
    """
    def __init__(self, rbacConfiguration: cern.rbac.common.RbacConfiguration): ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.rbac.common.impl.decode")``.

    AbstractTokenDecoder: typing.Type[AbstractTokenDecoder]
    SerializedTokenFieldsImpl: typing.Type[SerializedTokenFieldsImpl]
    TestTokenDecoderDecorator: typing.Type[TestTokenDecoderDecorator]
    TextTokenDecoder: typing.Type[TextTokenDecoder]
