from typing import Type as _py_Type
import cern.accsoft.commons.diag
import cern.accsoft.commons.util
import java.lang


class ThrowableMatcher(cern.accsoft.commons.util.Named):
    def findThrowableDescriptor(self, throwable: java.lang.Throwable, throwable2: java.lang.Throwable) -> cern.accsoft.commons.diag.ThrowableDescriptor: ...

class ThrowableMatcherHierarchyImpl(cern.accsoft.commons.diag.HierarchyImpl[ThrowableMatcher]):
    def __init__(self): ...

class AbstractThrowableMatcher(ThrowableMatcherHierarchyImpl, ThrowableMatcher):
    def __init__(self, string: str): ...
    @classmethod
    def extractExceptionMessage(cls, throwable: java.lang.Throwable, boolean: bool) -> str: ...
    def findThrowableDescriptor(self, throwable: java.lang.Throwable, throwable2: java.lang.Throwable) -> cern.accsoft.commons.diag.ThrowableDescriptor: ...
    def getName(self) -> str: ...
    def toString(self) -> str: ...

class ProxyThrowableMatcher(ThrowableMatcher):
    def __init__(self, class_: _py_Type[ThrowableMatcher], throwableMatcher: ThrowableMatcher): ...
    def findThrowableDescriptor(self, throwable: java.lang.Throwable, throwable2: java.lang.Throwable) -> cern.accsoft.commons.diag.ThrowableDescriptor: ...
    def getName(self) -> str: ...
    def toString(self) -> str: ...

class ThrowableMatcherDecoratorSupport(ThrowableMatcher):
    def __init__(self, throwableMatcher: ThrowableMatcher): ...
    def findThrowableDescriptor(self, throwable: java.lang.Throwable, throwable2: java.lang.Throwable) -> cern.accsoft.commons.diag.ThrowableDescriptor: ...
    def getName(self) -> str: ...
    def toString(self) -> str: ...

class ExceptionClassThrowableMatcher(AbstractThrowableMatcher):
    def __init__(self, string: str, string2: str, string3: str, string4: str, class_: _py_Type[java.lang.Throwable], string5: str): ...

class StringThrowableMatcher(AbstractThrowableMatcher):
    def __init__(self, string: str, string2: str, string3: str, string4: str, string5: str, string6: str): ...
