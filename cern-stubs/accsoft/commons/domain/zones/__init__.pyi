from typing import List as _py_List
from typing import ClassVar as _py_ClassVar
from typing import overload
import cern.accsoft.commons.domain
import cern.accsoft.commons.domain.particletransfers
import cern.accsoft.commons.util
import java.util


class AcceleratorZone(cern.accsoft.commons.util.Named):
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...

class AdAcceleratorZone(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['AdAcceleratorZone'], AcceleratorZone):
    AD: _py_ClassVar['AdAcceleratorZone'] = ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.CernAccelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    @classmethod
    def valueOf(cls, string: str) -> 'AdAcceleratorZone': ...
    @classmethod
    def values(cls) -> _py_List['AdAcceleratorZone']: ...

class AwakeAcceleratorZone(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['AwakeAcceleratorZone'], AcceleratorZone):
    AWAKE: _py_ClassVar['AwakeAcceleratorZone'] = ...
    TT43: _py_ClassVar['AwakeAcceleratorZone'] = ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.CernAccelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    @classmethod
    def valueOf(cls, string: str) -> 'AwakeAcceleratorZone': ...
    @classmethod
    def values(cls) -> _py_List['AwakeAcceleratorZone']: ...

class CtfAcceleratorZone(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['CtfAcceleratorZone'], AcceleratorZone):
    CTF: _py_ClassVar['CtfAcceleratorZone'] = ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.CernAccelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    @classmethod
    def valueOf(cls, string: str) -> 'CtfAcceleratorZone': ...
    @classmethod
    def values(cls) -> _py_List['CtfAcceleratorZone']: ...

class ElenaAcceleratorZone(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['ElenaAcceleratorZone'], AcceleratorZone):
    ELENA: _py_ClassVar['ElenaAcceleratorZone'] = ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.CernAccelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    @classmethod
    def valueOf(cls, string: str) -> 'ElenaAcceleratorZone': ...
    @classmethod
    def values(cls) -> _py_List['ElenaAcceleratorZone']: ...

class IsoldeAcceleratorZone(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['IsoldeAcceleratorZone'], AcceleratorZone):
    ISOLDE: _py_ClassVar['IsoldeAcceleratorZone'] = ...
    HIE: _py_ClassVar['IsoldeAcceleratorZone'] = ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.CernAccelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    @classmethod
    def valueOf(cls, string: str) -> 'IsoldeAcceleratorZone': ...
    @classmethod
    def values(cls) -> _py_List['IsoldeAcceleratorZone']: ...

class LeirAcceleratorZone(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['LeirAcceleratorZone'], AcceleratorZone):
    LEIR: _py_ClassVar['LeirAcceleratorZone'] = ...
    LINAC3: _py_ClassVar['LeirAcceleratorZone'] = ...
    ETL: _py_ClassVar['LeirAcceleratorZone'] = ...
    ITE: _py_ClassVar['LeirAcceleratorZone'] = ...
    ETP: _py_ClassVar['LeirAcceleratorZone'] = ...
    ITH: _py_ClassVar['LeirAcceleratorZone'] = ...
    ETL_INJ: _py_ClassVar['LeirAcceleratorZone'] = ...
    ETL_EJ: _py_ClassVar['LeirAcceleratorZone'] = ...
    EI: _py_ClassVar['LeirAcceleratorZone'] = ...
    EE: _py_ClassVar['LeirAcceleratorZone'] = ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.CernAccelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    @classmethod
    def valueOf(cls, string: str) -> 'LeirAcceleratorZone': ...
    @classmethod
    def values(cls) -> _py_List['LeirAcceleratorZone']: ...

class LhcAcceleratorZone(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['LhcAcceleratorZone'], AcceleratorZone):
    LHC: _py_ClassVar['LhcAcceleratorZone'] = ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.CernAccelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    @classmethod
    def valueOf(cls, string: str) -> 'LhcAcceleratorZone': ...
    @classmethod
    def values(cls) -> _py_List['LhcAcceleratorZone']: ...

class NorthAcceleratorZone(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['NorthAcceleratorZone'], AcceleratorZone):
    H2Z: _py_ClassVar['NorthAcceleratorZone'] = ...
    H2A: _py_ClassVar['NorthAcceleratorZone'] = ...
    H2B: _py_ClassVar['NorthAcceleratorZone'] = ...
    H4Z: _py_ClassVar['NorthAcceleratorZone'] = ...
    H4A: _py_ClassVar['NorthAcceleratorZone'] = ...
    H4B: _py_ClassVar['NorthAcceleratorZone'] = ...
    H4C: _py_ClassVar['NorthAcceleratorZone'] = ...
    H6Z: _py_ClassVar['NorthAcceleratorZone'] = ...
    H6A: _py_ClassVar['NorthAcceleratorZone'] = ...
    H6B: _py_ClassVar['NorthAcceleratorZone'] = ...
    H6C: _py_ClassVar['NorthAcceleratorZone'] = ...
    H8Z: _py_ClassVar['NorthAcceleratorZone'] = ...
    H8A: _py_ClassVar['NorthAcceleratorZone'] = ...
    H8B: _py_ClassVar['NorthAcceleratorZone'] = ...
    H8C: _py_ClassVar['NorthAcceleratorZone'] = ...
    K12A: _py_ClassVar['NorthAcceleratorZone'] = ...
    M2A: _py_ClassVar['NorthAcceleratorZone'] = ...
    T2A: _py_ClassVar['NorthAcceleratorZone'] = ...
    T4A: _py_ClassVar['NorthAcceleratorZone'] = ...
    T6A: _py_ClassVar['NorthAcceleratorZone'] = ...
    T10A: _py_ClassVar['NorthAcceleratorZone'] = ...
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    @classmethod
    def valueOf(cls, string: str) -> 'NorthAcceleratorZone': ...
    @classmethod
    def values(cls) -> _py_List['NorthAcceleratorZone']: ...

class PsAcceleratorZone(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['PsAcceleratorZone'], AcceleratorZone):
    PS: _py_ClassVar['PsAcceleratorZone'] = ...
    F16: _py_ClassVar['PsAcceleratorZone'] = ...
    F61: _py_ClassVar['PsAcceleratorZone'] = ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.CernAccelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    @classmethod
    def valueOf(cls, string: str) -> 'PsAcceleratorZone': ...
    @classmethod
    def values(cls) -> _py_List['PsAcceleratorZone']: ...

class PsbAcceleratorZone(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['PsbAcceleratorZone'], AcceleratorZone):
    LINAC4: _py_ClassVar['PsbAcceleratorZone'] = ...
    L4T: _py_ClassVar['PsbAcceleratorZone'] = ...
    LT: _py_ClassVar['PsbAcceleratorZone'] = ...
    LTB: _py_ClassVar['PsbAcceleratorZone'] = ...
    LBE: _py_ClassVar['PsbAcceleratorZone'] = ...
    BI: _py_ClassVar['PsbAcceleratorZone'] = ...
    PSB: _py_ClassVar['PsbAcceleratorZone'] = ...
    BE_BT: _py_ClassVar['PsbAcceleratorZone'] = ...
    BTP: _py_ClassVar['PsbAcceleratorZone'] = ...
    BTM: _py_ClassVar['PsbAcceleratorZone'] = ...
    BTY: _py_ClassVar['PsbAcceleratorZone'] = ...
    BTM_BTY: _py_ClassVar['PsbAcceleratorZone'] = ...
    BTY_GPS: _py_ClassVar['PsbAcceleratorZone'] = ...
    BTY_HRS: _py_ClassVar['PsbAcceleratorZone'] = ...
    BT_DUMP: _py_ClassVar['PsbAcceleratorZone'] = ...
    BTM_DUMP: _py_ClassVar['PsbAcceleratorZone'] = ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.CernAccelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    @classmethod
    def valueOf(cls, string: str) -> 'PsbAcceleratorZone': ...
    @classmethod
    def values(cls) -> _py_List['PsbAcceleratorZone']: ...

class SpsAcceleratorZone(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['SpsAcceleratorZone'], AcceleratorZone):
    SPS: _py_ClassVar['SpsAcceleratorZone'] = ...
    TT40: _py_ClassVar['SpsAcceleratorZone'] = ...
    TI8: _py_ClassVar['SpsAcceleratorZone'] = ...
    TT41: _py_ClassVar['SpsAcceleratorZone'] = ...
    TT10: _py_ClassVar['SpsAcceleratorZone'] = ...
    TT21: _py_ClassVar['SpsAcceleratorZone'] = ...
    TT22: _py_ClassVar['SpsAcceleratorZone'] = ...
    TT23: _py_ClassVar['SpsAcceleratorZone'] = ...
    TT24: _py_ClassVar['SpsAcceleratorZone'] = ...
    TT25: _py_ClassVar['SpsAcceleratorZone'] = ...
    TT60: _py_ClassVar['SpsAcceleratorZone'] = ...
    TI2: _py_ClassVar['SpsAcceleratorZone'] = ...
    NORTH_EXTRACTION: _py_ClassVar['SpsAcceleratorZone'] = ...
    WEST_EXTRACTION: _py_ClassVar['SpsAcceleratorZone'] = ...
    EAST_EXTRACTION: _py_ClassVar['SpsAcceleratorZone'] = ...
    TT2: _py_ClassVar['SpsAcceleratorZone'] = ...
    TT66: _py_ClassVar['SpsAcceleratorZone'] = ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.Accelerator: ...
    @overload
    def getAccelerator(self) -> cern.accsoft.commons.domain.CernAccelerator: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    @classmethod
    def valueOf(cls, string: str) -> 'SpsAcceleratorZone': ...
    @classmethod
    def values(cls) -> _py_List['SpsAcceleratorZone']: ...
