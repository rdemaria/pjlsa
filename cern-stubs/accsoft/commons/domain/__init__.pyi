import cern.accsoft.commons.domain.beamdestinations
import cern.accsoft.commons.domain.beams
import cern.accsoft.commons.domain.modes
import cern.accsoft.commons.domain.particletransfers
import cern.accsoft.commons.domain.zones
import cern.accsoft.commons.util
import java.util
import typing


class Accelerator(cern.accsoft.commons.util.Named):
    def getAcceleratorModes(self) -> java.util.Set[cern.accsoft.commons.domain.modes.AcceleratorMode]: ...
    def getAcceleratorZones(self) -> java.util.Set[cern.accsoft.commons.domain.zones.AcceleratorZone]: ...
    def getBeamDestinations(self) -> java.util.Set[cern.accsoft.commons.domain.beamdestinations.BeamDestination]: ...
    def getBeams(self) -> java.util.Set[cern.accsoft.commons.domain.beams.Beam]: ...
    def getCode(self) -> str: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    def getTimingDomain(self) -> 'TimingDomain': ...
    def isMultiplexed(self) -> bool: ...

class ParticleType(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['ParticleType']):
    ELECTRON: typing.ClassVar['ParticleType'] = ...
    PROTON: typing.ClassVar['ParticleType'] = ...
    PBAR: typing.ClassVar['ParticleType'] = ...
    MUON: typing.ClassVar['ParticleType'] = ...
    PION_PLUS: typing.ClassVar['ParticleType'] = ...
    PION_MINUS: typing.ClassVar['ParticleType'] = ...
    KAON: typing.ClassVar['ParticleType'] = ...
    PB54: typing.ClassVar['ParticleType'] = ...
    PB80: typing.ClassVar['ParticleType'] = ...
    PB81: typing.ClassVar['ParticleType'] = ...
    PB82: typing.ClassVar['ParticleType'] = ...
    XE39: typing.ClassVar['ParticleType'] = ...
    XE54: typing.ClassVar['ParticleType'] = ...
    AR11: typing.ClassVar['ParticleType'] = ...
    AR18: typing.ClassVar['ParticleType'] = ...
    HMINUS: typing.ClassVar['ParticleType'] = ...
    O4: typing.ClassVar['ParticleType'] = ...
    O8: typing.ClassVar['ParticleType'] = ...
    def getNumberOfCharges(self) -> int: ...
    def getRestMassEV(self) -> float: ...
    @staticmethod
    def valueOf(string: str) -> 'ParticleType': ...
    @staticmethod
    def values() -> typing.List['ParticleType']: ...

class TimingDomain(cern.accsoft.commons.util.Named):
    def isCycling(self) -> bool: ...
    def isMultiplexed(self) -> bool: ...

class CernAccelerator(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['CernAccelerator'], Accelerator):
    AD: typing.ClassVar['CernAccelerator'] = ...
    CTF: typing.ClassVar['CernAccelerator'] = ...
    ISOLDE: typing.ClassVar['CernAccelerator'] = ...
    LEIR: typing.ClassVar['CernAccelerator'] = ...
    LHC: typing.ClassVar['CernAccelerator'] = ...
    PS: typing.ClassVar['CernAccelerator'] = ...
    PSB: typing.ClassVar['CernAccelerator'] = ...
    SPS: typing.ClassVar['CernAccelerator'] = ...
    NORTH: typing.ClassVar['CernAccelerator'] = ...
    AWAKE: typing.ClassVar['CernAccelerator'] = ...
    ELENA: typing.ClassVar['CernAccelerator'] = ...
    LINAC3: typing.ClassVar['CernAccelerator'] = ...
    LINAC4: typing.ClassVar['CernAccelerator'] = ...
    REX: typing.ClassVar['CernAccelerator'] = ...
    @staticmethod
    def byCcsName(string: str) -> 'CernAccelerator': ...
    @staticmethod
    def byCode(string: str) -> 'CernAccelerator': ...
    @staticmethod
    def fromNameOrCode(string: str) -> 'CernAccelerator': ...
    def getAcceleratorModes(self) -> java.util.Set[cern.accsoft.commons.domain.modes.AcceleratorMode]: ...
    def getAcceleratorZones(self) -> java.util.Set[cern.accsoft.commons.domain.zones.AcceleratorZone]: ...
    def getBeamDestinations(self) -> java.util.Set[cern.accsoft.commons.domain.beamdestinations.BeamDestination]: ...
    def getBeams(self) -> java.util.Set[cern.accsoft.commons.domain.beams.Beam]: ...
    def getCcsName(self) -> str: ...
    def getCode(self) -> str: ...
    def getParticleTransfers(self) -> java.util.Set[cern.accsoft.commons.domain.particletransfers.ParticleTransfer]: ...
    def getTimingDomain(self) -> TimingDomain: ...
    def isMultiplexed(self) -> bool: ...
    @staticmethod
    def valueOf(string: str) -> 'CernAccelerator': ...
    @staticmethod
    def values() -> typing.List['CernAccelerator']: ...

class CernTimingDomain(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['CernTimingDomain'], TimingDomain):
    LHC: typing.ClassVar['CernTimingDomain'] = ...
    SPS: typing.ClassVar['CernTimingDomain'] = ...
    CPS: typing.ClassVar['CernTimingDomain'] = ...
    PSB: typing.ClassVar['CernTimingDomain'] = ...
    LEI: typing.ClassVar['CernTimingDomain'] = ...
    ADE: typing.ClassVar['CernTimingDomain'] = ...
    SCT: typing.ClassVar['CernTimingDomain'] = ...
    LNA: typing.ClassVar['CernTimingDomain'] = ...
    def isCycling(self) -> bool: ...
    @staticmethod
    def valueOf(string: str) -> 'CernTimingDomain': ...
    @staticmethod
    def values() -> typing.List['CernTimingDomain']: ...
