from typing import List as _py_List
from typing import TypeVar as _py_TypeVar
from typing import Type as _py_Type
from typing import ClassVar as _py_ClassVar
from typing import overload
import cern.accsoft.commons.util
import java.lang


class LhcExperiment(cern.accsoft.commons.util.AbstractImmutableNamedSerializable['LhcExperiment']):
    ATLAS: _py_ClassVar['LhcExperiment'] = ...
    ALICE: _py_ClassVar['LhcExperiment'] = ...
    CMS: _py_ClassVar['LhcExperiment'] = ...
    LHCB: _py_ClassVar['LhcExperiment'] = ...
    LHCF: _py_ClassVar['LhcExperiment'] = ...
    TOTEM: _py_ClassVar['LhcExperiment'] = ...
    @classmethod
    def valueOf(cls, string: str) -> 'LhcExperiment': ...
    @classmethod
    def values(cls) -> _py_List['LhcExperiment']: ...

class LhcInteractionPoint(java.lang.Enum['LhcInteractionPoint'], cern.accsoft.commons.util.Named):
    LHC_IP1: _py_ClassVar['LhcInteractionPoint'] = ...
    LHC_IP2: _py_ClassVar['LhcInteractionPoint'] = ...
    LHC_IP3: _py_ClassVar['LhcInteractionPoint'] = ...
    LHC_IP4: _py_ClassVar['LhcInteractionPoint'] = ...
    LHC_IP5: _py_ClassVar['LhcInteractionPoint'] = ...
    LHC_IP6: _py_ClassVar['LhcInteractionPoint'] = ...
    LHC_IP7: _py_ClassVar['LhcInteractionPoint'] = ...
    LHC_IP8: _py_ClassVar['LhcInteractionPoint'] = ...
    def getName(self) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> 'LhcInteractionPoint': ...
    _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @overload
    def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @classmethod
    def values(cls) -> _py_List['LhcInteractionPoint']: ...

class LhcSector(java.lang.Enum['LhcSector'], cern.accsoft.commons.util.Named):
    SECTOR_12: _py_ClassVar['LhcSector'] = ...
    SECTOR_23: _py_ClassVar['LhcSector'] = ...
    SECTOR_34: _py_ClassVar['LhcSector'] = ...
    SECTOR_45: _py_ClassVar['LhcSector'] = ...
    SECTOR_56: _py_ClassVar['LhcSector'] = ...
    SECTOR_67: _py_ClassVar['LhcSector'] = ...
    SECTOR_78: _py_ClassVar['LhcSector'] = ...
    SECTOR_81: _py_ClassVar['LhcSector'] = ...
    def getName(self) -> str: ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> 'LhcSector': ...
    _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @overload
    def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @classmethod
    def values(cls) -> _py_List['LhcSector']: ...
