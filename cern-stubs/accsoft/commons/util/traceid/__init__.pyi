import cern.accsoft.commons.util.executor
import java.nio.charset
import java.util
import typing


class TraceIdContextForwarder(cern.accsoft.commons.util.executor.ContextForwarder):
    def __init__(self): ...
    def clearContext(self) -> None: ...
    def setContext(self) -> None: ...

class TraceIds:
    TRACE_ID: typing.ClassVar[str] = ...
    TRACE_ID_CONTEXT_DEFINITION: typing.ClassVar[cern.accsoft.commons.util.executor.ContextDefinition] = ...
    TRACE_ID_EXECUTORS: typing.ClassVar[cern.accsoft.commons.util.executor.ContextAwareExecutors] = ...
    def __init__(self): ...
    @staticmethod
    def clearTraceId() -> None: ...
    @staticmethod
    def generateUniqueId() -> str: ...
    @staticmethod
    def getTraceId() -> str: ...
    @staticmethod
    def setNewTraceId() -> str: ...
    @staticmethod
    def setNewTraceIdIfMissing() -> str: ...
    @staticmethod
    def setTraceId(string: str) -> None: ...

class UUIDs:
    UTF_8: typing.ClassVar[java.nio.charset.Charset] = ...
    @staticmethod
    def endOf(long: int) -> java.util.UUID: ...
    @staticmethod
    def random() -> java.util.UUID: ...
    @staticmethod
    def startOf(long: int) -> java.util.UUID: ...
    @staticmethod
    def timeBased() -> java.util.UUID: ...
    @staticmethod
    def unixTimestamp(uUID: java.util.UUID) -> int: ...
