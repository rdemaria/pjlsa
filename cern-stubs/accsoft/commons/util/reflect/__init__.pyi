import java.lang.reflect
import java.util.concurrent
import typing


class MethodInvoker:
    def invoke(self, objectArray: typing.List[typing.Any], method: java.lang.reflect.Method, objectArray2: typing.List[typing.Any]) -> typing.List[typing.Any]: ...

class AbstractMethodInvoker(MethodInvoker):
    def __init__(self): ...
    def invoke(self, objectArray: typing.List[typing.Any], method: java.lang.reflect.Method, objectArray2: typing.List[typing.Any]) -> typing.List[typing.Any]: ...

class ExecutorServiceMethodInvoker(AbstractMethodInvoker):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, executorService: java.util.concurrent.ExecutorService, long: int): ...
    def getExecutorService(self) -> java.util.concurrent.ExecutorService: ...
    def getMethodInvocationTimeout(self) -> int: ...

class SameThreadMethodInvoker(AbstractMethodInvoker):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool): ...

class SwingThreadMethodInvoker(AbstractMethodInvoker):
    def __init__(self): ...
