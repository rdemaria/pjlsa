import cern
import cern.accsoft.commons.util.userinfo
import java.io
import java.util
import typing



class ProcUtils:
    """
    Java class 'cern.accsoft.commons.util.proc.ProcUtils'
    
        Extends:
            java.lang.Object
    
      Attributes:
        SYSPROP_APP_NAME (java.lang.String): final static field
        SYSPROP_APP_VERSION (java.lang.String): final static field
        UNKNOWN_PROCNAME (java.lang.String): final static field
        INVALID_PID (int): final static field
    
    """
    SYSPROP_APP_NAME: typing.ClassVar[str] = ...
    SYSPROP_APP_VERSION: typing.ClassVar[str] = ...
    UNKNOWN_PROCNAME: typing.ClassVar[str] = ...
    INVALID_PID: typing.ClassVar[int] = ...
    @staticmethod
    def createClientInformation(string: str) -> cern.accsoft.commons.util.userinfo.ClientInformation: ...
    @staticmethod
    def get() -> 'ProcUtils': ...
    @staticmethod
    def getApplicationName() -> str: ...
    @staticmethod
    def getClientInformation() -> cern.accsoft.commons.util.userinfo.ClientInformation: ...
    @staticmethod
    def getNoJmxInit() -> 'ProcUtils': ...
    @staticmethod
    def getOfficialApplicationId() -> str: ...
    @staticmethod
    def getPid() -> int: ...
    @typing.overload
    def getProcessInfo(self) -> 'ProcessInfo': ...
    @typing.overload
    def getProcessInfo(self, boolean: bool) -> 'ProcessInfo': ...
    class PUMBean:
        """
        Java class 'cern.accsoft.commons.util.proc.ProcUtils$PUMBean'
        
        """
        def geMainClassName(self) -> str: ...
        def getApplicationName(self) -> str: ...
        def getApplicationOsName(self) -> str: ...
        def getApplicationVersion(self) -> str: ...
        def getOfficialApplicationId(self) -> str: ...

class ProcUtilsBean:
    """
    Java class 'cern.accsoft.commons.util.proc.ProcUtilsBean'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ProcUtilsBean()
    
    """
    def __init__(self): ...
    def getAppName(self) -> str: ...
    def getAppVersion(self) -> str: ...
    @typing.overload
    def getProcessInfo(self) -> 'ProcessInfo': ...
    @typing.overload
    def getProcessInfo(self, boolean: bool) -> 'ProcessInfo': ...
    def setAppName(self, string: str) -> None: ...
    def setAppVersion(self, string: str) -> None: ...

class ProcessInfo(java.io.Serializable):
    """
    Java class 'cern.accsoft.commons.util.proc.ProcessInfo'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Constructors:
        * ProcessInfo()
    
    """
    def __init__(self): ...
    def getApplicationName(self) -> str: ...
    def getAsMap(self) -> java.util.Map[str, typing.Any]: ...
    def getHostName(self) -> str: ...
    def getJmxPort(self) -> int: ...
    def getJnlpUrl(self) -> str: ...
    def getMainClassName(self) -> str: ...
    def getOfficialApplicationId(self) -> str: ...
    def getOsProcessName(self) -> str: ...
    def getPid(self) -> int: ...
    def getSystemProperties(self) -> java.util.Properties: ...
    def getUserId(self) -> str: ...
    def getVersion(self) -> str: ...
    def getWindowTitle(self) -> str: ...
    def isJnlp(self) -> bool: ...
    def reComposeOfficialApplicationId(self) -> None: ...
    def restoreFromMap(self, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> None: ...
    def setApplicationName(self, string: str) -> None: ...
    def setUserId(self, string: str) -> None: ...
    def toString(self) -> str: ...

class JpsImpl(cern.accsoft.commons.util.proc.Jps):
    """
    Java class 'cern.accsoft.commons.util.proc.JpsImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.accsoft.commons.util.proc.Jps
    
    """
    def findMainClassName(self, int: int) -> str: ...
    @staticmethod
    def get() -> 'Jps': ...

class Jps: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.accsoft.commons.util.proc")``.

    Jps: typing.Type[Jps]
    JpsImpl: typing.Type[JpsImpl]
    ProcUtils: typing.Type[ProcUtils]
    ProcUtilsBean: typing.Type[ProcUtilsBean]
    ProcessInfo: typing.Type[ProcessInfo]
