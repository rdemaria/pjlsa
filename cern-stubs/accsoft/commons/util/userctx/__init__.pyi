import java.io
import java.util
import org.aopalliance.intercept
import org.springframework.remoting.support
import typing


class ContextAwareRemoteInvocationExecutor(org.springframework.remoting.support.RemoteInvocationExecutor):
    def __init__(self): ...
    def invoke(self, remoteInvocation: org.springframework.remoting.support.RemoteInvocation, object: typing.Any) -> typing.Any: ...

class ContextAwareRemoteInvocationFactory(org.springframework.remoting.support.RemoteInvocationFactory):
    def __init__(self): ...
    def createRemoteInvocation(self, methodInvocation: org.aopalliance.intercept.MethodInvocation) -> org.springframework.remoting.support.RemoteInvocation: ...
    def getInvocationContextProviders(self) -> java.util.List['InvocationContextProvider']: ...
    def getStaticInvocationContext(self) -> java.util.Map[str, java.io.Serializable]: ...
    def setInvocationContextProviders(self, list: java.util.List['InvocationContextProvider']) -> None: ...
    def setStaticInvocationContext(self, map: typing.Union[java.util.Map[str, java.io.Serializable], typing.Mapping[str, java.io.Serializable]]) -> None: ...

class InvocationContextProvider:
    def getAttributeMap(self) -> java.util.Map[str, java.io.Serializable]: ...

class RemoteInvocationConstants:
    CTX_CLIENT_ID: typing.ClassVar[str] = ...
    CTX_RBA_TOKEN: typing.ClassVar[str] = ...
    def __init__(self): ...

class ThreadLocalUserContext:
    def __init__(self): ...
    @staticmethod
    def clear() -> None: ...
    @staticmethod
    def get(string: str) -> java.io.Serializable: ...
    @staticmethod
    def put(string: str, serializable: java.io.Serializable) -> None: ...
    @staticmethod
    def remove(string: str) -> java.io.Serializable: ...
