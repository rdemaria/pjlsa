from typing import List as _py_List
from typing import TypeVar as _py_TypeVar
from typing import Type as _py_Type
from typing import ClassVar as _py_ClassVar
from typing import Generic as _py_Generic
from typing import overload
import java.lang
import java.util.concurrent


_BlockingResourcePool__T = _py_TypeVar('_BlockingResourcePool__T')  # <T>
class BlockingResourcePool(_py_Generic[_BlockingResourcePool__T]):
    def getResource(self, long: int, timeUnit: java.util.concurrent.TimeUnit) -> _BlockingResourcePool__T: ...
    def releaseResource(self, t: _BlockingResourcePool__T) -> bool: ...

class DynamicSemaphore:
    def __init__(self, int: int): ...
    def acquire(self) -> None: ...
    def release(self) -> None: ...
    def setPermits(self, int: int) -> None: ...
    def tryAcquire(self, long: int, timeUnit: java.util.concurrent.TimeUnit) -> bool: ...

class State(java.lang.Enum['State']):
    INITIALIZED: _py_ClassVar['State'] = ...
    INITIALIZING: _py_ClassVar['State'] = ...
    SHUT_DOWN: _py_ClassVar['State'] = ...
    SHUTTING_DOWN: _py_ClassVar['State'] = ...
    @classmethod
    @overload
    def valueOf(cls, string: str) -> 'State': ...
    _valueOf_1__T = _py_TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @overload
    def valueOf(cls, class_: _py_Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @classmethod
    def values(cls) -> _py_List['State']: ...
