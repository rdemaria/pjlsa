from typing import Any as _py_Any
from typing import List as _py_List
from typing import ClassVar as _py_ClassVar
from typing import overload
import cern.accsoft.commons.tracing.requests
import java.beans
import java.lang
import java.util


class CacheJMXControl(java.beans.PropertyChangeListener):
    def __init__(self): ...
    def propertyChange(self, propertyChangeEvent: java.beans.PropertyChangeEvent) -> None: ...

class ClientRequestInfoCollectorCacheImpl(java.util.HashMap[str, cern.accsoft.commons.tracing.requests.ClientRequestInfoCollector], cern.accsoft.commons.tracing.requests.ClientRequestInfoCollectorCache):
    NEW_COLLECTOR: _py_ClassVar[str] = ...
    EXPIRED_COLLECTOR: _py_ClassVar[str] = ...
    def __init__(self): ...
    def addListener(self, propertyChangeListener: java.beans.PropertyChangeListener) -> None: ...
    def getCollectorOrCreateIfNotExist(self, string: str, string2: str, string3: str) -> cern.accsoft.commons.tracing.requests.ClientRequestInfoCollector: ...
    def getCollectorsCount(self) -> int: ...
    def getTimeToLiveMBeansDays(self) -> int: ...
    @overload
    def remove(self, object: _py_Any, object2: _py_Any) -> bool: ...
    @overload
    def remove(self, object: _py_Any) -> _py_Any: ...
    @overload
    def remove(self, object: _py_Any) -> cern.accsoft.commons.tracing.requests.ClientRequestInfoCollector: ...
    def setTimeToLiveMBeansDays(self, int: int) -> None: ...

class ClientRequestInfoCollectorImplMXBean:
    def getApplicationName(self) -> str: ...
    def getClientRequestsToNotifyCount(self) -> int: ...
    def getClientRequestsToNotifyCountDetails(self) -> str: ...
    def getFirstRequestStartTime(self) -> java.util.Date: ...
    def getLastAddedRequest(self) -> cern.accsoft.commons.tracing.requests.ClientRequestInfoDataType: ...
    def getLastFailedRequest(self) -> cern.accsoft.commons.tracing.requests.ClientRequestInfoDataType: ...
    def getLastFinishedRequest(self) -> cern.accsoft.commons.tracing.requests.ClientRequestInfoDataType: ...
    def getLocationName(self) -> str: ...
    def getRunningRequests(self) -> _py_List[cern.accsoft.commons.tracing.requests.ClientRequestInfoDataType]: ...
    def getRunningRequestsCount(self) -> int: ...
    def getTotalExceptionsCount(self) -> int: ...
    def getTotalRequestsCount(self) -> int: ...
    def getTotalTimeSpentMillis(self) -> int: ...
    def getUserName(self) -> str: ...

class ClientRequestInfoFactory:
    def __init__(self): ...
    @classmethod
    @overload
    def newClientRequestInfo(cls, string: str, string2: str) -> cern.accsoft.commons.tracing.requests.ClientRequestInfo: ...
    @classmethod
    @overload
    def newClientRequestInfo(cls, string: str, string2: str, string3: str, string4: str) -> cern.accsoft.commons.tracing.requests.ClientRequestInfo: ...

class ClientRequestInfoImpl(cern.accsoft.commons.tracing.requests.ClientRequestInfo):
    def addNewArgument(self, string: str, string2: str) -> None: ...
    def getAction(self) -> str: ...
    def getClientApplication(self) -> str: ...
    def getClientLocation(self) -> str: ...
    def getClientUser(self) -> str: ...
    def getElapsedTimeMillis(self) -> int: ...
    def getExceptionClass(self) -> str: ...
    def getExceptionMessage(self) -> str: ...
    def getExceptionStackTrace(self) -> str: ...
    def getFinishTime(self) -> java.util.Date: ...
    def getFinishTimeMillis(self) -> int: ...
    def getNamedArguments(self) -> java.util.Map[str, str]: ...
    def getProperties(self) -> java.util.Map[str, str]: ...
    def getResultValue(self) -> str: ...
    def getStartTime(self) -> java.util.Date: ...
    def getStartTimeMillis(self) -> int: ...
    def getStatus(self) -> str: ...
    def hasError(self) -> bool: ...
    def setException(self, throwable: java.lang.Throwable) -> None: ...
    def setFinished(self) -> None: ...
    def setProperty(self, string: str, string2: str) -> None: ...
    def setResultValue(self, string: str) -> None: ...
    def toString(self) -> str: ...

class ClientRequestInfoCollectorImpl(cern.accsoft.commons.tracing.requests.ClientRequestInfoCollector, ClientRequestInfoCollectorImplMXBean):
    def __init__(self, string: str, string2: str, string3: str): ...
    def addRequest(self, clientRequestInfo: cern.accsoft.commons.tracing.requests.ClientRequestInfo) -> bool: ...
    def getApplicationName(self) -> str: ...
    def getClientRequestsToNotifyCount(self) -> int: ...
    def getClientRequestsToNotifyCountDetails(self) -> str: ...
    def getFirstRequestStartTime(self) -> java.util.Date: ...
    @overload
    def getLastAddedRequest(self) -> cern.accsoft.commons.tracing.requests.ClientRequestInfoDataType: ...
    @overload
    def getLastAddedRequest(self) -> cern.accsoft.commons.tracing.requests.ClientRequestInfo: ...
    @overload
    def getLastFailedRequest(self) -> cern.accsoft.commons.tracing.requests.ClientRequestInfo: ...
    @overload
    def getLastFailedRequest(self) -> cern.accsoft.commons.tracing.requests.ClientRequestInfoDataType: ...
    @overload
    def getLastFinishedRequest(self) -> cern.accsoft.commons.tracing.requests.ClientRequestInfo: ...
    @overload
    def getLastFinishedRequest(self) -> cern.accsoft.commons.tracing.requests.ClientRequestInfoDataType: ...
    def getLocationName(self) -> str: ...
    @overload
    def getRunningRequests(self) -> _py_List[cern.accsoft.commons.tracing.requests.ClientRequestInfoDataType]: ...
    @overload
    def getRunningRequests(self) -> _py_List[cern.accsoft.commons.tracing.requests.ClientRequestInfo]: ...
    def getRunningRequestsCount(self) -> int: ...
    def getTotalExceptionsCount(self) -> int: ...
    def getTotalRequestsCount(self) -> int: ...
    def getTotalTimeSpentMillis(self) -> int: ...
    def getUserName(self) -> str: ...
    def removeRequest(self, clientRequestInfo: cern.accsoft.commons.tracing.requests.ClientRequestInfo) -> bool: ...
