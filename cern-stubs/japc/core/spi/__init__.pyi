import cern.accsoft.commons.util.collections
import cern.japc.core
import cern.japc.core.spi.adaptation
import cern.japc.core.spi.arraycall
import cern.japc.core.spi.beans
import cern.japc.core.spi.cache
import cern.japc.core.spi.factory
import cern.japc.core.spi.group
import cern.japc.core.spi.jmx
import cern.japc.core.spi.provider
import cern.japc.core.spi.subscription
import cern.japc.core.spi.transaction
import cern.japc.core.spi.util
import cern.japc.core.spi.value
import cern.japc.core.transaction
import cern.japc.value
import cern.japc.value.spi.value.core
import java.io
import java.util
import typing



class AbstractImmutableParameter(cern.japc.core.ImmutableParameter, cern.japc.core.spi.cache.JapcCache):
    """
    Java class 'cern.japc.core.spi.AbstractImmutableParameter'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.ImmutableParameter,
            cern.japc.core.spi.cache.JapcCache
    
      Constructors:
        * AbstractImmutableParameter(java.lang.String)
    
    """
    def __init__(self, string: str): ...
    def clearAll(self) -> None: ...
    def createSubscription(self, selector: cern.japc.core.Selector, parameterValueListener: cern.japc.core.ParameterValueListener) -> cern.japc.core.SubscriptionHandle: ...
    def getDeviceName(self) -> str: ...
    def getName(self) -> str: ...
    def getParameterDescriptor(self) -> cern.japc.core.ParameterDescriptor: ...
    def getPropertyName(self) -> str: ...
    @typing.overload
    def getValue(self, selector: cern.japc.core.Selector) -> cern.japc.core.AcquiredParameterValue: ...
    @typing.overload
    def getValue(self, selector: cern.japc.core.Selector, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...
    def getValueDescriptor(self) -> cern.japc.value.ValueDescriptor: ...
    @typing.overload
    def setParameterDescriptor(self, parameterDescriptor: cern.japc.core.ParameterDescriptor, descriptorProvider: cern.japc.core.spi.provider.DescriptorProvider) -> None: ...
    @typing.overload
    def setParameterDescriptor(self, parameterDescriptor: cern.japc.core.ParameterDescriptor) -> None: ...
    @typing.overload
    def setValueDescriptor(self, valueDescriptor: cern.japc.value.ValueDescriptor) -> None: ...
    @typing.overload
    def setValueDescriptor(self, valueDescriptor: cern.japc.value.ValueDescriptor, descriptorProvider: cern.japc.core.spi.provider.DescriptorProvider) -> None: ...
    def toString(self) -> str: ...

class CumulativeWait:
    """
    Java class 'cern.japc.core.spi.CumulativeWait'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * CumulativeWait(long)
    
    """
    def __init__(self, long: int): ...
    @staticmethod
    def cleanThreadTimeToWait() -> None: ...
    def remainingTimeToWait(self) -> int: ...
    @staticmethod
    def setThreadTimeToWait(long: int) -> 'CumulativeWait': ...
    def updateTimeWaited(self, long: int) -> None: ...

class DeviceDescriptorImpl(cern.japc.core.DeviceDescriptor, java.io.Serializable):
    """
    Java class 'cern.japc.core.spi.DeviceDescriptorImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.DeviceDescriptor, java.io.Serializable
    
      Constructors:
        * DeviceDescriptorImpl(java.lang.String)
    
    """
    def __init__(self, string: str): ...
    def addExtraCharacteristic(self, string: str, string2: str) -> None: ...
    def getControlProperty(self) -> str: ...
    def getDescription(self) -> str: ...
    def getDeviceClassDescription(self) -> str: ...
    def getDeviceClassName(self) -> str: ...
    def getExtraCharacteristic(self, string: str) -> str: ...
    def getExtraCharacteristicNames(self) -> typing.List[str]: ...
    def getHostName(self) -> str: ...
    def getImplementation(self) -> int: ...
    def getLogicalLocation(self) -> str: ...
    def getName(self) -> str: ...
    def getResetProperty(self) -> str: ...
    def getStatusProperty(self) -> str: ...
    def getTgmName(self) -> str: ...
    def isCycleBound(self) -> bool: ...
    def isMultiplexed(self) -> bool: ...
    def setControlProperty(self, string: str) -> None: ...
    def setCycleBound(self, boolean: bool) -> None: ...
    def setDescription(self, string: str) -> None: ...
    def setDeviceClassDescription(self, string: str) -> None: ...
    def setDeviceClassName(self, string: str) -> None: ...
    def setHostName(self, string: str) -> None: ...
    def setImplementation(self, int: int) -> None: ...
    def setLogicalLocation(self, string: str) -> None: ...
    def setMultiplexed(self, boolean: bool) -> None: ...
    def setResetProperty(self, string: str) -> None: ...
    def setStatusProperty(self, string: str) -> None: ...
    def setTgmName(self, string: str) -> None: ...
    def toString(self) -> str: ...

class DeviceDescriptorSupport(cern.japc.core.DeviceDescriptor, java.io.Serializable):
    """
    Java class 'cern.japc.core.spi.DeviceDescriptorSupport'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.DeviceDescriptor, java.io.Serializable
    
      Constructors:
        * DeviceDescriptorSupport()
    
    """
    def __init__(self): ...
    def getControlProperty(self) -> str: ...
    def getDescription(self) -> str: ...
    def getDeviceClassDescription(self) -> str: ...
    def getDeviceClassName(self) -> str: ...
    def getExtraCharacteristic(self, string: str) -> str: ...
    def getExtraCharacteristicNames(self) -> typing.List[str]: ...
    def getHostName(self) -> str: ...
    def getImplementation(self) -> int: ...
    def getLogicalLocation(self) -> str: ...
    def getName(self) -> str: ...
    def getResetProperty(self) -> str: ...
    def getStatusProperty(self) -> str: ...
    def getTgmName(self) -> str: ...
    def isCycleBound(self) -> bool: ...
    def isMultiplexed(self) -> bool: ...

class FspvCollector(cern.accsoft.commons.util.collections.ValueCollector[cern.japc.core.FailSafeParameterValue], cern.japc.core.ParameterValueListener): ...

class FspvPeekingStrategy(cern.accsoft.commons.util.collections.ValuePeekingStrategy[cern.japc.core.FailSafeParameterValue]): ...

class IgnoreSetParameterDecorator(cern.japc.core.spi.transaction.TransactionalParameterDecorator):
    """
    Java class 'cern.japc.core.spi.IgnoreSetParameterDecorator'
    
        Extends:
            cern.japc.core.spi.transaction.TransactionalParameterDecorator
    
      Constructors:
        * IgnoreSetParameterDecorator(cern.japc.core.transaction.TransactionalParameter)
    
    """
    def __init__(self, transactionalParameter: cern.japc.core.transaction.TransactionalParameter): ...
    @typing.overload
    def setValue(self, selector: cern.japc.core.Selector, parameterValue: cern.japc.value.ParameterValue) -> None: ...
    @typing.overload
    def setValue(self, selector: cern.japc.core.Selector, parameterValue: cern.japc.value.ParameterValue, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...

class ImmutableParameterDecorator(cern.japc.core.ImmutableParameter):
    """
    Java class 'cern.japc.core.spi.ImmutableParameterDecorator'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.ImmutableParameter
    
      Constructors:
        * ImmutableParameterDecorator(cern.japc.core.ImmutableParameter)
    
    """
    def __init__(self, immutableParameter: cern.japc.core.ImmutableParameter): ...
    def createSubscription(self, selector: cern.japc.core.Selector, parameterValueListener: cern.japc.core.ParameterValueListener) -> cern.japc.core.SubscriptionHandle: ...
    def getDeviceName(self) -> str: ...
    def getName(self) -> str: ...
    def getParameterDescriptor(self) -> cern.japc.core.ParameterDescriptor: ...
    def getPropertyName(self) -> str: ...
    @typing.overload
    def getValue(self, selector: cern.japc.core.Selector) -> cern.japc.core.AcquiredParameterValue: ...
    @typing.overload
    def getValue(self, selector: cern.japc.core.Selector, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...
    def getValueDescriptor(self) -> cern.japc.value.ValueDescriptor: ...
    def toString(self) -> str: ...

class ParameterDescriptorImpl(cern.japc.value.spi.value.core.TypedObject, cern.japc.core.ParameterDescriptor):
    """
    Java class 'cern.japc.core.spi.ParameterDescriptorImpl'
    
        Extends:
            cern.japc.value.spi.value.core.TypedObject
    
        Interfaces:
            cern.japc.core.ParameterDescriptor
    
      Constructors:
        * ParameterDescriptorImpl(cern.japc.value.Type, java.lang.String)
    
    """
    def __init__(self, type: cern.japc.value.Type, string: str): ...
    def addExtraCharacteristic(self, string: str, string2: str) -> None: ...
    def getDescription(self) -> str: ...
    def getExtraCharacteristic(self, string: str) -> str: ...
    def getExtraCharacteristicNames(self) -> typing.List[str]: ...
    def getParameterName(self) -> str: ...
    def isCycleBound(self) -> bool: ...
    def isFilterable(self) -> bool: ...
    def isMonitorable(self) -> bool: ...
    def isMultiplexed(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isTransactional(self) -> bool: ...
    def isValueMutable(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def setCycleBound(self, boolean: bool) -> None: ...
    def setDescription(self, string: str) -> None: ...
    def setFilterable(self, boolean: bool) -> None: ...
    def setMonitorable(self, boolean: bool) -> None: ...
    def setMultiplexed(self, boolean: bool) -> None: ...
    def setReadable(self, boolean: bool) -> None: ...
    def setTransactional(self, boolean: bool) -> None: ...
    def setValueMutable(self, boolean: bool) -> None: ...
    def setWritable(self, boolean: bool) -> None: ...
    def toString(self) -> str: ...

class ParameterDescriptorSupport(cern.japc.core.ParameterDescriptor, java.io.Serializable):
    """
    Java class 'cern.japc.core.spi.ParameterDescriptorSupport'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.ParameterDescriptor, java.io.Serializable
    
      Constructors:
        * ParameterDescriptorSupport()
    
    """
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getExtraCharacteristic(self, string: str) -> str: ...
    def getExtraCharacteristicNames(self) -> typing.List[str]: ...
    def getType(self) -> cern.japc.value.Type: ...
    def isCycleBound(self) -> bool: ...
    def isFilterable(self) -> bool: ...
    def isMonitorable(self) -> bool: ...
    def isMultiplexed(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isTransactional(self) -> bool: ...
    def isValueMutable(self) -> bool: ...
    def isWritable(self) -> bool: ...

class ParameterUrl:
    """
    Java class 'cern.japc.core.spi.ParameterUrl'
    
      Attributes:
        PROTOCOL_SEPARATOR (java.lang.String): final static field
        SERVICE_SEPARATOR (java.lang.String): final static field
        DEVICE_PROPERTY_NAME_SEPARATOR (char): final static field
        PROPERTY_NAME_FIELD_SEPARATOR (char): final static field
    
    """
    PROTOCOL_SEPARATOR: typing.ClassVar[str] = ...
    SERVICE_SEPARATOR: typing.ClassVar[str] = ...
    DEVICE_PROPERTY_NAME_SEPARATOR: typing.ClassVar[str] = ...
    PROPERTY_NAME_FIELD_SEPARATOR: typing.ClassVar[str] = ...
    def cloneWithoutField(self) -> 'ParameterUrl': ...
    def getDeviceAndProperty(self) -> str: ...
    def getDeviceName(self) -> str: ...
    def getFieldName(self) -> str: ...
    def getParameterName(self) -> str: ...
    def getPropertyName(self) -> str: ...
    def getProtocolName(self) -> str: ...
    def getServiceName(self) -> str: ...
    def hasFieldName(self) -> bool: ...
    def isDimParameter(self) -> bool: ...
    def isFull(self) -> bool: ...

class SelectorImpl(cern.japc.core.Selector, java.io.Serializable):
    """
    Java class 'cern.japc.core.spi.SelectorImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.Selector, java.io.Serializable
    
      Constructors:
        * SelectorImpl(cern.japc.core.Selector)
        * SelectorImpl(java.lang.String, cern.japc.value.ParameterValue)
        * SelectorImpl(java.lang.String)
    
    """
    @typing.overload
    def __init__(self, selector: cern.japc.core.Selector): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, parameterValue: cern.japc.value.ParameterValue): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDataFilter(self) -> cern.japc.value.ParameterValue: ...
    def getId(self) -> str: ...
    def getPeriod(self) -> int: ...
    def hashCode(self) -> int: ...
    def isPeriodic(self) -> bool: ...
    def toString(self) -> str: ...

class SubscriptionConfigurationImpl(cern.japc.core.SubscriptionConfigurator):
    """
    Java class 'cern.japc.core.spi.SubscriptionConfigurationImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.SubscriptionConfigurator
    
    """
    def getDataDeliveryMode(self) -> int: ...
    def getSelector(self) -> cern.japc.core.Selector: ...
    def setDataDeliveryMode(self, int: int) -> None: ...

class SubscriptionHandleDecorator(cern.japc.core.SubscriptionHandle):
    """
    Java class 'cern.japc.core.spi.SubscriptionHandleDecorator'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.SubscriptionHandle
    
      Constructors:
        * SubscriptionHandleDecorator(cern.japc.core.SubscriptionHandle)
    
    """
    def __init__(self, subscriptionHandle: cern.japc.core.SubscriptionHandle): ...
    def getDataDeliveryMode(self) -> int: ...
    def getListener(self) -> cern.japc.core.ParameterValueListener: ...
    def getParameter(self) -> cern.japc.core.ImmutableParameter: ...
    def getSelector(self) -> cern.japc.core.Selector: ...
    def isMonitoring(self) -> bool: ...
    def peekValue(self, long: int) -> cern.japc.core.AcquiredParameterValue: ...
    def setDataDeliveryMode(self, int: int) -> None: ...
    def startMonitoring(self) -> None: ...
    def stopMonitoring(self) -> None: ...

class SubscriptionSource:
    """
    Java class 'cern.japc.core.spi.SubscriptionSource'
    
    """
    def getSelector(self) -> cern.japc.core.Selector: ...
    def initializeSubscriptionSource(self, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...
    def startSubscription(self) -> None: ...
    def stopSubscription(self) -> None: ...

class SubscriptionStrategy:
    """
    Java class 'cern.japc.core.spi.SubscriptionStrategy'
    
    """
    def exceptionOccured(self, string: str, string2: str, parameterException: cern.japc.core.ParameterException) -> None: ...
    def peekValue(self, long: int) -> cern.japc.core.AcquiredParameterValue: ...
    def valueReceived(self, string: str, acquiredParameterValue: cern.japc.core.AcquiredParameterValue) -> None: ...

class UpdatableAcquiredParameterValue:
    """
    Java class 'cern.japc.core.spi.UpdatableAcquiredParameterValue'
    
    """
    def addAdditionalError(self, string: str) -> None: ...
    def setHeader(self, valueHeader: cern.japc.core.ValueHeader) -> None: ...
    def setStatus(self, valueStatus: cern.japc.value.ValueStatus) -> None: ...

class ValueHeaderImpl(cern.japc.core.ValueHeader, java.io.Serializable):
    """
    Java class 'cern.japc.core.spi.ValueHeaderImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.ValueHeader, java.io.Serializable
    
      Constructors:
        * ValueHeaderImpl(long, cern.japc.core.Selector)
        * ValueHeaderImpl(long, long, cern.japc.core.Selector)
    
    """
    @typing.overload
    def __init__(self, long: int, selector: cern.japc.core.Selector): ...
    @typing.overload
    def __init__(self, long: int, long2: int, selector: cern.japc.core.Selector): ...
    def getAcqStamp(self) -> int: ...
    def getAcqStampMillis(self) -> int: ...
    def getCycleStamp(self) -> int: ...
    def getCycleStampMillis(self) -> int: ...
    def getSelector(self) -> cern.japc.core.Selector: ...
    def getSetStamp(self) -> int: ...
    def getSetStampMillis(self) -> int: ...
    def isFirstUpdate(self) -> bool: ...
    def isImmediateUpdate(self) -> bool: ...
    def setAcqStamp(self, long: int) -> None: ...
    def setAcqStampMillis(self, long: int) -> None: ...
    def setCycleStamp(self, long: int) -> None: ...
    def setCycleStampMillis(self, long: int) -> None: ...
    def setFirstUpdate(self, boolean: bool) -> None: ...
    def setImmediateUpdate(self, boolean: bool) -> None: ...
    def setSelector(self, selector: cern.japc.core.Selector) -> None: ...
    def setSetStamp(self, long: int) -> None: ...
    def setSetStampMillis(self, long: int) -> None: ...
    def toString(self) -> str: ...

class AbstractParameter(AbstractImmutableParameter, cern.japc.core.Parameter):
    """
    Java class 'cern.japc.core.spi.AbstractParameter'
    
        Extends:
            cern.japc.core.spi.AbstractImmutableParameter
    
        Interfaces:
            cern.japc.core.Parameter
    
      Constructors:
        * AbstractParameter(java.lang.String)
    
    """
    def __init__(self, string: str): ...
    @typing.overload
    def setValue(self, selector: cern.japc.core.Selector, parameterValue: cern.japc.value.ParameterValue) -> None: ...
    @typing.overload
    def setValue(self, selector: cern.japc.core.Selector, parameterValue: cern.japc.value.ParameterValue, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...

class AbstractWeakSubscriptionSource(SubscriptionSource, cern.japc.core.ParameterValueListener):
    """
    Java class 'cern.japc.core.spi.AbstractWeakSubscriptionSource'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.spi.SubscriptionSource,
            cern.japc.core.ParameterValueListener
    
      Constructors:
        * AbstractWeakSubscriptionSource(java.lang.String, cern.japc.core.Selector)
    
    """
    def __init__(self, string: str, selector: cern.japc.core.Selector): ...
    def exceptionOccured(self, string: str, string2: str, parameterException: cern.japc.core.ParameterException) -> None: ...
    def getSelector(self) -> cern.japc.core.Selector: ...
    def initializeSubscriptionSource(self, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...
    def startSubscription(self) -> None: ...
    def stopSubscription(self) -> None: ...
    def valueReceived(self, string: str, acquiredParameterValue: cern.japc.core.AcquiredParameterValue) -> None: ...

class AcquiredParameterValueImpl(cern.japc.core.AcquiredParameterValue, UpdatableAcquiredParameterValue, java.io.Serializable):
    """
    Java class 'cern.japc.core.spi.AcquiredParameterValueImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.AcquiredParameterValue,
            cern.japc.core.spi.UpdatableAcquiredParameterValue,
            java.io.Serializable
    
      Constructors:
        * AcquiredParameterValueImpl(java.lang.String, cern.japc.value.ParameterValue, long, cern.japc.core.Selector)
        * AcquiredParameterValueImpl(java.lang.String, cern.japc.value.ParameterValue, long, long, cern.japc.core.Selector)
        * AcquiredParameterValueImpl(java.lang.String, cern.japc.value.ParameterValue)
        * AcquiredParameterValueImpl(java.lang.String, cern.japc.core.ValueHeader, cern.japc.value.ParameterValue)
        * AcquiredParameterValueImpl(cern.japc.core.AcquiredParameterValue)
    
    """
    @typing.overload
    def __init__(self, acquiredParameterValue: cern.japc.core.AcquiredParameterValue): ...
    @typing.overload
    def __init__(self, string: str, valueHeader: cern.japc.core.ValueHeader, parameterValue: cern.japc.value.ParameterValue): ...
    @typing.overload
    def __init__(self, string: str, parameterValue: cern.japc.value.ParameterValue): ...
    @typing.overload
    def __init__(self, string: str, parameterValue: cern.japc.value.ParameterValue, long: int, selector: cern.japc.core.Selector): ...
    @typing.overload
    def __init__(self, string: str, parameterValue: cern.japc.value.ParameterValue, long: int, long2: int, selector: cern.japc.core.Selector): ...
    def addAdditionalError(self, string: str) -> None: ...
    def getAdditionalErrors(self) -> typing.List[str]: ...
    def getDescriptor(self) -> cern.japc.value.ValueDescriptor: ...
    def getHeader(self) -> cern.japc.core.ValueHeader: ...
    def getParameterName(self) -> str: ...
    def getStatus(self) -> cern.japc.value.ValueStatus: ...
    def getValue(self) -> cern.japc.value.ParameterValue: ...
    def setDescriptor(self, valueDescriptor: cern.japc.value.ValueDescriptor) -> None: ...
    def setHeader(self, valueHeader: cern.japc.core.ValueHeader) -> None: ...
    def setParameterName(self, string: str) -> None: ...
    def setStatus(self, valueStatus: cern.japc.value.ValueStatus) -> None: ...
    def setValue(self, parameterValue: cern.japc.value.ParameterValue) -> None: ...
    def toString(self) -> str: ...

class CycleStampValuePeekingStrategy(FspvPeekingStrategy):
    """
    Java class 'cern.japc.core.spi.CycleStampValuePeekingStrategy'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.spi.FspvPeekingStrategy
    
      Constructors:
        * CycleStampValuePeekingStrategy(long)
    
    """
    def __init__(self, long: int): ...
    def getCycleStamp(self) -> int: ...
    def peek(self, circularBuffer: cern.accsoft.commons.util.collections.CircularBuffer[cern.japc.core.FailSafeParameterValue], boolean: bool) -> java.util.Collection[cern.japc.core.FailSafeParameterValue]: ...

class FirstValueInWindowPeekingStrategy(FspvPeekingStrategy):
    """
    Java class 'cern.japc.core.spi.FirstValueInWindowPeekingStrategy'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.spi.FspvPeekingStrategy
    
      Constructors:
        * FirstValueInWindowPeekingStrategy(long, long)
    
    """
    def __init__(self, long: int, long2: int): ...
    def peek(self, circularBuffer: cern.accsoft.commons.util.collections.CircularBuffer[cern.japc.core.FailSafeParameterValue], boolean: bool) -> java.util.Collection[cern.japc.core.FailSafeParameterValue]: ...

class FspvCollectorImpl(cern.accsoft.commons.util.collections.AbstractValueCollector[cern.japc.core.FailSafeParameterValue], FspvCollector):
    """
    Java class 'cern.japc.core.spi.FspvCollectorImpl'
    
        Extends:
            cern.accsoft.commons.util.collections.AbstractValueCollector
    
        Interfaces:
            cern.japc.core.spi.FspvCollector
    
      Constructors:
        * FspvCollectorImpl(cern.japc.core.Parameter, cern.japc.core.Selector, int)
        * FspvCollectorImpl(cern.japc.core.Parameter, cern.japc.core.Selector)
        * FspvCollectorImpl(int)
        * FspvCollectorImpl()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, parameter: cern.japc.core.Parameter, selector: cern.japc.core.Selector): ...
    @typing.overload
    def __init__(self, parameter: cern.japc.core.Parameter, selector: cern.japc.core.Selector, int: int): ...
    @typing.overload
    def __init__(self, int: int): ...
    def exceptionOccured(self, string: str, string2: str, parameterException: cern.japc.core.ParameterException) -> None: ...
    def startCollection(self) -> None: ...
    def stopCollection(self) -> None: ...
    def valueReceived(self, string: str, acquiredParameterValue: cern.japc.core.AcquiredParameterValue) -> None: ...

class LastBeforeTimestampStrategy(FspvPeekingStrategy):
    """
    Java class 'cern.japc.core.spi.LastBeforeTimestampStrategy'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.spi.FspvPeekingStrategy
    
      Constructors:
        * LastBeforeTimestampStrategy(long)
    
    """
    def __init__(self, long: int): ...
    def peek(self, circularBuffer: cern.accsoft.commons.util.collections.CircularBuffer[cern.japc.core.FailSafeParameterValue], boolean: bool) -> java.util.Collection[cern.japc.core.FailSafeParameterValue]: ...

class MapParameterDescriptorImpl(ParameterDescriptorImpl, cern.japc.core.MapParameterDescriptor):
    """
    Java class 'cern.japc.core.spi.MapParameterDescriptorImpl'
    
        Extends:
            cern.japc.core.spi.ParameterDescriptorImpl
    
        Interfaces:
            cern.japc.core.MapParameterDescriptor
    
      Constructors:
        * MapParameterDescriptorImpl(java.lang.String)
        * MapParameterDescriptorImpl(java.lang.String, java.util.Map)
    
    """
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, map: typing.Union[java.util.Map[str, cern.japc.core.SimpleParameterDescriptor], typing.Mapping[str, cern.japc.core.SimpleParameterDescriptor]]): ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, string: str) -> cern.japc.core.SimpleParameterDescriptor: ...
    def getNames(self) -> typing.List[str]: ...
    def hashCode(self) -> int: ...
    def put(self, string: str, simpleParameterDescriptor: cern.japc.core.SimpleParameterDescriptor) -> None: ...
    def remove(self, string: str) -> cern.japc.core.SimpleParameterDescriptor: ...
    def size(self) -> int: ...
    def toString(self) -> str: ...

class ParameterDecorator(ImmutableParameterDecorator, cern.japc.core.Parameter):
    """
    Java class 'cern.japc.core.spi.ParameterDecorator'
    
        Extends:
            cern.japc.core.spi.ImmutableParameterDecorator
    
        Interfaces:
            cern.japc.core.Parameter
    
      Constructors:
        * ParameterDecorator(cern.japc.core.Parameter)
    
    """
    def __init__(self, parameter: cern.japc.core.Parameter): ...
    @typing.overload
    def setValue(self, selector: cern.japc.core.Selector, parameterValue: cern.japc.value.ParameterValue) -> None: ...
    @typing.overload
    def setValue(self, selector: cern.japc.core.Selector, parameterValue: cern.japc.value.ParameterValue, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...

class ParameterUrlImpl(ParameterUrl, java.io.Serializable):
    """
    Java class 'cern.japc.core.spi.ParameterUrlImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.spi.ParameterUrl, java.io.Serializable
    
      Constructors:
        * ParameterUrlImpl(java.lang.String)
        * ParameterUrlImpl(java.lang.String, java.lang.String)
        * ParameterUrlImpl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
        * ParameterUrlImpl(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
        * ParameterUrlImpl(java.lang.String, java.lang.String, java.lang.String)
    
    """
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str, string4: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str, string4: str, string5: str): ...
    def cloneWithoutField(self) -> ParameterUrl: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDeviceAndProperty(self) -> str: ...
    def getDeviceName(self) -> str: ...
    def getFieldName(self) -> str: ...
    def getParameterName(self) -> str: ...
    def getPropertyName(self) -> str: ...
    def getProtocolName(self) -> str: ...
    def getServiceName(self) -> str: ...
    def hasFieldName(self) -> bool: ...
    def hashCode(self) -> int: ...
    def isDimParameter(self) -> bool: ...
    def isFull(self) -> bool: ...
    def toString(self) -> str: ...

class PullSubscriptionStrategy(SubscriptionStrategy):
    """
    Java class 'cern.japc.core.spi.PullSubscriptionStrategy'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.spi.SubscriptionStrategy
    
      Constructors:
        * PullSubscriptionStrategy(cern.japc.core.ParameterValueListener, java.lang.String)
    
    """
    def __init__(self, parameterValueListener: cern.japc.core.ParameterValueListener, string: str): ...
    def exceptionOccured(self, string: str, string2: str, parameterException: cern.japc.core.ParameterException) -> None: ...
    def peekValue(self, long: int) -> cern.japc.core.AcquiredParameterValue: ...
    def valueReceived(self, string: str, acquiredParameterValue: cern.japc.core.AcquiredParameterValue) -> None: ...

class PushSubscriptionStrategy(SubscriptionStrategy):
    """
    Java class 'cern.japc.core.spi.PushSubscriptionStrategy'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            cern.japc.core.spi.SubscriptionStrategy
    
      Constructors:
        * PushSubscriptionStrategy(cern.japc.core.ParameterValueListener)
    
    """
    def __init__(self, parameterValueListener: cern.japc.core.ParameterValueListener): ...
    def exceptionOccured(self, string: str, string2: str, parameterException: cern.japc.core.ParameterException) -> None: ...
    def peekValue(self, long: int) -> cern.japc.core.AcquiredParameterValue: ...
    def valueReceived(self, string: str, acquiredParameterValue: cern.japc.core.AcquiredParameterValue) -> None: ...

class SimpleParameterDescriptorImpl(ParameterDescriptorImpl, cern.japc.core.SimpleParameterDescriptor):
    """
    Java class 'cern.japc.core.spi.SimpleParameterDescriptorImpl'
    
        Extends:
            cern.japc.core.spi.ParameterDescriptorImpl
    
        Interfaces:
            cern.japc.core.SimpleParameterDescriptor
    
      Constructors:
        * SimpleParameterDescriptorImpl(java.lang.String)
    
    """
    def __init__(self, string: str): ...
    def get(self, string: str) -> cern.japc.core.SimpleParameterDescriptor: ...
    def getNames(self) -> typing.List[str]: ...
    def size(self) -> int: ...

class SubscriptionHandleImpl(SubscriptionConfigurationImpl, cern.japc.core.SubscriptionHandle, cern.japc.core.ParameterValueListener):
    """
    Java class 'cern.japc.core.spi.SubscriptionHandleImpl'
    
        Extends:
            cern.japc.core.spi.SubscriptionConfigurationImpl
    
        Interfaces:
            cern.japc.core.SubscriptionHandle,
            cern.japc.core.ParameterValueListener
    
      Constructors:
        * SubscriptionHandleImpl(cern.japc.core.ImmutableParameter, cern.japc.core.spi.SubscriptionSource, cern.japc.core.ParameterValueListener)
        * SubscriptionHandleImpl(cern.japc.core.ImmutableParameter, cern.japc.core.spi.SubscriptionSource, cern.japc.core.ParameterValueListener, int)
    
    """
    @typing.overload
    def __init__(self, immutableParameter: cern.japc.core.ImmutableParameter, subscriptionSource: SubscriptionSource, parameterValueListener: cern.japc.core.ParameterValueListener): ...
    @typing.overload
    def __init__(self, immutableParameter: cern.japc.core.ImmutableParameter, subscriptionSource: SubscriptionSource, parameterValueListener: cern.japc.core.ParameterValueListener, int: int): ...
    def exceptionOccured(self, string: str, string2: str, parameterException: cern.japc.core.ParameterException) -> None: ...
    def getListener(self) -> cern.japc.core.ParameterValueListener: ...
    def getParameter(self) -> cern.japc.core.ImmutableParameter: ...
    def isMonitoring(self) -> bool: ...
    def peekValue(self, long: int) -> cern.japc.core.AcquiredParameterValue: ...
    def startMonitoring(self) -> None: ...
    def stopMonitoring(self) -> None: ...
    def valueReceived(self, string: str, acquiredParameterValue: cern.japc.core.AcquiredParameterValue) -> None: ...

class FailSafeParameterValueImpl(AcquiredParameterValueImpl, cern.japc.core.FailSafeParameterValue):
    """
    Java class 'cern.japc.core.spi.FailSafeParameterValueImpl'
    
        Extends:
            cern.japc.core.spi.AcquiredParameterValueImpl
    
        Interfaces:
            cern.japc.core.FailSafeParameterValue
    
      Constructors:
        * FailSafeParameterValueImpl(java.lang.String, cern.japc.core.ParameterException)
        * FailSafeParameterValueImpl(java.lang.String, cern.japc.core.ValueHeader, cern.japc.value.ParameterValue)
        * FailSafeParameterValueImpl(cern.japc.core.AcquiredParameterValue)
    
    """
    @typing.overload
    def __init__(self, acquiredParameterValue: cern.japc.core.AcquiredParameterValue): ...
    @typing.overload
    def __init__(self, string: str, parameterException: cern.japc.core.ParameterException): ...
    @typing.overload
    def __init__(self, string: str, valueHeader: cern.japc.core.ValueHeader, parameterValue: cern.japc.value.ParameterValue): ...
    def exception(self) -> cern.japc.core.ParameterException: ...
    def getException(self) -> cern.japc.core.ParameterException: ...
    def getString(self) -> str: ...
    def isValue(self) -> bool: ...
    def setValue(self, parameterValue: cern.japc.value.ParameterValue) -> None: ...
    def toString(self) -> str: ...
    def value(self) -> cern.japc.core.AcquiredParameterValue: ...

class PullingSubscriptionSource(AbstractWeakSubscriptionSource):
    """
    Java class 'cern.japc.core.spi.PullingSubscriptionSource'
    
        Extends:
            cern.japc.core.spi.AbstractWeakSubscriptionSource
    
      Constructors:
        * PullingSubscriptionSource(cern.japc.core.Selector, cern.japc.core.ImmutableParameter)
    
    """
    def __init__(self, selector: cern.japc.core.Selector, immutableParameter: cern.japc.core.ImmutableParameter): ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.japc.core.spi")``.

    AbstractImmutableParameter: typing.Type[AbstractImmutableParameter]
    AbstractParameter: typing.Type[AbstractParameter]
    AbstractWeakSubscriptionSource: typing.Type[AbstractWeakSubscriptionSource]
    AcquiredParameterValueImpl: typing.Type[AcquiredParameterValueImpl]
    CumulativeWait: typing.Type[CumulativeWait]
    CycleStampValuePeekingStrategy: typing.Type[CycleStampValuePeekingStrategy]
    DeviceDescriptorImpl: typing.Type[DeviceDescriptorImpl]
    DeviceDescriptorSupport: typing.Type[DeviceDescriptorSupport]
    FailSafeParameterValueImpl: typing.Type[FailSafeParameterValueImpl]
    FirstValueInWindowPeekingStrategy: typing.Type[FirstValueInWindowPeekingStrategy]
    FspvCollector: typing.Type[FspvCollector]
    FspvCollectorImpl: typing.Type[FspvCollectorImpl]
    FspvPeekingStrategy: typing.Type[FspvPeekingStrategy]
    IgnoreSetParameterDecorator: typing.Type[IgnoreSetParameterDecorator]
    ImmutableParameterDecorator: typing.Type[ImmutableParameterDecorator]
    LastBeforeTimestampStrategy: typing.Type[LastBeforeTimestampStrategy]
    MapParameterDescriptorImpl: typing.Type[MapParameterDescriptorImpl]
    ParameterDecorator: typing.Type[ParameterDecorator]
    ParameterDescriptorImpl: typing.Type[ParameterDescriptorImpl]
    ParameterDescriptorSupport: typing.Type[ParameterDescriptorSupport]
    ParameterUrl: typing.Type[ParameterUrl]
    ParameterUrlImpl: typing.Type[ParameterUrlImpl]
    PullSubscriptionStrategy: typing.Type[PullSubscriptionStrategy]
    PullingSubscriptionSource: typing.Type[PullingSubscriptionSource]
    PushSubscriptionStrategy: typing.Type[PushSubscriptionStrategy]
    SelectorImpl: typing.Type[SelectorImpl]
    SimpleParameterDescriptorImpl: typing.Type[SimpleParameterDescriptorImpl]
    SubscriptionConfigurationImpl: typing.Type[SubscriptionConfigurationImpl]
    SubscriptionHandleDecorator: typing.Type[SubscriptionHandleDecorator]
    SubscriptionHandleImpl: typing.Type[SubscriptionHandleImpl]
    SubscriptionSource: typing.Type[SubscriptionSource]
    SubscriptionStrategy: typing.Type[SubscriptionStrategy]
    UpdatableAcquiredParameterValue: typing.Type[UpdatableAcquiredParameterValue]
    ValueHeaderImpl: typing.Type[ValueHeaderImpl]
    adaptation: cern.japc.core.spi.adaptation.__module_protocol__
    arraycall: cern.japc.core.spi.arraycall.__module_protocol__
    beans: cern.japc.core.spi.beans.__module_protocol__
    cache: cern.japc.core.spi.cache.__module_protocol__
    factory: cern.japc.core.spi.factory.__module_protocol__
    group: cern.japc.core.spi.group.__module_protocol__
    jmx: cern.japc.core.spi.jmx.__module_protocol__
    provider: cern.japc.core.spi.provider.__module_protocol__
    subscription: cern.japc.core.spi.subscription.__module_protocol__
    transaction: cern.japc.core.spi.transaction.__module_protocol__
    util: cern.japc.core.spi.util.__module_protocol__
    value: cern.japc.core.spi.value.__module_protocol__
