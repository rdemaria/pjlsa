import cern.japc.value
import java.io
import typing


class ValueBean:
    NON_MUTABLE_MESSAGE: typing.ClassVar[str] = ...
    def getParameterValue(self) -> cern.japc.value.ParameterValue: ...
    def isMutable(self) -> bool: ...
    def makeMutable(self) -> None: ...

class ValueBeanImpl(ValueBean, java.io.Serializable):
    def __init__(self, parameterValue: cern.japc.value.ParameterValue): ...
    def getParameterValue(self) -> cern.japc.value.ParameterValue: ...
    def isMutable(self) -> bool: ...
    def makeMutable(self) -> None: ...
    def toString(self) -> str: ...

class MapValueBean(ValueBeanImpl):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, mapDescriptor: cern.japc.value.MapDescriptor): ...
    @typing.overload
    def __init__(self, mapParameterValue: cern.japc.value.MapParameterValue): ...
    @typing.overload
    def __init__(self, mapParameterValue: cern.japc.value.MapParameterValue, mapDescriptor: cern.japc.value.MapDescriptor): ...
    def setParameterValue(self, mapParameterValue: cern.japc.value.MapParameterValue) -> None: ...

class SimpleValueBean(ValueBeanImpl):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, simpleDescriptor: cern.japc.value.SimpleDescriptor): ...
    @typing.overload
    def __init__(self, simpleParameterValue: cern.japc.value.SimpleParameterValue): ...
    @typing.overload
    def __init__(self, simpleParameterValue: cern.japc.value.SimpleParameterValue, simpleDescriptor: cern.japc.value.SimpleDescriptor): ...
    def setParameterValue(self, simpleParameterValue: cern.japc.value.SimpleParameterValue) -> None: ...
    @staticmethod
    def validateReader(simpleParameterValue: cern.japc.value.SimpleParameterValue, simpleDescriptor: cern.japc.value.SimpleDescriptor) -> None: ...
