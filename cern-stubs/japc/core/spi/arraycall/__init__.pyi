import cern.japc.core
import typing


class ParameterArrayCaller:
    def getValue(self, immutableParameter: cern.japc.core.ImmutableParameter, selector: cern.japc.core.Selector) -> cern.japc.core.FailSafeParameterValue: ...
    def registerParameter(self, immutableParameter: cern.japc.core.ImmutableParameter) -> None: ...
    def startSubscription(self, immutableParameter: cern.japc.core.ImmutableParameter, selector: cern.japc.core.Selector, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...
    def stopSubscription(self, immutableParameter: cern.japc.core.ImmutableParameter, selector: cern.japc.core.Selector, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...

class ParameterArrayCallerManager:
    def __init__(self): ...
    def generateArrayCallerId(self) -> str: ...
    @staticmethod
    def get() -> 'ParameterArrayCallerManager': ...
    _getArrayCaller__T = typing.TypeVar('_getArrayCaller__T', bound=ParameterArrayCaller)  # <T>
    def getArrayCaller(self, class_: typing.Type[_getArrayCaller__T], string: str) -> _getArrayCaller__T: ...

class AbstractParameterArrayCaller(ParameterArrayCaller): ...
