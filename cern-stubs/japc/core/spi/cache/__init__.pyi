import java.lang
import typing


class JapcCache:
    def clearAll(self) -> None: ...

class JapcCacheException(java.lang.Exception):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class JapcCacheType(java.lang.Enum['JapcCacheType']):
    DEVICE_TYPE: typing.ClassVar['JapcCacheType'] = ...
    DEVICE: typing.ClassVar['JapcCacheType'] = ...
    PARAMETER: typing.ClassVar['JapcCacheType'] = ...
    DEVICE_DESCRIPTOR: typing.ClassVar['JapcCacheType'] = ...
    PARAMETER_DESCRIPTOR: typing.ClassVar['JapcCacheType'] = ...
    VALUE_DESCRIPTOR: typing.ClassVar['JapcCacheType'] = ...
    SERVICE_CONFIG: typing.ClassVar['JapcCacheType'] = ...
    ENUM: typing.ClassVar['JapcCacheType'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'JapcCacheType': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['JapcCacheType']: ...

class JapcCacheController(JapcCache):
    def __init__(self): ...
    def clearAll(self) -> None: ...
    @staticmethod
    def getInstance() -> 'JapcCacheController': ...
    def registerCache(self, japcCache: JapcCache) -> None: ...
    def unregisterCache(self, japcCache: JapcCache) -> None: ...
    class JmxMBean:
        def clearAll(self) -> None: ...
        def getRegisteredCaches(self) -> str: ...
