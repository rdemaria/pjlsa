import cern.japc.core
import cern.japc.value
import cern.japc.value.spi.value.core
import java.io
import java.lang
import java.util
import typing


class AbstractMapParameterValue(cern.japc.value.spi.value.core.ParameterValueImpl, cern.japc.value.MapParameterValue):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, mapDescriptor: cern.japc.value.MapDescriptor): ...
    @typing.overload
    def __init__(self, stringArray: typing.List[str], simpleParameterValueArray: typing.List[cern.japc.value.SimpleParameterValue]): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[str, cern.japc.value.SimpleParameterValue], typing.Mapping[str, cern.japc.value.SimpleParameterValue]]): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, string: str) -> cern.japc.value.SimpleParameterValue: ...
    def getNames(self) -> typing.List[str]: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    def makeMutable(self) -> 'AbstractMapParameterValue': ...
    def put(self, string: str, simpleParameterValue: cern.japc.value.SimpleParameterValue) -> None: ...
    def remove(self, string: str) -> cern.japc.value.SimpleParameterValue: ...
    def setMutable(self, boolean: bool) -> None: ...
    def size(self) -> int: ...
    def toString(self) -> str: ...

class MapDescriptorImpl(cern.japc.value.spi.value.core.AbstractValueDescriptor, cern.japc.value.MapDescriptor, java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, stringArray: typing.List[str], simpleDescriptorArray: typing.List[cern.japc.value.SimpleDescriptor]): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[str, cern.japc.value.SimpleDescriptor], typing.Mapping[str, cern.japc.value.SimpleDescriptor]]): ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, string: str) -> cern.japc.value.SimpleDescriptor: ...
    def getNames(self) -> typing.List[str]: ...
    def hashCode(self) -> int: ...
    def put(self, string: str, simpleDescriptor: cern.japc.value.SimpleDescriptor) -> None: ...
    def remove(self, string: str) -> cern.japc.value.SimpleDescriptor: ...
    def size(self) -> int: ...
    def toString(self) -> str: ...

class ObjectParameterValueImpl(cern.japc.value.spi.value.core.ParameterValueImpl, cern.japc.core.ObjectParameterValue):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, object: typing.Any): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getString(self) -> str: ...
    def getValue(self) -> typing.Any: ...
    def hashCode(self) -> int: ...
    def makeMutable(self) -> 'ObjectParameterValueImpl': ...
    def setValue(self, object: typing.Any) -> None: ...
    def toString(self) -> str: ...

class SimpleDescriptorImpl(cern.japc.value.spi.value.core.AbstractValueDescriptor, cern.japc.value.SimpleDescriptor, java.io.Serializable):
    @typing.overload
    def __init__(self, valueType: cern.japc.value.ValueType): ...
    @typing.overload
    def __init__(self, valueType: cern.japc.value.ValueType, booleanType: cern.japc.value.BooleanType): ...
    @typing.overload
    def __init__(self, valueType: cern.japc.value.ValueType, enumType: cern.japc.value.EnumType): ...
    def addExtraCharacteristic(self, string: str, string2: str) -> None: ...
    def get(self, string: str) -> cern.japc.value.SimpleDescriptor: ...
    def getBooleanType(self) -> cern.japc.value.BooleanType: ...
    def getColumnCount(self) -> int: ...
    def getDescription(self) -> str: ...
    def getEnumType(self) -> cern.japc.value.EnumType: ...
    def getExtraCharacteristic(self, string: str) -> str: ...
    def getExtraCharacteristicNames(self) -> typing.List[str]: ...
    def getFormatPattern(self) -> str: ...
    def getLength(self) -> int: ...
    def getMaxValue(self) -> float: ...
    def getMinValue(self) -> float: ...
    def getNames(self) -> typing.List[str]: ...
    def getRowCount(self) -> int: ...
    def getStandardMeaning(self, object: typing.Any) -> cern.japc.value.SimpleValueStandardMeaning: ...
    def getTitle(self) -> str: ...
    def getUnit(self) -> str: ...
    def getValueType(self) -> cern.japc.value.ValueType: ...
    def getXMaxValue(self) -> float: ...
    def getXMinValue(self) -> float: ...
    def getXUnit(self) -> str: ...
    def getYMaxValue(self) -> float: ...
    def getYMinValue(self) -> float: ...
    def getYUnit(self) -> str: ...
    def isDiscrete(self) -> bool: ...
    def isFilterable(self) -> bool: ...
    def isSettable(self, object: typing.Any) -> bool: ...
    def setColumnCount(self, int: int) -> None: ...
    def setDescription(self, string: str) -> None: ...
    def setFilterable(self, boolean: bool) -> None: ...
    def setFormatPattern(self, string: str) -> None: ...
    def setLength(self, int: int) -> None: ...
    def setMaxValue(self, double: float) -> None: ...
    def setMinValue(self, double: float) -> None: ...
    def setRowCount(self, int: int) -> None: ...
    def setTitle(self, string: str) -> None: ...
    def setUnit(self, string: str) -> None: ...
    def setXMaxValue(self, double: float) -> None: ...
    def setXMinValue(self, double: float) -> None: ...
    def setXUnit(self, string: str) -> None: ...
    def setYMaxValue(self, double: float) -> None: ...
    def setYMinValue(self, double: float) -> None: ...
    def setYUnit(self, string: str) -> None: ...
    def size(self) -> int: ...
    def toString(self) -> str: ...

class SimpleDescriptorSupport(cern.japc.value.spi.value.core.TypedObject, cern.japc.value.SimpleDescriptor, java.io.Serializable):
    def __init__(self): ...
    def get(self, string: str) -> cern.japc.value.SimpleDescriptor: ...
    def getBooleanType(self) -> cern.japc.value.BooleanType: ...
    def getColumnCount(self) -> int: ...
    def getDescription(self) -> str: ...
    def getEnumType(self) -> cern.japc.value.EnumType: ...
    def getExtraCharacteristic(self, string: str) -> str: ...
    def getExtraCharacteristicNames(self) -> typing.List[str]: ...
    def getFormatPattern(self) -> str: ...
    def getLength(self) -> int: ...
    def getMaxValue(self) -> float: ...
    def getMinValue(self) -> float: ...
    def getNames(self) -> typing.List[str]: ...
    def getRowCount(self) -> int: ...
    def getStandardMeaning(self, object: typing.Any) -> cern.japc.value.SimpleValueStandardMeaning: ...
    def getTitle(self) -> str: ...
    def getUnit(self) -> str: ...
    def isConstant(self) -> bool: ...
    def isDiscrete(self) -> bool: ...
    def isFilterable(self) -> bool: ...
    def isSettable(self, object: typing.Any) -> bool: ...
    def size(self) -> int: ...
    def toString(self) -> str: ...

class SimpleDescriptorToStringHelper:
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    @staticmethod
    def toString(simpleDescriptor: cern.japc.value.SimpleDescriptor) -> str: ...
    @typing.overload
    @staticmethod
    def toString(simpleDescriptor: cern.japc.value.SimpleDescriptor, string: str) -> str: ...

class EnumValueDescriptor(SimpleDescriptorImpl):
    def __init__(self, valueType: cern.japc.value.ValueType, enumType: cern.japc.value.EnumType, map: typing.Union[java.util.Map[cern.japc.value.EnumItem, cern.japc.value.SimpleValueStandardMeaning], typing.Mapping[cern.japc.value.EnumItem, cern.japc.value.SimpleValueStandardMeaning]], set: java.util.Set[cern.japc.value.EnumItem]): ...
    def getStandardMeaning(self, object: typing.Any) -> cern.japc.value.SimpleValueStandardMeaning: ...
    def isDiscrete(self) -> bool: ...
    def isSettable(self, object: typing.Any) -> bool: ...

class MapParameterValueImpl(AbstractMapParameterValue, cern.japc.value.MapParameterValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, immutableMapParameterValue: cern.japc.value.ImmutableMapParameterValue): ...
    @typing.overload
    def __init__(self, mapDescriptor: cern.japc.value.MapDescriptor): ...
    @typing.overload
    def __init__(self, stringArray: typing.List[str], simpleParameterValueArray: typing.List[cern.japc.value.SimpleParameterValue]): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[str, cern.japc.value.SimpleParameterValue], typing.Mapping[str, cern.japc.value.SimpleParameterValue]]): ...
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    def getColumnCount(self, string: str) -> int: ...
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    def getEnumItemSets(self, string: str) -> typing.List[cern.japc.value.EnumItemSet]: ...
    def getEnumItems(self, string: str) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    def getMaxValue(self, string: str) -> float: ...
    def getMinValue(self, string: str) -> float: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    def getRowCount(self, string: str) -> int: ...
    def getScale(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    def getUnit(self, string: str) -> str: ...
    def getValueType(self, string: str) -> cern.japc.value.ValueType: ...
    def getXMaxValue(self, string: str) -> float: ...
    def getXMinValue(self, string: str) -> float: ...
    def getXUnit(self, string: str) -> str: ...
    def getYMaxValue(self, string: str) -> float: ...
    def getYMinValue(self, string: str) -> float: ...
    def getYUnit(self, string: str) -> str: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    def setBooleans2D(self, string: str, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    def setBytes2D(self, string: str, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    def setDoubles2D(self, string: str, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    def setEnumItemSets(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None: ...
    def setEnumItemSets2D(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None: ...
    def setEnumItems(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    def setEnumItems2D(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    def setFloats2D(self, string: str, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    def setInts2D(self, string: str, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    def setLongs2D(self, string: str, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    def setObject(self, string: str, object: typing.Any) -> None: ...
    def setObjects2D(self, string: str, object: typing.Any, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    def setShorts2D(self, string: str, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    def setStrings2D(self, string: str, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...
