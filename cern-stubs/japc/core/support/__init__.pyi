from typing import Any as _py_Any
from typing import List as _py_List
from typing import ClassVar as _py_ClassVar
from typing import overload
import cern.japc.core
import cern.japc.core.factory
import cern.japc.value
import java.io
import java.util


class Descriptors:
    RDA: _py_ClassVar[str] = ...
    RDA3: _py_ClassVar[str] = ...
    DEFAULT_STRING: _py_ClassVar[str] = ...
    IS_VALID: _py_ClassVar[str] = ...
    ERROR_STRING: _py_ClassVar[str] = ...
    SERVER_NAME: _py_ClassVar[str] = ...
    DEVICE_ALIAS: _py_ClassVar[str] = ...
    RESPONSIBLE: _py_ClassVar[str] = ...
    CLASS_VERSION: _py_ClassVar[str] = ...
    IMPL_UNKNOWN: _py_ClassVar[str] = ...
    IMPL_VIRTUAL: _py_ClassVar[str] = ...
    IMPL_HARDWARE: _py_ClassVar[str] = ...
    IMPL_SLEQUIP: _py_ClassVar[str] = ...
    IMPL_GM: _py_ClassVar[str] = ...
    IMPL_FESA: _py_ClassVar[str] = ...
    IMPL_FGC: _py_ClassVar[str] = ...
    IMPL_BISCOTO: _py_ClassVar[str] = ...
    DATA_SOURCE: _py_ClassVar[str] = ...
    DATA_SOURCE_UNKNOWN: _py_ClassVar[str] = ...
    def __init__(self): ...
    @classmethod
    def getAccelerator(cls, string: str) -> str: ...
    @classmethod
    @overload
    def getClassVersion(cls, deviceDescriptor: cern.japc.core.DeviceDescriptor) -> str: ...
    @classmethod
    @overload
    def getClassVersion(cls, string: str) -> str: ...
    @classmethod
    def getDataSource(cls, string: str) -> str: ...
    @classmethod
    def getDescription(cls, string: str) -> str: ...
    @classmethod
    @overload
    def getDeviceAlias(cls, deviceDescriptor: cern.japc.core.DeviceDescriptor) -> str: ...
    @classmethod
    @overload
    def getDeviceAlias(cls, string: str) -> str: ...
    @classmethod
    def getDeviceClassName(cls, string: str) -> str: ...
    @classmethod
    @overload
    def getDeviceResponsible(cls, deviceDescriptor: cern.japc.core.DeviceDescriptor) -> str: ...
    @classmethod
    @overload
    def getDeviceResponsible(cls, string: str) -> str: ...
    @classmethod
    def getEnumItemSymbols(cls, string: str) -> java.util.Collection[str]: ...
    @classmethod
    def getEnumType(cls, string: str) -> cern.japc.value.EnumType: ...
    @classmethod
    @overload
    def getErrors(cls, deviceDescriptor: cern.japc.core.DeviceDescriptor) -> str: ...
    @classmethod
    @overload
    def getErrors(cls, parameterDescriptor: cern.japc.core.ParameterDescriptor) -> str: ...
    @classmethod
    @overload
    def getErrors(cls, string: str) -> str: ...
    @classmethod
    def getFormatPattern(cls, string: str) -> str: ...
    @classmethod
    @overload
    def getHostName(cls, deviceDescriptor: cern.japc.core.DeviceDescriptor) -> str: ...
    @classmethod
    @overload
    def getHostName(cls, string: str) -> str: ...
    @classmethod
    def getImplementation(cls, string: str) -> int: ...
    @classmethod
    def getImplementationAsString(cls, string: str) -> str: ...
    @classmethod
    def getLength(cls, string: str) -> int: ...
    @classmethod
    def getMapPropertyFieldNames(cls, string: str) -> _py_List[str]: ...
    @classmethod
    def getMaxValue(cls, string: str) -> float: ...
    @classmethod
    def getMinValue(cls, string: str) -> float: ...
    @classmethod
    @overload
    def getServerName(cls, deviceDescriptor: cern.japc.core.DeviceDescriptor) -> str: ...
    @classmethod
    @overload
    def getServerName(cls, string: str) -> str: ...
    @classmethod
    def getSettableEnumItemSymbols(cls, string: str) -> java.util.Collection[str]: ...
    @classmethod
    @overload
    def getSimpleValueDescriptor(cls, valueDescriptor: cern.japc.value.ValueDescriptor, string: str) -> cern.japc.value.SimpleDescriptor: ...
    @classmethod
    @overload
    def getSimpleValueDescriptor(cls, string: str) -> cern.japc.value.SimpleDescriptor: ...
    @classmethod
    def getTgmName(cls, string: str) -> str: ...
    @classmethod
    def getTitle(cls, string: str) -> str: ...
    @classmethod
    def getType(cls, string: str) -> cern.japc.value.Type: ...
    @classmethod
    def getUnit(cls, string: str) -> str: ...
    @classmethod
    def getValueDescriptor(cls, string: str) -> cern.japc.value.MapDescriptor: ...
    @classmethod
    @overload
    def getValueType(cls, simpleDescriptor: cern.japc.value.SimpleDescriptor) -> cern.japc.value.ValueType: ...
    @classmethod
    @overload
    def getValueType(cls, string: str) -> cern.japc.value.ValueType: ...
    @classmethod
    def isAcquisition(cls, parameterDescriptor: cern.japc.core.ParameterDescriptor) -> bool: ...
    @classmethod
    @overload
    def isConstant(cls, string: str) -> bool: ...
    @classmethod
    @overload
    def isConstant(cls, valueDescriptor: cern.japc.value.ValueDescriptor) -> bool: ...
    @classmethod
    def isControl(cls, parameterDescriptor: cern.japc.core.ParameterDescriptor) -> bool: ...
    @classmethod
    def isCycleBound(cls, string: str) -> bool: ...
    @classmethod
    def isCycleDependent(cls, string: str) -> bool: ...
    @classmethod
    def isDefaultString(cls, string: str) -> bool: ...
    @classmethod
    def isDiscrete(cls, string: str) -> bool: ...
    @classmethod
    def isFilterable(cls, string: str) -> bool: ...
    @classmethod
    def isMonitorable(cls, string: str) -> bool: ...
    @classmethod
    def isMultiplexed(cls, string: str) -> bool: ...
    @classmethod
    def isNonCycleBoundAcquisition(cls, parameterDescriptor: cern.japc.core.ParameterDescriptor) -> bool: ...
    @classmethod
    def isReadable(cls, string: str) -> bool: ...
    @classmethod
    def isTransactional(cls, string: str) -> bool: ...
    @classmethod
    @overload
    def isValid(cls, deviceDescriptor: cern.japc.core.DeviceDescriptor) -> bool: ...
    @classmethod
    @overload
    def isValid(cls, parameterDescriptor: cern.japc.core.ParameterDescriptor) -> bool: ...
    @classmethod
    @overload
    def isValid(cls, valueDescriptor: cern.japc.value.ValueDescriptor) -> bool: ...
    @classmethod
    @overload
    def isValid(cls, string: str) -> bool: ...
    @classmethod
    def isWritable(cls, string: str) -> bool: ...

class DiagTrace:
    RDA_SUBSCRIPTION: _py_ClassVar[int] = ...
    RDA_DATA_RECEPTION: _py_ClassVar[int] = ...
    RDA_DATA_SET: _py_ClassVar[int] = ...
    RDA_PARAMETER_CREATION: _py_ClassVar[int] = ...
    def __init__(self): ...
    @classmethod
    def displayTrace(cls, int: int, string: str) -> None: ...
    @classmethod
    def getTraceLevel(cls) -> int: ...
    @classmethod
    def println(cls, string: str, string2: str) -> None: ...
    @classmethod
    def setTraceLevel(cls, int: int) -> None: ...
    @classmethod
    def setTraceOutput(cls, printStream: java.io.PrintStream) -> None: ...
    @classmethod
    def timeStamp(cls) -> str: ...

class FirstUpdateDiscardingPVL(cern.japc.core.ParameterValueListener):
    def __init__(self, parameterValueListener: cern.japc.core.ParameterValueListener): ...
    def exceptionOccured(self, string: str, string2: str, parameterException: cern.japc.core.ParameterException) -> None: ...
    def valueReceived(self, string: str, acquiredParameterValue: cern.japc.core.AcquiredParameterValue) -> None: ...

class ParameterCatalog:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parameterFactory: cern.japc.core.factory.ParameterFactory): ...
    @overload
    def __init__(self, parameterFactory: cern.japc.core.factory.ParameterFactory, boolean: bool): ...
    def destroy(self) -> None: ...
    def destroyParameter(self, string: str) -> None: ...
    def getParameterDescriptor(self, string: str) -> cern.japc.core.ParameterDescriptor: ...
    @overload
    def getValue(self, string: str, selector: cern.japc.core.Selector) -> cern.japc.core.AcquiredParameterValue: ...
    @overload
    def getValue(self, string: str, selector: cern.japc.core.Selector, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...
    def getValueDescriptor(self, string: str) -> cern.japc.value.ValueDescriptor: ...
    def isMonitoring(self, string: str, selector: cern.japc.core.Selector) -> bool: ...
    def newParameter(self, string: str) -> None: ...
    @overload
    def setValue(self, string: str, selector: cern.japc.core.Selector, parameterValue: cern.japc.value.ParameterValue) -> None: ...
    @overload
    def setValue(self, string: str, selector: cern.japc.core.Selector, parameterValue: cern.japc.value.ParameterValue, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...
    def startMonitoring(self, string: str, selector: cern.japc.core.Selector, parameterValueListener: cern.japc.core.ParameterValueListener) -> None: ...
    def stopMonitoring(self, string: str, selector: cern.japc.core.Selector) -> None: ...

class ParameterGroupValues:
    @classmethod
    @overload
    def checkForException(cls, failSafeParameterValueArray: _py_List[cern.japc.core.FailSafeParameterValue]) -> cern.japc.core.FailSafeParameterValue: ...
    @classmethod
    @overload
    def checkForException(cls, failSafeParameterValueArray: _py_List[cern.japc.core.FailSafeParameterValue], boolean: bool) -> cern.japc.core.FailSafeParameterValue: ...
    @classmethod
    def joinSimple2ManyMaps(cls, acquiredParameterValueArray: _py_List[cern.japc.core.AcquiredParameterValue]) -> _py_List[cern.japc.core.AcquiredParameterValue]: ...
    @classmethod
    def joinSimple2ManyMapsFailSafe(cls, failSafeParameterValueArray: _py_List[cern.japc.core.FailSafeParameterValue]) -> _py_List[cern.japc.core.FailSafeParameterValue]: ...
    @classmethod
    def joinSimple2OneMap(cls, acquiredParameterValueArray: _py_List[cern.japc.core.AcquiredParameterValue]) -> cern.japc.core.AcquiredParameterValue: ...
    @classmethod
    def joinSimple2OneMapFailSafe(cls, failSafeParameterValueArray: _py_List[cern.japc.core.FailSafeParameterValue]) -> cern.japc.core.FailSafeParameterValue: ...
    @classmethod
    def splitOneMap2Simple(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue) -> _py_List[cern.japc.core.AcquiredParameterValue]: ...

class ParameterValues:
    @classmethod
    @overload
    def extractParameterValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue) -> _py_Any: ...
    @classmethod
    @overload
    def extractParameterValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, int: int) -> _py_Any: ...
    @classmethod
    @overload
    def extractParameterValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> _py_Any: ...
    @classmethod
    @overload
    def extractParameterValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str, int: int) -> _py_Any: ...
    @classmethod
    def extractSimpleParameterValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> cern.japc.value.SimpleParameterValue: ...
    @classmethod
    @overload
    def getFieldStatus(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, int: int, string: str) -> cern.japc.value.ValueStatus: ...
    @classmethod
    @overload
    def getFieldStatus(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, int: int, string: str, int2: int) -> cern.japc.value.ValueStatus: ...
    @classmethod
    @overload
    def getFieldStatus(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> cern.japc.value.ValueStatus: ...
    @classmethod
    @overload
    def getFieldStatus(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str, int: int) -> cern.japc.value.ValueStatus: ...
    @classmethod
    @overload
    def getFieldValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue) -> str: ...
    @classmethod
    @overload
    def getFieldValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, int: int) -> str: ...
    @classmethod
    @overload
    def getFieldValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, int: int, string: str) -> str: ...
    @classmethod
    @overload
    def getFieldValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, int: int, string: str, int2: int) -> str: ...
    @classmethod
    @overload
    def getFieldValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> str: ...
    @classmethod
    @overload
    def getFieldValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str, int: int) -> str: ...
    @classmethod
    @overload
    def getFieldValue(cls, failSafeParameterValue: cern.japc.core.FailSafeParameterValue, int: int, string: str) -> str: ...
    @classmethod
    @overload
    def getFieldValue(cls, failSafeParameterValue: cern.japc.core.FailSafeParameterValue, int: int, string: str, int2: int) -> str: ...
    @classmethod
    @overload
    def getFieldValue(cls, failSafeParameterValue: cern.japc.core.FailSafeParameterValue, string: str) -> str: ...
    @classmethod
    @overload
    def getFieldValue(cls, failSafeParameterValue: cern.japc.core.FailSafeParameterValue, string: str, int: int) -> str: ...
    @classmethod
    def getMaxValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> float: ...
    @classmethod
    def getMinValue(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> float: ...
    @classmethod
    def getUnit(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> str: ...
    @classmethod
    def getValueAsBoolean(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> bool: ...
    @classmethod
    def getValueAsDouble(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> float: ...
    @classmethod
    def getValueAsFloat(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> float: ...
    @classmethod
    def getValueAsInt(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> int: ...
    @classmethod
    def getValueAsLong(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> int: ...
    @classmethod
    def getValueAsStrings(cls, acquiredParameterValue: cern.japc.core.AcquiredParameterValue, string: str) -> _py_List[str]: ...
    @classmethod
    def printArray(cls, parameterValueArray: _py_List[cern.japc.value.ParameterValue]) -> None: ...
    @classmethod
    @overload
    def replaceControlStatus(cls, simpleParameterValue: cern.japc.value.SimpleParameterValue, simpleValueControlStatus: cern.japc.value.SimpleValueControlStatus) -> cern.japc.value.SimpleParameterValue: ...
    @classmethod
    @overload
    def replaceControlStatus(cls, simpleValueStatus: cern.japc.value.SimpleValueStatus, simpleValueControlStatus: cern.japc.value.SimpleValueControlStatus) -> cern.japc.value.SimpleValueStatus: ...

class SysoutParameterValueListener(cern.japc.core.ParameterValueListener):
    def __init__(self): ...
    def exceptionOccured(self, string: str, string2: str, parameterException: cern.japc.core.ParameterException) -> None: ...
    def valueReceived(self, string: str, acquiredParameterValue: cern.japc.core.AcquiredParameterValue) -> None: ...
