import cern.japc.core
import cern.japc.value
import java.io
import java.lang
import typing


class Transaction:
    IDLE: typing.ClassVar['Transaction.State'] = ...
    READY: typing.ClassVar['Transaction.State'] = ...
    SENDING: typing.ClassVar['Transaction.State'] = ...
    FAILED: typing.ClassVar['Transaction.State'] = ...
    ABORTED: typing.ClassVar['Transaction.State'] = ...
    COMMITTED: typing.ClassVar['Transaction.State'] = ...
    def abort(self) -> None: ...
    def commit(self) -> None: ...
    def commitAndWait(self) -> None: ...
    def getPendingValueCount(self) -> int: ...
    def getState(self) -> 'Transaction.State': ...
    def hasFailed(self) -> bool: ...
    def isReady(self) -> bool: ...
    def registerTransactionStateListener(self, transactionStateListener: 'TransactionStateListener') -> None: ...
    def unregisterTransactionStateListener(self) -> None: ...
    class State(java.io.Serializable):
        def toString(self) -> str: ...

class TransactionException(cern.japc.core.ParameterException):
    @typing.overload
    def __init__(self, exception: java.lang.Exception): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, exception: java.lang.Exception): ...

class TransactionRuntimeException(cern.japc.core.ParameterRuntimeException):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, exception: java.lang.Exception): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, exception: java.lang.Exception): ...

class TransactionStateListener:
    def transactionCommitted(self) -> None: ...
    def transactionFailed(self, string: str, transactionException: TransactionException) -> None: ...
    def transactionReady(self) -> None: ...

class TransactionalParameter(cern.japc.core.Parameter):
    def prepareValue(self, selector: cern.japc.core.Selector, parameterValue: cern.japc.value.ParameterValue, compositeTransaction: 'CompositeTransaction') -> None: ...

class BadSettingValueException(TransactionException):
    @typing.overload
    def __init__(self, exception: java.lang.Exception): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, exception: java.lang.Exception): ...

class CompositeTransaction(Transaction):
    def add(self, object: typing.Any, transaction: Transaction) -> bool: ...
    def get(self, object: typing.Any) -> Transaction: ...
