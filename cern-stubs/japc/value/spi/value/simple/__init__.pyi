from typing import Any as _py_Any
from typing import List as _py_List
from typing import overload
import cern.japc.value
import cern.japc.value.spi.value.core
import java.io
import java.lang


class AbstractMapSimpleValue(cern.japc.value.spi.value.core.ParameterValueImpl, cern.japc.value.SimpleParameterValue, java.io.Serializable, java.lang.Cloneable):
    def __init__(self): ...
    def get(self, string: str) -> cern.japc.value.SimpleParameterValue: ...
    @overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBooleans(self) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, string: str) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, string: str, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getBytes(self) -> _py_List[int]: ...
    @overload
    def getBytes(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getColumnCount(self) -> int: ...
    @overload
    def getColumnCount(self, string: str) -> int: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDoubles(self) -> _py_List[float]: ...
    @overload
    def getDoubles(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self, string: str) -> _py_List[float]: ...
    @overload
    def getDoubles(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSets(self) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getEnumItemSets(self, int: int, int2: int) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getEnumItemSets(self, string: str) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getEnumItems(self) -> _py_List[cern.japc.value.EnumItem]: ...
    @overload
    def getEnumItems(self, int: int, int2: int) -> _py_List[cern.japc.value.EnumItem]: ...
    @overload
    def getEnumItems(self, string: str) -> _py_List[cern.japc.value.EnumItem]: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloats(self) -> _py_List[float]: ...
    @overload
    def getFloats(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self, string: str) -> _py_List[float]: ...
    @overload
    def getFloats(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInts(self) -> _py_List[int]: ...
    @overload
    def getInts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLongs(self) -> _py_List[int]: ...
    @overload
    def getLongs(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getMaxValue(self) -> float: ...
    @overload
    def getMaxValue(self, string: str) -> float: ...
    @overload
    def getMinValue(self) -> float: ...
    @overload
    def getMinValue(self, string: str) -> float: ...
    def getNames(self) -> _py_List[str]: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getRowCount(self) -> int: ...
    @overload
    def getRowCount(self, string: str) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShorts(self) -> _py_List[int]: ...
    @overload
    def getShorts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self, string: str) -> _py_List[int]: ...
    @overload
    def getShorts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getStrings(self) -> _py_List[str]: ...
    @overload
    def getStrings(self, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self, string: str) -> _py_List[str]: ...
    @overload
    def getStrings(self, string: str, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getUnit(self) -> str: ...
    @overload
    def getUnit(self, string: str) -> str: ...
    @overload
    def getValueType(self) -> cern.japc.value.ValueType: ...
    @overload
    def getValueType(self, string: str) -> cern.japc.value.ValueType: ...
    @overload
    def getXMaxValue(self) -> float: ...
    @overload
    def getXMaxValue(self, string: str) -> float: ...
    @overload
    def getXMinValue(self) -> float: ...
    @overload
    def getXMinValue(self, string: str) -> float: ...
    @overload
    def getXUnit(self) -> str: ...
    @overload
    def getXUnit(self, string: str) -> str: ...
    @overload
    def getYMaxValue(self) -> float: ...
    @overload
    def getYMaxValue(self, string: str) -> float: ...
    @overload
    def getYMinValue(self) -> float: ...
    @overload
    def getYMinValue(self, string: str) -> float: ...
    @overload
    def getYUnit(self) -> str: ...
    @overload
    def getYUnit(self, string: str) -> str: ...
    @overload
    def makeMutable(self) -> cern.japc.value.MapParameterValue: ...
    @overload
    def makeMutable(self) -> cern.japc.value.ParameterValue: ...
    @overload
    def makeMutable(self) -> cern.japc.value.SimpleParameterValue: ...
    @overload
    def makeMutable(self) -> 'AbstractMapSimpleValue': ...
    def put(self, string: str, simpleParameterValue: cern.japc.value.SimpleParameterValue) -> None: ...
    def remove(self, string: str) -> cern.japc.value.SimpleParameterValue: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBooleans(self, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setBooleans(self, string: str, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setBooleans2D(self, booleanArray: _py_List[bool], intArray: _py_List[int]) -> None: ...
    @overload
    def setBooleans2D(self, string: str, booleanArray: _py_List[bool], intArray: _py_List[int]) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setBytes(self, byteArray: _py_List[int]) -> None: ...
    @overload
    def setBytes(self, string: str, byteArray: _py_List[int]) -> None: ...
    @overload
    def setBytes2D(self, byteArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setBytes2D(self, string: str, byteArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDoubles(self, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setDoubles(self, string: str, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setDoubles2D(self, doubleArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setDoubles2D(self, string: str, doubleArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSets(self, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> None: ...
    @overload
    def setEnumItemSets(self, string: str, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> None: ...
    @overload
    def setEnumItemSets2D(self, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet], intArray: _py_List[int]) -> None: ...
    @overload
    def setEnumItemSets2D(self, string: str, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet], intArray: _py_List[int]) -> None: ...
    @overload
    def setEnumItems(self, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setEnumItems(self, string: str, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setEnumItems2D(self, enumItemArray: _py_List[cern.japc.value.EnumItem], intArray: _py_List[int]) -> None: ...
    @overload
    def setEnumItems2D(self, string: str, enumItemArray: _py_List[cern.japc.value.EnumItem], intArray: _py_List[int]) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloats(self, floatArray: _py_List[float]) -> None: ...
    @overload
    def setFloats(self, string: str, floatArray: _py_List[float]) -> None: ...
    @overload
    def setFloats2D(self, floatArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setFloats2D(self, string: str, floatArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInts(self, intArray: _py_List[int]) -> None: ...
    @overload
    def setInts(self, string: str, intArray: _py_List[int]) -> None: ...
    @overload
    def setInts2D(self, intArray: _py_List[int], intArray2: _py_List[int]) -> None: ...
    @overload
    def setInts2D(self, string: str, intArray: _py_List[int], intArray2: _py_List[int]) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLongs(self, longArray: _py_List[int]) -> None: ...
    @overload
    def setLongs(self, string: str, longArray: _py_List[int]) -> None: ...
    @overload
    def setLongs2D(self, longArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setLongs2D(self, string: str, longArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setObject(self, object: _py_Any) -> None: ...
    @overload
    def setObject(self, string: str, object: _py_Any) -> None: ...
    @overload
    def setObjects2D(self, object: _py_Any, intArray: _py_List[int]) -> None: ...
    @overload
    def setObjects2D(self, string: str, object: _py_Any, intArray: _py_List[int]) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShorts(self, shortArray: _py_List[int]) -> None: ...
    @overload
    def setShorts(self, string: str, shortArray: _py_List[int]) -> None: ...
    @overload
    def setShorts2D(self, shortArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setShorts2D(self, string: str, shortArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setStrings(self, stringArray: _py_List[str]) -> None: ...
    @overload
    def setStrings(self, string: str, stringArray: _py_List[str]) -> None: ...
    @overload
    def setStrings2D(self, stringArray: _py_List[str], intArray: _py_List[int]) -> None: ...
    @overload
    def setStrings2D(self, string: str, stringArray: _py_List[str], intArray: _py_List[int]) -> None: ...
    def size(self) -> int: ...

class Array2DImpl(cern.japc.value.Array2D, java.io.Serializable):
    def __init__(self, simpleParameterValue: cern.japc.value.SimpleParameterValue, intArray: _py_List[int]): ...
    def getArray1D(self) -> _py_Any: ...
    def getBoolean(self, int: int, int2: int) -> bool: ...
    def getBooleanArray2D(self) -> _py_List[_py_List[bool]]: ...
    def getBooleanRow(self, int: int) -> _py_List[bool]: ...
    def getBooleans(self) -> _py_List[bool]: ...
    def getByte(self, int: int, int2: int) -> int: ...
    def getByteArray2D(self) -> _py_List[_py_List[int]]: ...
    def getByteRow(self, int: int) -> _py_List[int]: ...
    def getBytes(self) -> _py_List[int]: ...
    def getColumnCount(self) -> int: ...
    def getDouble(self, int: int, int2: int) -> float: ...
    def getDoubleArray2D(self) -> _py_List[_py_List[float]]: ...
    def getDoubleRow(self, int: int) -> _py_List[float]: ...
    def getDoubles(self) -> _py_List[float]: ...
    def getEnumItem(self, int: int, int2: int) -> cern.japc.value.EnumItem: ...
    def getEnumItemArray2D(self) -> _py_List[_py_List[cern.japc.value.EnumItem]]: ...
    def getEnumItemRow(self, int: int) -> _py_List[cern.japc.value.EnumItem]: ...
    def getEnumItemSet(self, int: int, int2: int) -> cern.japc.value.EnumItemSet: ...
    def getEnumItemSetArray2D(self) -> _py_List[_py_List[cern.japc.value.EnumItemSet]]: ...
    def getEnumItemSetRow(self, int: int) -> _py_List[cern.japc.value.EnumItemSet]: ...
    def getEnumItemSets(self) -> _py_List[cern.japc.value.EnumItemSet]: ...
    def getEnumItems(self) -> _py_List[cern.japc.value.EnumItem]: ...
    def getFloat(self, int: int, int2: int) -> float: ...
    def getFloatArray2D(self) -> _py_List[_py_List[float]]: ...
    def getFloatRow(self, int: int) -> _py_List[float]: ...
    def getFloats(self) -> _py_List[float]: ...
    def getInt(self, int: int, int2: int) -> int: ...
    def getIntArray2D(self) -> _py_List[_py_List[int]]: ...
    def getIntRow(self, int: int) -> _py_List[int]: ...
    def getInternalComponentType(self) -> cern.japc.value.ValueType: ...
    def getInts(self) -> _py_List[int]: ...
    def getLong(self, int: int, int2: int) -> int: ...
    def getLongArray2D(self) -> _py_List[_py_List[int]]: ...
    def getLongRow(self, int: int) -> _py_List[int]: ...
    def getLongs(self) -> _py_List[int]: ...
    def getRowCount(self) -> int: ...
    def getShort(self, int: int, int2: int) -> int: ...
    def getShortArray2D(self) -> _py_List[_py_List[int]]: ...
    def getShortRow(self, int: int) -> _py_List[int]: ...
    def getShorts(self) -> _py_List[int]: ...
    def getString(self, int: int, int2: int) -> str: ...
    def getStringArray2D(self) -> _py_List[_py_List[str]]: ...
    def getStringRow(self, int: int) -> _py_List[str]: ...
    def getStrings(self) -> _py_List[str]: ...
    def toString(self) -> str: ...

class ObsoleteFunctionCodec:
    def __init__(self): ...
    @classmethod
    def convertToDiscreteFunction(cls, doubleArray: _py_List[float]) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    def convertToDiscreteFunctionList(cls, doubleArray: _py_List[float]) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> _py_List[float]: ...

class UpdatableParameterValue:
    def setMaxValue(self, double: float) -> None: ...
    def setMinValue(self, double: float) -> None: ...
    def setString(self, string: str) -> None: ...
    def setUnit(self, string: str) -> None: ...
    def setXMaxValue(self, double: float) -> None: ...
    def setXMinValue(self, double: float) -> None: ...
    def setXUnit(self, string: str) -> None: ...
    def setYMaxValue(self, double: float) -> None: ...
    def setYMinValue(self, double: float) -> None: ...
    def setYUnit(self, string: str) -> None: ...

class ValueConverter:
    @classmethod
    def conversionNotPossibleException(cls, valueType: cern.japc.value.ValueType, valueType2: cern.japc.value.ValueType) -> cern.japc.value.ValueConversionException: ...
    @classmethod
    @overload
    def convertToBoolean(cls, boolean: bool) -> bool: ...
    @classmethod
    @overload
    def convertToBoolean(cls, byte: int) -> bool: ...
    @classmethod
    @overload
    def convertToBoolean(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> bool: ...
    @classmethod
    @overload
    def convertToBoolean(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> bool: ...
    @classmethod
    @overload
    def convertToBoolean(cls, enumItem: cern.japc.value.EnumItem) -> bool: ...
    @classmethod
    @overload
    def convertToBoolean(cls, enumItemSet: cern.japc.value.EnumItemSet) -> bool: ...
    @classmethod
    @overload
    def convertToBoolean(cls, double: float) -> bool: ...
    @classmethod
    @overload
    def convertToBoolean(cls, float: float) -> bool: ...
    @classmethod
    @overload
    def convertToBoolean(cls, int: int) -> bool: ...
    @classmethod
    @overload
    def convertToBoolean(cls, string: str) -> bool: ...
    @classmethod
    @overload
    def convertToBoolean(cls, long: int) -> bool: ...
    @classmethod
    @overload
    def convertToBoolean(cls, short: int) -> bool: ...
    @classmethod
    @overload
    def convertToBooleanArray(cls, booleanArray: _py_List[bool]) -> _py_List[bool]: ...
    @classmethod
    @overload
    def convertToBooleanArray(cls, byteArray: _py_List[int]) -> _py_List[bool]: ...
    @classmethod
    @overload
    def convertToBooleanArray(cls, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> _py_List[bool]: ...
    @classmethod
    @overload
    def convertToBooleanArray(cls, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> _py_List[bool]: ...
    @classmethod
    @overload
    def convertToBooleanArray(cls, doubleArray: _py_List[float]) -> _py_List[bool]: ...
    @classmethod
    @overload
    def convertToBooleanArray(cls, floatArray: _py_List[float]) -> _py_List[bool]: ...
    @classmethod
    @overload
    def convertToBooleanArray(cls, intArray: _py_List[int]) -> _py_List[bool]: ...
    @classmethod
    @overload
    def convertToBooleanArray(cls, stringArray: _py_List[str]) -> _py_List[bool]: ...
    @classmethod
    @overload
    def convertToBooleanArray(cls, longArray: _py_List[int]) -> _py_List[bool]: ...
    @classmethod
    @overload
    def convertToBooleanArray(cls, shortArray: _py_List[int]) -> _py_List[bool]: ...
    @classmethod
    @overload
    def convertToByte(cls, boolean: bool) -> int: ...
    @classmethod
    @overload
    def convertToByte(cls, byte: int) -> int: ...
    @classmethod
    @overload
    def convertToByte(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @classmethod
    @overload
    def convertToByte(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @classmethod
    @overload
    def convertToByte(cls, enumItem: cern.japc.value.EnumItem) -> int: ...
    @classmethod
    @overload
    def convertToByte(cls, enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @classmethod
    @overload
    def convertToByte(cls, double: float) -> int: ...
    @classmethod
    @overload
    def convertToByte(cls, float: float) -> int: ...
    @classmethod
    @overload
    def convertToByte(cls, int: int) -> int: ...
    @classmethod
    @overload
    def convertToByte(cls, string: str) -> int: ...
    @classmethod
    @overload
    def convertToByte(cls, long: int) -> int: ...
    @classmethod
    @overload
    def convertToByte(cls, short: int) -> int: ...
    @classmethod
    @overload
    def convertToByteArray(cls, booleanArray: _py_List[bool]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToByteArray(cls, byteArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToByteArray(cls, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToByteArray(cls, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToByteArray(cls, doubleArray: _py_List[float]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToByteArray(cls, floatArray: _py_List[float]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToByteArray(cls, intArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToByteArray(cls, stringArray: _py_List[str]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToByteArray(cls, longArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToByteArray(cls, shortArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, boolean: bool) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, byte: int) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, enumItem: cern.japc.value.EnumItem) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, double: float) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, doubleArray: _py_List[float]) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, float: float) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, int: int) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, string: str) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, long: int) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunction(cls, short: int) -> cern.japc.value.DiscreteFunction: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, boolean: bool) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, byte: int) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, enumItem: cern.japc.value.EnumItem) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, double: float) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, doubleArray: _py_List[float]) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, float: float) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, int: int) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, long: int) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDiscreteFunctionList(cls, short: int) -> cern.japc.value.DiscreteFunctionList: ...
    @classmethod
    @overload
    def convertToDouble(cls, boolean: bool) -> float: ...
    @classmethod
    @overload
    def convertToDouble(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> float: ...
    @classmethod
    @overload
    def convertToDouble(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> float: ...
    @classmethod
    @overload
    def convertToDouble(cls, enumItem: cern.japc.value.EnumItem) -> float: ...
    @classmethod
    @overload
    def convertToDouble(cls, enumItemSet: cern.japc.value.EnumItemSet) -> float: ...
    @classmethod
    @overload
    def convertToDouble(cls, double: float) -> float: ...
    @classmethod
    @overload
    def convertToDouble(cls, string: str) -> float: ...
    @classmethod
    @overload
    def convertToDouble(cls, long: int) -> float: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, booleanArray: _py_List[bool]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, byteArray: _py_List[int]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, doubleArray: _py_List[float]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, floatArray: _py_List[float]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, intArray: _py_List[int]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, stringArray: _py_List[str]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, longArray: _py_List[int]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToDoubleArray(cls, shortArray: _py_List[int]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, boolean: bool) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, byte: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, enumItem: cern.japc.value.EnumItem) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, double: float) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, float: float) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, int: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, string: str, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, long: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItem(cls, short: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, boolean: bool) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, booleanArray: _py_List[bool]) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, byte: int, enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, byteArray: _py_List[int], enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, enumItem: cern.japc.value.EnumItem) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, enumItemSet: cern.japc.value.EnumItemSet) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, double: float) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, doubleArray: _py_List[float]) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, float: float) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, floatArray: _py_List[float]) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, int: int, enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, intArray: _py_List[int], enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, string: str) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, stringArray: _py_List[str], enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, long: int, enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, longArray: _py_List[int], enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, short: int, enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemArray(cls, shortArray: _py_List[int], enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItem]: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, boolean: bool) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, byte: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, enumItem: cern.japc.value.EnumItem) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, double: float) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, float: float) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, int: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, string: str) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, long: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSet(cls, short: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, boolean: bool) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, booleanArray: _py_List[bool]) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, byte: int, enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, byteArray: _py_List[int], enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, enumItem: cern.japc.value.EnumItem) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, enumItemSet: cern.japc.value.EnumItemSet) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, double: float) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, doubleArray: _py_List[float]) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, float: float) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, floatArray: _py_List[float]) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, int: int, enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, intArray: _py_List[int], enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, string: str) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, stringArray: _py_List[str]) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, long: int, enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, longArray: _py_List[int], enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, short: int, enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToEnumItemSetArray(cls, shortArray: _py_List[int], enumType: cern.japc.value.EnumType) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @classmethod
    @overload
    def convertToFloat(cls, boolean: bool) -> float: ...
    @classmethod
    @overload
    def convertToFloat(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> float: ...
    @classmethod
    @overload
    def convertToFloat(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> float: ...
    @classmethod
    @overload
    def convertToFloat(cls, enumItem: cern.japc.value.EnumItem) -> float: ...
    @classmethod
    @overload
    def convertToFloat(cls, enumItemSet: cern.japc.value.EnumItemSet) -> float: ...
    @classmethod
    @overload
    def convertToFloat(cls, double: float) -> float: ...
    @classmethod
    @overload
    def convertToFloat(cls, int: int) -> float: ...
    @classmethod
    @overload
    def convertToFloat(cls, string: str) -> float: ...
    @classmethod
    @overload
    def convertToFloat(cls, long: int) -> float: ...
    @classmethod
    @overload
    def convertToFloatArray(cls, booleanArray: _py_List[bool]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToFloatArray(cls, byteArray: _py_List[int]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToFloatArray(cls, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToFloatArray(cls, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToFloatArray(cls, doubleArray: _py_List[float]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToFloatArray(cls, floatArray: _py_List[float]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToFloatArray(cls, intArray: _py_List[int]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToFloatArray(cls, stringArray: _py_List[str]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToFloatArray(cls, longArray: _py_List[int]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToFloatArray(cls, shortArray: _py_List[int]) -> _py_List[float]: ...
    @classmethod
    @overload
    def convertToInt(cls, boolean: bool) -> int: ...
    @classmethod
    @overload
    def convertToInt(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @classmethod
    @overload
    def convertToInt(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @classmethod
    @overload
    def convertToInt(cls, enumItem: cern.japc.value.EnumItem) -> int: ...
    @classmethod
    @overload
    def convertToInt(cls, enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @classmethod
    @overload
    def convertToInt(cls, double: float) -> int: ...
    @classmethod
    @overload
    def convertToInt(cls, float: float) -> int: ...
    @classmethod
    @overload
    def convertToInt(cls, string: str) -> int: ...
    @classmethod
    @overload
    def convertToInt(cls, long: int) -> int: ...
    @classmethod
    @overload
    def convertToIntArray(cls, booleanArray: _py_List[bool]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToIntArray(cls, byteArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToIntArray(cls, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToIntArray(cls, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToIntArray(cls, doubleArray: _py_List[float]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToIntArray(cls, floatArray: _py_List[float]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToIntArray(cls, intArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToIntArray(cls, stringArray: _py_List[str]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToIntArray(cls, longArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToIntArray(cls, shortArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToLong(cls, boolean: bool) -> int: ...
    @classmethod
    @overload
    def convertToLong(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @classmethod
    @overload
    def convertToLong(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @classmethod
    @overload
    def convertToLong(cls, enumItem: cern.japc.value.EnumItem) -> int: ...
    @classmethod
    @overload
    def convertToLong(cls, enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @classmethod
    @overload
    def convertToLong(cls, double: float) -> int: ...
    @classmethod
    @overload
    def convertToLong(cls, float: float) -> int: ...
    @classmethod
    @overload
    def convertToLong(cls, string: str) -> int: ...
    @classmethod
    @overload
    def convertToLong(cls, long: int) -> int: ...
    @classmethod
    @overload
    def convertToLongArray(cls, booleanArray: _py_List[bool]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToLongArray(cls, byteArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToLongArray(cls, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToLongArray(cls, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToLongArray(cls, doubleArray: _py_List[float]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToLongArray(cls, floatArray: _py_List[float]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToLongArray(cls, intArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToLongArray(cls, stringArray: _py_List[str]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToLongArray(cls, longArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToLongArray(cls, shortArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    def convertToPrimitiveArray(cls, objectArray: _py_List[_py_Any]) -> _py_Any: ...
    @classmethod
    @overload
    def convertToShort(cls, boolean: bool) -> int: ...
    @classmethod
    @overload
    def convertToShort(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @classmethod
    @overload
    def convertToShort(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @classmethod
    @overload
    def convertToShort(cls, enumItem: cern.japc.value.EnumItem) -> int: ...
    @classmethod
    @overload
    def convertToShort(cls, enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @classmethod
    @overload
    def convertToShort(cls, double: float) -> int: ...
    @classmethod
    @overload
    def convertToShort(cls, float: float) -> int: ...
    @classmethod
    @overload
    def convertToShort(cls, int: int) -> int: ...
    @classmethod
    @overload
    def convertToShort(cls, string: str) -> int: ...
    @classmethod
    @overload
    def convertToShort(cls, long: int) -> int: ...
    @classmethod
    @overload
    def convertToShortArray(cls, booleanArray: _py_List[bool]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToShortArray(cls, byteArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToShortArray(cls, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToShortArray(cls, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToShortArray(cls, doubleArray: _py_List[float]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToShortArray(cls, floatArray: _py_List[float]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToShortArray(cls, intArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToShortArray(cls, stringArray: _py_List[str]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToShortArray(cls, longArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToShortArray(cls, shortArray: _py_List[int]) -> _py_List[int]: ...
    @classmethod
    @overload
    def convertToString(cls, boolean: bool) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, byte: int) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, byteArray: _py_List[int]) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, discreteFunction: cern.japc.value.DiscreteFunction) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, enumItem: cern.japc.value.EnumItem) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, enumItemSet: cern.japc.value.EnumItemSet) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, double: float) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, float: float) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, int: int) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, string: str) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, long: int) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, short: int) -> str: ...
    @classmethod
    @overload
    def convertToString(cls, long: int, string: str) -> str: ...
    @classmethod
    @overload
    def convertToStringArray(cls, booleanArray: _py_List[bool]) -> _py_List[str]: ...
    @classmethod
    @overload
    def convertToStringArray(cls, byteArray: _py_List[int]) -> _py_List[str]: ...
    @classmethod
    @overload
    def convertToStringArray(cls, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> _py_List[str]: ...
    @classmethod
    @overload
    def convertToStringArray(cls, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> _py_List[str]: ...
    @classmethod
    @overload
    def convertToStringArray(cls, doubleArray: _py_List[float]) -> _py_List[str]: ...
    @classmethod
    @overload
    def convertToStringArray(cls, floatArray: _py_List[float]) -> _py_List[str]: ...
    @classmethod
    @overload
    def convertToStringArray(cls, intArray: _py_List[int]) -> _py_List[str]: ...
    @classmethod
    @overload
    def convertToStringArray(cls, stringArray: _py_List[str]) -> _py_List[str]: ...
    @classmethod
    @overload
    def convertToStringArray(cls, longArray: _py_List[int]) -> _py_List[str]: ...
    @classmethod
    @overload
    def convertToStringArray(cls, shortArray: _py_List[int]) -> _py_List[str]: ...

class AbstractSimpleValue(AbstractMapSimpleValue, cern.japc.value.SimpleParameterValue, UpdatableParameterValue, java.io.Serializable, java.lang.Cloneable):
    def __init__(self, valueType: cern.japc.value.ValueType): ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSets(self, string: str) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getEnumItemSets(self) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getEnumItemSets(self, int: int, int2: int) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getEnumItems(self, string: str) -> _py_List[cern.japc.value.EnumItem]: ...
    @overload
    def getEnumItems(self) -> _py_List[cern.japc.value.EnumItem]: ...
    @overload
    def getEnumItems(self, int: int, int2: int) -> _py_List[cern.japc.value.EnumItem]: ...
    def getFormatPattern(self) -> str: ...
    @overload
    def getMaxValue(self, string: str) -> float: ...
    @overload
    def getMaxValue(self) -> float: ...
    @overload
    def getMinValue(self, string: str) -> float: ...
    @overload
    def getMinValue(self) -> float: ...
    @overload
    def getUnit(self, string: str) -> str: ...
    @overload
    def getUnit(self) -> str: ...
    def getValueStatus(self) -> cern.japc.value.SimpleValueStatus: ...
    @overload
    def getValueType(self, string: str) -> cern.japc.value.ValueType: ...
    @overload
    def getValueType(self) -> cern.japc.value.ValueType: ...
    @overload
    def getXMaxValue(self, string: str) -> float: ...
    @overload
    def getXMaxValue(self) -> float: ...
    @overload
    def getXMinValue(self, string: str) -> float: ...
    @overload
    def getXMinValue(self) -> float: ...
    @overload
    def getXUnit(self, string: str) -> str: ...
    @overload
    def getXUnit(self) -> str: ...
    @overload
    def getYMaxValue(self, string: str) -> float: ...
    @overload
    def getYMaxValue(self) -> float: ...
    @overload
    def getYMinValue(self, string: str) -> float: ...
    @overload
    def getYMinValue(self) -> float: ...
    @overload
    def getYUnit(self, string: str) -> str: ...
    @overload
    def getYUnit(self) -> str: ...
    def hashCode(self) -> int: ...
    def initializeWithDescriptor(self, simpleDescriptor: cern.japc.value.SimpleDescriptor) -> None: ...
    @classmethod
    @overload
    def newSimpleValue(cls, valueType: cern.japc.value.ValueType) -> 'AbstractSimpleValue': ...
    @classmethod
    @overload
    def newSimpleValue(cls, valueType: cern.japc.value.ValueType, enumType: cern.japc.value.EnumType) -> 'AbstractSimpleValue': ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSets(self, string: str, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> None: ...
    @overload
    def setEnumItemSets(self, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> None: ...
    @overload
    def setEnumItemSets2D(self, string: str, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet], intArray: _py_List[int]) -> None: ...
    @overload
    def setEnumItemSets2D(self, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet], intArray: _py_List[int]) -> None: ...
    @overload
    def setEnumItems(self, string: str, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setEnumItems(self, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setEnumItems2D(self, string: str, enumItemArray: _py_List[cern.japc.value.EnumItem], intArray: _py_List[int]) -> None: ...
    @overload
    def setEnumItems2D(self, enumItemArray: _py_List[cern.japc.value.EnumItem], intArray: _py_List[int]) -> None: ...
    def setFormatPattern(self, string: str) -> None: ...
    def setMaxValue(self, double: float) -> None: ...
    def setMinValue(self, double: float) -> None: ...
    @overload
    def setObject(self, string: str, object: _py_Any) -> None: ...
    @overload
    def setObject(self, object: _py_Any) -> None: ...
    @overload
    def setObjects2D(self, string: str, object: _py_Any, intArray: _py_List[int]) -> None: ...
    @overload
    def setObjects2D(self, object: _py_Any, intArray: _py_List[int]) -> None: ...
    def setUnit(self, string: str) -> None: ...
    def setValueStatus(self, simpleValueStatus: cern.japc.value.SimpleValueStatus) -> None: ...
    def setXMaxValue(self, double: float) -> None: ...
    def setXMinValue(self, double: float) -> None: ...
    def setXUnit(self, string: str) -> None: ...
    def setYMaxValue(self, double: float) -> None: ...
    def setYMinValue(self, double: float) -> None: ...
    def setYUnit(self, string: str) -> None: ...
    def toString(self) -> str: ...

class AbstractArrayValue(AbstractSimpleValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self, valueType: cern.japc.value.ValueType): ...
    @overload
    def __init__(self, valueType: cern.japc.value.ValueType, int: int): ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getBooleans(self) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, string: str) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, string: str, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getBytes(self) -> _py_List[int]: ...
    @overload
    def getBytes(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getColumnCount(self) -> int: ...
    @overload
    def getColumnCount(self, string: str) -> int: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getDoubles(self) -> _py_List[float]: ...
    @overload
    def getDoubles(self, string: str) -> _py_List[float]: ...
    @overload
    def getDoubles(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSets(self, int: int, int2: int) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getEnumItemSets(self, string: str) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getEnumItemSets(self) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getEnumItems(self, int: int, int2: int) -> _py_List[cern.japc.value.EnumItem]: ...
    @overload
    def getEnumItems(self, string: str) -> _py_List[cern.japc.value.EnumItem]: ...
    @overload
    def getEnumItems(self) -> _py_List[cern.japc.value.EnumItem]: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloats(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self) -> _py_List[float]: ...
    @overload
    def getFloats(self, string: str) -> _py_List[float]: ...
    @overload
    def getFloats(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLongs(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getRowCount(self) -> int: ...
    @overload
    def getRowCount(self, string: str) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShorts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self) -> _py_List[int]: ...
    @overload
    def getShorts(self, string: str) -> _py_List[int]: ...
    @overload
    def getShorts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getStrings(self, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self) -> _py_List[str]: ...
    @overload
    def getStrings(self, string: str) -> _py_List[str]: ...
    @overload
    def getStrings(self, string: str, int: int, int2: int) -> _py_List[str]: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBooleans(self, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setBooleans(self, string: str, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setBooleans2D(self, booleanArray: _py_List[bool], intArray: _py_List[int]) -> None: ...
    @overload
    def setBooleans2D(self, string: str, booleanArray: _py_List[bool], intArray: _py_List[int]) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setBytes(self, byteArray: _py_List[int]) -> None: ...
    @overload
    def setBytes(self, string: str, byteArray: _py_List[int]) -> None: ...
    @overload
    def setBytes2D(self, byteArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setBytes2D(self, string: str, byteArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDoubles(self, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setDoubles(self, string: str, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setDoubles2D(self, doubleArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setDoubles2D(self, string: str, doubleArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSets(self, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> None: ...
    @overload
    def setEnumItemSets(self, string: str, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]) -> None: ...
    @overload
    def setEnumItemSets2D(self, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet], intArray: _py_List[int]) -> None: ...
    @overload
    def setEnumItemSets2D(self, string: str, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet], intArray: _py_List[int]) -> None: ...
    @overload
    def setEnumItems(self, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setEnumItems(self, string: str, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setEnumItems2D(self, enumItemArray: _py_List[cern.japc.value.EnumItem], intArray: _py_List[int]) -> None: ...
    @overload
    def setEnumItems2D(self, string: str, enumItemArray: _py_List[cern.japc.value.EnumItem], intArray: _py_List[int]) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloats(self, floatArray: _py_List[float]) -> None: ...
    @overload
    def setFloats(self, string: str, floatArray: _py_List[float]) -> None: ...
    @overload
    def setFloats2D(self, floatArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setFloats2D(self, string: str, floatArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInts(self, intArray: _py_List[int]) -> None: ...
    @overload
    def setInts(self, string: str, intArray: _py_List[int]) -> None: ...
    @overload
    def setInts2D(self, intArray: _py_List[int], intArray2: _py_List[int]) -> None: ...
    @overload
    def setInts2D(self, string: str, intArray: _py_List[int], intArray2: _py_List[int]) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLongs(self, longArray: _py_List[int]) -> None: ...
    @overload
    def setLongs(self, string: str, longArray: _py_List[int]) -> None: ...
    @overload
    def setLongs2D(self, longArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setLongs2D(self, string: str, longArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShorts(self, shortArray: _py_List[int]) -> None: ...
    @overload
    def setShorts(self, string: str, shortArray: _py_List[int]) -> None: ...
    @overload
    def setShorts2D(self, shortArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setShorts2D(self, string: str, shortArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setStrings(self, stringArray: _py_List[str]) -> None: ...
    @overload
    def setStrings(self, string: str, stringArray: _py_List[str]) -> None: ...
    @overload
    def setStrings2D(self, stringArray: _py_List[str], intArray: _py_List[int]) -> None: ...
    @overload
    def setStrings2D(self, string: str, stringArray: _py_List[str], intArray: _py_List[int]) -> None: ...

class AbstractScalarValue(AbstractSimpleValue, java.io.Serializable, java.lang.Cloneable):
    def __init__(self, valueType: cern.japc.value.ValueType): ...
    @overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBooleans(self, string: str) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, string: str, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getBytes(self, string: str) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self) -> _py_List[int]: ...
    @overload
    def getBytes(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getColumnCount(self, string: str) -> int: ...
    @overload
    def getColumnCount(self) -> int: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDoubles(self, string: str) -> _py_List[float]: ...
    @overload
    def getDoubles(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self) -> _py_List[float]: ...
    @overload
    def getDoubles(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloats(self, string: str) -> _py_List[float]: ...
    @overload
    def getFloats(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self) -> _py_List[float]: ...
    @overload
    def getFloats(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInts(self, string: str) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self) -> _py_List[int]: ...
    @overload
    def getInts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLongs(self, string: str) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self) -> _py_List[int]: ...
    @overload
    def getLongs(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getRowCount(self, string: str) -> int: ...
    @overload
    def getRowCount(self) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShorts(self, string: str) -> _py_List[int]: ...
    @overload
    def getShorts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self) -> _py_List[int]: ...
    @overload
    def getShorts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getStrings(self, string: str) -> _py_List[str]: ...
    @overload
    def getStrings(self, string: str, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self) -> _py_List[str]: ...
    @overload
    def getStrings(self, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBooleans(self, string: str, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setBooleans(self, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setBooleans2D(self, string: str, booleanArray: _py_List[bool], intArray: _py_List[int]) -> None: ...
    @overload
    def setBooleans2D(self, booleanArray: _py_List[bool], intArray: _py_List[int]) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setBytes(self, string: str, byteArray: _py_List[int]) -> None: ...
    @overload
    def setBytes(self, byteArray: _py_List[int]) -> None: ...
    @overload
    def setBytes2D(self, string: str, byteArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setBytes2D(self, byteArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDoubles(self, string: str, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setDoubles(self, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setDoubles2D(self, string: str, doubleArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setDoubles2D(self, doubleArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloats(self, string: str, floatArray: _py_List[float]) -> None: ...
    @overload
    def setFloats(self, floatArray: _py_List[float]) -> None: ...
    @overload
    def setFloats2D(self, string: str, floatArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setFloats2D(self, floatArray: _py_List[float], intArray: _py_List[int]) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInts(self, string: str, intArray: _py_List[int]) -> None: ...
    @overload
    def setInts(self, intArray: _py_List[int]) -> None: ...
    @overload
    def setInts2D(self, string: str, intArray: _py_List[int], intArray2: _py_List[int]) -> None: ...
    @overload
    def setInts2D(self, intArray: _py_List[int], intArray2: _py_List[int]) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLongs(self, string: str, longArray: _py_List[int]) -> None: ...
    @overload
    def setLongs(self, longArray: _py_List[int]) -> None: ...
    @overload
    def setLongs2D(self, string: str, longArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setLongs2D(self, longArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShorts(self, string: str, shortArray: _py_List[int]) -> None: ...
    @overload
    def setShorts(self, shortArray: _py_List[int]) -> None: ...
    @overload
    def setShorts2D(self, string: str, shortArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setShorts2D(self, shortArray: _py_List[int], intArray: _py_List[int]) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setStrings(self, string: str, stringArray: _py_List[str]) -> None: ...
    @overload
    def setStrings(self, stringArray: _py_List[str]) -> None: ...
    @overload
    def setStrings2D(self, string: str, stringArray: _py_List[str], intArray: _py_List[int]) -> None: ...
    @overload
    def setStrings2D(self, stringArray: _py_List[str], intArray: _py_List[int]) -> None: ...

class BooleanArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, booleanArray: _py_List[bool]): ...
    @overload
    def __init__(self, booleanArray: _py_List[bool], intArray: _py_List[int]): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getBooleans(self, string: str) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, string: str, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...

class BooleanValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, boolean: bool): ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...

class ByteArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, byteArray: _py_List[int]): ...
    @overload
    def __init__(self, byteArray: _py_List[int], intArray: _py_List[int]): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getBytes(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self) -> _py_List[int]: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...

class ByteValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, byte: int): ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...

class DiscreteFunctionListValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getBooleans(self, string: str) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, string: str, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self) -> _py_List[bool]: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getBytes(self, string: str) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self) -> _py_List[int]: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getDoubles(self, string: str) -> _py_List[float]: ...
    @overload
    def getDoubles(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self) -> _py_List[float]: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloats(self, string: str) -> _py_List[float]: ...
    @overload
    def getFloats(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self) -> _py_List[float]: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInts(self, string: str) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self) -> _py_List[int]: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLongs(self, string: str) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self) -> _py_List[int]: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShorts(self, string: str) -> _py_List[int]: ...
    @overload
    def getShorts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self) -> _py_List[int]: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getStrings(self, string: str) -> _py_List[str]: ...
    @overload
    def getStrings(self, string: str, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self) -> _py_List[str]: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBooleans(self, string: str, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setBooleans(self, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setBytes(self, string: str, byteArray: _py_List[int]) -> None: ...
    @overload
    def setBytes(self, byteArray: _py_List[int]) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDoubles(self, string: str, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setDoubles(self, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloats(self, string: str, floatArray: _py_List[float]) -> None: ...
    @overload
    def setFloats(self, floatArray: _py_List[float]) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInts(self, string: str, intArray: _py_List[int]) -> None: ...
    @overload
    def setInts(self, intArray: _py_List[int]) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLongs(self, string: str, longArray: _py_List[int]) -> None: ...
    @overload
    def setLongs(self, longArray: _py_List[int]) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShorts(self, string: str, shortArray: _py_List[int]) -> None: ...
    @overload
    def setShorts(self, shortArray: _py_List[int]) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setStrings(self, string: str, stringArray: _py_List[str]) -> None: ...
    @overload
    def setStrings(self, stringArray: _py_List[str]) -> None: ...

class DiscreteFunctionValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, discreteFunction: cern.japc.value.DiscreteFunction): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getBooleans(self, string: str) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, string: str, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self) -> _py_List[bool]: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getBytes(self, string: str) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self) -> _py_List[int]: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getDoubles(self, string: str) -> _py_List[float]: ...
    @overload
    def getDoubles(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self) -> _py_List[float]: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloats(self, string: str) -> _py_List[float]: ...
    @overload
    def getFloats(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self) -> _py_List[float]: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInts(self, string: str) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self) -> _py_List[int]: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLongs(self, string: str) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self) -> _py_List[int]: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShorts(self, string: str) -> _py_List[int]: ...
    @overload
    def getShorts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self) -> _py_List[int]: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getStrings(self, string: str) -> _py_List[str]: ...
    @overload
    def getStrings(self, string: str, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self) -> _py_List[str]: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBooleans(self, string: str, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setBooleans(self, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setBytes(self, string: str, byteArray: _py_List[int]) -> None: ...
    @overload
    def setBytes(self, byteArray: _py_List[int]) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDoubles(self, string: str, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setDoubles(self, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloats(self, string: str, floatArray: _py_List[float]) -> None: ...
    @overload
    def setFloats(self, floatArray: _py_List[float]) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInts(self, string: str, intArray: _py_List[int]) -> None: ...
    @overload
    def setInts(self, intArray: _py_List[int]) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLongs(self, string: str, longArray: _py_List[int]) -> None: ...
    @overload
    def setLongs(self, longArray: _py_List[int]) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShorts(self, string: str, shortArray: _py_List[int]) -> None: ...
    @overload
    def setShorts(self, shortArray: _py_List[int]) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setStrings(self, string: str, stringArray: _py_List[str]) -> None: ...
    @overload
    def setStrings(self, stringArray: _py_List[str]) -> None: ...

class DoubleArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, doubleArray: _py_List[float]): ...
    @overload
    def __init__(self, doubleArray: _py_List[float], intArray: _py_List[int]): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getDoubles(self, string: str) -> _py_List[float]: ...
    @overload
    def getDoubles(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self) -> _py_List[float]: ...
    @overload
    def getDoubles(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...

class DoubleValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, double: float): ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...

class EnumArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, enumItemArray: _py_List[cern.japc.value.EnumItem]): ...
    @overload
    def __init__(self, enumItemArray: _py_List[cern.japc.value.EnumItem], intArray: _py_List[int]): ...
    @overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItems(self, int: int, int2: int) -> _py_List[cern.japc.value.EnumItem]: ...
    @overload
    def getEnumItems(self, string: str) -> _py_List[cern.japc.value.EnumItem]: ...
    @overload
    def getEnumItems(self) -> _py_List[cern.japc.value.EnumItem]: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...

class EnumSetArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet]): ...
    @overload
    def __init__(self, enumItemSetArray: _py_List[cern.japc.value.EnumItemSet], intArray: _py_List[int]): ...
    @overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSets(self, int: int, int2: int) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getEnumItemSets(self, string: str) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getEnumItemSets(self) -> _py_List[cern.japc.value.EnumItemSet]: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...

class EnumSetValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, enumItemSet: cern.japc.value.EnumItemSet): ...
    @overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getBooleans(self, string: str) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, string: str, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self) -> _py_List[bool]: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getBytes(self, string: str) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self) -> _py_List[int]: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getDoubles(self, string: str) -> _py_List[float]: ...
    @overload
    def getDoubles(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self) -> _py_List[float]: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloats(self, string: str) -> _py_List[float]: ...
    @overload
    def getFloats(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self) -> _py_List[float]: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInts(self, string: str) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self) -> _py_List[int]: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLongs(self, string: str) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self) -> _py_List[int]: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShorts(self, string: str) -> _py_List[int]: ...
    @overload
    def getShorts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self) -> _py_List[int]: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getStrings(self, string: str) -> _py_List[str]: ...
    @overload
    def getStrings(self, string: str, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self) -> _py_List[str]: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBooleans(self, string: str, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setBooleans(self, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setBytes(self, string: str, byteArray: _py_List[int]) -> None: ...
    @overload
    def setBytes(self, byteArray: _py_List[int]) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDoubles(self, string: str, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setDoubles(self, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloats(self, string: str, floatArray: _py_List[float]) -> None: ...
    @overload
    def setFloats(self, floatArray: _py_List[float]) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInts(self, string: str, intArray: _py_List[int]) -> None: ...
    @overload
    def setInts(self, intArray: _py_List[int]) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLongs(self, string: str, longArray: _py_List[int]) -> None: ...
    @overload
    def setLongs(self, longArray: _py_List[int]) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShorts(self, string: str, shortArray: _py_List[int]) -> None: ...
    @overload
    def setShorts(self, shortArray: _py_List[int]) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setStrings(self, string: str, stringArray: _py_List[str]) -> None: ...
    @overload
    def setStrings(self, stringArray: _py_List[str]) -> None: ...

class EnumValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, enumItem: cern.japc.value.EnumItem): ...
    @overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getBooleans(self, string: str) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, string: str, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self, int: int, int2: int) -> _py_List[bool]: ...
    @overload
    def getBooleans(self) -> _py_List[bool]: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getBytes(self, string: str) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self) -> _py_List[int]: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getDoubles(self, string: str) -> _py_List[float]: ...
    @overload
    def getDoubles(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getDoubles(self) -> _py_List[float]: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloats(self, string: str) -> _py_List[float]: ...
    @overload
    def getFloats(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self) -> _py_List[float]: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInts(self, string: str) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self) -> _py_List[int]: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLongs(self, string: str) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self) -> _py_List[int]: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShorts(self, string: str) -> _py_List[int]: ...
    @overload
    def getShorts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self) -> _py_List[int]: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getStrings(self, string: str) -> _py_List[str]: ...
    @overload
    def getStrings(self, string: str, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self) -> _py_List[str]: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBooleans(self, string: str, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setBooleans(self, booleanArray: _py_List[bool]) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setBytes(self, string: str, byteArray: _py_List[int]) -> None: ...
    @overload
    def setBytes(self, byteArray: _py_List[int]) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDoubles(self, string: str, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setDoubles(self, doubleArray: _py_List[float]) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloats(self, string: str, floatArray: _py_List[float]) -> None: ...
    @overload
    def setFloats(self, floatArray: _py_List[float]) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInts(self, string: str, intArray: _py_List[int]) -> None: ...
    @overload
    def setInts(self, intArray: _py_List[int]) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLongs(self, string: str, longArray: _py_List[int]) -> None: ...
    @overload
    def setLongs(self, longArray: _py_List[int]) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShorts(self, string: str, shortArray: _py_List[int]) -> None: ...
    @overload
    def setShorts(self, shortArray: _py_List[int]) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setStrings(self, string: str, stringArray: _py_List[str]) -> None: ...
    @overload
    def setStrings(self, stringArray: _py_List[str]) -> None: ...

class FloatArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, floatArray: _py_List[float]): ...
    @overload
    def __init__(self, floatArray: _py_List[float], intArray: _py_List[int]): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloats(self, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self, string: str) -> _py_List[float]: ...
    @overload
    def getFloats(self, string: str, int: int, int2: int) -> _py_List[float]: ...
    @overload
    def getFloats(self) -> _py_List[float]: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...

class FloatValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, float: float): ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...

class IntArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, intArray: _py_List[int]): ...
    @overload
    def __init__(self, intArray: _py_List[int], intArray2: _py_List[int]): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self) -> _py_List[int]: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...

class IntValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, int: int): ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...

class LongArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, longArray: _py_List[int]): ...
    @overload
    def __init__(self, longArray: _py_List[int], intArray: _py_List[int]): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLongs(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self) -> _py_List[int]: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...

class LongValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, long: int): ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...

class ShortArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, shortArray: _py_List[int]): ...
    @overload
    def __init__(self, shortArray: _py_List[int], intArray: _py_List[int]): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShorts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self, string: str) -> _py_List[int]: ...
    @overload
    def getShorts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getShorts(self) -> _py_List[int]: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...

class ShortValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, short: int): ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...

class StringArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, stringArray: _py_List[str]): ...
    @overload
    def __init__(self, stringArray: _py_List[str], intArray: _py_List[int]): ...
    def clone(self) -> _py_Any: ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getBytes(self, string: str) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self) -> _py_List[int]: ...
    @overload
    def getBytes(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getLength(self, string: str) -> int: ...
    @overload
    def getLength(self) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getString(self) -> str: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getStrings(self, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self, string: str) -> _py_List[str]: ...
    @overload
    def getStrings(self, string: str, int: int, int2: int) -> _py_List[str]: ...
    @overload
    def getStrings(self) -> _py_List[str]: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: _py_List[cern.japc.value.EnumItem]) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...

class StringValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, string: str): ...
    def equals(self, object: _py_Any) -> bool: ...
    @overload
    def getBoolean(self, string: str) -> bool: ...
    @overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @overload
    def getBoolean(self, int: int) -> bool: ...
    @overload
    def getBoolean(self) -> bool: ...
    @overload
    def getByte(self, string: str) -> int: ...
    @overload
    def getByte(self, string: str, int: int) -> int: ...
    @overload
    def getByte(self, int: int) -> int: ...
    @overload
    def getByte(self) -> int: ...
    @overload
    def getBytes(self, string: str) -> _py_List[int]: ...
    @overload
    def getBytes(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getBytes(self) -> _py_List[int]: ...
    @overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @overload
    def getDouble(self, string: str) -> float: ...
    @overload
    def getDouble(self, string: str, int: int) -> float: ...
    @overload
    def getDouble(self, int: int) -> float: ...
    @overload
    def getDouble(self) -> float: ...
    @overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @overload
    def getFloat(self, string: str) -> float: ...
    @overload
    def getFloat(self, string: str, int: int) -> float: ...
    @overload
    def getFloat(self, int: int) -> float: ...
    @overload
    def getFloat(self) -> float: ...
    @overload
    def getInt(self, string: str) -> int: ...
    @overload
    def getInt(self, string: str, int: int) -> int: ...
    @overload
    def getInt(self, int: int) -> int: ...
    @overload
    def getInt(self) -> int: ...
    @overload
    def getInts(self, string: str) -> _py_List[int]: ...
    @overload
    def getInts(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getInts(self) -> _py_List[int]: ...
    @overload
    def getLong(self, string: str) -> int: ...
    @overload
    def getLong(self, string: str, int: int) -> int: ...
    @overload
    def getLong(self, int: int) -> int: ...
    @overload
    def getLong(self) -> int: ...
    @overload
    def getLongs(self, string: str) -> _py_List[int]: ...
    @overload
    def getLongs(self, string: str, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self, int: int, int2: int) -> _py_List[int]: ...
    @overload
    def getLongs(self) -> _py_List[int]: ...
    @overload
    def getObject(self, string: str) -> _py_Any: ...
    @overload
    def getObject(self, string: str, int: int) -> _py_Any: ...
    @overload
    def getObject(self, int: int) -> _py_Any: ...
    @overload
    def getObject(self) -> _py_Any: ...
    @overload
    def getShort(self, string: str) -> int: ...
    @overload
    def getShort(self, string: str, int: int) -> int: ...
    @overload
    def getShort(self, int: int) -> int: ...
    @overload
    def getShort(self) -> int: ...
    @overload
    def getString(self, string: str) -> str: ...
    @overload
    def getString(self, string: str, int: int) -> str: ...
    @overload
    def getString(self, int: int) -> str: ...
    @overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @overload
    def setBoolean(self, boolean: bool) -> None: ...
    @overload
    def setByte(self, string: str, byte: int) -> None: ...
    @overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, int: int, byte: int) -> None: ...
    @overload
    def setByte(self, byte: int) -> None: ...
    @overload
    def setBytes(self, string: str, byteArray: _py_List[int]) -> None: ...
    @overload
    def setBytes(self, byteArray: _py_List[int]) -> None: ...
    @overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @overload
    def setDouble(self, string: str, double: float) -> None: ...
    @overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, int: int, double: float) -> None: ...
    @overload
    def setDouble(self, double: float) -> None: ...
    @overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @overload
    def setFloat(self, string: str, float: float) -> None: ...
    @overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, int: int, float: float) -> None: ...
    @overload
    def setFloat(self, float: float) -> None: ...
    @overload
    def setInt(self, string: str, int: int) -> None: ...
    @overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int, int2: int) -> None: ...
    @overload
    def setInt(self, int: int) -> None: ...
    @overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @overload
    def setLong(self, string: str, long: int) -> None: ...
    @overload
    def setLong(self, int: int, long: int) -> None: ...
    @overload
    def setLong(self, long: int) -> None: ...
    @overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @overload
    def setShort(self, string: str, short: int) -> None: ...
    @overload
    def setShort(self, int: int, short: int) -> None: ...
    @overload
    def setShort(self, short: int) -> None: ...
    @overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @overload
    def setString(self, string: str, string2: str) -> None: ...
    @overload
    def setString(self, int: int, string: str) -> None: ...
    @overload
    def setString(self, string: str) -> None: ...
