import cern.japc.value
import cern.japc.value.spi.value.core
import java.io
import java.lang
import typing



class AbstractMapSimpleValue(cern.japc.value.spi.value.core.ParameterValueImpl, cern.japc.value.SimpleParameterValue, java.io.Serializable, java.lang.Cloneable):
    """
    public abstract class AbstractMapSimpleValue extends :class:`~cern.japc.value.spi.value.core.ParameterValueImpl` implements :class:`~cern.japc.value.SimpleParameterValue`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        This abstract class provides the basic services needed to manage a SimpleParameterValue that is either a simple scalar
        or String or an array of simple scalars or Strings.
    
        That includes the methods to get and set the value type and the to String method.
    
        Basically this class translates all the map based methods (containing a field name) to the methods of a simple value
        without any fields.
    
        Also see:
            :meth:`~serialized`
    """
    def __init__(self): ...
    def get(self, string: str) -> cern.japc.value.SimpleParameterValue:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.get`
            Returns the matching value for the given name
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.get`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
        
            Returns:
                the matching value for the given name or null if no match
        
        
        """
        ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getArray2D`
            Returns a wrapper around the the value being interpreted as a 2d array. If the value is a 1d array it is encapsulated in
            an array of size 1xn. If the value is not an array it is encapsulated in an array of size 1x1. If the name does not
            match any value an :class:`~cern.japc.value.ValueConversionException` is thrown. IMPORTANT: if the value is mutable and
            is changed after the wrapper is got the wrapper becomes invalide and can return wrong values or even throw
            OutOfBoundException.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getArray2D`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value translated as a boolean 2d array.
        
        
        """
        ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned. If the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getBoolean`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getBoolean`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        """
        ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getBooleans`
            Returns a sub array of the value translated as a boolean array. The subarray starts at startIndex and contains the
            number of element given by length. If startIndex+length is greater than the number of values in the underlying array an
            exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getBooleans`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value translated as a boolean array.
        
        """
        ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getBooleans`
            Returns the value being interpreted as a boolean array. If the value is not an array it is encapsulated in an array of
            size 1. If the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getBooleans`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value translated as a boolean array.
        
        
        """
        ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
            If the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getByte`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getByte`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        """
        ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getBytes`
            Returns a sub array of the value translated as a boolean array. The subarray starts at startIndex and contains the
            number of element given by length. If startIndex+length is greater than the number of values in the underlying array an
            exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getBytes`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value translated as a byte array.
        
        """
        ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getBytes`
            Returns the value translated as a byte array. If the value is not an array it is encapsulated in an array of size 1. If
            the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getBytes`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value translated as a byte array.
        
        
        """
        ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getColumnCount(self) -> int: ...
    @typing.overload
    def getColumnCount(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getColumnCount`
            Returns the number of columns for the case when the value is represented as 2-dimensional array. For scalar which are
            not bit-pattern will always return 1.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getColumnCount`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the number of columns for the case when the value is represented as 2-dimensional array
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the name does not match any value or the value can't be
            represented as a discrete function a :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the name does not match any value or the value can't
            be represented as a discrete function list a :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
            If the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getDouble`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getDouble`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        """
        ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getDoubles`
            Returns a sub array of the value translated as a boolean array. The subarray starts at startIndex and contains the
            number of element given by length. If startIndex+length is greater than the number of values in the underlying array an
            exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getDoubles`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value translated as a double array.
        
        """
        ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getDoubles`
            Returns the value translated as a double array. If the value is not an array it is encapsulated in an array of size 1.
            If the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getDoubles`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value translated as a double array.
        
        
        """
        ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the name does not match any value or the value can't be
            represented as an enumeration item (value is boolean, array or there is no information about enumeration type, etc) an
            :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getEnumItem`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the name does not match any value or the value can't
            be represented as an enumeration item set (value is boolean, array or there is no information about enumeration type,
            etc) an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSets(self) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self, string: str) -> typing.List[cern.japc.value.EnumItemSet]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getEnumItemSets`
            Returns the value translated as a :class:`~cern.japc.value.EnumItemSet` array. If the value is not an array it is
            encapsulated in an array of size 1. If the name does not match any value an
            :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getEnumItemSets`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value translated as a String array.
        
        
        """
        ...
    @typing.overload
    def getEnumItems(self) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self, string: str) -> typing.List[cern.japc.value.EnumItem]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getEnumItems`
            Returns the value translated as a :class:`~cern.japc.value.EnumItem` array. If the value is not an array it is
            encapsulated in an array of size 1. If the name does not match any value an
            :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getEnumItems`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value translated as a String array.
        
        
        """
        ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
            If the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getFloat`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getFloat`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        """
        ...
    @typing.overload
    def getFloats(self) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getFloats`
            Returns a sub array of the value translated as a boolean array. The subarray starts at startIndex and contains the
            number of element given by length. If startIndex+length is greater than the number of values in the underlying array an
            exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getFloats`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value translated as a float array.
        
        """
        ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getFloats`
            Returns the value translated as a float array. If the value is not an array it is encapsulated in an array of size 1. If
            the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getFloats`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value translated as a float array.
        
        
        """
        ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned. If
            the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getInt`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getInt`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        """
        ...
    @typing.overload
    def getInts(self) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getInts`
            Returns the value translated as a int array. If the value is not an array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getInts`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value translated as a int array.
        
        """
        ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getInts`
            Returns the value translated as a int array. If the value is not an array it is encapsulated in an array of size 1. If
            the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getInts`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value translated as a int array.
        
        
        """
        ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getLength`
            Returns the length of the array represented by the value of given name. In case the value is not an array the value
            returned is 1. If the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getLength`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get the length for
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
            If the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getLong`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getLong`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        """
        ...
    @typing.overload
    def getLongs(self) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getLongs`
            Returns a sub array of the value translated as a boolean array. The subarray starts at startIndex and contains the
            number of element given by length. If startIndex+length is greater than the number of values in the underlying array an
            exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getLongs`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value translated as a long array.
        
        """
        ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getLongs`
            Returns the value translated as a long array. If the value is not an array it is encapsulated in an array of size 1. If
            the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getLongs`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value translated as a long array.
        
        
        """
        ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getMaxValue(self) -> float: ...
    @typing.overload
    def getMaxValue(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getMaxValue`
            Returns the allowed maximum of the value with a given name. The maximum is usually the same as the one given by the
            descriptor. If the maximum is dynamic, the one from the descriptor cannot be defined and this method returns the correct
            value. If no maximum is defined the :code:`Double.NaN` is returned.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getMaxValue`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): value name
        
            Returns:
                the allowed maximum of the value with a given name or :code:`Double.NaN`
        
        
        """
        ...
    @typing.overload
    def getMinValue(self) -> float: ...
    @typing.overload
    def getMinValue(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getMinValue`
            Returns the allowed minimum of the value with a given name. The minimum is usually the same as the one given by the
            descriptor. If the minimum is dynamic, the one from the descriptor cannot be defined and this method returns the correct
            value. If no minimum is defined the :code:`Double.NaN` is returned.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getMinValue`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): value name
        
            Returns:
                the allowed minimum of the value with a given name or :code:`Double.NaN`
        
        
        """
        ...
    def getNames(self) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getNames`
            Returns the names of all entries in this map. The array returned is a copy. Any modification on the returned array has
            no effect on this value.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getNames`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Returns:
                the names of all entries in this map
        
        
        """
        ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type and arrays and string
            without change.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getObject`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value as an object.
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getObject`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getRowCount(self) -> int: ...
    @typing.overload
    def getRowCount(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getRowCount`
            Returns the number of rows for the case when the value is represented as 2-dimensional array. For scalar and
            1-dimensional arrays will always return 1.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getRowCount`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the number of rows for the case when the value is represented as 2-dimensional array
        
        
        """
        ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
            If the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getShort`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getShort`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        """
        ...
    @typing.overload
    def getShorts(self) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getShorts`
            Returns a sub array of the value translated as a boolean array. The subarray starts at startIndex and contains the
            number of element given by length. If startIndex+length is greater than the number of values in the underlying array an
            exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getShorts`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value translated as a short array.
        
        """
        ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getShorts`
            Returns the value translated as a short array. If the value is not an array it is encapsulated in an array of size 1. If
            the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getShorts`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value translated as a short array.
        
        
        """
        ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getString`
            Returns the value being interpreted as a String. If the value is an array only the first value of the array is returned.
            If the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getString`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value being interpreted as a String.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getString`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        """
        ...
    @typing.overload
    def getStrings(self) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getStrings`
            Returns a sub array of the value translated as a boolean array. The subarray starts at startIndex and contains the
            number of element given by length. If startIndex+length is greater than the number of values in the underlying array an
            exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getStrings`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value translated as a String array.
        
        """
        ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getStrings`
            Returns the value translated as a String array. If the value is not an array it is encapsulated in an array of size 1.
            If the name does not match any value an :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getStrings`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get
        
            Returns:
                the value translated as a String array.
        
        
        """
        ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getUnit(self) -> str: ...
    @typing.overload
    def getUnit(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getUnit`
            Returns the unit of the value with a given name. The unit is usually the same as the one given by the descriptor. If the
            unit is dynamic, the one from the descriptor cannot be defined and this method returns the correct value. If no unit is
            defined an empty string is returned.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getUnit`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): value name
        
            Returns:
                the unit of the value with a given name or an empty string
        
        
        """
        ...
    @typing.overload
    def getValueType(self) -> cern.japc.value.ValueType: ...
    @typing.overload
    def getValueType(self, string: str) -> cern.japc.value.ValueType:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getValueType`
            Returns the value type of the value of given name If the name does not match any value an
            :class:`~cern.japc.value.ValueConversionException` is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getValueType`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value to get the type for
        
            Returns:
                the value type of the value interpreted by this reader
        
        
        """
        ...
    @typing.overload
    def getXMaxValue(self) -> float: ...
    @typing.overload
    def getXMaxValue(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getXMaxValue`
            If the value with a given name is a function, this method returns the allowed maximum of X axis. The maximum is usually
            the same as the one given by the descriptor. If the maximum is dynamic, the one from the descriptor cannot be defined
            and this method returns the correct value. If the value is not a function or no maximum is defined the
            :code:`Double.NaN` is returned.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getXMaxValue`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): value name
        
            Returns:
                the allowed maximum of X axis for the value with a given name or :code:`Double.NaN`
        
        
        """
        ...
    @typing.overload
    def getXMinValue(self) -> float: ...
    @typing.overload
    def getXMinValue(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getXMinValue`
            If the value with a given name is a function, this method returns the allowed minimum of X axis. The minimum is usually
            the same as the one given by the descriptor. If the minimum is dynamic, the one from the descriptor cannot be defined
            and this method returns the correct value. If the value is not a function or no minimum is defined the
            :code:`Double.NaN` is returned.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getXMinValue`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): value name
        
            Returns:
                the allowed minimum of X axis for the value with a given name or :code:`Double.NaN`
        
        
        """
        ...
    @typing.overload
    def getXUnit(self) -> str: ...
    @typing.overload
    def getXUnit(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getXUnit`
            If the value with a given name is a function, this method returns the unit of X axis. The unit is usually the same as
            the one given by the descriptor. If the unit is dynamic, the one from the descriptor cannot be defined and this method
            returns the correct value. If the value is not a function or no unit is defined an empty string is returned.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getXUnit`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): value name
        
            Returns:
                the unit of X axis for the value with a given name or an empty string
        
        
        """
        ...
    @typing.overload
    def getYMaxValue(self) -> float: ...
    @typing.overload
    def getYMaxValue(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getYMaxValue`
            If the value with a given name is a function, this method returns the allowed maximum of Y axis. The maximum is usually
            the same as the one given by the descriptor. If the maximum is dynamic, the one from the descriptor cannot be defined
            and this method returns the correct value. If no maximum is defined the :code:`Double.NaN` is returned. If the value is
            not a function this method returns the same result as :meth:`~cern.japc.value.ImmutableMapParameterValue.getMinValue`.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getYMaxValue`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): value name
        
            Returns:
                the allowed maximum of Y axis for the value with a given name or :code:`Double.NaN`
        
        
        """
        ...
    @typing.overload
    def getYMinValue(self) -> float: ...
    @typing.overload
    def getYMinValue(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getYMinValue`
            If the value with a given name is a function, this method returns the allowed minimum of Y axis. The minimum is usually
            the same as the one given by the descriptor. If the minimum is dynamic, the one from the descriptor cannot be defined
            and this method returns the correct value. If no minimum is defined the :code:`Double.NaN` is returned. If the value is
            not a function this method returns the same result as :meth:`~cern.japc.value.ImmutableMapParameterValue.getMinValue`.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getYMinValue`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): value name
        
            Returns:
                the allowed minimum of Y axis for the value with a given name or :code:`Double.NaN`
        
        
        """
        ...
    @typing.overload
    def getYUnit(self) -> str: ...
    @typing.overload
    def getYUnit(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.getYUnit`
            If the value with a given name is a function, this method returns the unit of Y axis. The unit is usually the same as
            the one given by the descriptor. If the unit is dynamic, the one from the descriptor cannot be defined and this method
            returns the correct value. If no unit is defined an empty string is returned. If the value is not a function this method
            returns the same result as :meth:`~cern.japc.value.ImmutableMapParameterValue.getUnit`.
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.getYUnit`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): value name
        
            Returns:
                the unit of Y axis for the value with a given name or an empty string
        
        
        """
        ...
    def makeMutable(self) -> 'AbstractMapSimpleValue':
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.makeMutable`
            Creates a mutable version of this ParameterValue that can be set using the setters. The original values are untouched by
            this operation. If this ParameterValue is already mutable this method returns the same instance.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.makeMutable` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.makeMutable` in interface :class:`~cern.japc.value.ParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.makeMutable` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.makeMutable`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                A new mutable copy of this parameter value or this parameter value itself if it is already mutable.
        
        
        """
        ...
    def put(self, string: str, simpleParameterValue: cern.japc.value.SimpleParameterValue) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.put`
            Sets the matching reader for the given named value
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.put` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (:class:`~cern.japc.value.SimpleParameterValue`): the non null matching reader for the given named value
        
        
        """
        ...
    def remove(self, string: str) -> cern.japc.value.SimpleParameterValue:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.remove`
            Removes the matching reader from this map
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.remove` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the reader
        
            Returns:
                the reader removed or null if none was removed
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setBoolean`
            Sets the value being a boolean. The scale is left unchanged from what it was before or set to 0 is the value of that
            name has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setBoolean` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (boolean): the boolean value.
        
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setBoolean` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setBooleans`
            Sets the value being a boolean array. The scale is left unchanged from what it was before or set to 0 is the value of
            that name has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setBooleans` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (boolean[]): the boolean array value.
        
        
        """
        ...
    @typing.overload
    def setBooleans2D(self, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBooleans2D(self, string: str, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setBooleans2D`
            Sets the value being a 2-dimensional boolean array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setBooleans2D` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (boolean[]): the boolean array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setByte`
            Sets the value being a byte. The scale is left unchanged from what it was before or set to 0 is the value of that name
            has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setByte` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (byte): the byte value.
        
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setByte` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setBytes`
            Sets the value being a byte array. The scale is left unchanged from what it was before or set to 0 is the value of that
            name has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setBytes` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (byte[]): the byte array value.
        
        
        """
        ...
    @typing.overload
    def setBytes2D(self, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes2D(self, string: str, byteArray: typing.List[int], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setBytes2D`
            Sets the value being a 2-dimensional byte array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setBytes2D` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (byte[]): the byte array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setDiscreteFunction`
            Sets the value being a :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setDiscreteFunction` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setDiscreteFunctionList`
            Sets the value being a :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setDouble`
            Sets the value being a double. The scale is left unchanged from what it was before or set to 0 is the value of that name
            has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setDouble` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (double): the double value.
        
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setDouble` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setDoubles`
            Sets the value being a double array. The scale is left unchanged from what it was before or set to 0 is the value of
            that name has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setDoubles` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (double[]): the double array value.
        
        
        """
        ...
    @typing.overload
    def setDoubles2D(self, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDoubles2D(self, string: str, doubleArray: typing.List[float], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setDoubles2D`
            Sets the value being a 2-dimensional double array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setDoubles2D` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (double[]): the double array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setEnumItem` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setEnumItemSet` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSets(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None: ...
    @typing.overload
    def setEnumItemSets(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setEnumItemSets`
            Sets the value being a EnumItemSet array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setEnumItemSets` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (:class:`~cern.japc.value.EnumItemSet`[]): the EnumItemSet array value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSets2D(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItemSets2D(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setEnumItemSets2D`
            Sets the value being a 2-dimensional EnumItemSet array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setEnumItemSets2D` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (:class:`~cern.japc.value.EnumItemSet`[]): the EnumItemSet array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setEnumItems(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setEnumItems(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setEnumItems`
            Sets the value being a EnumItem array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setEnumItems` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (:class:`~cern.japc.value.EnumItem`[]): the EnumItem array value.
        
        
        """
        ...
    @typing.overload
    def setEnumItems2D(self, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItems2D(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setEnumItems2D`
            Sets the value being a 2-dimensional EnumItem array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setEnumItems2D` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (:class:`~cern.japc.value.EnumItem`[]): the EnumItem array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setFloat`
            Sets the value being a float. The scale is left unchanged from what it was before or set to 0 is the value of that name
            has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setFloat` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (float): the float value.
        
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setFloat` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setFloats`
            Sets the value being a float array. The scale is left unchanged from what it was before or set to 0 is the value of that
            name has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setFloats` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (float[]): the float array value.
        
        
        """
        ...
    @typing.overload
    def setFloats2D(self, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloats2D(self, string: str, floatArray: typing.List[float], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setFloats2D`
            Sets the value being a 2-dimensional float array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setFloats2D` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (float[]): the float array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setInt` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setInt`
            Sets the value being a int. The scale is left unchanged from what it was before or set to 0 is the value of that name
            has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setInt` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setInts`
            Sets the value being a int array. The scale is left unchanged from what it was before or set to 0 is the value of that
            name has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setInts` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (int[]): the int array value.
        
        
        """
        ...
    @typing.overload
    def setInts2D(self, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setInts2D(self, string: str, intArray: typing.List[int], intArray2: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setInts2D`
            Sets the value being a 2-dimensional int array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setInts2D` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (int[]): the int array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setLong` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setLong`
            Sets the value being a long. The scale is left unchanged from what it was before or set to 0 is the value of that name
            has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setLong` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setLongs`
            Sets the value being a long array. The scale is left unchanged from what it was before or set to 0 is the value of that
            name has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setLongs` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (long[]): the long array value.
        
        
        """
        ...
    @typing.overload
    def setLongs2D(self, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs2D(self, string: str, longArray: typing.List[int], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setLongs2D`
            Sets the value being a 2-dimensional long array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setLongs2D` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (long[]): the long array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setObject(self, object: typing.Any) -> None: ...
    @typing.overload
    def setObject(self, string: str, object: typing.Any) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setObject`
            Sets the value as an object. This method can handle any scalar wrapping Object type as well as arrays and string. If
            other type was passed a `null
            <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/IllegalArgumentException.html?is-external=true>` will be
            thrown. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setObject` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (`Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`): the value as an object.
        
        
        """
        ...
    @typing.overload
    def setObjects2D(self, object: typing.Any, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setObjects2D(self, string: str, object: typing.Any, intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setObjects2D`
            Sets the value as a 2d array of objects. This method can handle any array of primitives and Strings, which will be used
            as a source for 2D array. If other type was passed a `null
            <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/IllegalArgumentException.html?is-external=true>` will be
            thrown. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setObjects2D` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (`Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`): the value as an object.
                dimensions (int[]): the dimensions of the 2D array
        
        
        """
        ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setShort` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setShort`
            Sets the value being a short. The scale is left unchanged from what it was before or set to 0 is the value of that name
            has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setShort` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setShorts`
            Sets the value being a short array. The scale is left unchanged from what it was before or set to 0 is the value of that
            name has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setShorts` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (short[]): the short array value.
        
        
        """
        ...
    @typing.overload
    def setShorts2D(self, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts2D(self, string: str, shortArray: typing.List[int], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setShorts2D`
            Sets the value being a 2-dimensional short array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setShorts2D` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (short[]): the short array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setString(self, int: int, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setString` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setString`
            Sets the value being a String. The scale is left unchanged from what it was before or set to 0 is the value of that name
            has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setString` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setStrings`
            Sets the value being a String array. The scale is left unchanged from what it was before or set to 0 is the value of
            that name has not been set before.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setStrings` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): the String array value.
        
        
        """
        ...
    @typing.overload
    def setStrings2D(self, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setStrings2D(self, string: str, stringArray: typing.List[str], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.MapParameterValue.setStrings2D`
            Sets the value being a 2-dimensional String array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.MapParameterValue.setStrings2D` in interface :class:`~cern.japc.value.MapParameterValue`
        
            Parameters:
                name (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the name of the value
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): the String array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    def size(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.ImmutableMapParameterValue.size`
            Returns the number of entries in this map
        
            Specified by:
                :meth:`~cern.japc.value.ImmutableMapParameterValue.size`Â in
                interfaceÂ :class:`~cern.japc.value.ImmutableMapParameterValue`
        
            Returns:
                the number of entries in this map
        
        
        """
        ...

class Array2DImpl(cern.japc.value.Array2D, java.io.Serializable):
    """
    public class Array2DImpl extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>` implements :class:`~cern.japc.value.Array2D`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`
    
        The wrapper around parameterValue representing 2-dimensional array
    
        Also see:
            :meth:`~serialized`
    """
    def __init__(self, simpleParameterValue: cern.japc.value.SimpleParameterValue, intArray: typing.List[int]): ...
    def getArray1D(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getArray1D`
            Returns a flat array representing the 2D array as an Object.
        
            The return value is an array of elements of corresponding type (boolean[], byte[], double[], float[], int[], long[],
            short[] or String[])
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getArray1D` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                a flat array representing the 2D array.
        
        
        """
        ...
    def getBoolean(self, int: int, int2: int) -> bool:
        """
            Returns the value specified with the 2 indexes.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getBoolean` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): first index
                columnNumber (int): second index
        
            Returns:
                the value specified with the 2 indexes.
        
        
        """
        ...
    def getBooleanArray2D(self) -> typing.List[typing.List[bool]]:
        """
            Returns the 2-dimensional array
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getBooleanArray2D` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the 2-dimensional array
        
        
        """
        ...
    def getBooleanRow(self, int: int) -> typing.List[bool]:
        """
            Returns the row specified with the index
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getBooleanRow` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): the index of the row
        
            Returns:
                the row specified with the index
        
        
        """
        ...
    def getBooleans(self) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getBooleans`
            Returns a flat array of booleans representing the 2D array.
        
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getBooleans` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                a flat array of booleans representing the 2D array.
        
        
        """
        ...
    def getByte(self, int: int, int2: int) -> int:
        """
            Returns the value specified with the 2 indexes.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getByte` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): first index
                columnNumber (int): second index
        
            Returns:
                the value specified with the 2 indexes.
        
        
        """
        ...
    def getByteArray2D(self) -> typing.List[typing.List[int]]:
        """
            Returns the 2-dimensional array
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getByteArray2D` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the 2-dimensional array
        
        
        """
        ...
    def getByteRow(self, int: int) -> typing.List[int]:
        """
            Returns the row specified with the index
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getByteRow` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): the index of the row
        
            Returns:
                the row specified with the index
        
        
        """
        ...
    def getBytes(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getBytes`
            Returns a flat array of bytes representing the 2D array.
        
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getBytes` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                a flat array of bytes representing the 2D array.
        
        
        """
        ...
    def getColumnCount(self) -> int:
        """
            Returns the number of columns.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getColumnCount` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the number of columns.
        
        
        """
        ...
    def getDouble(self, int: int, int2: int) -> float:
        """
            Returns the value specified with the 2 indexes.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getDouble` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): first index
                columnNumber (int): second index
        
            Returns:
                the value specified with the 2 indexes.
        
        
        """
        ...
    def getDoubleArray2D(self) -> typing.List[typing.List[float]]:
        """
            Returns the 2-dimensional array
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getDoubleArray2D` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the 2-dimensional array
        
        
        """
        ...
    def getDoubleRow(self, int: int) -> typing.List[float]:
        """
            Returns the row specified with the index
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getDoubleRow` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): the index of the row
        
            Returns:
                the row specified with the index
        
        
        """
        ...
    def getDoubles(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getDoubles`
            Returns a flat array of doubles representing the 2D array.
        
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getDoubles` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                a flat array of doubles representing the 2D array.
        
        
        """
        ...
    def getEnumItem(self, int: int, int2: int) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getEnumItem`
            Returns the value specified with the 2 indexes.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getEnumItem` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): first index
                columnNumber (int): second index
        
            Returns:
                the value specified with the 2 indexes.
        
        
        """
        ...
    def getEnumItemArray2D(self) -> typing.List[typing.List[cern.japc.value.EnumItem]]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getEnumItemArray2D`
            Returns the 2-dimensional array
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getEnumItemArray2D` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the 2-dimensional array
        
        
        """
        ...
    def getEnumItemRow(self, int: int) -> typing.List[cern.japc.value.EnumItem]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getEnumItemRow`
            Returns the row specified with the index
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getEnumItemRow` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): the index of the row
        
            Returns:
                the row specified with the index
        
        
        """
        ...
    def getEnumItemSet(self, int: int, int2: int) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getEnumItemSet`
            Returns the value specified with the 2 indexes.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getEnumItemSet` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): first index
                columnNumber (int): second index
        
            Returns:
                the value specified with the 2 indexes.
        
        
        """
        ...
    def getEnumItemSetArray2D(self) -> typing.List[typing.List[cern.japc.value.EnumItemSet]]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getEnumItemSetArray2D`
            Returns the 2-dimensional array
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getEnumItemSetArray2D` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the 2-dimensional array
        
        
        """
        ...
    def getEnumItemSetRow(self, int: int) -> typing.List[cern.japc.value.EnumItemSet]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getEnumItemSetRow`
            Returns the row specified with the index
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getEnumItemSetRow` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): the index of the row
        
            Returns:
                the row specified with the index
        
        
        """
        ...
    def getEnumItemSets(self) -> typing.List[cern.japc.value.EnumItemSet]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getEnumItemSets`
            Returns a flat array of enumeration sets representing the 2D array.
        
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getEnumItemSets` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                a flat array of enumeration sets representing the 2D array.
        
        
        """
        ...
    def getEnumItems(self) -> typing.List[cern.japc.value.EnumItem]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getEnumItems`
            Returns a flat array of enumerations representing the 2D array.
        
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getEnumItems` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                a flat array of enumerations representing the 2D array.
        
        
        """
        ...
    def getFloat(self, int: int, int2: int) -> float:
        """
            Returns the value specified with the 2 indexes.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getFloat` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): first index
                columnNumber (int): second index
        
            Returns:
                the value specified with the 2 indexes.
        
        
        """
        ...
    def getFloatArray2D(self) -> typing.List[typing.List[float]]:
        """
            Returns the 2-dimensional array
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getFloatArray2D` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the 2-dimensional array
        
        
        """
        ...
    def getFloatRow(self, int: int) -> typing.List[float]:
        """
            Returns the row specified with the index
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getFloatRow` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): the index of the row
        
            Returns:
                the row specified with the index
        
        
        """
        ...
    def getFloats(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getFloats`
            Returns a flat array of floats representing the 2D array.
        
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getFloats` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                a flat array of floats representing the 2D array.
        
        
        """
        ...
    def getInt(self, int: int, int2: int) -> int:
        """
            Returns the value specified with the 2 indexes.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getInt` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): first index
                columnNumber (int): second index
        
            Returns:
                the value specified with the 2 indexes.
        
        
        """
        ...
    def getIntArray2D(self) -> typing.List[typing.List[int]]:
        """
            Returns the 2-dimensional array
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getIntArray2D` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the 2-dimensional array
        
        
        """
        ...
    def getIntRow(self, int: int) -> typing.List[int]:
        """
            Returns the row specified with the index
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getIntRow` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): the index of the row
        
            Returns:
                the row specified with the index
        
        
        """
        ...
    def getInternalComponentType(self) -> cern.japc.value.ValueType:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getInternalComponentType`
            Returns the internal component type of the 2D array.
        
            This method returns the JAPC type of the elements in the array.
        
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getInternalComponentType` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the internal component type of the 2D array
        
        
        """
        ...
    def getInts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getInts`
            Returns a flat array of integers representing the 2D array.
        
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getInts` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                a flat array of integers representing the 2D array.
        
        
        """
        ...
    def getLong(self, int: int, int2: int) -> int:
        """
            Returns the value specified with the 2 indexes.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getLong` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): first index
                columnNumber (int): second index
        
            Returns:
                the value specified with the 2 indexes.
        
        
        """
        ...
    def getLongArray2D(self) -> typing.List[typing.List[int]]:
        """
            Returns the 2-dimensional array
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getLongArray2D` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the 2-dimensional array
        
        
        """
        ...
    def getLongRow(self, int: int) -> typing.List[int]:
        """
            Returns the row specified with the index
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getLongRow` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): the index of the row
        
            Returns:
                the row specified with the index
        
        
        """
        ...
    def getLongs(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getLongs`
            Returns a flat array of longs representing the 2D array.
        
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getLongs` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                a flat array of longs representing the 2D array.
        
        
        """
        ...
    def getRowCount(self) -> int:
        """
            Returns the number of rows.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getRowCount` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the number of rows.
        
        
        """
        ...
    def getShort(self, int: int, int2: int) -> int:
        """
            Returns the value specified with the 2 indexes.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getShort` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): first index
                columnNumber (int): second index
        
            Returns:
                the value specified with the 2 indexes.
        
        
        """
        ...
    def getShortArray2D(self) -> typing.List[typing.List[int]]:
        """
            Returns the 2-dimensional array
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getShortArray2D` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the 2-dimensional array
        
        
        """
        ...
    def getShortRow(self, int: int) -> typing.List[int]:
        """
            Returns the row specified with the index
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getShortRow` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): the index of the row
        
            Returns:
                the row specified with the index
        
        
        """
        ...
    def getShorts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getShorts`
            Returns a flat array of shorts representing the 2D array.
        
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getShorts` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                a flat array of shorts representing the 2D array.
        
        
        """
        ...
    def getString(self, int: int, int2: int) -> str:
        """
            Returns the value specified with the 2 indexes.
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getString` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): first index
                columnNumber (int): second index
        
            Returns:
                the value specified with the 2 indexes.
        
        
        """
        ...
    def getStringArray2D(self) -> typing.List[typing.List[str]]:
        """
            Returns the 2-dimensional array
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getStringArray2D` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                the 2-dimensional array
        
        
        """
        ...
    def getStringRow(self, int: int) -> typing.List[str]:
        """
            Returns the row specified with the index
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getStringRow` in interface :class:`~cern.japc.value.Array2D`
        
            Parameters:
                rowNumber (int): the index of the row
        
            Returns:
                the row specified with the index
        
        
        """
        ...
    def getStrings(self) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.Array2D.getStrings`
            Returns a flat array of strings representing the 2D array.
        
        
            Specified by:
                :meth:`~cern.japc.value.Array2D.getStrings` in interface :class:`~cern.japc.value.Array2D`
        
            Returns:
                a flat array of strings representing the 2D array.
        
        
        """
        ...
    def toString(self) -> str:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...

class ObsoleteFunctionCodec:
    """
    `@Deprecated <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Deprecated.html?is-external=true>` public class ObsoleteFunctionCodec extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    
        Deprecated.
        This class contains the first version (now oboslete) of unified encoding of functions and function-lists as a double
        array:
    
    
        **P**: point, defined as x,y
    
    
        **F**: function, defined as #P, P1, P2, ... Pn (where n = #P)
    
    
        **FL**: function list, defined as #F, F1, F2, ... Fm (where m = #F)
    
    
        With introduction of full support for functions and function-lists in the control system the encoding/decoding should
        not be part of JAPC anymore (however because of CALS v.1 a slightly modified version will still be available as a part
        of :class:`~cern.japc.value.spi.value.simple.ValueConverter`).
    
    
        TODO: This class should eventually be moved to InCA communicating with Passerelle and LabView (through XML/RPC gateway
        provided by CMW) as well as reading functions and functions-lists represented in this encoding. The reason it is
        currently in JAPC is the fact that it is not easy to identify all the users of the obsolete encoding so it would be
        faster/easier to switch them to a class in JAPC than to a class in LSA.
    
    
        See JAPC-876.
    """
    def __init__(self): ...
    @staticmethod
    def convertToDiscreteFunction(doubleArray: typing.List[float]) -> cern.japc.value.DiscreteFunction:
        """
            Deprecated.
            Conversion from low level double-array representation to discrete function
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @staticmethod
    def convertToDiscreteFunctionList(doubleArray: typing.List[float]) -> cern.japc.value.DiscreteFunctionList:
        """
            Deprecated.
            Conversion from low level double-array representation to discrete function list
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
            Also see:
                :meth:`~cern.japc.value.spi.value.simple.ValueConverter.convertToDoubleArray`
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(discreteFunction: cern.japc.value.DiscreteFunction) -> typing.List[float]:
        """
            Deprecated.
            Conversion from DiscreteFunction to double array
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Also see:
                :meth:`~cern.japc.value.spi.value.simple.ValueConverter.convertToDoubleArray`
        
            Deprecated.
            Conversion from DiscreteFunctionList to double array using the following convention
        
        
        
        
            **P**: point, defined as x,y
        
        
            **F**: function, defined as #P, P1, P2, ... Pn (where n = #P)
        
        
            **FL**: function list, defined as #F, F1, F2, ... Fm (where m = #F)
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): - initial discrete function list to be converted
        
            Returns:
                the discrete function list encoded in a double array as specified above
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> typing.List[float]: ...

class UpdatableParameterValue:
    """
    public interface UpdatableParameterValue
    """
    def setMaxValue(self, double: float) -> None:
        """
        
            Parameters:
                maxValue (double): maximum to set
        
        
        """
        ...
    def setMinValue(self, double: float) -> None:
        """
        
            Parameters:
                minValue (double): minimum to set
        
        
        """
        ...
    def setString(self, string: str) -> None:
        """
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): The string value to set
        
        
        """
        ...
    def setUnit(self, string: str) -> None:
        """
        
            Parameters:
                unit (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): unit to set
        
        
        """
        ...
    def setXMaxValue(self, double: float) -> None:
        """
        
            Parameters:
                xMaxValue (double): maximum of X axis to set (makes sense for function values only)
        
        
        """
        ...
    def setXMinValue(self, double: float) -> None:
        """
        
            Parameters:
                xMinValue (double): minimum of X axis to set (makes sense for function values only)
        
        
        """
        ...
    def setXUnit(self, string: str) -> None:
        """
        
            Parameters:
                xUnit (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): unit of X axis set (makes sense for function values only)
        
        
        """
        ...
    def setYMaxValue(self, double: float) -> None:
        """
        
            Parameters:
                yMaxValue (double): maximum of Y axis to set (makes sense for function values only)
        
        
        """
        ...
    def setYMinValue(self, double: float) -> None:
        """
        
            Parameters:
                yMinValue (double): minimum of Y axis to set (makes sense for function values only)
        
        
        """
        ...
    def setYUnit(self, string: str) -> None:
        """
        
            Parameters:
                yUnit (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): unit of Y axis to set (makes sense for function values only)
        
        
        """
        ...

class ValueConverter:
    """
    public class ValueConverter extends `Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`
    
        A class providing many static methods to convert scalar and array of scalar values.
    """
    @staticmethod
    def conversionNotPossibleException(valueType: cern.japc.value.ValueType, valueType2: cern.japc.value.ValueType) -> cern.japc.value.ValueConversionException:
        """
            Helper method which creates "conversion not possible" exceptions.
        
            There is a number of value type combinations which the conversion is not possible for.
        
            Parameters:
                sourceType (:class:`~cern.japc.value.ValueType`): the source parameter value type
                destType (:class:`~cern.japc.value.ValueType`): the destination parameter value type
        
            Returns:
                the exception
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToBoolean(boolean: bool) -> bool:
        """
            Conversion from boolean to boolean
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from byte to boolean
        
            Parameters:
                value (byte): initial value
        
            Returns:
                result value
        
            Conversion from double to boolean
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from float to boolean
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from int to boolean
        
            Parameters:
                value (int): initial value
        
            Returns:
                result value
        
            Conversion from long to boolean
        
            Parameters:
                value (long): initial value
        
            Returns:
                result value
        
            Conversion from short to boolean
        
            Parameters:
                value (short): initial value
        
            Returns:
                result value
        
            Conversion from string to boolean
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to boolean
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to boolean
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to boolean
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to boolean
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToBoolean(byte: int) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(discreteFunction: cern.japc.value.DiscreteFunction) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(enumItem: cern.japc.value.EnumItem) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(enumItemSet: cern.japc.value.EnumItemSet) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(double: float) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(float: float) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(int: int) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(long: int) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(short: int) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(booleanArray: typing.List[bool]) -> typing.List[bool]:
        """
            Conversion from boolean array to boolean array
        
            Parameters:
                value (boolean[]): initial value
        
            Returns:
                result value
        
            Conversion from byte array to boolean array
        
            Parameters:
                value (byte[]): initial value
        
            Returns:
                result value
        
            Conversion from double array to boolean array
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
            Conversion from float array to boolean array
        
            Parameters:
                value (float[]): initial value
        
            Returns:
                result value
        
            Conversion from int array to boolean array
        
            Parameters:
                value (int[]): initial value
        
            Returns:
                result value
        
            Conversion from long array to boolean array
        
            Parameters:
                value (long[]): initial value
        
            Returns:
                result value
        
            Conversion from short array to boolean array
        
            Parameters:
                value (short[]): initial value
        
            Returns:
                result value
        
            Conversion from string array to boolean array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration array to boolean array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set array to boolean array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(byteArray: typing.List[int]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(doubleArray: typing.List[float]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(floatArray: typing.List[float]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(intArray: typing.List[int]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(stringArray: typing.List[str]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(longArray: typing.List[int]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(shortArray: typing.List[int]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToByte(boolean: bool) -> int:
        """
            Conversion from byte to byte
        
            Parameters:
                value (byte): initial value
        
            Returns:
                result value
        
            Conversion from boolean to byte
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from double to byte
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from float to byte
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from int to byte
        
            Parameters:
                value (int): initial value
        
            Returns:
                result value
        
            Conversion from long to byte
        
            Parameters:
                value (long): initial value
        
            Returns:
                result value
        
            Conversion from short to byte
        
            Parameters:
                value (short): initial value
        
            Returns:
                result value
        
            Conversion from string to byte
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to byte
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to byte
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to byte
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to byte
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToByte(byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(enumItem: cern.japc.value.EnumItem) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(double: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(float: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(int: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(string: str) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(long: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(short: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(booleanArray: typing.List[bool]) -> typing.List[int]:
        """
            Conversion from boolean array to byte array
        
            Parameters:
                value (boolean[]): initial value
        
            Returns:
                result value
        
            Conversion from byte array to byte array
        
            Parameters:
                value (byte[]): initial value
        
            Returns:
                result value
        
            Conversion from double array to byte array
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
            Conversion from float array to byte array
        
            Parameters:
                value (float[]): initial value
        
            Returns:
                result value
        
            Conversion from int array to byte array
        
            Parameters:
                value (int[]): initial value
        
            Returns:
                result value
        
            Conversion from long array to byte array
        
            Parameters:
                value (long[]): initial value
        
            Returns:
                result value
        
            Conversion from short array to byte array
        
            Parameters:
                value (short[]): initial value
        
            Returns:
                result value
        
            Conversion from string array to byte array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration array to byte array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set array to byte array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToByteArray(byteArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(doubleArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(floatArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(intArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(stringArray: typing.List[str]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(longArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(shortArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(boolean: bool) -> cern.japc.value.DiscreteFunction:
        """
            Conversion from boolean to discrete function
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from byte to discrete function
        
            Parameters:
                value (byte): initial value
        
            Returns:
                result value
        
            Conversion from double to discrete function
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from float to discrete function
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from int to discrete function
        
            Parameters:
                value (int): initial value
        
            Returns:
                result value
        
            Conversion from long to discrete function
        
            Parameters:
                value (long): initial value
        
            Returns:
                result value
        
            Conversion from short to discrete function
        
            Parameters:
                value (short): initial value
        
            Returns:
                result value
        
            Conversion from string to discrete function
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to discrete function
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to discrete function
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to discrete function
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
            Conversion from low level double-array representation to discrete function
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(byte: int) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(enumItem: cern.japc.value.EnumItem) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(double: float) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(doubleArray: typing.List[float]) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(float: float) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(int: int) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(long: int) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(short: int) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(boolean: bool) -> cern.japc.value.DiscreteFunctionList:
        """
            Conversion from boolean to discrete function list
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from byte to discrete function list
        
            Parameters:
                value (byte): initial value
        
            Returns:
                result value
        
            Conversion from double to discrete function list
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from float to discrete function list
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from int to discrete function list
        
            Parameters:
                value (int): initial value
        
            Returns:
                result value
        
            Conversion from long to discrete function list
        
            Parameters:
                value (long): initial value
        
            Returns:
                result value
        
            Conversion from short to discrete function list
        
            Parameters:
                value (short): initial value
        
            Returns:
                result value
        
            Conversion from string to discrete function list
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to discrete function list
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to discrete function list
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to discrete function list
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from low level double-array representation to discrete function list
        
            Parameters:
                src (double[]): initial value
        
            Returns:
                result value
        
            Also see:
                :meth:`~cern.japc.value.spi.value.simple.ValueConverter.convertToDoubleArray`
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(byte: int) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(discreteFunction: cern.japc.value.DiscreteFunction) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(enumItem: cern.japc.value.EnumItem) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(double: float) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(doubleArray: typing.List[float]) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(float: float) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(int: int) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(long: int) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(short: int) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDouble(boolean: bool) -> float:
        """
            Conversion from double to double
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from boolean to double
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from any integer to double
        
            Parameters:
                value (long): initial value
        
            Returns:
                result value
        
            Conversion from string to double
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to double
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to double
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to double
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to double
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToDouble(discreteFunction: cern.japc.value.DiscreteFunction) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(enumItem: cern.japc.value.EnumItem) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(enumItemSet: cern.japc.value.EnumItemSet) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(double: float) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(string: str) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(long: int) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(booleanArray: typing.List[bool]) -> typing.List[float]:
        """
            Conversion from boolean array to double array
        
            Parameters:
                value (boolean[]): initial value
        
            Returns:
                result value
        
            Conversion from byte array to double array
        
            Parameters:
                value (byte[]): initial value
        
            Returns:
                result value
        
            Conversion from double array to double array
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
            Conversion from float array to double array
        
            Parameters:
                value (float[]): initial value
        
            Returns:
                result value
        
            Conversion from int array to double array
        
            Parameters:
                value (int[]): initial value
        
            Returns:
                result value
        
            Conversion from long array to double array
        
            Parameters:
                value (long[]): initial value
        
            Returns:
                result value
        
            Conversion from short array to double array
        
            Parameters:
                value (short[]): initial value
        
            Returns:
                result value
        
            Conversion from String array to double array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): initial value
        
            Returns:
                result value
        
            Conversion from DiscreteFunction to double array using the following convention
        
        
        
        
            **P**: point, defined as x,y
        
        
            **F**: function, defined as P1, P2, ... Pn
        
        
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Also see:
                :meth:`~cern.japc.value.spi.value.simple.ValueConverter.convertToDoubleArray`
        
            Conversion from DiscreteFunctionList to double array using the following convention
        
        
        
        
            **P**: point, defined as x,y
        
        
            **F**: function, defined as #P, P1, P2, ... Pn (where n = #P)
        
        
            **FL**: function list, defined as #F, F1, F2, ... Fm (where m = #F)
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): - initial discrete function list to be converted
        
            Returns:
                the discrete function list encoded in a double array as specified above
        
            Conversion from enumeration array to double array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set array to double array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(byteArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(discreteFunction: cern.japc.value.DiscreteFunction) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(floatArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(intArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(stringArray: typing.List[str]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(longArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(shortArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(boolean: bool) -> cern.japc.value.EnumItem:
        """
            Conversion from boolean to enumeration
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from byte to enumeration
        
            Parameters:
                value (byte): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from int to enumeration
        
            Parameters:
                value (int): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from long to enumeration
        
            Parameters:
                value (long): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from short to enumeration
        
            Parameters:
                value (short): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from float to enumeration
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from double to enumeration
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to enumeration
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to enumeration
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to enumeration
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to enumeration
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(byte: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem:
        """
            Conversion from string to enumeration
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(discreteFunction: cern.japc.value.DiscreteFunction) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(enumItem: cern.japc.value.EnumItem) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(double: float) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(float: float) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(int: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(string: str, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(long: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(short: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(boolean: bool) -> typing.List[cern.japc.value.EnumItem]:
        """
            Conversion from boolean to enumeration array
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from byte to enumeration array
        
            Parameters:
                value (byte): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from int to enumeration array;
        
            Parameters:
                value (int): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from long to enumeration array
        
            Parameters:
                value (long): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from short to enumeration array
        
            Parameters:
                value (short): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from float to enumeration array
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from double to enumeration array
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from string to enumeration array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to enumeration array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration array to enumeration array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to enumeration array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set array to enumeration array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to enumeration array
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to enumeration array
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
            Conversion from boolean array to EnumItem array
        
            Parameters:
                value (boolean[]): initial value
        
            Returns:
                result value
        
            Conversion from double array to EnumItem array
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
            Conversion from float array to EnumItem array
        
            Parameters:
                value (float[]): initial value
        
            Returns:
                result value
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(booleanArray: typing.List[bool]) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(byte: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]:
        """
            Conversion from byte array to EnumItem array
        
            Parameters:
                value (byte[]): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from int array to long array
        
            Parameters:
                value (int[]): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from long array to long array
        
            Parameters:
                value (long[]): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from short array to long array
        
            Parameters:
                value (short[]): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from String array to long array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(byteArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(discreteFunction: cern.japc.value.DiscreteFunction) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(enumItem: cern.japc.value.EnumItem) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(enumItemSet: cern.japc.value.EnumItemSet) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(double: float) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(doubleArray: typing.List[float]) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(float: float) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(floatArray: typing.List[float]) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(int: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(intArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(string: str) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(stringArray: typing.List[str], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(long: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(longArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(short: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(shortArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(boolean: bool) -> cern.japc.value.EnumItemSet:
        """
            Conversion from boolean to enumeration set
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from any integer to enumeration set
        
            Parameters:
                value (byte): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from int to enumeration set
        
            Parameters:
                value (int): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from long to enumeration set
        
            Parameters:
                value (long): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from short to enumeration set
        
            Parameters:
                value (short): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from float to enumeration set
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from double to enumeration set
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from string to enumeration set
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to enumeration set
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to enumeration set
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to enumeration set
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to enumeration set
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(byte: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(discreteFunction: cern.japc.value.DiscreteFunction) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(enumItem: cern.japc.value.EnumItem) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(double: float) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(float: float) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(int: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(long: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(short: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(boolean: bool) -> typing.List[cern.japc.value.EnumItemSet]:
        """
            Conversion from boolean to enumeration set array
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from byte to enumeration set array
        
            Parameters:
                value (byte): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from int to enumeration set array
        
            Parameters:
                value (int): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from long to enumeration set array
        
            Parameters:
                value (long): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from short to enumeration set array
        
            Parameters:
                value (short): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from float to enumeration set array
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from double to enumeration set array
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from string to enumeration set array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to enumeration set array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to enumeration set array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to enumeration array
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to enumeration set array
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
            Conversion from boolean array to enumeration set array
        
            Parameters:
                value (boolean[]): initial value
        
            Returns:
                result value
        
            Conversion from double array to enumeration set array
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
            Conversion from float array to enumeration set array
        
            Parameters:
                value (float[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set array to enumeration set array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): initial value
        
            Returns:
                result value
        
            Conversion from String array to enumeration set array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration array to enumeration set array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(booleanArray: typing.List[bool]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(byte: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]:
        """
            Conversion from byte array to enumeration set array
        
            Parameters:
                value (byte[]): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from int array to enumeration set array
        
            Parameters:
                value (int[]): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from long array to enumeration set array
        
            Parameters:
                value (long[]): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
            Conversion from short array to enumeration set array
        
            Parameters:
                value (short[]): initial value
                enumType (:class:`~cern.japc.value.EnumType`): enumeration type
        
            Returns:
                result value
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(byteArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(discreteFunction: cern.japc.value.DiscreteFunction) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(enumItem: cern.japc.value.EnumItem) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(enumItemSet: cern.japc.value.EnumItemSet) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(double: float) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(doubleArray: typing.List[float]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(float: float) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(floatArray: typing.List[float]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(int: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(intArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(string: str) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(stringArray: typing.List[str]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(long: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(longArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(short: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(shortArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToFloat(boolean: bool) -> float:
        """
            Conversion from float to float
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from double to float
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from double to float
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from byte, short, int to float
        
            Parameters:
                value (int): initial value
        
            Returns:
                result value
        
            Conversion from long to float
        
            Parameters:
                value (long): initial value
        
            Returns:
                result value
        
            Conversion from string to float
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to float
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to float
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to float
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to float
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToFloat(discreteFunction: cern.japc.value.DiscreteFunction) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(enumItem: cern.japc.value.EnumItem) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(enumItemSet: cern.japc.value.EnumItemSet) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(double: float) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(float: float) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(int: int) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(string: str) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(long: int) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(booleanArray: typing.List[bool]) -> typing.List[float]:
        """
            Conversion from boolean array to float array
        
            Parameters:
                value (boolean[]): initial value
        
            Returns:
                result value
        
            Conversion from byte array to float array
        
            Parameters:
                value (byte[]): initial value
        
            Returns:
                result value
        
            Conversion from double array to float array
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
            Conversion from float array to float array
        
            Parameters:
                value (float[]): initial value
        
            Returns:
                result value
        
            Conversion from int array to float array
        
            Parameters:
                value (int[]): initial value
        
            Returns:
                result value
        
            Conversion from long array to float array
        
            Parameters:
                value (long[]): initial value
        
            Returns:
                result value
        
            Conversion from short array to float array
        
            Parameters:
                value (short[]): initial value
        
            Returns:
                result value
        
            Conversion from String array to float array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration array to float array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set array to float array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(byteArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(floatArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(intArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(stringArray: typing.List[str]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(longArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(shortArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToInt(boolean: bool) -> int:
        """
            Conversion from boolean to int
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from float to int
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from double to int
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from long to int
        
            Parameters:
                value (long): initial value
        
            Returns:
                result value
        
            Conversion from string to int
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to int
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to int
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to int
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to int
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToInt(discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(enumItem: cern.japc.value.EnumItem) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(double: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(float: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(string: str) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(long: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(booleanArray: typing.List[bool]) -> typing.List[int]:
        """
            Conversion from boolean array to int array
        
            Parameters:
                value (boolean[]): initial value
        
            Returns:
                result value
        
            Conversion from byte array to int array
        
            Parameters:
                value (byte[]): initial value
        
            Returns:
                result value
        
            Conversion from double array to int array
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
            Conversion from float array to int array
        
            Parameters:
                value (float[]): initial value
        
            Returns:
                result value
        
            Conversion from int array to int array
        
            Parameters:
                value (int[]): initial value
        
            Returns:
                result value
        
            Conversion from long array to int array
        
            Parameters:
                value (long[]): initial value
        
            Returns:
                result value
        
            Conversion from short array to int array
        
            Parameters:
                value (short[]): initial value
        
            Returns:
                result value
        
            Conversion from String array to int array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration array to int array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set array to int array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToIntArray(byteArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(doubleArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(floatArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(intArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(stringArray: typing.List[str]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(longArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(shortArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLong(boolean: bool) -> int:
        """
            Conversion from boolean to long
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from float to long
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from long to long
        
            Parameters:
                value (long): initial value
        
            Returns:
                result value
        
            Conversion from double to long
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from string to long
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to long
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to long
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to long
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to long
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToLong(discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(enumItem: cern.japc.value.EnumItem) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(double: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(float: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(string: str) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(long: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(booleanArray: typing.List[bool]) -> typing.List[int]:
        """
            Conversion from boolean array to long array
        
            Parameters:
                value (boolean[]): initial value
        
            Returns:
                result value
        
            Conversion from byte array to long array
        
            Parameters:
                value (byte[]): initial value
        
            Returns:
                result value
        
            Conversion from double array to long array
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
            Conversion from float array to long array
        
            Parameters:
                value (float[]): initial value
        
            Returns:
                result value
        
            Conversion from int array to long array
        
            Parameters:
                value (int[]): initial value
        
            Returns:
                result value
        
            Conversion from long array to long array
        
            Parameters:
                value (long[]): initial value
        
            Returns:
                result value
        
            Conversion from short array to long array
        
            Parameters:
                value (short[]): initial value
        
            Returns:
                result value
        
            Conversion from String array to long array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration array to long array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set array to long array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToLongArray(byteArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(doubleArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(floatArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(intArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(stringArray: typing.List[str]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(longArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(shortArray: typing.List[int]) -> typing.List[int]: ...
    @staticmethod
    def convertToPrimitiveArray(objectArray: typing.List[typing.Any]) -> typing.Any:
        """
            Converts an array of Strings or primitive type wrappers into the corresponding array of Strings or primitive types.
        
        
            Parameters:
                array (`Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`[]): an array of Strings or primitive type wrappers
        
            Returns:
                the corresponding array of Strings or primitive types
        
            Raises:
                : if the array contains any other objects
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToShort(boolean: bool) -> int:
        """
            Conversion from boolean to short
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from int to short
        
            Parameters:
                value (int): initial value
        
            Returns:
                result value
        
            Conversion from long to short
        
            Parameters:
                value (long): initial value
        
            Returns:
                result value
        
            Conversion from float to short
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from double to short
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from string to short
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to short
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to short
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to short
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to short
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToShort(discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(enumItem: cern.japc.value.EnumItem) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(double: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(float: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(int: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(string: str) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(long: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(booleanArray: typing.List[bool]) -> typing.List[int]:
        """
            Conversion from boolean array to short array
        
            Parameters:
                value (boolean[]): initial value
        
            Returns:
                result value
        
            Conversion from byte array to short array
        
            Parameters:
                value (byte[]): initial value
        
            Returns:
                result value
        
            Conversion from double array to short array
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
            Conversion from float array to short array
        
            Parameters:
                value (float[]): initial value
        
            Returns:
                result value
        
            Conversion from int array to short array
        
            Parameters:
                value (int[]): initial value
        
            Returns:
                result value
        
            Conversion from long array to short array
        
            Parameters:
                value (long[]): initial value
        
            Returns:
                result value
        
            Conversion from short array to short array
        
            Parameters:
                value (short[]): initial value
        
            Returns:
                result value
        
            Conversion from String array to short array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration array to short array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set array to short array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToShortArray(byteArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(doubleArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(floatArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(intArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(stringArray: typing.List[str]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(longArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(shortArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToString(boolean: bool) -> str:
        """
            Conversion from boolean to string
        
            Parameters:
                value (boolean): initial value
        
            Returns:
                result value
        
            Conversion from byte to string
        
            Parameters:
                value (byte): initial value
        
            Returns:
                result value
        
            Conversion from int to string
        
            Parameters:
                value (int): initial value
        
            Returns:
                result value
        
            Conversion from long to string
        
            Parameters:
                value (long): initial value
        
            Returns:
                result value
        
            Conversion from long to string usign a certain format pattern (JAPC-351).
        
            Parameters:
                formatPattern (long): The format pattern used to convert given values in conversions methods.(Cannot be null)
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): The value to convert using the format pattern provided in the constructor.
        
            Returns:
                result value.
        
            Conversion from short to string
        
            Parameters:
                value (short): initial value
        
            Returns:
                result value
        
            Conversion from float to string
        
            Parameters:
                value (float): initial value
        
            Returns:
                result value
        
            Conversion from double to string
        
            Parameters:
                value (double): initial value
        
            Returns:
                result value
        
            Conversion from string to string
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration to string
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set to string
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function to string
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): initial value
        
            Returns:
                result value
        
            Conversion from discrete function list to string
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): initial value
        
            Returns:
                result value
        
            Conversion from byte array to string
        
            Parameters:
                value (byte[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToString(byte: int) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(byteArray: typing.List[int]) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(discreteFunction: cern.japc.value.DiscreteFunction) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(enumItem: cern.japc.value.EnumItem) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(enumItemSet: cern.japc.value.EnumItemSet) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(double: float) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(float: float) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(int: int) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(string: str) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(long: int) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(long: int, string: str) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(short: int) -> str: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(booleanArray: typing.List[bool]) -> typing.List[str]:
        """
            Conversion from boolean array to String array
        
            Parameters:
                value (boolean[]): initial value
        
            Returns:
                result value
        
            Conversion from byte array to String array
        
            Parameters:
                value (byte[]): initial value
        
            Returns:
                result value
        
            Conversion from double array to String array
        
            Parameters:
                value (double[]): initial value
        
            Returns:
                result value
        
            Conversion from float array to String array
        
            Parameters:
                value (float[]): initial value
        
            Returns:
                result value
        
            Conversion from int array to String array
        
            Parameters:
                value (int[]): initial value
        
            Returns:
                result value
        
            Conversion from long array to String array
        
            Parameters:
                value (long[]): initial value
        
            Returns:
                result value
        
            Conversion from value array to String array
        
            Parameters:
                value (short[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration array to string array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): initial value
        
            Returns:
                result value
        
            Conversion from enumeration set array to string array
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): initial value
        
            Returns:
                result value
        
            Conversion from String array to String array
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): initial value
        
            Returns:
                result value
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def convertToStringArray(byteArray: typing.List[int]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(doubleArray: typing.List[float]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(floatArray: typing.List[float]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(intArray: typing.List[int]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(stringArray: typing.List[str]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(longArray: typing.List[int]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(shortArray: typing.List[int]) -> typing.List[str]: ...

class AbstractSimpleValue(AbstractMapSimpleValue, cern.japc.value.SimpleParameterValue, UpdatableParameterValue, java.io.Serializable, java.lang.Cloneable):
    """
    public abstract class AbstractSimpleValue extends :class:`~cern.japc.value.spi.value.simple.AbstractMapSimpleValue` implements :class:`~cern.japc.value.SimpleParameterValue`, :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`, `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        This abstract class provides the basic services needed to manage a SimpleParameterValue that is either a simple scalar
        or String or an array of simple scalars or Strings. That includes the methods to get and set the value type and the to
        String method.
    
        Also see:
            :meth:`~serialized`
    """
    def __init__(self, valueType: cern.japc.value.ValueType): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration. The value returned is the nth one from the array where n is given
            by the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration set. The value returned is the nth one from the array where n is
            given by the index. If the underlying value is not an array the index is ignored the the value is returned. If the value
            is an array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSets(self, string: str) -> typing.List[cern.japc.value.EnumItemSet]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSets`
            Returns a sub array of the value being interpreted as an array of enumeration item sets. The subarray starts at
            startIndex and contains the number of element given by length. If startIndex+length is greater than the number of values
            in the underlying array an exception is thrown. If the value is not an array, the value is returned encapsulated in an
            array of size 1, ignoring the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSets`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as an array of enumeration items.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSets(self) -> typing.List[cern.japc.value.EnumItemSet]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSets`
            Returns the value being interpreted as an array of enumeration item sets. If the value can't be represented as an array
            of enumeration item sets, ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSets`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an array of enumeration item sets.
        
        """
        ...
    @typing.overload
    def getEnumItemSets(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItems(self, string: str) -> typing.List[cern.japc.value.EnumItem]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItems`
            Returns a sub array of the value being interpreted as an array of enumeration items. The subarray starts at startIndex
            and contains the number of element given by length. If startIndex+length is greater than the number of values in the
            underlying array an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of
            size 1, ignoring the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItems` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as an array of enumeration items.
        
        
        """
        ...
    @typing.overload
    def getEnumItems(self) -> typing.List[cern.japc.value.EnumItem]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItems`
            Returns the value being interpreted as an array of enumeration items. If the value can't be represented as an array of
            enumeration items, ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItems` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an array of enumeration items.
        
        """
        ...
    @typing.overload
    def getEnumItems(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItem]: ...
    def getFormatPattern(self) -> str:
        """
        
            Returns:
                Returns the formatPattern.
        
        
        """
        ...
    @typing.overload
    def getMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getMaxValue(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getMaxValue`
            Returns the allowed maximum of this value. The maximum is usually the same as the one given by the descriptor. If the
            maximum is dynamic, the one from the descriptor cannot be defined and this method returns the correct value. If no
            maximum is defined the :code:`Double.NaN` is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getMaxValue` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the allowed maximum of this value or :code:`Double.NaN`
        
        
        """
        ...
    @typing.overload
    def getMinValue(self, string: str) -> float: ...
    @typing.overload
    def getMinValue(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getMinValue`
            Returns the allowed minimum of this value. The minimum is usually the same as the one given by the descriptor. If the
            minimum is dynamic, the one from the descriptor cannot be defined and this method returns the correct value. If no
            minimum is defined the :code:`Double.NaN` is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getMinValue` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the allowed minimum of this value or :code:`Double.NaN`
        
        
        """
        ...
    @typing.overload
    def getUnit(self, string: str) -> str: ...
    @typing.overload
    def getUnit(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getUnit`
            Returns the unit of this value. The unit is usually the same as the one given by the descriptor. If the unit is dynamic,
            the one from the descriptor cannot be defined and this method returns the correct value. If no unit is defined an empty
            string is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getUnit` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the unit of this value or an empty string
        
        
        """
        ...
    def getValueStatus(self) -> cern.japc.value.SimpleValueStatus:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getValueStatus`
            Returns the :class:`~cern.japc.value.SimpleValueStatus` object of this value. It represents additional information about
            value acquisition.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getValueStatus`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the :class:`~cern.japc.value.SimpleValueStatus` object of this value.
        
        
        """
        ...
    @typing.overload
    def getValueType(self, string: str) -> cern.japc.value.ValueType: ...
    @typing.overload
    def getValueType(self) -> cern.japc.value.ValueType:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getValueType`
            Returns the value type of the value interpreted by this reader
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getValueType` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value type of the value interpreted by this reader
        
        
        """
        ...
    @typing.overload
    def getXMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getXMaxValue(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getXMaxValue`
            If the value is a function, this method returns the allowed maximum of X axis. The maximum is usually the same as the
            one given by the descriptor. If the maximum is dynamic, the one from the descriptor cannot be defined and this method
            returns the correct value. If the value is not a function or no maximum is defined the :code:`Double.NaN` is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getXMaxValue` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the allowed maximum of X axis for this value or :code:`Double.NaN`
        
        
        """
        ...
    @typing.overload
    def getXMinValue(self, string: str) -> float: ...
    @typing.overload
    def getXMinValue(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getXMinValue`
            If the value is a function, this method returns the allowed minimum of X axis. The minimum is usually the same as the
            one given by the descriptor. If the minimum is dynamic, the one from the descriptor cannot be defined and this method
            returns the correct value. If the value is not a function or no minimum is defined the :code:`Double.NaN` is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getXMinValue` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the allowed minimum of X axis for this value or :code:`Double.NaN`
        
        
        """
        ...
    @typing.overload
    def getXUnit(self, string: str) -> str: ...
    @typing.overload
    def getXUnit(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getXUnit`
            If the value is a function, this method returns the unit of X axis. The unit is usually the same as the one given by the
            descriptor. If the unit is dynamic, the one from the descriptor cannot be defined and this method returns the correct
            value. If the value is not a function or no unit is defined an empty string is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getXUnit` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the unit of X axis or an empty string
        
        
        """
        ...
    @typing.overload
    def getYMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getYMaxValue(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getYMaxValue`
            If the value is a function, this method returns the allowed maximum of Y axis. The maximum is usually the same as the
            one given by the descriptor. If the maximum is dynamic, the one from the descriptor cannot be defined and this method
            returns the correct value. If no maximum is defined the :code:`Double.NaN` is returned. If the value is not a function
            this method returns the same result as :meth:`~cern.japc.value.SimpleParameterValue.getMaxValue`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getYMaxValue` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the allowed maximum of Y axis for this value or :code:`Double.NaN`
        
        
        """
        ...
    @typing.overload
    def getYMinValue(self, string: str) -> float: ...
    @typing.overload
    def getYMinValue(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getYMinValue`
            If the value is a function, this method returns the allowed minimum of Y axis. The minimum is usually the same as the
            one given by the descriptor. If the minimum is dynamic, the one from the descriptor cannot be defined and this method
            returns the correct value. If no minimum is defined the :code:`Double.NaN` is returned. If the value is not a function
            this method returns the same result as :meth:`~cern.japc.value.SimpleParameterValue.getMinValue`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getYMinValue` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the allowed minimum of Y axis for this value or :code:`Double.NaN`
        
        
        """
        ...
    @typing.overload
    def getYUnit(self, string: str) -> str: ...
    @typing.overload
    def getYUnit(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getYUnit`
            If the value is a function, this method returns the unit of Y axis. The unit is usually the same as the one given by the
            descriptor. If the unit is dynamic, the one from the descriptor cannot be defined and this method returns the correct
            value. If no unit is defined an empty string is returned. If the value is not a function this method returns the same
            result as :meth:`~cern.japc.value.SimpleParameterValue.getUnit`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getYUnit` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the unit of Y axis or an empty string
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...
    def initializeWithDescriptor(self, simpleDescriptor: cern.japc.value.SimpleDescriptor) -> None:
        """
            Extracts necessary descriptor information into the value.
        
            Parameters:
                descriptor (:class:`~cern.japc.value.SimpleDescriptor`): value descriptor
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def newSimpleValue(valueType: cern.japc.value.ValueType) -> 'AbstractSimpleValue':
        """
            Creates a new simple parameter value based on the given value type.
        
            Parameters:
                valueType (:class:`~cern.japc.value.ValueType`): the type of the parameter value to create.
        
            Returns:
                a new parameter value of given type.
        
            Creates a new enum-based simple parameter value.
        
            Parameters:
                valueType (:class:`~cern.japc.value.ValueType`): the type of the parameter value to create.
                enumType (:class:`~cern.japc.value.EnumType`): the enumeration type
        
            Returns:
                a new parameter value of given type.
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def newSimpleValue(valueType: cern.japc.value.ValueType, enumType: cern.japc.value.EnumType) -> 'AbstractSimpleValue': ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value at the given index to the given enumeration item. The value set is the nth one from the array where n is
            given by the index. If the underlying value is not an array the index is ignored and the value is set. If this value is
            not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (:class:`~cern.japc.value.EnumItem`): the enumeration item to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value at the given index to the given enumeration items set. The value set is the nth one from the array where
            n is given by the index. If the underlying value is not an array the index is ignored and the value is set. If this
            value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (:class:`~cern.japc.value.EnumItemSet`): the enumeration items set to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSets(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None: ...
    @typing.overload
    def setEnumItemSets(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSets`
            Sets the value being a EnumItemSet array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSets`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): the EnumItemSet array value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSets2D(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItemSets2D(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSets2D`
            Sets the value being a 2-dimensional enumeration set array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSets2D`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): the enumeration set array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setEnumItems(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setEnumItems(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItems`
            Sets the value being a EnumItem array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItems` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): the EnumItem array value.
        
        
        """
        ...
    @typing.overload
    def setEnumItems2D(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItems2D(self, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItems2D`
            Sets the value being a 2-dimensional enumeration array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItems2D`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): the enumeration array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    def setFormatPattern(self, string: str) -> None:
        """
        
            Parameters:
                formatPattern (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): The formatPattern to set.
        
        
        """
        ...
    def setMaxValue(self, double: float) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setMaxValue`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                maxValue (double): maximum to set
        
        
        """
        ...
    def setMinValue(self, double: float) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setMinValue`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                minValue (double): minimum to set
        
        
        """
        ...
    @typing.overload
    def setObject(self, string: str, object: typing.Any) -> None: ...
    @typing.overload
    def setObject(self, object: typing.Any) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setObject`
            Sets the value as an object. This method can handle any scalar wrapping Object type as well as arrays and string. If
            other type was passed a `null
            <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/IllegalArgumentException.html?is-external=true>` will be
            thrown. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (`Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`): the value as an object.
        
        
        """
        ...
    @typing.overload
    def setObjects2D(self, string: str, object: typing.Any, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setObjects2D(self, object: typing.Any, intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setObjects2D`
            Sets the value as a 2d array of objects. This method can handle any array of primitives and Strings, which will be used
            as a source for 2D array. If other type was passed a `null
            <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/IllegalArgumentException.html?is-external=true>` will be
            thrown. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setObjects2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (`Object <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true>`): the value as an object.
                dimensions (int[]): the dimensions of the 2D array
        
        
        """
        ...
    def setUnit(self, string: str) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setUnit`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                unit (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): unit to set
        
        
        """
        ...
    def setValueStatus(self, simpleValueStatus: cern.japc.value.SimpleValueStatus) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setValueStatus`
            Sets the value status.
        
            If the value is immutable a `null
            <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/RuntimeException.html?is-external=true>` will be thrown.
        
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setValueStatus`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                valueStatus (:class:`~cern.japc.value.SimpleValueStatus`): new valueStatus
        
        
        """
        ...
    def setXMaxValue(self, double: float) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setXMaxValue`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                xMaxValue (double): maximum of X axis to set (makes sense for function values only)
        
        
        """
        ...
    def setXMinValue(self, double: float) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setXMinValue`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                xMinValue (double): minimum of X axis to set (makes sense for function values only)
        
        
        """
        ...
    def setXUnit(self, string: str) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setXUnit`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                xUnit (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): unit of X axis set (makes sense for function values only)
        
        
        """
        ...
    def setYMaxValue(self, double: float) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setYMaxValue`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                yMaxValue (double): maximum of Y axis to set (makes sense for function values only)
        
        
        """
        ...
    def setYMinValue(self, double: float) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setYMinValue`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                yMinValue (double): minimum of Y axis to set (makes sense for function values only)
        
        
        """
        ...
    def setYUnit(self, string: str) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setYUnit`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                yUnit (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): unit of Y axis to set (makes sense for function values only)
        
        
        """
        ...
    def toString(self) -> str:
        """
        
            Overrides:
                 in class 
        
        
        """
        ...

class AbstractArrayValue(AbstractSimpleValue, java.io.Serializable, java.lang.Cloneable):
    """
    public abstract class AbstractArrayValue extends :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        This abstract class provides the basic services needed to manage a value that is an array. That includes the methods to
        get and set the value as a String, the methods to get the value as a non array value and the methods to extract a sub
        array.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self, valueType: cern.japc.value.ValueType): ...
    @typing.overload
    def __init__(self, valueType: cern.japc.value.ValueType, int: int): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getArray2D`
            Returns a wrapper around the value being interpreted as a 2d array. If the value is a 1d array it is encapsulated in an
            array of size 1xn. If the value is not an array it is encapsulated in an array of size 1x1. IMPORTANT: if the value is
            mutable and is changed after the wrapper is got the wrapper becomes invalide and can return wrong values or even throw
            OutOfBoundException.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getArray2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean 2d array.
        
        
        """
        ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBooleans`
            Returns the value being interpreted as a boolean array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type boolean array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean array.
        
        
        """
        ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBooleans`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a boolean array.
        
        """
        ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getBytes(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns the value being interpreted as a byte array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type byte array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte array.
        
        
        """
        ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a byte array.
        
        """
        ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getColumnCount(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getColumnCount`
            Returns the number of columns for the case when the value is represented as 2-dimensional array. For scalar which are
            not bit-pattern will always return 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getColumnCount`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the number of columns for the case when the value is represented as 2-dimensional array
        
        
        """
        ...
    @typing.overload
    def getColumnCount(self, string: str) -> int: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDoubles`
            Returns the value being interpreted as a double array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type double array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double array.
        
        
        """
        ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDoubles`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a double array.
        
        """
        ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSets(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItemSet]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSets`
            Returns a sub array of the value being interpreted as an array of enumeration item sets. The subarray starts at
            startIndex and contains the number of element given by length. If startIndex+length is greater than the number of values
            in the underlying array an exception is thrown. If the value is not an array, the value is returned encapsulated in an
            array of size 1, ignoring the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSets`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.getEnumItemSets`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as an array of enumeration items.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSets(self, string: str) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItems(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItem]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItems`
            Returns a sub array of the value being interpreted as an array of enumeration items. The subarray starts at startIndex
            and contains the number of element given by length. If startIndex+length is greater than the number of values in the
            underlying array an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of
            size 1, ignoring the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItems` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.getEnumItems`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as an array of enumeration items.
        
        
        """
        ...
    @typing.overload
    def getEnumItems(self, string: str) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloats`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a float array.
        
        """
        ...
    @typing.overload
    def getFloats(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloats`
            Returns the value being interpreted as a float array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type float array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float array.
        
        
        """
        ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInts`
            Returns the value being interpreted as a int array. If the value is not an array it is encapsulated in an array of size
            1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a int array.
        
        """
        ...
    @typing.overload
    def getInts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInts`
            Returns the value being interpreted as a int array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type int array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int array.
        
        
        """
        ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLongs`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a long array.
        
        """
        ...
    @typing.overload
    def getLongs(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLongs`
            Returns the value being interpreted as a long array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type long array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long array.
        
        
        """
        ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getRowCount(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getRowCount`
            Returns the number of rows for the case when the value is represented as 2-dimensional array. For scalar and
            1-dimensional arrays will always return 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getRowCount` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the number of rows for the case when the value is represented as 2-dimensional array
        
        
        """
        ...
    @typing.overload
    def getRowCount(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShorts`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a short array.
        
        """
        ...
    @typing.overload
    def getShorts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShorts`
            Returns the value being interpreted as a short array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type short array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short array.
        
        
        """
        ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getStrings`
            Returns a sub array of the value being interpreted as a string array. The subarray starts at startIndex and contains the
            number of element given by length. If startIndex+length is greater than the number of values in the underlying array an
            exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a String array.
        
        """
        ...
    @typing.overload
    def getStrings(self) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getStrings`
            Returns the value being interpreted as a String array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type String array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a String array.
        
        
        """
        ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBooleans`
            Sets the value being a boolean array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean[]): the boolean array value.
        
        
        """
        ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans2D(self, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBooleans2D`
            Sets the value being a 2-dimensional boolean array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBooleans2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean[]): the boolean array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setBooleans2D(self, string: str, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBytes`
            Sets the value being a byte array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte[]): the byte array value.
        
        
        """
        ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes2D(self, byteArray: typing.List[int], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBytes2D`
            Sets the value being a 2-dimensional byte array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBytes2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte[]): the byte array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setBytes2D(self, string: str, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDoubles`
            Sets the value being a double array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double[]): the double array value.
        
        
        """
        ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles2D(self, doubleArray: typing.List[float], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDoubles2D`
            Sets the value being a 2-dimensional double array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDoubles2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double[]): the double array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setDoubles2D(self, string: str, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSets(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSets`
            Sets the value being a EnumItemSet array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSets`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.setEnumItemSets`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): the EnumItemSet array value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSets(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None: ...
    @typing.overload
    def setEnumItemSets2D(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSets2D`
            Sets the value being a 2-dimensional enumeration set array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSets2D`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.setEnumItemSets2D`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`[]): the enumeration set array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setEnumItemSets2D(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItems(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItems`
            Sets the value being a EnumItem array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItems` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.setEnumItems`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): the EnumItem array value.
        
        
        """
        ...
    @typing.overload
    def setEnumItems(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setEnumItems2D(self, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItems2D`
            Sets the value being a 2-dimensional enumeration array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItems2D`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.setEnumItems2D`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`[]): the enumeration array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setEnumItems2D(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloats`
            Sets the value being a float array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float[]): the float array value.
        
        
        """
        ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats2D(self, floatArray: typing.List[float], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloats2D`
            Sets the value being a 2-dimensional float array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloats2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float[]): the float array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setFloats2D(self, string: str, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInts`
            Sets the value being a int array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int[]): the int array value.
        
        
        """
        ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts2D(self, intArray: typing.List[int], intArray2: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInts2D`
            Sets the value being a 2-dimensional int array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInts2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int[]): the int array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setInts2D(self, string: str, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLongs`
            Sets the value being a long array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long[]): the long array value.
        
        
        """
        ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs2D(self, longArray: typing.List[int], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLongs2D`
            Sets the value being a 2-dimensional long array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLongs2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long[]): the long array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setLongs2D(self, string: str, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShorts`
            Sets the value being a short array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short[]): the short array value.
        
        
        """
        ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts2D(self, shortArray: typing.List[int], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShorts2D`
            Sets the value being a 2-dimensional short array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShorts2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short[]): the short array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setShorts2D(self, string: str, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setStrings`
            Sets the value being a String array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): the String array value.
        
        
        """
        ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings2D(self, stringArray: typing.List[str], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setStrings2D`
            Sets the value being a 2-dimensional String array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setStrings2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): the String array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setStrings2D(self, string: str, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...

class AbstractScalarValue(AbstractSimpleValue, java.io.Serializable, java.lang.Cloneable):
    """
    public abstract class AbstractScalarValue extends :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        This abstract class provides the basic services needed to manage a value that is a simple scalar or a String. That
        includes the methods to get the value as an array and the methods to extract a sub array or a single value. In all those
        case the simple value is returned.
    
        Also see:
            :meth:`~serialized`
    """
    def __init__(self, valueType: cern.japc.value.ValueType): ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getArray2D`
            Returns a wrapper around the value being interpreted as a 2d array. If the value is a 1d array it is encapsulated in an
            array of size 1xn. If the value is not an array it is encapsulated in an array of size 1x1. IMPORTANT: if the value is
            mutable and is changed after the wrapper is got the wrapper becomes invalide and can return wrong values or even throw
            OutOfBoundException.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getArray2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean 2d array.
        
        
        """
        ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBooleans`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a boolean array.
        
        
        """
        ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBooleans`
            Returns the value being interpreted as a boolean array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type boolean array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean array.
        
        """
        ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getByte(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a byte array.
        
        
        """
        ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns the value being interpreted as a byte array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type byte array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte array.
        
        """
        ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getColumnCount(self, string: str) -> int: ...
    @typing.overload
    def getColumnCount(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getColumnCount`
            Returns the number of columns for the case when the value is represented as 2-dimensional array. For scalar which are
            not bit-pattern will always return 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getColumnCount`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the number of columns for the case when the value is represented as 2-dimensional array
        
        
        """
        ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDouble(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDoubles`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a double array.
        
        
        """
        ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDoubles`
            Returns the value being interpreted as a double array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type double array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double array.
        
        """
        ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloats`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a float array.
        
        
        """
        ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloats`
            Returns the value being interpreted as a float array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type float array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float array.
        
        """
        ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInts`
            Returns the value being interpreted as a int array. If the value is not an array it is encapsulated in an array of size
            1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a int array.
        
        
        """
        ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInts`
            Returns the value being interpreted as a int array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type int array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int array.
        
        """
        ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLength`
            Returns the length of the array if the value is an array. In case the value is not an array the value returned is 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLength` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLongs`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a long array.
        
        
        """
        ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLongs`
            Returns the value being interpreted as a long array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type long array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long array.
        
        """
        ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getRowCount(self, string: str) -> int: ...
    @typing.overload
    def getRowCount(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getRowCount`
            Returns the number of rows for the case when the value is represented as 2-dimensional array. For scalar and
            1-dimensional arrays will always return 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getRowCount` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the number of rows for the case when the value is represented as 2-dimensional array
        
        
        """
        ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShorts`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a short array.
        
        
        """
        ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShorts`
            Returns the value being interpreted as a short array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type short array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short array.
        
        """
        ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getStrings`
            Returns a sub array of the value being interpreted as a string array. The subarray starts at startIndex and contains the
            number of element given by length. If startIndex+length is greater than the number of values in the underlying array an
            exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a String array.
        
        
        """
        ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getStrings`
            Returns the value being interpreted as a String array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type String array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a String array.
        
        """
        ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBooleans`
            Sets the value being a boolean array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean[]): the boolean array value.
        
        
        """
        ...
    @typing.overload
    def setBooleans2D(self, string: str, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBooleans2D(self, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBooleans2D`
            Sets the value being a 2-dimensional boolean array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBooleans2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean[]): the boolean array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBytes`
            Sets the value being a byte array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte[]): the byte array value.
        
        
        """
        ...
    @typing.overload
    def setBytes2D(self, string: str, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes2D(self, byteArray: typing.List[int], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBytes2D`
            Sets the value being a 2-dimensional byte array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBytes2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte[]): the byte array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDoubles`
            Sets the value being a double array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double[]): the double array value.
        
        
        """
        ...
    @typing.overload
    def setDoubles2D(self, string: str, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDoubles2D(self, doubleArray: typing.List[float], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDoubles2D`
            Sets the value being a 2-dimensional double array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDoubles2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double[]): the double array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloats`
            Sets the value being a float array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float[]): the float array value.
        
        
        """
        ...
    @typing.overload
    def setFloats2D(self, string: str, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloats2D(self, floatArray: typing.List[float], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloats2D`
            Sets the value being a 2-dimensional float array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloats2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float[]): the float array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInts`
            Sets the value being a int array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int[]): the int array value.
        
        
        """
        ...
    @typing.overload
    def setInts2D(self, string: str, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setInts2D(self, intArray: typing.List[int], intArray2: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInts2D`
            Sets the value being a 2-dimensional int array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInts2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int[]): the int array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLongs`
            Sets the value being a long array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long[]): the long array value.
        
        
        """
        ...
    @typing.overload
    def setLongs2D(self, string: str, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs2D(self, longArray: typing.List[int], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLongs2D`
            Sets the value being a 2-dimensional long array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLongs2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long[]): the long array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShorts`
            Sets the value being a short array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short[]): the short array value.
        
        
        """
        ...
    @typing.overload
    def setShorts2D(self, string: str, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts2D(self, shortArray: typing.List[int], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShorts2D`
            Sets the value being a 2-dimensional short array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShorts2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short[]): the short array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setStrings`
            Sets the value being a String array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): the String array value.
        
        
        """
        ...
    @typing.overload
    def setStrings2D(self, string: str, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setStrings2D(self, stringArray: typing.List[str], intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setStrings2D`
            Sets the value being a 2-dimensional String array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setStrings2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): the String array value.
                dimensions (int[]): the dimensions of the array
        
        
        """
        ...

class BooleanArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class BooleanArrayValue extends :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a boolean array.
    
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, booleanArray: typing.List[bool]): ...
    @typing.overload
    def __init__(self, booleanArray: typing.List[bool], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBooleans`
            Returns the value being interpreted as a boolean array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type boolean array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getBooleans`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                the value being interpreted as a boolean array.
        
        
        """
        ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLength`
            Returns the length of the array if the value is an array. In case the value is not an array the value returned is 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLength` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        """
        ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setEnumItemsImpl`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class BooleanValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class BooleanValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a boolean.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...

class ByteArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class ByteArrayValue extends :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a byte array.
    
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, byteArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, byteArray: typing.List[int], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns the value being interpreted as a byte array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type byte array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                the value being interpreted as a byte array.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLength`
            Returns the length of the array if the value is an array. In case the value is not an array the value returned is 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLength` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        """
        ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getString`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                a string representing the value as a string.
        
        """
        ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setEnumItemsImpl`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setString`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        """
        ...

class ByteValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class ByteValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a byte.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, byte: int): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...

class DiscreteFunctionListValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class DiscreteFunctionListValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a discrete function list.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getArray2D`
            Returns a wrapper around the value being interpreted as a 2d array. If the value is a 1d array it is encapsulated in an
            array of size 1xn. If the value is not an array it is encapsulated in an array of size 1x1. IMPORTANT: if the value is
            mutable and is changed after the wrapper is got the wrapper becomes invalide and can return wrong values or even throw
            OutOfBoundException.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getArray2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getArray2D`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a boolean 2d array.
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBooleans`
            Returns the value being interpreted as a boolean array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type boolean array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getBooleans`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a boolean array.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns the value being interpreted as a byte array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type byte array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a byte array.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDoubles`
            Returns the value being interpreted as a double array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type double array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getDoubles`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a double array.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloats`
            Returns the value being interpreted as a float array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type float array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getFloats`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a float array.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInts`
            Returns the value being interpreted as a int array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type int array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getInts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a int array.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLongs`
            Returns the value being interpreted as a long array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type long array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getLongs`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a long array.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShorts`
            Returns the value being interpreted as a short array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type short array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getShorts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a short array.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getStrings`
            Returns the value being interpreted as a String array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type String array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getStrings`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a String array.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBooleans`
            Sets the value being a boolean array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setBooleans`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (boolean[]): the boolean array value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBytes`
            Sets the value being a byte array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (byte[]): the byte array value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDoubles`
            Sets the value being a double array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setDoubles`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (double[]): the double array value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloats`
            Sets the value being a float array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setFloats`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (float[]): the float array value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInts`
            Sets the value being a int array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setInts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (int[]): the int array value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLongs`
            Sets the value being a long array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setLongs`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (long[]): the long array value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShorts`
            Sets the value being a short array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setShorts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (short[]): the short array value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setStrings`
            Sets the value being a String array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setStrings`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): the String array value.
        
        
        """
        ...

class DiscreteFunctionValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class DiscreteFunctionValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a discrete function.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, discreteFunction: cern.japc.value.DiscreteFunction): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getArray2D`
            Returns a wrapper around the value being interpreted as a 2d array. If the value is a 1d array it is encapsulated in an
            array of size 1xn. If the value is not an array it is encapsulated in an array of size 1x1. IMPORTANT: if the value is
            mutable and is changed after the wrapper is got the wrapper becomes invalide and can return wrong values or even throw
            OutOfBoundException.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getArray2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getArray2D`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a boolean 2d array.
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBooleans`
            Returns the value being interpreted as a boolean array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type boolean array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getBooleans`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a boolean array.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns the value being interpreted as a byte array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type byte array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a byte array.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDoubles`
            Returns the value being interpreted as a double array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type double array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getDoubles`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a double array.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloats`
            Returns the value being interpreted as a float array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type float array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getFloats`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a float array.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInts`
            Returns the value being interpreted as a int array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type int array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getInts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a int array.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLongs`
            Returns the value being interpreted as a long array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type long array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getLongs`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a long array.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShorts`
            Returns the value being interpreted as a short array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type short array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getShorts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a short array.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getStrings`
            Returns the value being interpreted as a String array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type String array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getStrings`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a String array.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBooleans`
            Sets the value being a boolean array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setBooleans`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (boolean[]): the boolean array value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBytes`
            Sets the value being a byte array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (byte[]): the byte array value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDoubles`
            Sets the value being a double array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setDoubles`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (double[]): the double array value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloats`
            Sets the value being a float array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setFloats`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (float[]): the float array value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInts`
            Sets the value being a int array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setInts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (int[]): the int array value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLongs`
            Sets the value being a long array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setLongs`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (long[]): the long array value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShorts`
            Sets the value being a short array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setShorts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (short[]): the short array value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setStrings`
            Sets the value being a String array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setStrings`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): the String array value.
        
        
        """
        ...

class DoubleArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class DoubleArrayValue extends :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a double array.
    
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[float]): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getDiscreteFunction`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getDiscreteFunctionList`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDoubles`
            Returns the value being interpreted as a double array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type double array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getDoubles`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                the value being interpreted as a double array.
        
        
        """
        ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLength`
            Returns the length of the array if the value is an array. In case the value is not an array the value returned is 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLength` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        """
        ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setDiscreteFunction`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setDiscreteFunctionList`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setEnumItemsImpl`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class DoubleValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class DoubleValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a double.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...

class EnumArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class EnumArrayValue extends :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing an array of enumerations.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, enumItemArray: typing.List[cern.japc.value.EnumItem]): ...
    @typing.overload
    def __init__(self, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration. The value returned is the nth one from the array where n is given
            by the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.getEnumItem`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItems(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self, string: str) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self) -> typing.List[cern.japc.value.EnumItem]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItems`
            Returns the value being interpreted as an array of enumeration items. If the value can't be represented as an array of
            enumeration items, ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItems` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.getEnumItems`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Returns:
                the value being interpreted as an array of enumeration items.
        
        
        """
        ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLength`
            Returns the length of the array if the value is an array. In case the value is not an array the value returned is 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLength` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        """
        ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setBoolean`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setByte`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setDouble`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value at the given index to the given enumeration item. The value set is the nth one from the array where n is
            given by the index. If the underlying value is not an array the index is ignored and the value is set. If this value is
            not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.setEnumItem`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (:class:`~cern.japc.value.EnumItem`): the enumeration item to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setFloat`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setInt`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
        """
        ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setLong`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
        """
        ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setShort`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
        """
        ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setString`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...

class EnumSetArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class EnumSetArrayValue extends :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing an array of enumeration sets.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]): ...
    @typing.overload
    def __init__(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration set. The value returned is the nth one from the array where n is
            given by the index. If the underlying value is not an array the index is ignored the the value is returned. If the value
            is an array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.getEnumItemSet`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSets(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self, string: str) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self) -> typing.List[cern.japc.value.EnumItemSet]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSets`
            Returns the value being interpreted as an array of enumeration item sets. If the value can't be represented as an array
            of enumeration item sets, ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSets`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.getEnumItemSets`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Returns:
                the value being interpreted as an array of enumeration item sets.
        
        
        """
        ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLength`
            Returns the length of the array if the value is an array. In case the value is not an array the value returned is 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLength` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        """
        ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setBoolean`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setByte`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setDouble`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value at the given index to the given enumeration items set. The value set is the nth one from the array where
            n is given by the index. If the underlying value is not an array the index is ignored and the value is set. If this
            value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.setEnumItemSet`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (:class:`~cern.japc.value.EnumItemSet`): the enumeration items set to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setFloat`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setInt`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
        """
        ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setLong`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
        """
        ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setShort`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
        """
        ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setString`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...

class EnumSetValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class EnumSetValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing an enumeration set.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, enumItemSet: cern.japc.value.EnumItemSet): ...
    @typing.overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getArray2D`
            Returns a wrapper around the value being interpreted as a 2d array. If the value is a 1d array it is encapsulated in an
            array of size 1xn. If the value is not an array it is encapsulated in an array of size 1x1. IMPORTANT: if the value is
            mutable and is changed after the wrapper is got the wrapper becomes invalide and can return wrong values or even throw
            OutOfBoundException.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getArray2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getArray2D`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a boolean 2d array.
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBooleans`
            Returns the value being interpreted as a boolean array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type boolean array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getBooleans`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a boolean array.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns the value being interpreted as a byte array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type byte array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a byte array.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDoubles`
            Returns the value being interpreted as a double array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type double array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getDoubles`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a double array.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration set. The value returned is the nth one from the array where n is
            given by the index. If the underlying value is not an array the index is ignored the the value is returned. If the value
            is an array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.getEnumItemSet`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloats`
            Returns the value being interpreted as a float array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type float array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getFloats`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a float array.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInts`
            Returns the value being interpreted as a int array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type int array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getInts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a int array.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLongs`
            Returns the value being interpreted as a long array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type long array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getLongs`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a long array.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShorts`
            Returns the value being interpreted as a short array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type short array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getShorts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a short array.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getStrings`
            Returns the value being interpreted as a String array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type String array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getStrings`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a String array.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBooleans`
            Sets the value being a boolean array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setBooleans`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (boolean[]): the boolean array value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBytes`
            Sets the value being a byte array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (byte[]): the byte array value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDoubles`
            Sets the value being a double array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setDoubles`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (double[]): the double array value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloats`
            Sets the value being a float array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setFloats`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (float[]): the float array value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInts`
            Sets the value being a int array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setInts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (int[]): the int array value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLongs`
            Sets the value being a long array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setLongs`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (long[]): the long array value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShorts`
            Sets the value being a short array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setShorts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (short[]): the short array value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setStrings`
            Sets the value being a String array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setStrings`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): the String array value.
        
        
        """
        ...

class EnumValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class EnumValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing an enumeration.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, enumItem: cern.japc.value.EnumItem): ...
    @typing.overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getArray2D`
            Returns a wrapper around the value being interpreted as a 2d array. If the value is a 1d array it is encapsulated in an
            array of size 1xn. If the value is not an array it is encapsulated in an array of size 1x1. IMPORTANT: if the value is
            mutable and is changed after the wrapper is got the wrapper becomes invalide and can return wrong values or even throw
            OutOfBoundException.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getArray2D` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getArray2D`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a boolean 2d array.
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBooleans`
            Returns the value being interpreted as a boolean array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type boolean array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getBooleans`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a boolean array.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns the value being interpreted as a byte array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type byte array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a byte array.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDoubles`
            Returns the value being interpreted as a double array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type double array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getDoubles`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a double array.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration. The value returned is the nth one from the array where n is given
            by the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.getEnumItem`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        """
        ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloats`
            Returns the value being interpreted as a float array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type float array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getFloats`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a float array.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInts`
            Returns the value being interpreted as a int array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type int array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getInts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a int array.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLongs`
            Returns the value being interpreted as a long array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type long array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getLongs`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a long array.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShorts`
            Returns the value being interpreted as a short array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type short array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getShorts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a short array.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getStrings`
            Returns the value being interpreted as a String array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type String array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getStrings`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a String array.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBooleans`
            Sets the value being a boolean array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBooleans` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setBooleans`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (boolean[]): the boolean array value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBytes`
            Sets the value being a byte array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (byte[]): the byte array value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDoubles`
            Sets the value being a double array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDoubles` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setDoubles`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (double[]): the double array value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloats`
            Sets the value being a float array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setFloats`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (float[]): the float array value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInts`
            Sets the value being a int array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setInts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (int[]): the int array value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLongs`
            Sets the value being a long array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setLongs`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (long[]): the long array value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShorts`
            Sets the value being a short array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setShorts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (short[]): the short array value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setStrings`
            Sets the value being a String array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setStrings`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`[]): the String array value.
        
        
        """
        ...

class FloatArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class FloatArrayValue extends :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a float array.
    
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, floatArray: typing.List[float]): ...
    @typing.overload
    def __init__(self, floatArray: typing.List[float], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloats`
            Returns the value being interpreted as a float array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type float array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloats` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getFloats`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                the value being interpreted as a float array.
        
        
        """
        ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLength`
            Returns the length of the array if the value is an array. In case the value is not an array the value returned is 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLength` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        """
        ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setEnumItemsImpl`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class FloatValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class FloatValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a float.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, float: float): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...

class IntArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class IntArrayValue extends :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a int array.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int], intArray2: typing.List[int]): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInts`
            Returns the value being interpreted as a int array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type int array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getInts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                the value being interpreted as a int array.
        
        
        """
        ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLength`
            Returns the length of the array if the value is an array. In case the value is not an array the value returned is 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLength` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        """
        ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setEnumItemsImpl`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class IntValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class IntValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a int.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...

class LongArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class LongArrayValue extends :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a long array.
    
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, longArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, longArray: typing.List[int], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLength`
            Returns the length of the array if the value is an array. In case the value is not an array the value returned is 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLength` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLongs`
            Returns the value being interpreted as a long array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type long array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getLongs`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                the value being interpreted as a long array.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        """
        ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setEnumItemsImpl`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class LongValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class LongValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a LONG.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, long: int): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...

class ShortArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class ShortArrayValue extends :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a short array.
    
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, shortArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, shortArray: typing.List[int], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLength`
            Returns the length of the array if the value is an array. In case the value is not an array the value returned is 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLength` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        """
        ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShorts`
            Returns the value being interpreted as a short array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type short array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShorts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getShorts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                the value being interpreted as a short array.
        
        
        """
        ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setEnumItemsImpl`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class ShortValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class ShortValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a short.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, short: int): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...

class StringArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class StringArrayValue extends :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a string array.
    
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, stringArray: typing.List[str]): ...
    @typing.overload
    def __init__(self, stringArray: typing.List[str], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.clone`
            Returns a deep copy of this ParameterValue. The copy is guarantee to be deep.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.clone` in interface :class:`~cern.japc.value.ParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.core.ParameterValueImpl.clone`Â in
                classÂ :class:`~cern.japc.value.spi.value.core.ParameterValueImpl`
        
            Returns:
                a deep copy of this ParameterValue.
        
            Also see:
                `null <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Object.html?is-external=true#clone()>`
        
        
        """
        ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns a sub array of the value being interpreted as a boolean array. The subarray starts at startIndex and contains
            the number of element given by length. If startIndex+length is greater than the number of values in the underlying array
            an exception is thrown. If the value is not an array, the value is returned encapsulated in an array of size 1, ignoring
            the arguments.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Parameters:
                startIndex (int): the index of the first element of the array to return
                length (int): the number of elements in the array to return (starting from startIndex)
        
            Returns:
                the value being interpreted as a byte array.
        
        
        """
        ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns the value being interpreted as a byte array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type byte array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                the value being interpreted as a byte array.
        
        """
        ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getDouble(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLength`
            Returns the length of the array if the value is an array. In case the value is not an array the value returned is 1.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLength` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the length of the array or 1 in case of a scalar.
        
        
        """
        ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an Object. The value returned is the nth one from the array where n is given by the index. If the
            underlying value is not an array the index is ignored the the value is returned. If the value is an array the nth value
            will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        """
        ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. The value returned is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an array
            the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getString`
            Returns the value being interpreted as a String. The value returned is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored the the value is returned. If the value is an
            array the nth value will be returned where n is given by index.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index in the array at which to get the value
        
            Returns:
                the nth value of the array
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getStrings`
            Returns the value being interpreted as a String array. The array returned is not linked to the underlying array stored
            in this value. Only in the case this value is of type String array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getStrings` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.getStrings`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
            Returns:
                the value being interpreted as a String array.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value at the given index to the given boolean. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (boolean): the boolean value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value at the given index to the given byte. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (byte): the byte value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value at the given index to the given double. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (double): the double value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None:
        """
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.AbstractArrayValue.setEnumItemsImpl`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractArrayValue`
        
        
        """
        ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value at the given index to the given float. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (float): the float value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value at the given index to the given int. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (int): the int value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value at the given index to the given long. The value set is the nth one from the array where n is given by the
            index. If the underlying value is not an array the index is ignored and the value is set. If this value is not mutable
            an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (long): the long value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value at the given index to the given short. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (short): the short value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value at the given index to the given String. The value set is the nth one from the array where n is given by
            the index. If the underlying value is not an array the index is ignored and the value is set. If this value is not
            mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                index (int): the index where to set the value in the array
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value to set at the given index.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class StringValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    """
    public class StringValue extends :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue` implements `Serializable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/io/Serializable.html?is-external=true>`, `Cloneable <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/Cloneable.html?is-external=true>`
    
        Parameter value representing a string.
    
        Also see:
            :meth:`~serialized`
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    def equals(self, object: typing.Any) -> bool:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.equals`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBoolean`
            Returns the value being interpreted as a boolean. If the value is an array only the first value of the array is
            returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a boolean.
        
        
        """
        ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getByte`
            Returns the value being interpreted as a byte. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a byte.
        
        
        """
        ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getBytes`
            Returns the value being interpreted as a byte array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type byte array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a byte array.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`
            Returns the value being interpreted as a discrete function. If the value can't be represented as a discrete function a
            ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function.
        
        
        """
        ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`
            Returns the value being interpreted as a discrete function list. If the value can't be represented as a discrete
            function list a ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a discrete function list.
        
        
        """
        ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getDouble`
            Returns the value being interpreted as a double. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a double.
        
        
        """
        ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem`
            Returns the value being interpreted as an enumeration item. If the value can't be represented as an enumeration item
            (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item.
        
        
        """
        ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`
            Returns the value being interpreted as an enumeration item set. If the value can't be represented as an enumeration item
            set (value is boolean, array or there is no information about enumeration type, etc) an ValueConversionException is
            thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as an enumeration item set.
        
        
        """
        ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getFloat`
            Returns the value being interpreted as a float. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a float.
        
        
        """
        ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInt`
            Returns the value being interpreted as a int. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a int.
        
        
        """
        ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getInts`
            Returns the value being interpreted as a int array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type int array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getInts` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getInts`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a int array.
        
        
        """
        ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLong`
            Returns the value being interpreted as a long. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a long.
        
        
        """
        ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getLongs`
            Returns the value being interpreted as a long array. The array returned is not linked to the underlying array stored in
            this value. Only in the case this value is of type long array and is mutable, the array returned is actually the
            underlying one. In that last case, changes in the returned array directly affect this value. If the value is not an
            array it is encapsulated in an array of size 1
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getLongs` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.getLongs`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Returns:
                the value being interpreted as a long array.
        
        
        """
        ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getObject`
            Returns the value as an object. This method returns the scalar type in their wrapping Object type, arrays and string
            without change and 2D-arrays as :class:`~cern.japc.value.Array2D`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getObject` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value as an object.
        
        
        """
        ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.getShort`
            Returns the value being interpreted as a short. If the value is an array only the first value of the array is returned.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.getShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Returns:
                the value being interpreted as a short.
        
        
        """
        ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str:
        """
            Description copied from interface: :meth:`~cern.japc.value.ParameterValue.getString`
            Returns the value as a string. This method should be specially useful for client that just want to display the value
            without any interpretation. The string returned should be as useful as possible for the clients.
        
            Specified by:
                :meth:`~cern.japc.value.ParameterValue.getString` in interface :class:`~cern.japc.value.ParameterValue`
        
            Returns:
                a string representing the value as a string.
        
        
        """
        ...
    def hashCode(self) -> int:
        """
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractSimpleValue.hashCode`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractSimpleValue`
        
        
        """
        ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBoolean`
            Sets the value being a boolean. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBoolean` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (boolean): the boolean value.
        
        
        """
        ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setByte`
            Sets the value being a byte. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setByte` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (byte): the byte value.
        
        
        """
        ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setBytes`
            Sets the value being a byte array. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setBytes` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Overrides:
                :meth:`~cern.japc.value.spi.value.simple.AbstractScalarValue.setBytes`Â in
                classÂ :class:`~cern.japc.value.spi.value.simple.AbstractScalarValue`
        
            Parameters:
                value (byte[]): the byte array value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunction`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunction`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunction`): the DiscreteFunction value.
        
        
        """
        ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`
            Sets the value being an :class:`~cern.japc.value.DiscreteFunctionList`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDiscreteFunctionList`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.DiscreteFunctionList`): the DiscreteFunctionList value.
        
        
        """
        ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setDouble`
            Sets the value being a double. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setDouble` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (double): the double value.
        
        
        """
        ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem`
            Sets the value being an :class:`~cern.japc.value.EnumItem`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItem` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItem`): the EnumItem value.
        
        
        """
        ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`
            Sets the value being an :class:`~cern.japc.value.EnumItemSet`.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setEnumItemSet`Â in
                interfaceÂ :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (:class:`~cern.japc.value.EnumItemSet`): the EnumItemSet value.
        
        
        """
        ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setFloat`
            Sets the value being a float. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setFloat` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (float): the float value.
        
        
        """
        ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setInt`
            Sets the value being a int. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setInt` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (int): the int value.
        
        
        """
        ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setLong`
            Sets the value being a long. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setLong` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (long): the long value.
        
        
        """
        ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setShort`
            Sets the value being a short. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setShort` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Parameters:
                value (short): the short value.
        
        
        """
        ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None:
        """
            Description copied from interface: :meth:`~cern.japc.value.SimpleParameterValue.setString`
            Sets the value being a String. If this value is not mutable an exception is thrown.
        
            Specified by:
                :meth:`~cern.japc.value.SimpleParameterValue.setString` in interface :class:`~cern.japc.value.SimpleParameterValue`
        
            Specified by:
                :meth:`~cern.japc.value.spi.value.simple.UpdatableParameterValue.setString`Â in
                interfaceÂ :class:`~cern.japc.value.spi.value.simple.UpdatableParameterValue`
        
            Parameters:
                value (`String <http://bewww.cern.ch/ap/dist/java/jdk/1.8/docs/api/java/lang/String.html?is-external=true>`): the String value.
        
        
        """
        ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.japc.value.spi.value.simple")``.

    AbstractArrayValue: typing.Type[AbstractArrayValue]
    AbstractMapSimpleValue: typing.Type[AbstractMapSimpleValue]
    AbstractScalarValue: typing.Type[AbstractScalarValue]
    AbstractSimpleValue: typing.Type[AbstractSimpleValue]
    Array2DImpl: typing.Type[Array2DImpl]
    BooleanArrayValue: typing.Type[BooleanArrayValue]
    BooleanValue: typing.Type[BooleanValue]
    ByteArrayValue: typing.Type[ByteArrayValue]
    ByteValue: typing.Type[ByteValue]
    DiscreteFunctionListValue: typing.Type[DiscreteFunctionListValue]
    DiscreteFunctionValue: typing.Type[DiscreteFunctionValue]
    DoubleArrayValue: typing.Type[DoubleArrayValue]
    DoubleValue: typing.Type[DoubleValue]
    EnumArrayValue: typing.Type[EnumArrayValue]
    EnumSetArrayValue: typing.Type[EnumSetArrayValue]
    EnumSetValue: typing.Type[EnumSetValue]
    EnumValue: typing.Type[EnumValue]
    FloatArrayValue: typing.Type[FloatArrayValue]
    FloatValue: typing.Type[FloatValue]
    IntArrayValue: typing.Type[IntArrayValue]
    IntValue: typing.Type[IntValue]
    LongArrayValue: typing.Type[LongArrayValue]
    LongValue: typing.Type[LongValue]
    ObsoleteFunctionCodec: typing.Type[ObsoleteFunctionCodec]
    ShortArrayValue: typing.Type[ShortArrayValue]
    ShortValue: typing.Type[ShortValue]
    StringArrayValue: typing.Type[StringArrayValue]
    StringValue: typing.Type[StringValue]
    UpdatableParameterValue: typing.Type[UpdatableParameterValue]
    ValueConverter: typing.Type[ValueConverter]
