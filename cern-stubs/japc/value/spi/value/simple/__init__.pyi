import cern.japc.value
import cern.japc.value.spi.value.core
import java.io
import java.lang
import typing


class AbstractMapSimpleValue(cern.japc.value.spi.value.core.ParameterValueImpl, cern.japc.value.SimpleParameterValue, java.io.Serializable, java.lang.Cloneable):
    def __init__(self): ...
    def get(self, string: str) -> cern.japc.value.SimpleParameterValue: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getColumnCount(self) -> int: ...
    @typing.overload
    def getColumnCount(self, string: str) -> int: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSets(self) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self, string: str) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItems(self) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self, string: str) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInts(self) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getMaxValue(self) -> float: ...
    @typing.overload
    def getMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getMinValue(self) -> float: ...
    @typing.overload
    def getMinValue(self, string: str) -> float: ...
    def getNames(self) -> typing.List[str]: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getRowCount(self) -> int: ...
    @typing.overload
    def getRowCount(self, string: str) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getUnit(self) -> str: ...
    @typing.overload
    def getUnit(self, string: str) -> str: ...
    @typing.overload
    def getValueType(self) -> cern.japc.value.ValueType: ...
    @typing.overload
    def getValueType(self, string: str) -> cern.japc.value.ValueType: ...
    @typing.overload
    def getXMaxValue(self) -> float: ...
    @typing.overload
    def getXMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getXMinValue(self) -> float: ...
    @typing.overload
    def getXMinValue(self, string: str) -> float: ...
    @typing.overload
    def getXUnit(self) -> str: ...
    @typing.overload
    def getXUnit(self, string: str) -> str: ...
    @typing.overload
    def getYMaxValue(self) -> float: ...
    @typing.overload
    def getYMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getYMinValue(self) -> float: ...
    @typing.overload
    def getYMinValue(self, string: str) -> float: ...
    @typing.overload
    def getYUnit(self) -> str: ...
    @typing.overload
    def getYUnit(self, string: str) -> str: ...
    def makeMutable(self) -> 'AbstractMapSimpleValue': ...
    def put(self, string: str, simpleParameterValue: cern.japc.value.SimpleParameterValue) -> None: ...
    def remove(self, string: str) -> cern.japc.value.SimpleParameterValue: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans2D(self, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBooleans2D(self, string: str, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes2D(self, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes2D(self, string: str, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles2D(self, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDoubles2D(self, string: str, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSets(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None: ...
    @typing.overload
    def setEnumItemSets(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None: ...
    @typing.overload
    def setEnumItemSets2D(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItemSets2D(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItems(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setEnumItems(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setEnumItems2D(self, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItems2D(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats2D(self, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloats2D(self, string: str, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts2D(self, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setInts2D(self, string: str, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs2D(self, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs2D(self, string: str, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setObject(self, object: typing.Any) -> None: ...
    @typing.overload
    def setObject(self, string: str, object: typing.Any) -> None: ...
    @typing.overload
    def setObjects2D(self, object: typing.Any, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setObjects2D(self, string: str, object: typing.Any, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts2D(self, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts2D(self, string: str, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings2D(self, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setStrings2D(self, string: str, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...
    def size(self) -> int: ...

class Array2DImpl(cern.japc.value.Array2D, java.io.Serializable):
    def __init__(self, simpleParameterValue: cern.japc.value.SimpleParameterValue, intArray: typing.List[int]): ...
    def getArray1D(self) -> typing.Any: ...
    def getBoolean(self, int: int, int2: int) -> bool: ...
    def getBooleanArray2D(self) -> typing.List[typing.List[bool]]: ...
    def getBooleanRow(self, int: int) -> typing.List[bool]: ...
    def getBooleans(self) -> typing.List[bool]: ...
    def getByte(self, int: int, int2: int) -> int: ...
    def getByteArray2D(self) -> typing.List[typing.List[int]]: ...
    def getByteRow(self, int: int) -> typing.List[int]: ...
    def getBytes(self) -> typing.List[int]: ...
    def getColumnCount(self) -> int: ...
    def getDouble(self, int: int, int2: int) -> float: ...
    def getDoubleArray2D(self) -> typing.List[typing.List[float]]: ...
    def getDoubleRow(self, int: int) -> typing.List[float]: ...
    def getDoubles(self) -> typing.List[float]: ...
    def getEnumItem(self, int: int, int2: int) -> cern.japc.value.EnumItem: ...
    def getEnumItemArray2D(self) -> typing.List[typing.List[cern.japc.value.EnumItem]]: ...
    def getEnumItemRow(self, int: int) -> typing.List[cern.japc.value.EnumItem]: ...
    def getEnumItemSet(self, int: int, int2: int) -> cern.japc.value.EnumItemSet: ...
    def getEnumItemSetArray2D(self) -> typing.List[typing.List[cern.japc.value.EnumItemSet]]: ...
    def getEnumItemSetRow(self, int: int) -> typing.List[cern.japc.value.EnumItemSet]: ...
    def getEnumItemSets(self) -> typing.List[cern.japc.value.EnumItemSet]: ...
    def getEnumItems(self) -> typing.List[cern.japc.value.EnumItem]: ...
    def getFloat(self, int: int, int2: int) -> float: ...
    def getFloatArray2D(self) -> typing.List[typing.List[float]]: ...
    def getFloatRow(self, int: int) -> typing.List[float]: ...
    def getFloats(self) -> typing.List[float]: ...
    def getInt(self, int: int, int2: int) -> int: ...
    def getIntArray2D(self) -> typing.List[typing.List[int]]: ...
    def getIntRow(self, int: int) -> typing.List[int]: ...
    def getInternalComponentType(self) -> cern.japc.value.ValueType: ...
    def getInts(self) -> typing.List[int]: ...
    def getLong(self, int: int, int2: int) -> int: ...
    def getLongArray2D(self) -> typing.List[typing.List[int]]: ...
    def getLongRow(self, int: int) -> typing.List[int]: ...
    def getLongs(self) -> typing.List[int]: ...
    def getRowCount(self) -> int: ...
    def getShort(self, int: int, int2: int) -> int: ...
    def getShortArray2D(self) -> typing.List[typing.List[int]]: ...
    def getShortRow(self, int: int) -> typing.List[int]: ...
    def getShorts(self) -> typing.List[int]: ...
    def getString(self, int: int, int2: int) -> str: ...
    def getStringArray2D(self) -> typing.List[typing.List[str]]: ...
    def getStringRow(self, int: int) -> typing.List[str]: ...
    def getStrings(self) -> typing.List[str]: ...
    def toString(self) -> str: ...

class ObsoleteFunctionCodec:
    def __init__(self): ...
    @staticmethod
    def convertToDiscreteFunction(doubleArray: typing.List[float]) -> cern.japc.value.DiscreteFunction: ...
    @staticmethod
    def convertToDiscreteFunctionList(doubleArray: typing.List[float]) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(discreteFunction: cern.japc.value.DiscreteFunction) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> typing.List[float]: ...

class UpdatableParameterValue:
    def setMaxValue(self, double: float) -> None: ...
    def setMinValue(self, double: float) -> None: ...
    def setString(self, string: str) -> None: ...
    def setUnit(self, string: str) -> None: ...
    def setXMaxValue(self, double: float) -> None: ...
    def setXMinValue(self, double: float) -> None: ...
    def setXUnit(self, string: str) -> None: ...
    def setYMaxValue(self, double: float) -> None: ...
    def setYMinValue(self, double: float) -> None: ...
    def setYUnit(self, string: str) -> None: ...

class ValueConverter:
    @staticmethod
    def conversionNotPossibleException(valueType: cern.japc.value.ValueType, valueType2: cern.japc.value.ValueType) -> cern.japc.value.ValueConversionException: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(boolean: bool) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(byte: int) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(discreteFunction: cern.japc.value.DiscreteFunction) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(enumItem: cern.japc.value.EnumItem) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(enumItemSet: cern.japc.value.EnumItemSet) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(double: float) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(float: float) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(int: int) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(long: int) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBoolean(short: int) -> bool: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(booleanArray: typing.List[bool]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(byteArray: typing.List[int]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(doubleArray: typing.List[float]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(floatArray: typing.List[float]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(intArray: typing.List[int]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(stringArray: typing.List[str]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(longArray: typing.List[int]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToBooleanArray(shortArray: typing.List[int]) -> typing.List[bool]: ...
    @typing.overload
    @staticmethod
    def convertToByte(boolean: bool) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(byte: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(enumItem: cern.japc.value.EnumItem) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(double: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(float: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(int: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(string: str) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(long: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByte(short: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(booleanArray: typing.List[bool]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(byteArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(doubleArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(floatArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(intArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(stringArray: typing.List[str]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(longArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToByteArray(shortArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(boolean: bool) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(byte: int) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(enumItem: cern.japc.value.EnumItem) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(double: float) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(doubleArray: typing.List[float]) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(float: float) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(int: int) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(long: int) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunction(short: int) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(boolean: bool) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(byte: int) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(discreteFunction: cern.japc.value.DiscreteFunction) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(enumItem: cern.japc.value.EnumItem) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(double: float) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(doubleArray: typing.List[float]) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(float: float) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(int: int) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(long: int) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDiscreteFunctionList(short: int) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    @staticmethod
    def convertToDouble(boolean: bool) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(discreteFunction: cern.japc.value.DiscreteFunction) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(enumItem: cern.japc.value.EnumItem) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(enumItemSet: cern.japc.value.EnumItemSet) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(double: float) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(string: str) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDouble(long: int) -> float: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(booleanArray: typing.List[bool]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(byteArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(discreteFunction: cern.japc.value.DiscreteFunction) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(floatArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(intArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(stringArray: typing.List[str]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(longArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToDoubleArray(shortArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(boolean: bool) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(byte: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(discreteFunction: cern.japc.value.DiscreteFunction) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(enumItem: cern.japc.value.EnumItem) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(double: float) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(float: float) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(int: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(string: str, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(long: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItem(short: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItem: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(boolean: bool) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(booleanArray: typing.List[bool]) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(byte: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(byteArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(discreteFunction: cern.japc.value.DiscreteFunction) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(enumItem: cern.japc.value.EnumItem) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(enumItemSet: cern.japc.value.EnumItemSet) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(double: float) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(doubleArray: typing.List[float]) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(float: float) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(floatArray: typing.List[float]) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(int: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(intArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(string: str) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(stringArray: typing.List[str], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(long: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(longArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(short: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemArray(shortArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(boolean: bool) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(byte: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(discreteFunction: cern.japc.value.DiscreteFunction) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(enumItem: cern.japc.value.EnumItem) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(enumItemSet: cern.japc.value.EnumItemSet) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(double: float) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(float: float) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(int: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(long: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSet(short: int, enumType: cern.japc.value.EnumType) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(boolean: bool) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(booleanArray: typing.List[bool]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(byte: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(byteArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(discreteFunction: cern.japc.value.DiscreteFunction) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(enumItem: cern.japc.value.EnumItem) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(enumItemSet: cern.japc.value.EnumItemSet) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(double: float) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(doubleArray: typing.List[float]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(float: float) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(floatArray: typing.List[float]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(int: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(intArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(string: str) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(stringArray: typing.List[str]) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(long: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(longArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(short: int, enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToEnumItemSetArray(shortArray: typing.List[int], enumType: cern.japc.value.EnumType) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    @staticmethod
    def convertToFloat(boolean: bool) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(discreteFunction: cern.japc.value.DiscreteFunction) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(enumItem: cern.japc.value.EnumItem) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(enumItemSet: cern.japc.value.EnumItemSet) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(double: float) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(float: float) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(int: int) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(string: str) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloat(long: int) -> float: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(booleanArray: typing.List[bool]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(byteArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(doubleArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(floatArray: typing.List[float]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(intArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(stringArray: typing.List[str]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(longArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToFloatArray(shortArray: typing.List[int]) -> typing.List[float]: ...
    @typing.overload
    @staticmethod
    def convertToInt(boolean: bool) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(enumItem: cern.japc.value.EnumItem) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(double: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(float: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(string: str) -> int: ...
    @typing.overload
    @staticmethod
    def convertToInt(long: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(booleanArray: typing.List[bool]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(byteArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(doubleArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(floatArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(intArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(stringArray: typing.List[str]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(longArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToIntArray(shortArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLong(boolean: bool) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(enumItem: cern.japc.value.EnumItem) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(double: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(float: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(string: str) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLong(long: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(booleanArray: typing.List[bool]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(byteArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(doubleArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(floatArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(intArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(stringArray: typing.List[str]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(longArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToLongArray(shortArray: typing.List[int]) -> typing.List[int]: ...
    @staticmethod
    def convertToPrimitiveArray(objectArray: typing.List[typing.Any]) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def convertToShort(boolean: bool) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(discreteFunction: cern.japc.value.DiscreteFunction) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(enumItem: cern.japc.value.EnumItem) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(enumItemSet: cern.japc.value.EnumItemSet) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(double: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(float: float) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(int: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(string: str) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShort(long: int) -> int: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(booleanArray: typing.List[bool]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(byteArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(doubleArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(floatArray: typing.List[float]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(intArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(stringArray: typing.List[str]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(longArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToShortArray(shortArray: typing.List[int]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def convertToString(boolean: bool) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(byte: int) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(byteArray: typing.List[int]) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(discreteFunction: cern.japc.value.DiscreteFunction) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(enumItem: cern.japc.value.EnumItem) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(enumItemSet: cern.japc.value.EnumItemSet) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(double: float) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(float: float) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(int: int) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(string: str) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(long: int) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(long: int, string: str) -> str: ...
    @typing.overload
    @staticmethod
    def convertToString(short: int) -> str: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(booleanArray: typing.List[bool]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(byteArray: typing.List[int]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(enumItemArray: typing.List[cern.japc.value.EnumItem]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(doubleArray: typing.List[float]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(floatArray: typing.List[float]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(intArray: typing.List[int]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(stringArray: typing.List[str]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(longArray: typing.List[int]) -> typing.List[str]: ...
    @typing.overload
    @staticmethod
    def convertToStringArray(shortArray: typing.List[int]) -> typing.List[str]: ...

class AbstractSimpleValue(AbstractMapSimpleValue, cern.japc.value.SimpleParameterValue, UpdatableParameterValue, java.io.Serializable, java.lang.Cloneable):
    def __init__(self, valueType: cern.japc.value.ValueType): ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSets(self, string: str) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItems(self, string: str) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItem]: ...
    def getFormatPattern(self) -> str: ...
    @typing.overload
    def getMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getMaxValue(self) -> float: ...
    @typing.overload
    def getMinValue(self, string: str) -> float: ...
    @typing.overload
    def getMinValue(self) -> float: ...
    @typing.overload
    def getUnit(self, string: str) -> str: ...
    @typing.overload
    def getUnit(self) -> str: ...
    def getValueStatus(self) -> cern.japc.value.SimpleValueStatus: ...
    @typing.overload
    def getValueType(self, string: str) -> cern.japc.value.ValueType: ...
    @typing.overload
    def getValueType(self) -> cern.japc.value.ValueType: ...
    @typing.overload
    def getXMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getXMaxValue(self) -> float: ...
    @typing.overload
    def getXMinValue(self, string: str) -> float: ...
    @typing.overload
    def getXMinValue(self) -> float: ...
    @typing.overload
    def getXUnit(self, string: str) -> str: ...
    @typing.overload
    def getXUnit(self) -> str: ...
    @typing.overload
    def getYMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getYMaxValue(self) -> float: ...
    @typing.overload
    def getYMinValue(self, string: str) -> float: ...
    @typing.overload
    def getYMinValue(self) -> float: ...
    @typing.overload
    def getYUnit(self, string: str) -> str: ...
    @typing.overload
    def getYUnit(self) -> str: ...
    def hashCode(self) -> int: ...
    def initializeWithDescriptor(self, simpleDescriptor: cern.japc.value.SimpleDescriptor) -> None: ...
    @typing.overload
    @staticmethod
    def newSimpleValue(valueType: cern.japc.value.ValueType) -> 'AbstractSimpleValue': ...
    @typing.overload
    @staticmethod
    def newSimpleValue(valueType: cern.japc.value.ValueType, enumType: cern.japc.value.EnumType) -> 'AbstractSimpleValue': ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSets(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None: ...
    @typing.overload
    def setEnumItemSets(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None: ...
    @typing.overload
    def setEnumItemSets2D(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItemSets2D(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItems(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setEnumItems(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setEnumItems2D(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItems2D(self, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None: ...
    def setFormatPattern(self, string: str) -> None: ...
    def setMaxValue(self, double: float) -> None: ...
    def setMinValue(self, double: float) -> None: ...
    @typing.overload
    def setObject(self, string: str, object: typing.Any) -> None: ...
    @typing.overload
    def setObject(self, object: typing.Any) -> None: ...
    @typing.overload
    def setObjects2D(self, string: str, object: typing.Any, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setObjects2D(self, object: typing.Any, intArray: typing.List[int]) -> None: ...
    def setUnit(self, string: str) -> None: ...
    def setValueStatus(self, simpleValueStatus: cern.japc.value.SimpleValueStatus) -> None: ...
    def setXMaxValue(self, double: float) -> None: ...
    def setXMinValue(self, double: float) -> None: ...
    def setXUnit(self, string: str) -> None: ...
    def setYMaxValue(self, double: float) -> None: ...
    def setYMinValue(self, double: float) -> None: ...
    def setYUnit(self, string: str) -> None: ...
    def toString(self) -> str: ...

class AbstractArrayValue(AbstractSimpleValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self, valueType: cern.japc.value.ValueType): ...
    @typing.overload
    def __init__(self, valueType: cern.japc.value.ValueType, int: int): ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getColumnCount(self) -> int: ...
    @typing.overload
    def getColumnCount(self, string: str) -> int: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSets(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self, string: str) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItems(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self, string: str) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getRowCount(self) -> int: ...
    @typing.overload
    def getRowCount(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans2D(self, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBooleans2D(self, string: str, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes2D(self, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes2D(self, string: str, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles2D(self, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDoubles2D(self, string: str, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSets(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None: ...
    @typing.overload
    def setEnumItemSets(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]) -> None: ...
    @typing.overload
    def setEnumItemSets2D(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItemSets2D(self, string: str, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItems(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setEnumItems(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setEnumItems2D(self, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItems2D(self, string: str, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats2D(self, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloats2D(self, string: str, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts2D(self, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setInts2D(self, string: str, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs2D(self, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs2D(self, string: str, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts2D(self, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts2D(self, string: str, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings2D(self, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setStrings2D(self, string: str, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...

class AbstractScalarValue(AbstractSimpleValue, java.io.Serializable, java.lang.Cloneable):
    def __init__(self, valueType: cern.japc.value.ValueType): ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getColumnCount(self, string: str) -> int: ...
    @typing.overload
    def getColumnCount(self) -> int: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getRowCount(self, string: str) -> int: ...
    @typing.overload
    def getRowCount(self) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans2D(self, string: str, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBooleans2D(self, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes2D(self, string: str, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes2D(self, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles2D(self, string: str, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDoubles2D(self, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats2D(self, string: str, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloats2D(self, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts2D(self, string: str, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setInts2D(self, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs2D(self, string: str, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs2D(self, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts2D(self, string: str, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts2D(self, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings2D(self, string: str, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setStrings2D(self, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...

class BooleanArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, booleanArray: typing.List[bool]): ...
    @typing.overload
    def __init__(self, booleanArray: typing.List[bool], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class BooleanValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool): ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...

class ByteArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, byteArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, byteArray: typing.List[int], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...

class ByteValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, byte: int): ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...

class DiscreteFunctionListValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None: ...

class DiscreteFunctionValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, discreteFunction: cern.japc.value.DiscreteFunction): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None: ...

class DoubleArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[float]): ...
    @typing.overload
    def __init__(self, doubleArray: typing.List[float], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class DoubleValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float): ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...

class EnumArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, enumItemArray: typing.List[cern.japc.value.EnumItem]): ...
    @typing.overload
    def __init__(self, enumItemArray: typing.List[cern.japc.value.EnumItem], intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItems(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self, string: str) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getEnumItems(self) -> typing.List[cern.japc.value.EnumItem]: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...

class EnumSetArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet]): ...
    @typing.overload
    def __init__(self, enumItemSetArray: typing.List[cern.japc.value.EnumItemSet], intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSets(self, int: int, int2: int) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self, string: str) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self) -> typing.List[cern.japc.value.EnumItemSet]: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...

class EnumSetValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, enumItemSet: cern.japc.value.EnumItemSet): ...
    @typing.overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None: ...

class EnumValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, enumItem: cern.japc.value.EnumItem): ...
    @typing.overload
    def __init__(self, enumType: cern.japc.value.EnumType): ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getArray2D(self, string: str) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getArray2D(self) -> cern.japc.value.Array2D: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None: ...

class FloatArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, floatArray: typing.List[float]): ...
    @typing.overload
    def __init__(self, floatArray: typing.List[float], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class FloatValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, float: float): ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...

class IntArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, intArray: typing.List[int], intArray2: typing.List[int]): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class IntValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...

class LongArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, longArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, longArray: typing.List[int], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class LongValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, long: int): ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...

class ShortArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, shortArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, shortArray: typing.List[int], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class ShortValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, short: int): ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...

class StringArrayValue(AbstractArrayValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, stringArray: typing.List[str]): ...
    @typing.overload
    def __init__(self, stringArray: typing.List[str], intArray: typing.List[int]): ...
    def clone(self) -> typing.Any: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    def setEnumItemsImpl(self, enumItemArray: typing.List[cern.japc.value.EnumItem]) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...

class StringValue(AbstractScalarValue, java.io.Serializable, java.lang.Cloneable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> cern.japc.value.DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> cern.japc.value.DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getEnumItem(self, string: str) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> cern.japc.value.EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> cern.japc.value.EnumItemSet: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: cern.japc.value.DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: cern.japc.value.DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: cern.japc.value.EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: cern.japc.value.EnumItemSet) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
