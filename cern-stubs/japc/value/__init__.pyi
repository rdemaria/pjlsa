import cern.accsoft.commons.util
import cern.japc.value.factory
import cern.japc.value.spi
import java.io
import java.lang
import java.util
import typing



class Array2D:
    """
    Java class 'cern.japc.value.Array2D'
    
    """
    def getArray1D(self) -> typing.Any: ...
    def getBoolean(self, int: int, int2: int) -> bool: ...
    def getBooleanArray2D(self) -> typing.List[typing.List[bool]]: ...
    def getBooleanRow(self, int: int) -> typing.List[bool]: ...
    def getBooleans(self) -> typing.List[bool]: ...
    def getByte(self, int: int, int2: int) -> int: ...
    def getByteArray2D(self) -> typing.List[typing.List[int]]: ...
    def getByteRow(self, int: int) -> typing.List[int]: ...
    def getBytes(self) -> typing.List[int]: ...
    def getColumnCount(self) -> int: ...
    def getDouble(self, int: int, int2: int) -> float: ...
    def getDoubleArray2D(self) -> typing.List[typing.List[float]]: ...
    def getDoubleRow(self, int: int) -> typing.List[float]: ...
    def getDoubles(self) -> typing.List[float]: ...
    def getEnumItem(self, int: int, int2: int) -> 'EnumItem': ...
    def getEnumItemArray2D(self) -> typing.List[typing.List['EnumItem']]: ...
    def getEnumItemRow(self, int: int) -> typing.List['EnumItem']: ...
    def getEnumItemSet(self, int: int, int2: int) -> 'EnumItemSet': ...
    def getEnumItemSetArray2D(self) -> typing.List[typing.List['EnumItemSet']]: ...
    def getEnumItemSetRow(self, int: int) -> typing.List['EnumItemSet']: ...
    def getEnumItemSets(self) -> typing.List['EnumItemSet']: ...
    def getEnumItems(self) -> typing.List['EnumItem']: ...
    def getFloat(self, int: int, int2: int) -> float: ...
    def getFloatArray2D(self) -> typing.List[typing.List[float]]: ...
    def getFloatRow(self, int: int) -> typing.List[float]: ...
    def getFloats(self) -> typing.List[float]: ...
    def getInt(self, int: int, int2: int) -> int: ...
    def getIntArray2D(self) -> typing.List[typing.List[int]]: ...
    def getIntRow(self, int: int) -> typing.List[int]: ...
    def getInternalComponentType(self) -> 'ValueType': ...
    def getInts(self) -> typing.List[int]: ...
    def getLong(self, int: int, int2: int) -> int: ...
    def getLongArray2D(self) -> typing.List[typing.List[int]]: ...
    def getLongRow(self, int: int) -> typing.List[int]: ...
    def getLongs(self) -> typing.List[int]: ...
    def getRowCount(self) -> int: ...
    def getShort(self, int: int, int2: int) -> int: ...
    def getShortArray2D(self) -> typing.List[typing.List[int]]: ...
    def getShortRow(self, int: int) -> typing.List[int]: ...
    def getShorts(self) -> typing.List[int]: ...
    def getString(self, int: int, int2: int) -> str: ...
    def getStringArray2D(self) -> typing.List[typing.List[str]]: ...
    def getStringRow(self, int: int) -> typing.List[str]: ...
    def getStrings(self) -> typing.List[str]: ...

class Array2DBuilder:
    """
    Java class 'cern.japc.value.Array2DBuilder'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Array2DBuilder(cern.japc.value.ValueType, int[])
        * Array2DBuilder(cern.japc.value.Array2D)
    
    """
    @typing.overload
    def __init__(self, array2D: Array2D): ...
    @typing.overload
    def __init__(self, valueType: 'ValueType', intArray: typing.List[int]): ...
    def build(self) -> Array2D: ...
    def setBoolean(self, boolean: bool, int: int, int2: int) -> 'Array2DBuilder': ...
    def setByte(self, byte: int, int: int, int2: int) -> 'Array2DBuilder': ...
    def setDouble(self, double: float, int: int, int2: int) -> 'Array2DBuilder': ...
    def setEnumItem(self, enumItem: 'EnumItem', int: int, int2: int) -> 'Array2DBuilder': ...
    def setEnumItemSet(self, enumItemSet: 'EnumItemSet', int: int, int2: int) -> 'Array2DBuilder': ...
    def setFloat(self, float: float, int: int, int2: int) -> 'Array2DBuilder': ...
    def setInt(self, int: int, int2: int, int3: int) -> 'Array2DBuilder': ...
    def setLong(self, long: int, int: int, int2: int) -> 'Array2DBuilder': ...
    def setShort(self, short: int, int: int, int2: int) -> 'Array2DBuilder': ...
    def setString(self, string: str, int: int, int2: int) -> 'Array2DBuilder': ...

class BooleanItem:
    """
    Java class 'cern.japc.value.BooleanItem'
    
    """
    def getStandardMeaning(self) -> 'SimpleValueStandardMeaning': ...
    def getValue(self) -> bool: ...

class BooleanType(cern.accsoft.commons.util.Named):
    """
    Java class 'cern.japc.value.BooleanType'
    
        Interfaces:
            cern.accsoft.commons.util.Named
    
    """
    def getName(self) -> str: ...
    def valueOf(self, boolean: bool) -> BooleanItem: ...
    def values(self) -> java.util.Set[BooleanItem]: ...

class DiscreteFunction(java.lang.Cloneable):
    """
    Java class 'cern.japc.value.DiscreteFunction'
    
        Interfaces:
            java.lang.Cloneable
    
    """
    def clone(self) -> 'DiscreteFunction': ...
    def getX(self, int: int) -> float: ...
    def getY(self, int: int) -> float: ...
    def size(self) -> int: ...
    def toXArray(self) -> typing.List[float]: ...
    def toYArray(self) -> typing.List[float]: ...

class DiscreteFunctionList(java.lang.Cloneable):
    """
    Java class 'cern.japc.value.DiscreteFunctionList'
    
        Interfaces:
            java.lang.Cloneable
    
    """
    def clone(self) -> 'DiscreteFunctionList': ...
    def getFunction(self, int: int) -> DiscreteFunction: ...
    def iterator(self) -> java.util.Iterator[DiscreteFunction]: ...
    def size(self) -> int: ...

class EnumItem(java.lang.Comparable['EnumItem']):
    """
    Java class 'cern.japc.value.EnumItem'
    
        Interfaces:
            java.lang.Comparable
    
    """
    def getCode(self) -> int: ...
    def getEnumType(self) -> 'EnumType': ...
    def getStandardMeaning(self) -> 'SimpleValueStandardMeaning': ...
    def getString(self) -> str: ...
    def getSymbol(self) -> str: ...
    def isSettable(self) -> bool: ...

class EnumItemSet(java.util.Set[EnumItem], java.lang.Cloneable):
    """
    Java class 'cern.japc.value.EnumItemSet'
    
        Interfaces:
            java.util.Set, java.lang.Cloneable
    
    """
    @typing.overload
    def addAll(self, enumItemArray: typing.List[EnumItem]) -> bool: ...
    @typing.overload
    def addAll(self, collection: typing.Union[java.util.Collection[typing.Any], typing.Sequence[typing.Any]]) -> bool: ...
    def asLong(self) -> int: ...
    def clone(self) -> 'EnumItemSet': ...
    @typing.overload
    def containsAll(self, enumItemArray: typing.List[EnumItem]) -> bool: ...
    @typing.overload
    def containsAll(self, collection: typing.Union[java.util.Collection[typing.Any], typing.Sequence[typing.Any]]) -> bool: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getEnumType(self) -> 'EnumType': ...
    def hashCode(self) -> int: ...
    @typing.overload
    def removeAll(self, enumItemArray: typing.List[EnumItem]) -> bool: ...
    @typing.overload
    def removeAll(self, collection: typing.Union[java.util.Collection[typing.Any], typing.Sequence[typing.Any]]) -> bool: ...
    @typing.overload
    def retainAll(self, enumItemArray: typing.List[EnumItem]) -> bool: ...
    @typing.overload
    def retainAll(self, collection: typing.Union[java.util.Collection[typing.Any], typing.Sequence[typing.Any]]) -> bool: ...

class EnumType:
    """
    Java class 'cern.japc.value.EnumType'
    
    """
    def getBitSize(self) -> 'EnumTypeBitSize': ...
    def getName(self) -> str: ...
    def isApplicableToEnumItemSet(self) -> bool: ...
    def symbols(self) -> java.util.Collection[str]: ...
    @typing.overload
    def valueOf(self, string: str) -> EnumItem: ...
    @typing.overload
    def valueOf(self, long: int) -> EnumItem: ...
    def valueStrings(self) -> java.util.Collection[str]: ...
    def values(self) -> java.util.Set[EnumItem]: ...

class EnumTypeBitSize(java.lang.Enum['EnumTypeBitSize']):
    """
    Java class 'cern.japc.value.EnumTypeBitSize'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        BYTE (cern.japc.value.EnumTypeBitSize): final static enum constant
        SHORT (cern.japc.value.EnumTypeBitSize): final static enum constant
        INT (cern.japc.value.EnumTypeBitSize): final static enum constant
        LONG (cern.japc.value.EnumTypeBitSize): final static enum constant
        STRING (cern.japc.value.EnumTypeBitSize): final static enum constant
    
    """
    BYTE: typing.ClassVar['EnumTypeBitSize'] = ...
    SHORT: typing.ClassVar['EnumTypeBitSize'] = ...
    INT: typing.ClassVar['EnumTypeBitSize'] = ...
    LONG: typing.ClassVar['EnumTypeBitSize'] = ...
    STRING: typing.ClassVar['EnumTypeBitSize'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'EnumTypeBitSize': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['EnumTypeBitSize']: ...

class ParameterValue(java.lang.Cloneable):
    """
    Java class 'cern.japc.value.ParameterValue'
    
        Interfaces:
            java.lang.Cloneable
    
    """
    def castAsMap(self) -> 'MapParameterValue': ...
    def castAsSimple(self) -> 'SimpleParameterValue': ...
    def clone(self) -> typing.Any: ...
    def getString(self) -> str: ...
    def getType(self) -> 'Type': ...
    def isMutable(self) -> bool: ...
    def makeImmutable(self) -> None: ...
    def makeMutable(self) -> 'ParameterValue': ...

class SimpleValueControlStatus(java.lang.Enum['SimpleValueControlStatus']):
    """
    Java class 'cern.japc.value.SimpleValueControlStatus'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        OK (cern.japc.value.SimpleValueControlStatus): final static enum constant
        WARNING (cern.japc.value.SimpleValueControlStatus): final static enum constant
        ERROR (cern.japc.value.SimpleValueControlStatus): final static enum constant
        NONE (cern.japc.value.SimpleValueControlStatus): final static enum constant
        INACTIVE (cern.japc.value.SimpleValueControlStatus): final static enum constant
        OFF (cern.japc.value.SimpleValueControlStatus): final static enum constant
    
    """
    OK: typing.ClassVar['SimpleValueControlStatus'] = ...
    WARNING: typing.ClassVar['SimpleValueControlStatus'] = ...
    ERROR: typing.ClassVar['SimpleValueControlStatus'] = ...
    NONE: typing.ClassVar['SimpleValueControlStatus'] = ...
    INACTIVE: typing.ClassVar['SimpleValueControlStatus'] = ...
    OFF: typing.ClassVar['SimpleValueControlStatus'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SimpleValueControlStatus': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['SimpleValueControlStatus']: ...

class SimpleValueStandardMeaning(java.lang.Enum['SimpleValueStandardMeaning']):
    """
    Java class 'cern.japc.value.SimpleValueStandardMeaning'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        ON (cern.japc.value.SimpleValueStandardMeaning): final static enum constant
        OFF (cern.japc.value.SimpleValueStandardMeaning): final static enum constant
        WARNING (cern.japc.value.SimpleValueStandardMeaning): final static enum constant
        ERROR (cern.japc.value.SimpleValueStandardMeaning): final static enum constant
        NONE (cern.japc.value.SimpleValueStandardMeaning): final static enum constant
    
    """
    ON: typing.ClassVar['SimpleValueStandardMeaning'] = ...
    OFF: typing.ClassVar['SimpleValueStandardMeaning'] = ...
    WARNING: typing.ClassVar['SimpleValueStandardMeaning'] = ...
    ERROR: typing.ClassVar['SimpleValueStandardMeaning'] = ...
    NONE: typing.ClassVar['SimpleValueStandardMeaning'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'SimpleValueStandardMeaning': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.List['SimpleValueStandardMeaning']: ...

class SimpleValueStatus(java.io.Serializable, java.lang.Cloneable):
    """
    Java class 'cern.japc.value.SimpleValueStatus'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable, java.lang.Cloneable
    
      Constructors:
        * SimpleValueStatus(long, cern.japc.value.SimpleValueControlStatus)
        * SimpleValueStatus(long)
        * SimpleValueStatus()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, long: int): ...
    @typing.overload
    def __init__(self, long: int, simpleValueControlStatus: SimpleValueControlStatus): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAqnStatus(self) -> int: ...
    def getControlStatus(self) -> SimpleValueControlStatus: ...
    def hashCode(self) -> int: ...
    def isBadQuality(self) -> bool: ...
    def isBusy(self) -> bool: ...
    def isDifferentFromSetting(self) -> bool: ...
    def isNotOk(self) -> bool: ...
    def isOutOfRange(self) -> bool: ...
    def isTimeout(self) -> bool: ...
    def toString(self) -> str: ...

class Type(java.io.Serializable):
    """
    Java class 'cern.japc.value.Type'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Attributes:
        SIMPLE (cern.japc.value.Type): final static field
        MAP (cern.japc.value.Type): final static field
        OBJECT (cern.japc.value.Type): final static field
    
    """
    SIMPLE: typing.ClassVar['Type'] = ...
    MAP: typing.ClassVar['Type'] = ...
    OBJECT: typing.ClassVar['Type'] = ...
    def getName(self) -> str: ...
    def toString(self) -> str: ...
    @typing.overload
    @staticmethod
    def valueOf(int: int) -> 'Type': ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'Type': ...

class ValueConversionException(java.lang.RuntimeException):
    """
    Java class 'cern.japc.value.ValueConversionException'
    
        Extends:
            java.lang.RuntimeException
    
      Constructors:
        * ValueConversionException(java.lang.String, java.lang.Exception)
        * ValueConversionException(java.lang.Exception)
        * ValueConversionException(java.lang.String)
        * ValueConversionException()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, exception: java.lang.Exception): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, exception: java.lang.Exception): ...

class ValueDescriptor:
    """
    Java class 'cern.japc.value.ValueDescriptor'
    
    """
    def castAsMap(self) -> 'MapDescriptor': ...
    def castAsSimple(self) -> 'SimpleDescriptor': ...
    def getType(self) -> Type: ...
    def isConstant(self) -> bool: ...

class ValueStatus(java.io.Serializable):
    """
    Java class 'cern.japc.value.ValueStatus'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Attributes:
        NONE (cern.japc.value.ValueStatus): final static field
        UNDEFINED (cern.japc.value.ValueStatus): final static field
        WARNING (cern.japc.value.ValueStatus): final static field
        ERROR (cern.japc.value.ValueStatus): final static field
        ON (cern.japc.value.ValueStatus): final static field
        STAND_BY (cern.japc.value.ValueStatus): final static field
        OFF (cern.japc.value.ValueStatus): final static field
        DIFFERS_FROM_CONTROL (cern.japc.value.ValueStatus): final static field
        OUT_OF_TOLERANCE (cern.japc.value.ValueStatus): final static field
        ILLEGAL (cern.japc.value.ValueStatus): final static field
        COM_ERROR (cern.japc.value.ValueStatus): final static field
    
    """
    NONE: typing.ClassVar['ValueStatus'] = ...
    UNDEFINED: typing.ClassVar['ValueStatus'] = ...
    WARNING: typing.ClassVar['ValueStatus'] = ...
    ERROR: typing.ClassVar['ValueStatus'] = ...
    ON: typing.ClassVar['ValueStatus'] = ...
    STAND_BY: typing.ClassVar['ValueStatus'] = ...
    OFF: typing.ClassVar['ValueStatus'] = ...
    DIFFERS_FROM_CONTROL: typing.ClassVar['ValueStatus'] = ...
    OUT_OF_TOLERANCE: typing.ClassVar['ValueStatus'] = ...
    ILLEGAL: typing.ClassVar['ValueStatus'] = ...
    COM_ERROR: typing.ClassVar['ValueStatus'] = ...
    @staticmethod
    def convertToValueStatus(int: int) -> 'ValueStatus': ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    @staticmethod
    def mergeValueStatus(valueStatus: 'ValueStatus', valueStatus2: 'ValueStatus') -> 'ValueStatus': ...
    def toString(self) -> str: ...

class ValueType(java.io.Serializable):
    """
    Java class 'cern.japc.value.ValueType'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
      Attributes:
        UNDEFINED (cern.japc.value.ValueType): final static field
        BOOLEAN (cern.japc.value.ValueType): final static field
        BYTE (cern.japc.value.ValueType): final static field
        DOUBLE (cern.japc.value.ValueType): final static field
        FLOAT (cern.japc.value.ValueType): final static field
        INT (cern.japc.value.ValueType): final static field
        LONG (cern.japc.value.ValueType): final static field
        SHORT (cern.japc.value.ValueType): final static field
        STRING (cern.japc.value.ValueType): final static field
        BOOLEAN_ARRAY (cern.japc.value.ValueType): final static field
        BYTE_ARRAY (cern.japc.value.ValueType): final static field
        DOUBLE_ARRAY (cern.japc.value.ValueType): final static field
        FLOAT_ARRAY (cern.japc.value.ValueType): final static field
        INT_ARRAY (cern.japc.value.ValueType): final static field
        LONG_ARRAY (cern.japc.value.ValueType): final static field
        SHORT_ARRAY (cern.japc.value.ValueType): final static field
        STRING_ARRAY (cern.japc.value.ValueType): final static field
        BOOLEAN_ARRAY_2D (cern.japc.value.ValueType): final static field
        BYTE_ARRAY_2D (cern.japc.value.ValueType): final static field
        DOUBLE_ARRAY_2D (cern.japc.value.ValueType): final static field
        FLOAT_ARRAY_2D (cern.japc.value.ValueType): final static field
        INT_ARRAY_2D (cern.japc.value.ValueType): final static field
        LONG_ARRAY_2D (cern.japc.value.ValueType): final static field
        SHORT_ARRAY_2D (cern.japc.value.ValueType): final static field
        STRING_ARRAY_2D (cern.japc.value.ValueType): final static field
        ENUM (cern.japc.value.ValueType): final static field
        ENUM_SET (cern.japc.value.ValueType): final static field
        DISCRETE_FUNCTION (cern.japc.value.ValueType): final static field
        DISCRETE_FUNCTION_LIST (cern.japc.value.ValueType): final static field
        ENUM_ARRAY (cern.japc.value.ValueType): final static field
        ENUM_SET_ARRAY (cern.japc.value.ValueType): final static field
        ENUM_ARRAY_2D (cern.japc.value.ValueType): final static field
        ENUM_SET_ARRAY_2D (cern.japc.value.ValueType): final static field
    
    """
    UNDEFINED: typing.ClassVar['ValueType'] = ...
    BOOLEAN: typing.ClassVar['ValueType'] = ...
    BYTE: typing.ClassVar['ValueType'] = ...
    DOUBLE: typing.ClassVar['ValueType'] = ...
    FLOAT: typing.ClassVar['ValueType'] = ...
    INT: typing.ClassVar['ValueType'] = ...
    LONG: typing.ClassVar['ValueType'] = ...
    SHORT: typing.ClassVar['ValueType'] = ...
    STRING: typing.ClassVar['ValueType'] = ...
    BOOLEAN_ARRAY: typing.ClassVar['ValueType'] = ...
    BYTE_ARRAY: typing.ClassVar['ValueType'] = ...
    DOUBLE_ARRAY: typing.ClassVar['ValueType'] = ...
    FLOAT_ARRAY: typing.ClassVar['ValueType'] = ...
    INT_ARRAY: typing.ClassVar['ValueType'] = ...
    LONG_ARRAY: typing.ClassVar['ValueType'] = ...
    SHORT_ARRAY: typing.ClassVar['ValueType'] = ...
    STRING_ARRAY: typing.ClassVar['ValueType'] = ...
    BOOLEAN_ARRAY_2D: typing.ClassVar['ValueType'] = ...
    BYTE_ARRAY_2D: typing.ClassVar['ValueType'] = ...
    DOUBLE_ARRAY_2D: typing.ClassVar['ValueType'] = ...
    FLOAT_ARRAY_2D: typing.ClassVar['ValueType'] = ...
    INT_ARRAY_2D: typing.ClassVar['ValueType'] = ...
    LONG_ARRAY_2D: typing.ClassVar['ValueType'] = ...
    SHORT_ARRAY_2D: typing.ClassVar['ValueType'] = ...
    STRING_ARRAY_2D: typing.ClassVar['ValueType'] = ...
    ENUM: typing.ClassVar['ValueType'] = ...
    ENUM_SET: typing.ClassVar['ValueType'] = ...
    DISCRETE_FUNCTION: typing.ClassVar['ValueType'] = ...
    DISCRETE_FUNCTION_LIST: typing.ClassVar['ValueType'] = ...
    ENUM_ARRAY: typing.ClassVar['ValueType'] = ...
    ENUM_SET_ARRAY: typing.ClassVar['ValueType'] = ...
    ENUM_ARRAY_2D: typing.ClassVar['ValueType'] = ...
    ENUM_SET_ARRAY_2D: typing.ClassVar['ValueType'] = ...
    def equals(self, object: typing.Any) -> bool: ...
    def getComponentType(self) -> 'ValueType': ...
    @staticmethod
    def getInternalComponentType(valueType: 'ValueType') -> 'ValueType': ...
    def hashCode(self) -> int: ...
    def isArray(self) -> bool: ...
    def isArray2d(self) -> bool: ...
    @staticmethod
    def isArray2dType(valueType: 'ValueType') -> bool: ...
    @staticmethod
    def isArrayType(valueType: 'ValueType') -> bool: ...
    def isBoolean(self) -> bool: ...
    @staticmethod
    def isBooleanType(valueType: 'ValueType') -> bool: ...
    def isEnumeric(self) -> bool: ...
    @staticmethod
    def isEnumericType(valueType: 'ValueType') -> bool: ...
    def isNumeric(self) -> bool: ...
    @staticmethod
    def isNumericType(valueType: 'ValueType') -> bool: ...
    def isScalar(self) -> bool: ...
    @staticmethod
    def isScalarType(valueType: 'ValueType') -> bool: ...
    def toString(self) -> str: ...
    @typing.overload
    @staticmethod
    def valueOf(int: int) -> 'ValueType': ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'ValueType': ...

class ImmutableMapParameterValue(ParameterValue):
    """
    Java class 'cern.japc.value.ImmutableMapParameterValue'
    
        Interfaces:
            cern.japc.value.ParameterValue
    
    """
    def get(self, string: str) -> 'SimpleParameterValue': ...
    def getArray2D(self, string: str) -> Array2D: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    def getColumnCount(self, string: str) -> int: ...
    def getDiscreteFunction(self, string: str) -> DiscreteFunction: ...
    def getDiscreteFunctionList(self, string: str) -> DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    def getEnumItem(self, string: str) -> EnumItem: ...
    def getEnumItemSet(self, string: str) -> EnumItemSet: ...
    def getEnumItemSets(self, string: str) -> typing.List[EnumItemSet]: ...
    def getEnumItems(self, string: str) -> typing.List[EnumItem]: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    def getMaxValue(self, string: str) -> float: ...
    def getMinValue(self, string: str) -> float: ...
    def getNames(self) -> typing.List[str]: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    def getRowCount(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    def getUnit(self, string: str) -> str: ...
    def getValueType(self, string: str) -> ValueType: ...
    def getXMaxValue(self, string: str) -> float: ...
    def getXMinValue(self, string: str) -> float: ...
    def getXUnit(self, string: str) -> str: ...
    def getYMaxValue(self, string: str) -> float: ...
    def getYMinValue(self, string: str) -> float: ...
    def getYUnit(self, string: str) -> str: ...
    def size(self) -> int: ...

class MapDescriptor(ValueDescriptor):
    """
    Java class 'cern.japc.value.MapDescriptor'
    
        Interfaces:
            cern.japc.value.ValueDescriptor
    
    """
    def get(self, string: str) -> 'SimpleDescriptor': ...
    def getNames(self) -> typing.List[str]: ...
    def size(self) -> int: ...

class MapParameterValue(ImmutableMapParameterValue):
    """
    Java class 'cern.japc.value.MapParameterValue'
    
        Interfaces:
            cern.japc.value.ImmutableMapParameterValue
    
    """
    def makeMutable(self) -> 'MapParameterValue': ...
    def put(self, string: str, simpleParameterValue: 'SimpleParameterValue') -> None: ...
    def remove(self, string: str) -> 'SimpleParameterValue': ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    def setBooleans2D(self, string: str, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    def setBytes2D(self, string: str, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    def setDiscreteFunction(self, string: str, discreteFunction: DiscreteFunction) -> None: ...
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    def setDoubles2D(self, string: str, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    def setEnumItem(self, string: str, enumItem: EnumItem) -> None: ...
    def setEnumItemSet(self, string: str, enumItemSet: EnumItemSet) -> None: ...
    def setEnumItemSets(self, string: str, enumItemSetArray: typing.List[EnumItemSet]) -> None: ...
    def setEnumItemSets2D(self, string: str, enumItemSetArray: typing.List[EnumItemSet], intArray: typing.List[int]) -> None: ...
    def setEnumItems(self, string: str, enumItemArray: typing.List[EnumItem]) -> None: ...
    def setEnumItems2D(self, string: str, enumItemArray: typing.List[EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    def setFloats2D(self, string: str, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    def setInts2D(self, string: str, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    def setLongs2D(self, string: str, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    def setObject(self, string: str, object: typing.Any) -> None: ...
    def setObjects2D(self, string: str, object: typing.Any, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    def setShorts2D(self, string: str, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    def setStrings2D(self, string: str, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...

class SimpleDescriptor(MapDescriptor):
    """
    Java class 'cern.japc.value.SimpleDescriptor'
    
        Interfaces:
            cern.japc.value.MapDescriptor
    
      Attributes:
        DEFAULT_DECIMAL_FORMAT (java.lang.String): final static field
        DEFAULT_FORMAT (java.lang.String): final static field
        DATE_FORMAT_PREFIX (java.lang.String): final static field
        HEXADECIMAL_FORMAT_PREFIX (java.lang.String): final static field
        UNDEFINED_DIMENSION (int): final static field
    
    """
    DEFAULT_DECIMAL_FORMAT: typing.ClassVar[str] = ...
    DEFAULT_FORMAT: typing.ClassVar[str] = ...
    DATE_FORMAT_PREFIX: typing.ClassVar[str] = ...
    HEXADECIMAL_FORMAT_PREFIX: typing.ClassVar[str] = ...
    UNDEFINED_DIMENSION: typing.ClassVar[int] = ...
    def getBooleanType(self) -> BooleanType: ...
    def getColumnCount(self) -> int: ...
    def getDescription(self) -> str: ...
    def getEnumType(self) -> EnumType: ...
    def getExtraCharacteristic(self, string: str) -> str: ...
    def getExtraCharacteristicNames(self) -> typing.List[str]: ...
    def getFormatPattern(self) -> str: ...
    def getLength(self) -> int: ...
    def getMaxValue(self) -> float: ...
    def getMinValue(self) -> float: ...
    def getRowCount(self) -> int: ...
    def getStandardMeaning(self, object: typing.Any) -> SimpleValueStandardMeaning: ...
    def getTitle(self) -> str: ...
    def getUnit(self) -> str: ...
    def getValueType(self) -> ValueType: ...
    def getXMaxValue(self) -> float: ...
    def getXMinValue(self) -> float: ...
    def getXUnit(self) -> str: ...
    def getYMaxValue(self) -> float: ...
    def getYMinValue(self) -> float: ...
    def getYUnit(self) -> str: ...
    def isDiscrete(self) -> bool: ...
    def isFilterable(self) -> bool: ...
    def isSettable(self, object: typing.Any) -> bool: ...

class SimpleParameterValue(MapParameterValue):
    """
    Java class 'cern.japc.value.SimpleParameterValue'
    
        Interfaces:
            cern.japc.value.MapParameterValue
    
      Attributes:
        NO_UNIT (java.lang.String): final static field
        NO_MIN_MAX_VALUE (java.lang.Double): final static field
    
    """
    NO_UNIT: typing.ClassVar[str] = ...
    NO_MIN_MAX_VALUE: typing.ClassVar[float] = ...
    @typing.overload
    def getArray2D(self, string: str) -> Array2D: ...
    @typing.overload
    def getArray2D(self) -> Array2D: ...
    @typing.overload
    def getBoolean(self, string: str) -> bool: ...
    @typing.overload
    def getBoolean(self, string: str, int: int) -> bool: ...
    @typing.overload
    def getBoolean(self) -> bool: ...
    @typing.overload
    def getBoolean(self, int: int) -> bool: ...
    @typing.overload
    def getBooleans(self, string: str) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, string: str, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self) -> typing.List[bool]: ...
    @typing.overload
    def getBooleans(self, int: int, int2: int) -> typing.List[bool]: ...
    @typing.overload
    def getByte(self, string: str) -> int: ...
    @typing.overload
    def getByte(self, string: str, int: int) -> int: ...
    @typing.overload
    def getByte(self) -> int: ...
    @typing.overload
    def getByte(self, int: int) -> int: ...
    @typing.overload
    def getBytes(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self) -> typing.List[int]: ...
    @typing.overload
    def getBytes(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getColumnCount(self, string: str) -> int: ...
    @typing.overload
    def getColumnCount(self) -> int: ...
    @typing.overload
    def getDiscreteFunction(self, string: str) -> DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunction(self) -> DiscreteFunction: ...
    @typing.overload
    def getDiscreteFunctionList(self, string: str) -> DiscreteFunctionList: ...
    @typing.overload
    def getDiscreteFunctionList(self) -> DiscreteFunctionList: ...
    @typing.overload
    def getDouble(self, string: str) -> float: ...
    @typing.overload
    def getDouble(self, string: str, int: int) -> float: ...
    @typing.overload
    def getDouble(self) -> float: ...
    @typing.overload
    def getDouble(self, int: int) -> float: ...
    @typing.overload
    def getDoubles(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self) -> typing.List[float]: ...
    @typing.overload
    def getDoubles(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getEnumItem(self, string: str) -> EnumItem: ...
    @typing.overload
    def getEnumItem(self) -> EnumItem: ...
    @typing.overload
    def getEnumItem(self, int: int) -> EnumItem: ...
    @typing.overload
    def getEnumItemSet(self, string: str) -> EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self) -> EnumItemSet: ...
    @typing.overload
    def getEnumItemSet(self, int: int) -> EnumItemSet: ...
    @typing.overload
    def getEnumItemSets(self, string: str) -> typing.List[EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self) -> typing.List[EnumItemSet]: ...
    @typing.overload
    def getEnumItemSets(self, int: int, int2: int) -> typing.List[EnumItemSet]: ...
    @typing.overload
    def getEnumItems(self, string: str) -> typing.List[EnumItem]: ...
    @typing.overload
    def getEnumItems(self) -> typing.List[EnumItem]: ...
    @typing.overload
    def getEnumItems(self, int: int, int2: int) -> typing.List[EnumItem]: ...
    @typing.overload
    def getFloat(self, string: str) -> float: ...
    @typing.overload
    def getFloat(self, string: str, int: int) -> float: ...
    @typing.overload
    def getFloat(self) -> float: ...
    @typing.overload
    def getFloat(self, int: int) -> float: ...
    @typing.overload
    def getFloats(self, string: str) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, string: str, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self) -> typing.List[float]: ...
    @typing.overload
    def getFloats(self, int: int, int2: int) -> typing.List[float]: ...
    @typing.overload
    def getInt(self, string: str) -> int: ...
    @typing.overload
    def getInt(self, string: str, int: int) -> int: ...
    @typing.overload
    def getInt(self) -> int: ...
    @typing.overload
    def getInt(self, int: int) -> int: ...
    @typing.overload
    def getInts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getInts(self) -> typing.List[int]: ...
    @typing.overload
    def getInts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLength(self, string: str) -> int: ...
    @typing.overload
    def getLength(self) -> int: ...
    @typing.overload
    def getLong(self, string: str) -> int: ...
    @typing.overload
    def getLong(self, string: str, int: int) -> int: ...
    @typing.overload
    def getLong(self) -> int: ...
    @typing.overload
    def getLong(self, int: int) -> int: ...
    @typing.overload
    def getLongs(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self) -> typing.List[int]: ...
    @typing.overload
    def getLongs(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getMaxValue(self) -> float: ...
    @typing.overload
    def getMinValue(self, string: str) -> float: ...
    @typing.overload
    def getMinValue(self) -> float: ...
    @typing.overload
    def getObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getObject(self, string: str, int: int) -> typing.Any: ...
    @typing.overload
    def getObject(self) -> typing.Any: ...
    @typing.overload
    def getObject(self, int: int) -> typing.Any: ...
    @typing.overload
    def getRowCount(self, string: str) -> int: ...
    @typing.overload
    def getRowCount(self) -> int: ...
    @typing.overload
    def getShort(self, string: str) -> int: ...
    @typing.overload
    def getShort(self, string: str, int: int) -> int: ...
    @typing.overload
    def getShort(self) -> int: ...
    @typing.overload
    def getShort(self, int: int) -> int: ...
    @typing.overload
    def getShorts(self, string: str) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, string: str, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self) -> typing.List[int]: ...
    @typing.overload
    def getShorts(self, int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    def getString(self, string: str) -> str: ...
    @typing.overload
    def getString(self, string: str, int: int) -> str: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    @typing.overload
    def getStrings(self, string: str) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, string: str, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self) -> typing.List[str]: ...
    @typing.overload
    def getStrings(self, int: int, int2: int) -> typing.List[str]: ...
    @typing.overload
    def getUnit(self, string: str) -> str: ...
    @typing.overload
    def getUnit(self) -> str: ...
    def getValueStatus(self) -> SimpleValueStatus: ...
    @typing.overload
    def getValueType(self, string: str) -> ValueType: ...
    @typing.overload
    def getValueType(self) -> ValueType: ...
    @typing.overload
    def getXMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getXMaxValue(self) -> float: ...
    @typing.overload
    def getXMinValue(self, string: str) -> float: ...
    @typing.overload
    def getXMinValue(self) -> float: ...
    @typing.overload
    def getXUnit(self, string: str) -> str: ...
    @typing.overload
    def getXUnit(self) -> str: ...
    @typing.overload
    def getYMaxValue(self, string: str) -> float: ...
    @typing.overload
    def getYMaxValue(self) -> float: ...
    @typing.overload
    def getYMinValue(self, string: str) -> float: ...
    @typing.overload
    def getYMinValue(self) -> float: ...
    @typing.overload
    def getYUnit(self, string: str) -> str: ...
    @typing.overload
    def getYUnit(self) -> str: ...
    def makeMutable(self) -> 'SimpleParameterValue': ...
    @typing.overload
    def setBoolean(self, string: str, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, string: str, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, boolean: bool) -> None: ...
    @typing.overload
    def setBoolean(self, int: int, boolean: bool) -> None: ...
    @typing.overload
    def setBooleans(self, string: str, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans(self, booleanArray: typing.List[bool]) -> None: ...
    @typing.overload
    def setBooleans2D(self, string: str, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBooleans2D(self, booleanArray: typing.List[bool], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setByte(self, string: str, byte: int) -> None: ...
    @typing.overload
    def setByte(self, string: str, int: int, byte: int) -> None: ...
    @typing.overload
    def setByte(self, byte: int) -> None: ...
    @typing.overload
    def setByte(self, int: int, byte: int) -> None: ...
    @typing.overload
    def setBytes(self, string: str, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes2D(self, string: str, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setBytes2D(self, byteArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, string: str, discreteFunction: DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunction(self, discreteFunction: DiscreteFunction) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, string: str, discreteFunctionList: DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDiscreteFunctionList(self, discreteFunctionList: DiscreteFunctionList) -> None: ...
    @typing.overload
    def setDouble(self, string: str, double: float) -> None: ...
    @typing.overload
    def setDouble(self, string: str, int: int, double: float) -> None: ...
    @typing.overload
    def setDouble(self, double: float) -> None: ...
    @typing.overload
    def setDouble(self, int: int, double: float) -> None: ...
    @typing.overload
    def setDoubles(self, string: str, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles(self, doubleArray: typing.List[float]) -> None: ...
    @typing.overload
    def setDoubles2D(self, string: str, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setDoubles2D(self, doubleArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItem(self, string: str, enumItem: EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, enumItem: EnumItem) -> None: ...
    @typing.overload
    def setEnumItem(self, int: int, enumItem: EnumItem) -> None: ...
    @typing.overload
    def setEnumItemSet(self, string: str, enumItemSet: EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, enumItemSet: EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSet(self, int: int, enumItemSet: EnumItemSet) -> None: ...
    @typing.overload
    def setEnumItemSets(self, string: str, enumItemSetArray: typing.List[EnumItemSet]) -> None: ...
    @typing.overload
    def setEnumItemSets(self, enumItemSetArray: typing.List[EnumItemSet]) -> None: ...
    @typing.overload
    def setEnumItemSets2D(self, string: str, enumItemSetArray: typing.List[EnumItemSet], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItemSets2D(self, enumItemSetArray: typing.List[EnumItemSet], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItems(self, string: str, enumItemArray: typing.List[EnumItem]) -> None: ...
    @typing.overload
    def setEnumItems(self, enumItemArray: typing.List[EnumItem]) -> None: ...
    @typing.overload
    def setEnumItems2D(self, string: str, enumItemArray: typing.List[EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setEnumItems2D(self, enumItemArray: typing.List[EnumItem], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloat(self, string: str, float: float) -> None: ...
    @typing.overload
    def setFloat(self, string: str, int: int, float: float) -> None: ...
    @typing.overload
    def setFloat(self, float: float) -> None: ...
    @typing.overload
    def setFloat(self, int: int, float: float) -> None: ...
    @typing.overload
    def setFloats(self, string: str, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats(self, floatArray: typing.List[float]) -> None: ...
    @typing.overload
    def setFloats2D(self, string: str, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setFloats2D(self, floatArray: typing.List[float], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int) -> None: ...
    @typing.overload
    def setInt(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def setInt(self, int: int) -> None: ...
    @typing.overload
    def setInt(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setInts(self, string: str, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts(self, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setInts2D(self, string: str, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setInts2D(self, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    @typing.overload
    def setLong(self, string: str, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, string: str, long: int) -> None: ...
    @typing.overload
    def setLong(self, int: int, long: int) -> None: ...
    @typing.overload
    def setLong(self, long: int) -> None: ...
    @typing.overload
    def setLongs(self, string: str, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs(self, longArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs2D(self, string: str, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setLongs2D(self, longArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setObject(self, string: str, object: typing.Any) -> None: ...
    @typing.overload
    def setObject(self, object: typing.Any) -> None: ...
    @typing.overload
    def setObjects2D(self, string: str, object: typing.Any, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setObjects2D(self, object: typing.Any, intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShort(self, string: str, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, string: str, short: int) -> None: ...
    @typing.overload
    def setShort(self, int: int, short: int) -> None: ...
    @typing.overload
    def setShort(self, short: int) -> None: ...
    @typing.overload
    def setShorts(self, string: str, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts(self, shortArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts2D(self, string: str, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setShorts2D(self, shortArray: typing.List[int], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setString(self, string: str, int: int, string2: str) -> None: ...
    @typing.overload
    def setString(self, string: str, string2: str) -> None: ...
    @typing.overload
    def setString(self, int: int, string: str) -> None: ...
    @typing.overload
    def setString(self, string: str) -> None: ...
    @typing.overload
    def setStrings(self, string: str, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings(self, stringArray: typing.List[str]) -> None: ...
    @typing.overload
    def setStrings2D(self, string: str, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...
    @typing.overload
    def setStrings2D(self, stringArray: typing.List[str], intArray: typing.List[int]) -> None: ...
    def setValueStatus(self, simpleValueStatus: SimpleValueStatus) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("cern.japc.value")``.

    Array2D: typing.Type[Array2D]
    Array2DBuilder: typing.Type[Array2DBuilder]
    BooleanItem: typing.Type[BooleanItem]
    BooleanType: typing.Type[BooleanType]
    DiscreteFunction: typing.Type[DiscreteFunction]
    DiscreteFunctionList: typing.Type[DiscreteFunctionList]
    EnumItem: typing.Type[EnumItem]
    EnumItemSet: typing.Type[EnumItemSet]
    EnumType: typing.Type[EnumType]
    EnumTypeBitSize: typing.Type[EnumTypeBitSize]
    ImmutableMapParameterValue: typing.Type[ImmutableMapParameterValue]
    MapDescriptor: typing.Type[MapDescriptor]
    MapParameterValue: typing.Type[MapParameterValue]
    ParameterValue: typing.Type[ParameterValue]
    SimpleDescriptor: typing.Type[SimpleDescriptor]
    SimpleParameterValue: typing.Type[SimpleParameterValue]
    SimpleValueControlStatus: typing.Type[SimpleValueControlStatus]
    SimpleValueStandardMeaning: typing.Type[SimpleValueStandardMeaning]
    SimpleValueStatus: typing.Type[SimpleValueStatus]
    Type: typing.Type[Type]
    ValueConversionException: typing.Type[ValueConversionException]
    ValueDescriptor: typing.Type[ValueDescriptor]
    ValueStatus: typing.Type[ValueStatus]
    ValueType: typing.Type[ValueType]
    factory: cern.japc.value.factory.__module_protocol__
    spi: cern.japc.value.spi.__module_protocol__
